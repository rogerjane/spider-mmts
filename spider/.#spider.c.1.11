// Spider - The Microtest Message Transfer System
//

// 23-01-11 RJ 1.00 Taken from version 1.55 of the MMTS source code
// 08-04-11 RJ 1.01 Reads environment variables for RPCs from etc/environment.ini
// 17-06-11 RJ 1.02 Made XML in stdin be rendered properly to the API
// 10-07-11 RJ 1.03 Added POST /mtrpc functionality to be a slicker interface
// 21-07-11 RJ 1.04 Had better attempt at having input render properly
// 26-07-11 RJ 1.05 Correctly renders <input>, handles returning stderr properly and had better message lists
// 09-08-11 RJ 1.06 Better handling of HTML lists of messages and re-compiled with rogxml fix (for ]]> matching)
// 28-09-11 RJ 1.07 Sets unask(2) and uid/gid to match pm1
// 12-01-12 SC 1.08 API stderr logged even in event of unexpected termination
// 16-03-12 RJ 1.09 21845 Set RPC_CLIENTIP from actual IP rather than trust the client to tell us
// 24-04-12 RJ 1.10 Added SPIDER_VERSION, SPIDER_BASEDIR, SPIDER_SERVER variables when calling RPCs
// 12-07-12 RJ 1.11 Recompiled to incorporate the UTF-8 XML amendments in the rogxml library
// 07-08-12 RJ 1.12 Tidied up some references to unused directories

#define VERSION				"1.12"

// TODO:

#include <dirent.h>
#include <errno.h>
#include <limits.h>
#include <netinet/in.h>
#include <netinet/tcp.h>
#include <netdb.h>
#include <poll.h>
#include <pwd.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <string.h>
#include <setjmp.h>
#include <sys/fcntl.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <sys/select.h>
#include <sys/shm.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
#include <utime.h>
#include <zlib.h>

#include "guid.h"
#include "hbuf.h"
#include "mtmacro.h"
#include "rogxml.h"
#include "smap.h"

#include "spider-utils.h"

#ifndef SHUT_RD
	#define SHUT_RD  0			// These should be in sys/socket.h but aren't...???
	#define SHUT_WR  1
	#define SHUT_RDWR 2
#endif

#define PORT_APP	4509		// 'MMTS hello' style port number

#define PORT_HTTPS	4510		// TLS HTTP access
#define PORT_HTTP	4511		// Non-TLS version of the above

#include <openssl/ssl.h>
#include <openssl/err.h>

#include <heapstrings.h>

#include <mime.h>
#include <varset.h>

static int _bPackXML = 0;					// 1 to pack XML sent to application

#define	XML_MIME_TYPE		"text/xml"		// Something may prefer 'text/xml'

#ifndef max
#define max(a,b) ((a)>(b)?(a):(b))
#endif

rogxml *SPIDERRpc(rogxml *rxRpc);

int _nAlarmNumber = 0;						// Alarm number - 0 disables returning long jump when timer triggers
jmp_buf jmpbuf_alarm;						// Used when alarm goes off for timeouts

time_t _tChildStart=0;						// Child start time for summary

const char *szMyName = "spider";

const char *szRpcError = NULL;				// Error returned from RPC call

// Bit messy at the moment but we have two protocols, one for external and one for internal (applications)
// It used to be that the external one would always be TLS encrypted, but this is no longer the case...
#define SRC_IP 1							// Internal - 'Plain' application connection
#define SRC_TLS 2							// External - TLS connection
#define SRC_PLAIN 3							// External - 'Plain' connection
#define SRC_DROPPED 1000					// Must be higher than any count of network ports

typedef struct NetworkPort_t {
	int nPort;								// Port on which we're connecting
	int bEnabled;							// Only use if enabled
	int nProtocol;							// Protocol (TCP, TLS)
	time_t tRetry;							// When to re-try if not initially working
	int nRetries;							// Number of retries left
	int nSock;								// Socket being used
	int nCount;								// Total number of connections
} NetworkPort_t;

NetworkPort_t NetworkPort[] = {
	{PORT_APP, 1, SRC_IP, 0, 0, 0, 0},		// Plain connection for apps (old style)
	{PORT_HTTP, 1, SRC_PLAIN, 0, 0, 0, 0},	// HTTP connection
	{PORT_HTTPS, 1, SRC_TLS, 0, 0, 0, 0}	// HTTPS connection
};
int nNetworkPorts=sizeof(NetworkPort)/sizeof(*NetworkPort);

const char *_szSenderIp = NULL;				// IP of the remote incoming connection
const char *_szReceiverIp = NULL;			// IP of the machine we're sending to
const char *_szIncomingIp = NULL;			// The IP address on which we accepted the connection
const char *_szOutgoingIp = NULL;			// The IP from which we're sending

int _nSenderPort = 0;						// Port from which incoming message came
int _nReceiverPort = 0;						// Port to which we're sending
int _nIncomingPort = 0;						// Port on which we accepted the message
int _nOutgoingPort = 0;						// Port from which we're sending

int _nTotalConnections = 0;					// Total connections accepted
int _nDroppedCount = 0;						// Number of dropped files picked up

char bIsDaemon = 1;							// 1 if Daemon, 0 otherwise

const char *szMyUrl = NULL;					// Response address for Nasp2 (wsa) headers

const char *szEnvironment = NULL;			// The environment in which we're working
const char *szLogDir = NULL;				// Where logs go
const char *szOutDir = NULL;				// Outgoing messages
const char *szContractDir = NULL;			// Where contracts are
const char *szMsgLogDir = NULL;				// Logged messages
const char *szEnvDir = NULL;				// E.g. env/xxx (or /usr/mt/spider/env/xxx)
const char *szDirWsdl = "wsdl";				// Where WSDL definitions are stored
const char *szRpcDir = NULL;
const char *szRpcDataDir = NULL;

const char *szPidFile = NULL;				// Location of pid file

const char *szXmlLinefeed = "\n";			// Default linefeed and indent strings
const char *szXmlIndent = "  ";

char bVerbose = 0;							// Quiet unless told otherwise (used with -s and -S)

#define PASSWORD "mountain"					// The password to access our key

BIO *bio_err = NULL;

static time_t _nStartTime;				// Time server started

#define CLIENT_AUTH_NONE		0
#define CLIENT_AUTH_REQUEST		1
#define CLIENT_AUTH_NEED		2

static char _id[] = "@(#)SPIDER version " VERSION " compiled " __DATE__ " at " __TIME__;

static int s_server_session_id_context = 1;
static int s_server_auth_session_id_context = 2;

static const char *_szPassword;
static const char *argv0 = NULL;			// The location of our executable

void Exit(int nCode);

void DeleteArgv(const char **argv)
// Deletes a vector of strings that looks like 'argv', in which every element is a pointer to a string
// on the heap until we hit a NULL pointer, which indicates the end of the vector.
{
	if (argv) {
		const char **original = argv;		// So we can free the actual vector when we've done

		while (*argv) {
			free((char*)(*argv));
			argv++;
		}

		free(original);
	}
}

int Fatal(const char *szFmt, ...)
// Plain errors
{
	va_list ap;
	char buf[1000];

	va_start(ap, szFmt);
	vsnprintf(buf, sizeof(buf), szFmt, ap);
	va_end(ap);

	fprintf(stderr,"%s: %s\n",szMyName, buf);

	Log("Error: %s", buf);

	Exit(99);
}

#if PID_MAX < 238328
const char *pidstr()
// Converts the process id into a 3 character string
// A bit of maths 10^(LOG(65536)/3) shows we only need base 41 to represent 64K as three chars so 62 is ample
// and in fact will work up to 238,327 (17.8 bits).
{
	static char buf[4] = "";

	if (!*buf) {				// Haven't passed this way before
		unsigned long nPid=(unsigned long)getpid();
		static const char chars[]="0123456789"
								 "abcdefghijklmnopqrstuvwxyz"
								 "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		#define PIDSTRBASE 	(sizeof(chars)-1)

		int c = nPid % PIDSTRBASE;
		int b = (nPid / PIDSTRBASE) % PIDSTRBASE;
		int a = (nPid / PIDSTRBASE / PIDSTRBASE) % PIDSTRBASE;

		buf[0]=chars[a];
		buf[1]=chars[b];
		buf[2]=chars[c];
		buf[3]='\0';
	}

	return buf;
}
#else
#error "Change pidstr() if PID_MAX can be more than about 17 bits"
#endif

const char *InternalId()
// This forms part of the directory name and should be unique on this server.
{
	static const char *szId = NULL;

	if (!szId) {
		time_t now = time(NULL);
		struct tm *tm = gmtime(&now);
		static time_t lasttime=0;
		static int nIndex = 1;

		if (lasttime == now) {				// Index is number of calls this second
			nIndex++;
		} else {
			nIndex=1;
			lasttime=now;
		}

		szDelete(szId);
		szId=hprintf(NULL, "%02d%02d%02d-%02d%02d%02d-%s%02x-%s-%d",
				tm->tm_year % 100, tm->tm_mon+1, tm->tm_mday,
				tm->tm_hour, tm->tm_min, tm->tm_sec,
				pidstr(), nIndex,
				_szIncomingIp, _nIncomingPort);
	}

	return szId;
}

const char *UriDecode(char *str)
// URI decodes the string in situ - always returns 'str'
{
	if (strchr(str, '+') || strchr(str, '%')) {	// Only do anything if we need to
		const char *in=str;
		char *out=str;
		char c;

		while (c=*in) {
			if (c == '+') {
				c=' ';
			} else if (c == '%') {
				int a=in[1];					// a will be 0 if '%' was last char in string
				int b=a?in[2]:0;				// b will be 0 if '%' was second last char in string or last char

				if (b) {
					a=(a>='0' && a<='9') ? a-'0' : toupper(a)-'A'+10;		// Dirty but quick hex to binary
					b=(b>='0' && b<='9') ? b-'0' : toupper(b)-'A'+10;
					c=a*16+b;
					in+=2;
				}
			}
			in++;
			*out++=c;
		}
		*out='\0';
	}

	return str;
}

const char *UriEncode(const char *szText)
// URI encodes the given text, returning a string on the heap.
// Turns out we do this:
// Keep a-z, A-Z, 0-9, ., -, * and _
// Change spaces to '+'
// Change everything else to %xx where 'xx' is the hex of the character
{
	char szSrc[2];
	char szDest[4];
	int c;

	szText = strdup(szText);							// We need to work with a heap-based copy
	szSrc[1]='\0';
	szText = strsubst(szText, "%", "%25");				// Must do this first, you'll need to think about it
	for (c='!';c<='~';c++) {
		if (isalnum(c) || c=='.' || c=='-' || c=='*' || c=='_' || c=='%') continue;	// We leave these alone

		if (!strchr(szText, c)) continue;				// Quickest to check first - skip if the char doesn't appear
		*szSrc=c;										// szSrc is now a string consisting of the single character

		snprintf(szDest, sizeof(szDest), "%02x", c);	// szDest is now "%xx" with the correct replacement
		szText = strsubst(szText, szSrc, szDest);		// Replace all occurrences
	}

	szText = strsubst(szText, " ", "+");				// Now do the slightly weird special case

	return szText;
}

const char *rogxml_ToNiceText(rogxml *rx)
// Returns the string representation of 'rx', ensuring indentation etc. is nice
{
	rogxml_SetIndentString("  ");
	rogxml_SetLinefeedString("\n");

	return rogxml_ToText(rx);
}

static char _bNoteInhibit = 0;
static char *_szDir = NULL;

const char *NoteDirSuffix()
{
	static char buf[30];
	static bBeenHere=0;

	if (!bBeenHere) {
		snprintf(buf, sizeof(buf), "%s-%s", HL7TimeStamp(0), pidstr());
		bBeenHere=1;
	}

	return buf;
}

const char *NoteDir()
{
	static char bInHere = 0;				// Flag to stop re-entrancy problems

	if (!bInHere) {
		bInHere=1;

		if (!_szDir && !_bNoteInhibit) {
			_szDir=hprintf(NULL, "%s/%s", szMsgLogDir, NoteDirSuffix());
			MkDir(_szDir);
			Log("MAIN: Message log directory is %s", _szDir);
		}

		bInHere=0;
	}

	return _szDir;
}

int NoteInhibit(int bOpt)
// Call with non-0 to stop (and delete) notes
{
	_bNoteInhibit = bOpt;
	if (bOpt && _szDir) {				// Need to delete any that have been created already
		const char *szCommand = hprintf(NULL, "rm -rf %s", _szDir);
		system(szCommand);
		szDelete(szCommand);
		_szDir=NULL;
	}
}

void Note(const char *szFmt, ...)
{
	if (!_bNoteInhibit) {
		va_list ap;
		char buf[256];
		FILE *fp;
		const char *szFilename;

		if (bIsDaemon) return;									// Master daemon process doesn't make notes

		szFilename = hprintf(NULL, "%s/info", NoteDir());

		va_start(ap, szFmt);
		vsnprintf(buf, sizeof(buf), szFmt, ap);
		va_end(ap);

		fp=fopen(szFilename, "a");
		if (fp) {
			fprintf(fp, "%s\n", buf);
			fclose(fp);
		}

		szDelete(szFilename);
	}
}

void NoteLog(const char *szText)
{
	if (!_bNoteInhibit) {
		const char *szFilename;
		const char *szDir;
		FILE *fp;

		if (bIsDaemon) return;

		szDir = NoteDir();
		if (!szDir) return;

		szFilename = hprintf(NULL, "%s/log", szDir);
		fp=fopen(szFilename, "a");
		if (fp) {
			time_t now=time(NULL);
			struct tm *tm;
			struct timeval tp;
			int csecs;

			gettimeofday(&tp, NULL);
			tm = gmtime(&tp.tv_sec);
			csecs=tp.tv_usec / 10000;

			fprintf(fp, "%02d-%02d-%02d %02d:%02d:%02d.%02d ",
					tm->tm_mday, tm->tm_mon+1, tm->tm_year % 100,
					tm->tm_hour, tm->tm_min, tm->tm_sec,
					csecs);
			fprintf(fp, "%s\n", szText);
			fclose(fp);
		}

		szDelete(szFilename);
	}
}

void NoteMessage(const char *szMessage, int nLen, const char *szTag, const char *szExt, const char *szDescr)
{
	if (!_bNoteInhibit) {
		const char *szFilename;
		const char *szMsgLogFile;
		FILE *fp;

		if (bIsDaemon) return;

		szFilename=hprintf(NULL, "%s/%s.%s", NoteDir(), szTag, szExt);
		if (nLen == -1) nLen=strlen(szMessage);
		fp=fopen(szFilename, "w");
		if (fp) {
			fwrite(szMessage, nLen, 1, fp);
			fclose(fp);
		}
		szDelete(szFilename);

		Note("M|%s.%s|%s", szTag, szExt, szDescr);
	}
}

void NoteRpcError()
// I could have used NoteMessage() to do this then I was going to add a header to the file but then changed
// my mind as everything should already be in the note directory.
// NoteRpcMessage(szRpcError, -1, "stderr", "txt", "Stdout returned from RPC handler");
{
	if (!_bNoteInhibit && szRpcError) {
		const char *szFilename;
		FILE *fp;

		szFilename=hprintf(NULL, "%s/stderr.txt", NoteDir());
		fp=fopen(szFilename, "w");
		if (fp) {
			fwrite(szRpcError, strlen(szRpcError), 1, fp);
			fclose(fp);

			Note("M|stderr.txt|Error returned from RPC handler");
		}
		szDelete(szFilename);
		char *chp=strchr(szRpcError, '\n');
		if (chp) *chp='\0';
		Note("E|%s", szRpcError);
		if (chp) *chp='\n';
	}
}

void NoteMessageXML(rogxml *rx, const char *szTag, const char *szDescr, char bReturn)
// Logs the message away, also making a 'Return' note if bReturn is non-zero
{
//Log("NoteMessageXML(%x, \"%s\", \"%s\")", rx, szTag, szDescr);
	if (!_bNoteInhibit) {
		int nErr;
		const char *szXML;

		if (!rx) {									// No XML in the message
			szXML=hprintf(NULL, "<XML>There is no XML in the message</XML>");
		} else if (nErr=rogxml_ErrorNo(rx)) {		// XML there but erroneous somehow
			szXML=hprintf(NULL, "<XML-ERROR err=\"%d\">%s</XML-ERROR>", nErr, rogxml_ErrorText(rx));
		} else {
			szXML=rogxml_ToNiceText(rx);
		}
		NoteMessage(szXML, -1, szTag, "xml", szDescr);
		if (bReturn) {
			Note("R|%d bytes", strlen(szXML));
		}
		szDelete(szXML);
	}
}

void NoteMessageMime(MIME *mime, const char *szTag, const char *szDescr)
{
	if (!_bNoteInhibit) {
		const char *szMime=mime_RenderHeap(mime);
		NoteMessage(szMime, -1, szTag, "mime", szDescr);
		szDelete(szMime);
	}
}

int _nError=0;
const char *_szError = NULL;

int SetError(int nErr, const char *szFmt, ...)
{
	_nError = nErr;
	szDelete(_szError);

	if (szFmt) {
		va_list ap;
		char buf[256];

		va_start(ap, szFmt);
		vsnprintf(buf, sizeof(buf), szFmt, ap);
		va_end(ap);

		_szError = strdup(buf);
	} else {
		_szError = NULL;
	}

	return nErr;
}

int GetErrorNo()			{ return _nError; }
const char *GetErrorStr()	{ return _szError; }

#pragma mark Child handling

typedef struct childinfo_t {
	int			pid;			// Process ID of the child
	time_t		tStarted;		// When it started
	const char *szIp;			// IP that triggered the child
	const char *szId;			// Message ID the child is dealing with
	char		bExt;			// 1 for external connection, 0 for internal
} childinfo_t;

int nPids=0;
childinfo_t *aPid = NULL;

int child_Find(int pid)
// Returns the index of the child in question or -1 if not found
{
	int i;

	for (i=0;i<nPids;i++) {
		if (aPid[i].pid == pid) {
			return i;
		}
	}

	return -1;
}

int child_FindAdd(int pid)
// Finds the index of the child, adding a new one if not found
// I.e. always returns a slot
{
	int i = child_Find(pid);

	if (i >= 0) return i;

	aPid=RENEW(aPid, childinfo_t, nPids+1);
	aPid[nPids].pid=pid;
	aPid[nPids].szIp=NULL;
	aPid[nPids].szId=NULL;

	return nPids++;
}

int child_Add(int pid, char bExt, const char *szIp, const char *szId)
// Adds to the list of child processes so we can report on them and tidy them up when we die
// If a directly incoming message is being handled then bExt, szIp and szId will be set
// Otherwise we're dealing with a retry so szIp will be blank
{
	int i = child_FindAdd(pid);

	aPid[i].tStarted=time(NULL);
	aPid[i].szIp=strdup(szIp);
	aPid[i].szId=strdup(szId);
	aPid[i].bExt=bExt;

	return nPids;
}

int child_Forget(int pid)
// Take the child out of the array but don't bother to deallocate it
// Returns the number of children now active
{
	int i = child_Find(pid);

	if (i >= 0) {
		if (i<nPids-1) {
			childinfo_t *ci=aPid+i;
			szDelete(ci->szIp);
			szDelete(ci->szId);

			memmove(aPid+i, aPid+i+1, (nPids-i-1)*sizeof(childinfo_t));
		}
		nPids--;
	}

	return nPids;
}

int child_SetId(int pid, const char *szId)
// Sets the ID that a child is currently handling
{
	int i = child_Find(pid);

	if (i > -1) {
		szDelete(aPid[i].szId);
		aPid[i].szId = strdup(szId);
		Log("Child %d(%d) is handling %s", i, pid, szId);
	}
}

int PeerPort(bExt) { return _nSenderPort; }

const char *PeerIp(char bExt)
{
	static char buf[20];

	if (PeerPort(bExt)) {
		snprintf(buf, sizeof(buf), "%s", _szSenderIp);
		return buf;
	} else {
		return "-";
	}
}

static int allow_n = 0;
static char **allow_ip = NULL;
static char **allow_descr = NULL;

void allow_Init()
{
	const char *szFilename = hprintf(NULL, "%s/%s", GetEtcDir(), "allow");
	FILE *fp = fopen(szFilename, "r");

	if (fp) {
		const char *szLine;

		while (szLine = ReadLine(fp)) {
			char *szIp, *szDescr;

			while (isspace(*szLine)) szLine++;
			if (!*szLine || *szLine == '#') continue;

			szIp = strtok((char*)szLine, ":");
			szDescr = strtok(NULL, ":");
			if (!szDescr) szDescr="";
			if (allow_n++) {
				RENEW(allow_ip, char*, allow_n);
				RENEW(allow_descr, char*, allow_n);
			} else {
				allow_ip=NEW(char*, 1);
				allow_descr=NEW(char*, 1);
			}
			allow_ip[allow_n-1]=strdup(szIp);
			allow_descr[allow_n-1]=strdup(szDescr);
		}
		fclose(fp);
	}

	szDelete(szFilename);
}

const char *allow_Allowed(const char *szIp)
// Checks if a specific IP address is allowed to access the SPIDER in a 'local' manner...
// Over the application port in any manner
// Over the HTTPS port to examine status
{
	int i;

	if (!allow_n) return szIp;							// Nothing allowed -> everything allowed

	for (i=0;i<allow_n;i++) {
		if (!strcmp(szIp, allow_ip[i]))
			return allow_descr[i];
	}

	return NULL;
}

int MyBIO_flush(BIO *io)
{
	FILE *fp=fopen("/tmp/out.dat","a");
	if (fp) {
		fputs("\n----------------------------------------------------------- FLUSH\n", fp);
		fclose(fp);
	}

	return BIO_flush(io);
}

int MyBIO_write(BIO *io, const char *szData, int nLen)
{
	int nWritten= BIO_write(io, szData, nLen);		// Entire message

	// Everything from here on is logging...

	if (!_bNoteInhibit) {
		static BIO *lastio = NULL;
		const char *szNoteDir = NoteDir();
		FILE *fp=fopen("/tmp/out.dat","a");
		FILE *fpnote=NULL;
		static int nIndex = 1;
		const char *szNoteFile = NULL;
		const char *szBase = NULL;

		if (szNoteDir) {						// We're keeping notes
			if (lastio != io) nIndex++;
			szBase=hprintf(NULL, "rawout-%d", nIndex);
			szNoteFile = hprintf(NULL, "%s/%s.txt", szNoteDir, szBase);
			fpnote=fopen(szNoteFile, "a");
			szDelete(szNoteFile);
		}

		if (lastio != io) {							// We're sending to someone new
			if (fpnote) Note("M|%s.%s|%s", szBase, "txt", "Data sent");
			if (fp) fputs("\n----------------------------------------------------------- NEW PORT\n", fp);
			lastio=io;
		}
		if (fp && nLen != nWritten) {
			fputs("\n", fp);
			fputs("===========================================\n", fp);
			fprintf(fp, "ERROR - Attempted to write %d, actually wrote %d in next section\n", nLen, nWritten);
			fputs("===========================================\n", fp);
		}
		if (fp) {
			fwrite(szData,nLen,1,fp);
			fclose(fp);
		}
		if (szNoteDir) {
			szDelete(szBase);
			if (fpnote) {
				fwrite(szData,nLen,1,fpnote);
				fclose(fpnote);
			}
		}
	}

	return nWritten;
}

int MyBIO_puts(BIO *io, const char *szText)
{
//	return BIO_puts(io, szText);
	return MyBIO_write(io, szText, strlen(szText));
}

void FatalSSL(const char *szFmt, ...)
// SSL errors so we can return more information
{
	va_list ap;
	char buf[1000];

	va_start(ap, szFmt);
	vsnprintf(buf, sizeof(buf), szFmt, ap);
	va_end(ap);

	Log("Exit: SSL Error: %s", buf);

	BIO_printf(bio_err, "%s\n", buf);
	ERR_print_errors(bio_err);

	Exit(98);
}

int GetRecordedDaemonPid()
// Returns 0 if it isn't recorded - will return non-0 if the .pid file exists even if the process is dead
{
	FILE *fp=fopen(szPidFile, "r");
	char buf[30]="0";					// Used both for existing process's pid and our own
	int nPid = 0;

	if (fp) {
		fgets(buf, sizeof(buf), fp);
		fclose(fp);

		nPid=atoi(buf);
	}

	return nPid;
}

int GetDaemonPid()
// Returns	0		There is no daemon running
//			1...	The PID of the daemon
{
	int nPid=GetRecordedDaemonPid();
	if (nPid) {
		int nErr;

		if (ProcessAlive(nPid)) return nPid;
	}

	// There is now no existing instance as there is no .pid file or we didn't see it on the kill

	return 0;
}

int CheckWeAreDaemon()
// Checks that we are the daemon - if not then quits...
{
	int nPid=GetDaemonPid();

	if (nPid == getpid()) return 0;			// That's what we're looking for...

	if (nPid) {								// There's a daemon, but it's not us...
		Log("Exit: Panic: Pid file says my process ID is %d", nPid);
	} else {
		Log("Exit: Panic: Can't read my pid from %s", szPidFile);
	}

	Exit(0);
}

int SendDaemonSignal(int nSignal)
// Sends the signal or (if nSignal == 0), checks that we can send signals
// Returns	0		Ok
//			1		There is no daemon running
//			2		There is a daemon running but we don't have permission to signal it
{
	int nPid = GetDaemonPid();
	if (nPid) {
		int nErr;

		nErr=kill(nPid, nSignal);
		if (nErr == EPERM) return 2;
		return 0;
	} else {
		return 1;
	}
}

int StopAnyPrevious()
// Stops any previous incarnations and puts us in as leader
// If this doesn't succeed then we print an error message and exit.
// Returns the process id of the previous process or 0 if there was none.
{
	int nPid = GetDaemonPid();

	if (nPid) {
		int nSignal;
		int i;

		// Here we send a SIGQUIT and wait 5 secs for the process to go.
		// If it is still there after this time, we send a SIQKILL and wait again
		for (nSignal=SIGQUIT;nSignal<=SIGKILL;nSignal+=(SIGKILL-SIGQUIT)) {		// Try both signals
			if (kill(nPid, SIGQUIT)) {		// Error in kill
				if (errno == ESRCH) break;	// No such process
				if (errno == EPERM) {
					fprintf(stderr, "%s: I don't have permission to kill existing instance (pid=%d)\n", szMyName, nPid);
					Exit(4);
				}
			}
			for (i=0;i<5;i++) {			// Check 5 times for death of the other process
				if (!ProcessAlive(nPid)) break;			// It's gone
				sleep(1);
			}
		}
		// Either the process didn't exist before or we've killed it
		// If it is still alive then it must be caught in the kernel and we're stuffed
		if (nSignal != SIGQUIT && nSignal != SIGKILL) {
			fprintf(stderr, "%s: Existing instance (pid=%d) would not die\n", szMyName, nPid);
			Exit(5);
		}
	}
	// There is now no existing instance

	return nPid;
}

void HandleSignal(int n)
{
	signal(n, HandleSignal);

	switch (n) {
	case SIGHUP:										// 1 Exit Hangup [see termio(7)]
		break;
	case SIGINT:										// 2 Exit Interrupt [see termio(7)]
		break;
	case SIGQUIT:										// 3 Core Quit [see termio(7)]
	case SIGTERM:										// 15 Exit Terminated
		Log("Exit: Signal %s", SignalName(n));
		Exit(0);
		break;
	case SIGILL:										// 4 Core Illegal Instruction
	case SIGTRAP:										// 5 Core Trace/Breakpoint Trap
	case SIGABRT:										// 6 Core Abort
#ifdef __SCO_VERSION__
	case SIGEMT:										// 7 Core Emulation Trap
#endif
	case SIGFPE:										// 8 Core Arithmetic Exception
	case SIGBUS:										// 10 Core Bus Error
	case SIGSEGV:										// 11 Core Segmentation Fault
	case SIGSYS:										// 12 Core Bad System Call
		signal(n, SIG_DFL);								// Let us drop out next time
		Log("Killed - %s", SignalName(n));				// This order in case it was 'Log' that killed us!
		kill(getpid(), n);								// Kill ourselves
		break;
	case SIGKILL:										// 9 Exit Killed - never seen, just kills us
		break;
	case SIGPIPE:										// 13 Exit Broken Pipe
		break;
	case SIGALRM:										// 14 Exit Alarm Clock
		alarm(0);										// Stop anything further
		if (_nAlarmNumber) {
			int nAlarmNumber=_nAlarmNumber;
			_nAlarmNumber=0;
			longjmp(jmpbuf_alarm, nAlarmNumber);
		}
		return;											// False alarm...
		break;
	case SIGUSR1:										// 16 Exit User Signal 1
//		WriteStatus();
		return;
		break;
	case SIGUSR2:										// 17 Exit User Signal 2
		break;
	default:
		break;
	}

	signal(n, SIG_DFL);									// Let us drop out next time
	Log("Unexpected signal %s - quitting", SignalName(n));		// This order in case it was 'Log' that killed us!
	kill(getpid(), n);									// Kill ourselves
	exit(0);											// Shouldn't ever get here
}

static char szReadBuf[1024];
static char *szReadBufp=NULL;			// Pointer to next char in buffer
static char *szReadBufEnd;				// How many characters are actually in it
int nReadStream;						// The stream to read
FILE *fpDebugReadStream = NULL;			// Debug output if wanted

// NB. To capture input from the internal connection, create a file called /tmp/mmts.in.debug
//     This will get the next chunk of characters and then get renamed to /tmp/mmts.in

int RogRename(const char *szSrc, const char *szDest);

void CloseReadStreamDebug()
{
	if (fpDebugReadStream) {
		fclose(fpDebugReadStream);
		fpDebugReadStream=NULL;
	}
}

void InitReadStream(int fd)
{
	szReadBufp=szReadBufEnd=szReadBuf;
	nReadStream = fd;
	CloseReadStreamDebug();
	if (!access("/tmp/mmts.in.debug", 0)) {
		fpDebugReadStream = fopen("/tmp/mmts.in.debug", "w");
		if (fpDebugReadStream) RogRename("/tmp/mmts.in.debug", "/tmp/mmts.in");
	}
}

// TODO:	ReadStream returns one char, I could really do with something that returns a whole buffer full
//			as it would make the compressed file reading much more efficient.
int ReadStream()
// This function is called from the rogxml library to read XML from the input stream
{
	int nGot;

	if (szReadBufp != szReadBufEnd) {
		unsigned char c=*(unsigned char *)(szReadBufp++);

		if (fpDebugReadStream) {
			putc(c, fpDebugReadStream);
		}

		return c;
	}

	nGot = recv(nReadStream, szReadBuf, sizeof(szReadBuf), 0);
	if (nGot > 0) {					// Easy case, got some data...
		szReadBufEnd=szReadBuf+nGot;
		szReadBufp=szReadBuf;
		alarm(10);						// Give us another 10 secs to deal with it
		return ReadStream();			// Was: return *(unsigned char *)(szReadBufp++);
	}

	CloseReadStreamDebug();

	return -1;							// Might just indicate end of file...
}

int SendError(int fd, int nErr, int nSeverity, const char *szFmt, ...);

int SendXML(int fd, rogxml *rx, const char *szDescription)
// Send an XML message to the caller.
// If _bPackXML is set then send it compressed unless it's an error, which are always sent in the clear
// Returns	0		Writing seemed to go ok (does not gaurantee that it's received ok)
//			1...	Error on writing (usually EPIPE (32))
{
	const char *szXML;
	int nErr = rogxml_ErrorNo(rx);
	int nSendErr = 0;
	static int nNumberSent;

	nNumberSent++;

	if (nErr) {								// An error so we need to send a nack
		nSendErr = SendError(fd, nErr, 1, "%s", rogxml_ErrorText(rx));
	} else {
		if (_bPackXML) {					// Send it as small as possible
			rogxml *rxPacked;
			const char *szPacked = NULL;
			int nPackedLen = 0;
			int nLen;
			int nWritten;

			rogxml_SetIndentString("");
			rogxml_SetLinefeedString("");

			Log("Sending SPIDER-Packed");
			rxPacked = rogxml_NewElement(NULL, "SPIDER-Packed");
			szXML = rogxml_ToText(rxPacked);
			nLen = strlen(szXML);
			nWritten = write(fd, szXML, nLen);
			szDelete(szXML);

			if (nWritten == nLen) {			// Only write the main message if we succeeded in writing the lead element
				write(fd, "\n", 1);			// We need a linefeed after the initial element
				szXML = rogxml_ToText(rx);
				pack_InitPack();
				pack_Pack(szXML, strlen(szXML));
				szPacked = pack_GetPacked(&nPackedLen);

				nWritten = write(fd, szPacked, nPackedLen);
Log("Original was %d, compressed is %d, have written %d", strlen(szXML), nPackedLen, nWritten);

				szDelete(szPacked);
				szDelete(szXML);
				if (nWritten != nPackedLen) nSendErr = errno ? errno : -1;
			} else {
				nSendErr = errno ? errno : -1;
			}
		} else {							// Ordinary unpacked message
			int nLen = 0;
			int nWritten;
			szXML = rogxml_ToNiceText(rx);

			nLen = strlen(szXML);

			nWritten = write(fd, szXML, nLen);
			if (nWritten != nLen) {
				nSendErr = errno ? errno : -1;
				Log("Tried to write %d, wrote %d (errno=%d)", nLen, nWritten, errno);
			}

			szDelete(szXML);
		}
	}

	const char *szNoteName = hprintf(NULL, "toapp%d", nNumberSent);
	if (nSendErr) {
		const char *szNote = hprintf(NULL, "%s sent to app (failed)", szDescription);
		NoteMessageXML(rx, szNoteName, szNote, 0);
		Log("Error %d sending to application", nSendErr);
		szDelete(szNote);
	} else {
		const char *szNote = hprintf(NULL, "%s sent to app", szDescription);
		NoteMessageXML(rx, szNoteName, szNote, 0);
		szDelete(szNote);
	}
	szDelete(szNoteName);

	return nSendErr;
}

rogxml *ReceiveXML(int fd, int nTimeout)
// Waits up to nTimeout seconds for an XML message from the application
// Returns the XML received or an error if a timeout occurred
{
	rogxml *rx;

	if (nTimeout) {							// Arrange that we get a wakeup call if necessary
		_nAlarmNumber=2;
		if (setjmp(jmpbuf_alarm)) {
			return rogxml_NewError(12, "Timeout waiting for message");
		} else {
			alarm(nTimeout);
		}
	}

	InitReadStream(fd);
	rx=rogxml_ReadFn(ReadStream);
	while (rogxml_IsInstruction(rx)) {		// Not very pretty but deals with <?xml> things...
		rogxml_Delete(rx);
		rx=rogxml_ReadFn(ReadStream);
	}

	if (!strcmp(rogxml_GetLocalName(rx), "SPIDER-Packed")) {			// Special case of packed input
		int c;
		const char *unpacked;
		char buf[1024];
		int got;
		int len;
		int nPacking;					// Packing status - 0=still going, 1=done, >1=error
		int nCount=0;

		_bPackXML = 1;					// Send packed stuff back by default

		Log("Compressed message received");
		for (;;) {						// Skip up to a linefeed
			c=ReadStream();
			if (c == -1 || c == 10) break;
		}
		if (c == -1) return NULL;		// There wasn't anything else...
		rogxml_Delete(rx);
		pack_InitUnpack();
		for (;;) {						// Need to use ReadStream as it probably has stuff buffered up...
			nCount++;
			c=ReadStream();
			if (c == -1) break;
			*buf=c;
			got=1;
			nPacking = pack_Unpack(buf, got);
			if (nPacking) break;
		}
		unpacked=pack_GetUnpacked(&len);
		Log("Uncompressed %d to %d", nCount, len);		// Gloat
		rx=rogxml_FromText(unpacked);
		szDelete(unpacked);
	}

	alarm(0);
	_nAlarmNumber=0;

	return rx;
}

rogxml *ErrorMessage(int nErr, int nSeverity, const char *szFmt, ...)
{
	va_list ap;
	char szErr[256];
	rogxml *rx;

	va_start(ap, szFmt);
	vsnprintf(szErr, sizeof(szErr), szFmt, ap);
	va_end(ap);

	rx=rogxml_NewElement(NULL, "SPIDER-Ack");
	rogxml_AddText(rx, szErr);
	rogxml_SetAttr(rx, "type", "error");
	rogxml_SetAttrInt(rx, "code", nErr);
	rogxml_SetAttr(rx, "severity", nSeverity ? "fatal" : "warning");

	return rx;
}

int SendError(int fd, int nErr, int nSeverity, const char *szFmt, ...)
// Sends an error code in place of the 'happy' SPIDER-Ack
// nErr is the error code, nSeverity is 0=warning, 9=fatal
// Returns	0	Seemed to send ok (may not have been received ok)
//			1	Error (see errno for details)

{
	va_list ap;
	char szErr[256];
	rogxml *rxErr;
	int nSendErr = 0;

	va_start(ap, szFmt);
	vsnprintf(szErr, sizeof(szErr), szFmt, ap);
	va_end(ap);

	rxErr=ErrorMessage(nErr, nSeverity, "%s", szErr);

	nSendErr = SendXML(fd, rxErr, "error");

	if (nSendErr) {
		Log("Error sent %d: %s (but error %d on sending)", nErr, szErr, nSendErr);
	} else {
		Log("Error sent %d: %s", nErr, szErr);
	}
//	ipc_Sendf(getppid(), ipc_log, "Error %d: %s", nErr, szErr);

	rogxml_Delete(rxErr);

	return nSendErr;
}

rogxml *AckMessage(const char *szMsgType, const char *szMsgId, const char *szMsgRcv, const char *szMsgSnd)
{
	rogxml *rx;

	rx=rogxml_NewElement(NULL, "SPIDER-Ack");
	rogxml_SetAttr(rx, "type", "ack");
	rogxml_SetAttrInt(rx, "code", 0);

	if (szMsgType) rogxml_AddTextChild(rx, "MsgType", szMsgType);
	if (szMsgId) rogxml_AddTextChild(rx, "MsgId", szMsgId);
	if (szMsgRcv) rogxml_AddTextChild(rx, "MsgRcv", szMsgRcv);
	if (szMsgSnd) rogxml_AddTextChild(rx, "MsgSnd", szMsgSnd);

	return rx;
}

SSMAP *ssmap_GetFile(const char *szFilename)
// Reads a map from a file.  Note that the map may be empty if the file doesn't exist.
{
	FILE *fp;
	SSMAP *sm=ssmap_New();

	fp=fopen(szFilename, "r");
	if (fp) {
		for (;;) {
			const char *szLine = ReadLine(fp);
			const char *szValue;

			if (!szLine) break;

			szLine=SkipSpaces(szLine);
			if (*szLine == '#' || *szLine == '\0') continue;		// Skips blanks and hashed out lines
			szValue=strchr(szLine, '=');							// Look for the '=' sign
			if (szValue) {
				const char *chp=szValue-1;							// Last char of the key part
				const char *szKey;

				szValue=SkipSpaces(szValue+1);						// Skip spaces in the value
				while (chp >= szLine && isspace(*chp))				// Work back to the end of the key
					chp--;
				szKey=strnappend(NULL, szLine, chp-szLine+1);		// Take a copy of the key only
				ssmap_Add(sm, szKey, szValue);						// Add into the map
				szDelete(szKey);									// Drop the key copy
			}
		}
		fclose(fp);
	}

	return sm;
}

SSMAP *ssEnv = NULL;
void EnvSet(const char *szName, const char *szValue)
// Set or unset an environment variable
// Call with NULL szValue to unset
// Don't pass a szName with an '=' in it. Really.
{
	if (szValue) {
		if (!ssEnv) {
			ssEnv=ssmap_New();
			ssmap_CopyKeys(ssEnv, 1);				// Make sure keys look after themselves
		}

		const char *szVariable = hprintf(NULL, "%s=%s", szName, szValue);		// To be passed to putenv
		ssmap_Add(ssEnv, szName, szVariable);
		szDelete(szVariable);							// We need to use the string that we later use to delete
		szVariable=ssmap_GetValue(ssEnv, szName);		// So read it back from the map
		if (szVariable) {								// It'd be strange if we didn't find it...
			putenv((char*)szVariable);
//			Log("putenv(%s) [%d]", szVariable, szVariable);
		}
	} else {
		if (ssEnv) {
			const char *szVariable = ssmap_GetValue(ssEnv, szName);
			if (szVariable) {
				char *chp=strrchr((char*)szVariable, '=');
				if (chp) {								// This really has to find one
					*chp='\0';							// Blatt it so we have "NAME="
					putenv((char*)szVariable);
				}
				ssmap_DeleteKey(ssEnv, szName);
			}
		}
	}
}

void ReadEnvironmentFile(const char *szFile)
// The file in this case is a load of NAME=VALUE pairs (with blanks and '#' comments ignored)
// Note that putenv() has touchy semantics whereby the string passed must remain valid so this function
// is careful to tidy up previous strings using the (undocumented) feature whereby "VAR=" can be passed
// to putenv() to remove a variable completely.
{
	static time_t tLastUpdated=0;						// Last recorded file update time
	struct stat st;
	static SSMAP *envmap = NULL;						// Map of environment variables

	int err = stat(szFile, &st);
	if (!err && st.st_mtime > tLastUpdated) {			// Exists and updated since previous check
		tLastUpdated=st.st_mtime;

		if (envmap) {									// Tidy up the old environment
			ssmap_Reset(envmap);
			const char *szValue;

			while (ssmap_GetNextEntry(envmap, NULL, &szValue)) {
				char *pEquals=strchr(szValue, '=');

				if (pEquals) {
					((char *)pEquals)[1]='\0';			// Turn "NAME=VALUE" into "NAME="
					putenv((char*)szValue);				// Deletes the env variable
				}
			}
			ssmap_Delete(envmap);
		}
		envmap = ssmap_GetFile(szFile);
		if (envmap) {
			ssmap_Reset(envmap);
			const char *szName;
			const char *szValue;
			int count=0;

			while (ssmap_GetNextEntry(envmap, &szName, &szValue)) {
				const char *szNewValue = hprintf(NULL, "%s=%s", szName, szValue);	// Make value "NAME=VALUE"
				ssmap_Add(envmap, szName, szNewValue);								// Set that back into the map
				szDelete(szNewValue);												// Delete the temp copy

				szValue=ssmap_GetValue(envmap, szName);								// Get the permanently alloced one
				putenv((char*)szValue);												// Use it to set the env
				count++;
			}

			Log("Read %d environment variable%s from %s", count, count==1?"":"s", szFile);
		}
	}
}

int BIO_putf(BIO *b, const char *szFmt, ...)
// Like BIO_puts but accepts a formatted string.
// Truncates over 1000 chars
{
	va_list ap;
	char buf[1000];

	va_start(ap, szFmt);
	vsnprintf(buf, sizeof(buf), szFmt, ap);
	va_end(ap);

	return MyBIO_puts(b, buf);
}

// Little functions to handle printing to our peer...
static BIO *g_io = NULL;
static int ioset(BIO *io)
{
	g_io = io;
}

static int ioprintf(const char *szFmt, ...)
// Like printf(), but sends it to our 'io' mate
{
	if (g_io) {
		va_list ap;
		char buf[1000];

		va_start(ap, szFmt);
		vsnprintf(buf, sizeof(buf), szFmt, ap);
		va_end(ap);

		return MyBIO_puts(g_io, buf);
	}
}

static int cb_Password(char *buf,int num, int rwflag,void *userdata)
// Callback function for returning the password to get into the DES3 encrypted private key file
{
	if(num<strlen(_szPassword)+1) return(0);		// Too short a buffer

	strcpy(buf,_szPassword);						// Copy over plain text buffer???

	return(strlen(_szPassword));
}

static void sigpipe_handle(int n)
// Dummy handler that receives a signal if the connection is dropped
{
}

DH *get_dh1024()
{
	static unsigned char dh1024_p[]={
		0x98,0x28,0xDC,0x86,0x4B,0x8D,0xFD,0xF1,0x27,0x33,0xC9,0x6C,
		0x88,0x41,0x7D,0xBA,0xD0,0xDE,0xD5,0x42,0x14,0x51,0xF6,0x72,
		0x06,0x4D,0x08,0xEB,0x46,0x7A,0xA5,0x5C,0xB8,0x65,0xC9,0x20,
		0xB3,0x7E,0xE5,0x8E,0xC2,0xAC,0x33,0xA8,0xC6,0x96,0xF1,0x98,
		0xE8,0x7F,0x75,0x7D,0xDA,0xD7,0x93,0x5A,0x6F,0x2F,0xE6,0xE0,
		0xB3,0xB6,0x2B,0x31,0xCF,0xB1,0xF2,0xC2,0x60,0x0C,0x18,0x33,
		0x06,0xF6,0xE3,0xBB,0x6D,0xF1,0x80,0xA0,0x1C,0x53,0xBE,0x9F,
		0x74,0x6E,0xA8,0xBE,0x36,0x03,0x9B,0xF4,0xD0,0x3C,0x87,0xE0,
		0x6E,0xA2,0x13,0x87,0x2A,0x85,0x27,0x87,0x4F,0xAA,0x2B,0xAA,
		0x34,0x2E,0x97,0x36,0xC4,0xA4,0x32,0x8D,0x0B,0xC6,0x5E,0x68,
		0x4F,0x79,0xC7,0x79,0x85,0x9E,0x0E,0x53,
		};
	static unsigned char dh1024_g[]={
		0x02,
		};
	DH *dh;

	if ((dh=DH_new()) == NULL) return(NULL);
	dh->p=BN_bin2bn(dh1024_p,sizeof(dh1024_p),NULL);
	dh->g=BN_bin2bn(dh1024_g,sizeof(dh1024_g),NULL);
	if ((dh->p == NULL) || (dh->g == NULL))
		{ DH_free(dh); return(NULL); }
	return(dh);
}

void load_dh_params(SSL_CTX *ctx)
{
	DH *ret=get_dh1024();

	if(SSL_CTX_set_tmp_dh(ctx,ret)<0)
		FatalSSL("Couldn't set DH parameters");
}

static char *_szCtxError = NULL;

const char *ctx_Error()
{
	return _szCtxError;
}

const char *GetCertificateDir()
// Depending on the environment, returns the directory with the certifcates etc. (mt.cert, mt.ca, mt.key)
// Returns a static string so no need to free it.
{
	static char dir[30];					// Only has to hold, for example, "tspine1/etc"

	if (szEnvironment) {
		static char file[50];
		snprintf(dir, sizeof(dir), "env/%s/certs", szEnvironment);
		snprintf(file, sizeof(file), "%s/mt.cert", dir);

		if (!access(file, R_OK)) {
			return dir;						// NB. Secondary exit point
		}
	}

	return GetEtcDir();						// The default
}

SSL_CTX *ctx_New(const char *szConfigDir, const char *szPassword)
// Create a new SSL context and return it
// The directory passed should contain mt.ca, mt.cert and mt.key being the certificate authority chain, the
// local certificate and the key respectively.
// On error, returns NULL - call ctx_Error() to pick up the error message
// NB. We keep szCertCA, szCertLocal and szKeyLocal around in case SSL_CTX_load_verify_locations() needs
//		them after the function exits.
{
	SSL_METHOD *meth;
	SSL_CTX *ctx;
	const char *szCertCA = NULL;
	const char *szCertLocal = NULL;
	const char *szKeyLocal = NULL;

	szDelete(szCertCA);						// Tidy up the memory if we've been this way before
	szDelete(szCertLocal);
	szDelete(szKeyLocal);

//Log("Building TLS/SSL context using authentication in %s", szConfigDir);

	szCertCA=hprintf(NULL, "%s/%s", szConfigDir, "mt.ca");
	szCertLocal=hprintf(NULL, "%s/%s", szConfigDir, "mt.cert");
	szKeyLocal=hprintf(NULL, "%s/%s", szConfigDir, "mt.key");

	szDelete(_szCtxError);
	_szCtxError = NULL;

	if (!bio_err) {				// Need to initialise
		SSL_library_init();
		SSL_load_error_strings();

		bio_err=BIO_new_fp(stderr,BIO_NOCLOSE);		// For writing errors
	}

// No longer do this as giving a handler for SIGPIPE stops write() from returning an error on writing to
// a broken pipe and we'd rather handle it at the 'write()' stage as it's more controled.
//	signal(SIGPIPE,sigpipe_handle);					// In case of premature connection closure

	meth=SSLv23_method();							// Create our context
	ctx=SSL_CTX_new(meth);
	if (!ctx) {
		_szCtxError = hprintf(NULL, "Failed to create an SSL/TLS context");
	}

	if (!_szCtxError) {								// Get our certificates from the key file
		if (!(SSL_CTX_use_certificate_chain_file(ctx, szCertLocal))) {
			_szCtxError = hprintf(NULL, "Can't read local certificate file '%s'", szCertLocal);
		}
	}

	if (!_szCtxError) {								// Set the password
		_szPassword=szPassword;
		SSL_CTX_set_default_passwd_cb(ctx, cb_Password);

		if(!(SSL_CTX_use_PrivateKey_file(ctx, szKeyLocal, SSL_FILETYPE_PEM))) {
			_szCtxError = hprintf(NULL, "Can't read key file '%s'", szKeyLocal);
		}
	}

	if (!_szCtxError) {								// Get the list of trusted certificates
		if(!(SSL_CTX_load_verify_locations(ctx, szCertCA,0))) {
			_szCtxError = hprintf(NULL, "Can't read CA list file '%s'", szCertCA);
		}
	}

	if (_szCtxError) {						// We came unstuck somewhere
		return NULL;
	} else {
		load_dh_params(ctx);				// Exits on failure

		return ctx;
	}
}

void ctx_Delete(SSL_CTX *ctx)
// Delete an SSL context
{
	if (ctx) SSL_CTX_free(ctx);
}

void ShowCertificate(X509 *cert)
	// Display the content of the certificate
{
	if (cert) {
		X509_NAME *x509Name = X509_get_subject_name(cert);
		int nEntries = X509_NAME_entry_count(x509Name);
		int i;

		for (i=0;i<nEntries;i++) {
			char szNameBuf[500];
			unsigned char *pValue;
			int nValueLen;
			X509_NAME_ENTRY *ne = X509_NAME_get_entry(x509Name, i);
			ASN1_OBJECT *obj = X509_NAME_ENTRY_get_object(ne);
			ASN1_STRING *str = X509_NAME_ENTRY_get_data(ne);

			i2t_ASN1_OBJECT(szNameBuf, sizeof(szNameBuf), obj);
			pValue=ASN1_STRING_data(str);
			nValueLen = ASN1_STRING_length(str);
			printf("X509-CERT %s=%s\n", szNameBuf, (char*)pValue);
		}
	} else {
		printf("No certificate\n");
	}
}

int AuthenticatePeer(SSL *ssl, const char *szPeer, int bExt)
// Returns
//	0	Failed authentication
//	1	Yay, we know this peer
{
	X509 *peer;
	char peer_CN[256];
	int err;

	err = SSL_get_verify_result(ssl);
	peer=SSL_get_peer_certificate(ssl);

	if (!peer) {
		Log("Peer %s did not hand over a certificate", PeerIp(bExt));
		return 0;
	}

	if (err != X509_V_OK) {
		ShowCertificate(peer);
		Log("Certificate from %s doesn't verify (err=%d)", PeerIp(bExt), err);
		X509_free(peer);
		return 0;
	}

	X509_NAME_get_text_by_NID(X509_get_subject_name(peer), NID_commonName, peer_CN, sizeof(peer_CN));
	X509_free(peer);

	// Allow a match either on the host name we're using or the IP address of that host
	if (szPeer) {
		if (strcasecmp(peer_CN, szPeer) && strcasecmp(peer_CN, PeerIp(bExt))) {
			ShowCertificate(peer);
			Log("Certificate (%s) doesn't match peer (%s at %s)", peer_CN, szPeer, PeerIp(bExt));
			return 0;
		}

		Log("Authenticated peer as being '%s' on '%s' at '%s'", peer_CN, szPeer, PeerIp(bExt));
		return 1;
	} else {
		if (strcmp(peer_CN, PeerIp(bExt))) {
			ShowCertificate(peer);
			Log("Certificate (%s) doesn't match peer IP %s", peer_CN, PeerIp(bExt));
			if (!stricmp("devsys", peer_CN)) {
				Log("But it's DevSys so it's ok...!");
			} else if (!stricmp("localhost", peer_CN)) {
				Log("But it's localhost so it's ok...!");
			} else if (!stricmp("npfit.microtest.thirdparty.nhs.uk", peer_CN)) {
				Log("But it's us so it's ok...!");
			} else {
				return 0;
			}
		}

		Log("Authenticated peer as being '%s'", PeerIp(bExt));
		return 1;
	}
}

void TableActiveChildren(BIO *io)
{
	int i;

	MyBIO_puts(io, "<table border bgcolor=#ffddcc>");
	BIO_putf(io, "<tr><th colspan=5><font size=+2>%d active child process%s</font>",
			nPids, nPids==1?"":"es");
	MyBIO_puts(io, "<tr><th>pid<th colspan=2>Started<th>Ext<th>IP<th>Message id");
	for (i=0;i<nPids;i++) {
		struct tm *tm = gmtime(&aPid[i].tStarted);

		BIO_putf(io, "<tr><td align=right>%d"
						"<td align=right>%d/%02d/%02d<td align=right>%d:%02d:%02d"
						"<td>%s<td>%s<td>%s",
				aPid[i].pid,
				tm->tm_mday, tm->tm_mon+1, tm->tm_year%100,
				tm->tm_hour, tm->tm_min, tm->tm_sec,
				aPid[i].bExt ? "In" : "Out",
				aPid[i].szIp ? aPid[i].szIp : "-",
				aPid[i].szId);
	}
	MyBIO_puts(io, "</table>");
}

typedef struct note_t {
	int nEntries;
	char **pszEntry;				// Most entries
	int nMessages;
	char **pszMessage;			// 'M' message entries
} note_t;

note_Delete(note_t *n)
{
	if (n) {
		int i;

		for (i=0;i<n->nEntries;i++) szDelete(n->pszEntry[i]);
		for (i=0;i<n->nMessages;i++) szDelete(n->pszMessage[i]);
		free((char*)n->pszEntry);
		free((char*)n->pszMessage);
		free((char*)n);
	}
}

note_t *note_LoadMessage(const char *szDir)
// Given a directory (relative to msgdir), loads the 'info' file
{
	note_t *n;
	const char *szFilename = hprintf(NULL, "%s/%s/info", szMsgLogDir, szDir);
	FILE *fp;

	fp=fopen(szFilename, "r");
	szDelete(szFilename);
	if (!fp) return NULL;

	n=NEW(note_t, 1);
	n->nEntries=0;
	n->pszEntry=NEW(char*,1);
	n->pszEntry[0]=NULL;
	n->nMessages=0;
	n->pszMessage=NEW(char*,1);
	n->pszMessage[0]=NULL;

	for (;;) {
		const char *szLine = ReadLine(fp);
		int *pn;
		char ***pps;

		if (!szLine) break;

		if (*szLine == 'M') {
			pn=&n->nMessages;
			pps=&n->pszMessage;
		} else {
			pn=&n->nEntries;
			pps=&n->pszEntry;
		}
		RENEW(*pps, char*, *pn+2);
		(*pps)[*pn]=strdup(szLine);
		(*pps)[++(*pn)]=NULL;
	}
	fclose(fp);

	return n;
}

int note_GetEntryCount(note_t *n)		{return n->nEntries;}
int note_GetMessageCount(note_t *n)		{return n->nMessages;}

const char *note_GetEntry(note_t *n, int i)
{
	return (i<1 || i>n->nEntries) ? NULL : n->pszEntry[i-1];
}

const char *note_GetMessage(note_t *n, int i)
{
	return (i<1 || i>n->nMessages) ? NULL : n->pszMessage[i-1];
}

const char *note_FindEntry(note_t *n, char c)
{
	int nNotes=note_GetEntryCount(n);
	int i;

	for (i=1;i<=nNotes;i++) {
		const char *szEntry = note_GetEntry(n, i);

		if (*szEntry == c) return szEntry+2;
	}

	return NULL;
}

int cmp_str(const void *a, const void *b)
{
	return strcmp(*(char**)b, *(char**)a);
}

void TableMessageLog(BIO *io, int nMessages, const char *szFilter)
{
	struct dirent *d;
	DIR *dir=opendir(szMsgLogDir);
	const char **pszDir = NEW(const char*, nMessages);
	int nDir = 0;
	int nCount = 0;									// Number of messages actually found
	int i;
	int nRow=0;

	while (d=readdir(dir)) {
		if (*d->d_name == '.') continue;		// Skip '.' files
		nCount++;
		if (nDir < nMessages) {						// List isn't full so just add it in
			pszDir[nDir++]=strdup(d->d_name);
		} else {									// List is full so replace oldest
			int i;
			int nOldest=0;

			for (i=1;i<nDir;i++) {
				if (strcmp(pszDir[i], pszDir[nOldest]) < 0) {
					nOldest=i;
				}
			}
			strset(&(pszDir[nOldest]), d->d_name);
		}
	}
	closedir(dir);
	qsort(pszDir,nDir,sizeof(*pszDir),cmp_str);

//	MyBIO_puts(io, "<style>td {font-size:9pt}</style>\n");
//	MyBIO_puts(io, "<table border bgcolor=#ddddff width=100%>\n");
	MyBIO_puts(io, "<style>"
						"* {font-family: calibri, verdana, arial} "
						"td {font-size:9pt} "
						"td.TD_MSGID {font-family: courier; }"
						"td.TD_Gen {background-color: #ffddff; text-align: center;}"
						"td.TD_Unk {background-color: #ffffff; text-align: center;}"
						"td.TD_eTP {background-color: #ffffdd; text-align: center;}"
						"td.TD_PDS {background-color: #ffdddd; text-align: center;}"
						"td.TD_CaB {background-color: #ddffdd; text-align: center;}"
						"td.TD_RPC {background-color: #ddffff; text-align: center;}"
					"</style>\n");
	MyBIO_puts(io, "<table cellpadding=\"3\" cellspacing=\"0\" border=\"0\" bgcolor=#ddddff width=100%>\n");
	if (nCount) {
		if (nDir != 1) {
			if (nCount > nMessages) {
				BIO_putf(io, "<tr><th colspan=13><font size=+2>Last %d messages...</font>", nDir);
			} else {
				BIO_putf(io, "<tr><th colspan=13><font size=+2>All %d messages...</font>", nDir);
			}
		} else {
			BIO_putf(io, "<tr><th colspan=13><font size=+2>Last message...</font>");
		}
	} else {
		BIO_putf(io, "<tr><th colspan=13><font size=+2>There are no messages to display...</font>");
	}
	MyBIO_puts(io, "<tr><th>Date<th>UTC<th>ID<th>Type<th>Return<th>Stderr<th>IP<th>Source");
	for (i=0;i<nDir;i++) {
		const char *szDir = pszDir[i];
		const char *szType;
		const char *szDescription;
		const char *szTmp;
		char *szIP = strdup("-");
		const char *szInteractionName = NULL;
		const char *szInteractionSection = NULL;
		const char *szColour;
		const char *szZInfo = NULL;
		const char *szStderr = NULL;
		const char *szReturn = NULL;
		int bInclude;

		note_t *note=note_LoadMessage(szDir);
		szType = note_FindEntry(note, 'Y');
		if (!szType) szType="Unknown";
		szDescription = note_FindEntry(note, 'H');
		if (!szDescription) szDescription="Unknown";
		szZInfo = note_FindEntry(note, 'Z');	// Extra descriptive text to take place of message type
		szStderr = note_FindEntry(note, 'E');	// First line of stderr
		szReturn = note_FindEntry(note, 'R');
		szTmp = note_FindEntry(note, 'S');
		if (szTmp) {
			char *chp;
			szIP=strdup(szTmp);
			for (chp=szIP;*chp;chp++) if (*chp == '|') *chp='\0';		// Don't care about peer port number
		}

		if (!szReturn) szReturn=szStderr;

		szInteractionName = MessageDescription(szType, &szInteractionSection);
		if (!szInteractionName) szInteractionName="Unknown";
		if (!szInteractionSection) szInteractionSection="Unk";

		szColour = "white";
		if (!stricmp(szInteractionSection, "Gen")) szColour="#ffddff";
		if (!stricmp(szInteractionSection, "PDS")) szColour="#ffdddd";
		if (!stricmp(szInteractionSection, "CaB")) szColour="#ddffdd";
		if (!stricmp(szInteractionSection, "eTP")) szColour="#ffffdd";

		bInclude=1;
		if (szFilter && *szFilter) {
			bInclude=0;
			if (stristr(szInteractionSection, szFilter)) bInclude=1;
			if (stristr(szInteractionName, szFilter)) bInclude=1;
			if (stristr(szType, szFilter)) bInclude=1;
			if (stristr(szIP, szFilter)) bInclude=1;
			if (stristr(szDir, szFilter)) bInclude=1;
			if (stristr(szReturn, szFilter)) bInclude=1;
		}

		if (bInclude) {
			nRow++;
			BIO_putf(io, "<tr ");
			if (szStderr) {
				if (nRow & 1) {
					BIO_putf(io, "bgcolor=\"ffbbbb\">");
				} else {
					BIO_putf(io, "bgcolor=\"ff9999\">");
				}
			} else {
				if (nRow & 1) {
					BIO_putf(io, "bgcolor=\"ffffff\">");
				} else {
					BIO_putf(io, "bgcolor=\"dddddd\">");
				}
			}
			BIO_putf(io, "<td nowrap=1>%.2s-%.2s-%.4s", szDir+6, szDir+4, szDir);
			BIO_putf(io, "<td>%.2s:%.2s:%.2s", szDir+8, szDir+10, szDir+12);
			BIO_putf(io, "<td nowrap=1><a href=\"/getinteraction/%s\">%s</a>", szDir, szDir);

			// Unfortunately, I chose two different names for the input files so we need to identify which one we mean
			const char *szInputFile=hprintf(NULL, "msglog/%s/rpc-in.xml", szDir);
			if (!access(szInputFile, 0)) {		// It's called rpc-in.xml
				BIO_putf(io, "<td nowrap=1><a href=\"/message/%s/rpc-in.xml/show\">%s</a></td>", szDir, szZInfo, szZInfo);
			} else {							// It's called rcv.cml
				BIO_putf(io, "<td nowrap=1><a href=\"/message/%s/rcv.xml/show\">%s</a></td>", szDir, szZInfo, szZInfo);
			}
			szDelete(szInputFile);
			BIO_putf(io, "<td><a href=\"/message/%s/rpc-out.xml/show\">%s</a></td>", szDir, szReturn, szReturn);

			const char *szStderrFile=hprintf(NULL, "msglog/%s/stderr.txt", szDir);
			if (!access(szStderrFile, 0)) {		// We have stderr text
				BIO_putf(io, "<td nowrap=1><a href=\"/message/%s/stderr.txt/show\">stderr</a></td>", szDir);
			} else {
				BIO_putf(io, "<td>");
			}
			szDelete(szStderrFile);
			BIO_putf(io, "<td><a href=\"/status?n=%d&f=%s\">%s</a></td>", nDir, szIP, szIP);
			BIO_putf(io, "<td>%s", szDescription);
		}

		szDelete(szIP);
	}
	MyBIO_puts(io, "</table>");
}

int MyBIO_getc(BIO *io)
// Gets a single character (0..255) or EOF
{
	char c;
	int nGot;
	int nResult;

	static BIO *lastio = NULL;
	static int nIndex = 1;
	const char *szNoteDir;
	FILE *fp;
	FILE *fpnote;
	const char *szNoteFile;
	const char *szBase;

//	Log("In getc");
	nGot = BIO_read(io, &c, 1);
	nResult = (nGot == 1) ? (unsigned char)c : EOF;
//Log("Done getc read nGot=%d, nResult = %d, c='%c', errno=%d, flags=%x", nGot, nResult, (c>=20&&c<=126)?c:'-', errno, io->flags);

	// Everything from here on is logging...!

	if (!_bNoteInhibit) {
		szNoteDir = NoteDir();
		fp=fopen("/tmp/in.dat","a");
		fpnote = NULL;
		szNoteFile = NULL;
		szBase = NULL;

		if (szNoteDir) {						// We're keeping notes
			szBase=hprintf(NULL, "rawin-%d", nIndex);
			szNoteFile = hprintf(NULL, "%s/%s.txt", szNoteDir, szBase);
			fpnote=fopen(szNoteFile, "a");
			szDelete(szNoteFile);
		}
		if (lastio != io) {						// Changed to a new thrower
			if (fp) fprintf(fp, "\n----------------------------------------------------------- NEW PORT (%x != %x)\n", lastio, io);
			if (fpnote) Note("M|%s.%s|%s", szBase, "txt", "Data received");
			lastio=io;
		}
		if (nResult != EOF) {					// We read some stuff
			if (fp) fputc(c, fp);
			if (fpnote) fputc(c, fpnote);
		} else {								// End of file
			if (fp) fputs("\n----------------------------------------------------------- EOF\n", fp);
			nIndex++;
			if (nIndex > 9) {
				Log("Runaway attachment problem - quitting");
				Exit(0);
			}
		}
		if (fp) fclose(fp);
		if (szNoteDir) {
			szDelete(szBase);
			if (fpnote) fclose(fpnote);
		}
	}

	return nResult;
}

int MyBIO_gets(BIO *io, char *buf, int nLen)
{
	int nGot = 0;

	while (nLen > 1) {
		int c=MyBIO_getc(io);
		if (c=='\n' || c==EOF) break;
		*buf++=c;
		nLen--;
		nGot++;
	}
	*buf='\0';
	return nGot;
}

const char *BIO_GetLine(BIO *io)
// NB. This now returns the line ending characters as part of the string...
{
	static char buf[1024]="{empty}";
	int nGot;

	nGot=MyBIO_gets(io, buf, sizeof(buf)-1);

	if (nGot > 0) {
		return buf;
	} else {
		return NULL;
	}
}

BIO *mimeio = NULL;

int getiochar()
{
	int ch = MyBIO_getc(mimeio);
	return ch;
//	return MyBIO_getc(mimeio);
}

MIME *GetIOMIME(BIO *io)
{
	mimeio=io;

	return mime_ReadFn(getiochar);
}

MIME *GetIOMIMEHeader(BIO *io)
{
	mimeio=io;

	return mime_ReadHeaderFn(getiochar);
}

void TableNotes(BIO *io, note_t *note, const char *szDir)
{
	const char *szInteractionName;
	const char *szInteractionSection;
	const char *szInteraction = note_FindEntry(note, 'Y');

	szInteractionName = MessageDescription(szInteraction, &szInteractionSection);

	BIO_putf(io, "<table bgcolor=#000077 bordercolor=blue border=1 cellspacing=1 width=100%>\r\n");
	BIO_putf(io, "<tr bgcolor=#aa88ff><th colspan=2><font size=5>Details</font>");
	BIO_putf(io, "<tr><td bgcolor=#aa88ff>Directory<td bgcolor=#ffffaa>%s\r\n", szDir);
	BIO_putf(io, "<tr><td bgcolor=#aa88ff>Processed<td bgcolor=#ffffaa>");
		BIO_putf(io, "%.2s-%.2s-%.4s ", szDir+6, szDir+4, szDir);
		BIO_putf(io, "%.2s:%.2s:%.2s\r\n", szDir+8, szDir+10, szDir+12);
	BIO_putf(io, "<tr><td bgcolor=#aa88ff>Interaction type<td bgcolor=#ffffaa>%s: %s\r\n", szInteractionSection, szInteractionName);
	BIO_putf(io, "<tr><td bgcolor=#aa88ff>Interaction ID<td bgcolor=#ffffaa>%s\r\n", szInteraction);
	BIO_putf(io, "<tr><td bgcolor=#aa88ff>Message ID<td bgcolor=#ffffaa>%s\r\n", note_FindEntry(note, 'I'));
	BIO_putf(io, "<tr><td bgcolor=#aa88ff>Conversation ID<td bgcolor=#ffffaa><a href=\"/status?f=%.8s\">%s</a>\r\n", note_FindEntry(note, 'C'), note_FindEntry(note, 'C'));
	BIO_putf(io, "<tr><td bgcolor=#aa88ff>From<td bgcolor=#ffffaa>%s\r\n", note_FindEntry(note, 'F'));
	BIO_putf(io, "<tr><td bgcolor=#aa88ff>To<td bgcolor=#ffffaa>%s\r\n", note_FindEntry(note, 'T'));
	BIO_putf(io, "<tr><td bgcolor=#aa88ff>SPIDER ID<td bgcolor=#ffffaa>%s\r\n", note_FindEntry(note, 'J'));
	BIO_putf(io, "</table>\r\n");
}

void TableNoteMessages(BIO *io, note_t *note, const char *szDir)
{
	int i;

	BIO_putf(io, "<table bgcolor=#000077 bordercolor=blue border=1 cellspacing=1 width=100%>\r\n");
	BIO_putf(io, "<tr bgcolor=#aa88ff><th colspan=2><font size=5>Message Processing</font>");
	BIO_putf(io, "<tr bgcolor=#aa88ff><th>Type<th>Description");
	for (i=1;i<=note_GetMessageCount(note);i++) {
		const char *szMessage = note_GetMessage(note, i);
		char *szCopy = strdup(szMessage+2);
		char *szFile = strtok(szCopy, "|");
		char *szDescr = strtok(NULL, "");
		char *szName = strtok(szFile, ".");
		char *szExt = strtok(NULL, ".");
		BIO_putf(io, "<tr>");
		BIO_putf(io, "<td bgcolor=#aa88ff>%s", szExt);
		BIO_putf(io, "<td bgcolor=#ffffaa><a href=\"/message/%s/%s.%s/show\">%s</a>",
				szDir, szName, szExt, szDescr);
		szDelete(szCopy);
	}
	BIO_putf(io, "</table>");
}

void TableNoteLogs(BIO *io, note_t *note, const char *szDir)
{
	const char *szLog = hprintf(NULL, "%s/%s/log", szMsgLogDir, szDir);
	FILE *fp=fopen(szLog, "r");

	if (fp) {
		const char *szLine;

		BIO_putf(io, "<table border=1 cellspacing=0 width=100%>\r\n");
//		BIO_putf(io, "<tr bgcolor=#44aaff><th colspan=3><font size=5>Log</font>\r\n");
//		BIO_putf(io, "<tr bgcolor=#44aaff><th>Date<th>Time<th>Event\r\n");
		BIO_putf(io, "<tr bgcolor=#44aaff><th>Time<th>Event\r\n");
		while (szLine=ReadLine(fp)) {
			int bError = stristr(szLine, "error");
			char *szLineCopy = strdup(szLine);
			char *szDate=strtok(szLineCopy, " ");
			char *szTime=strtok(NULL, " ");
			char *szEvent=strtok(NULL, "");
//			BIO_putf(io, "<tr><td>%s<td>%s<td>%s", szDate, szTime, szEvent);
			BIO_putf(io, "<tr><td>%s</td>", szTime);
			BIO_putf(io, "<td>");
			if (bError) BIO_putf(io, "<font color=red>");
			BIO_putf(io, "%s", szEvent);
			if (bError) BIO_putf(io, "</font>");
			BIO_putf(io, "</td>");
			szDelete(szLineCopy);
		}
		BIO_putf(io, "</table>\r\n");
		fclose(fp);
	} else {
		BIO_putf(io, "<table><tr><td bgcolor=red>Cannot open %s</table>", szLog);
	}

	szDelete(szLog);
}

void SendHtmlHeader(BIO *io)
{
// $mtorange="#f57023"; $mtblue="#2b509a";
	char szHostname[50];
	time_t now = time(NULL);
	struct tm *tm=gmtime(&now);

	gethostname(szHostname, sizeof(szHostname));

	BIO_putf(io, 
		"<META HTTP-EQUIV='Pragma' CONTENT='no-cache'>"
		"<hr>"
		"<table border=0 width=100%% bgcolor=#f57023>"
		"<tr><td rowspan=2 colspan=2 align=center><font size=6 color=white>SPIDER v" VERSION " - RPC Server</font>"
		"<td bgcolor=#2b509a><font size=3 color=white> &nbsp; %s</font>"
		"<tr><td bgcolor=#2b509a><font size=3 color=white> &nbsp; %s</font>"
		"<tr bgcolor=#b8541b><td>"
		"| <a href=/><font color=white>Home</font></a> "
		"| <a href=/status><font color=white>Messages</font></a> "
		"| <a href=/mtrpc><font color=white>Test</font></a> "
		"|"
		"<td><font color=white> &nbsp; UTC is %d-%02d-%04d %02d:%02d:%02d</font>"
		"</table>"
		"<hr>",
		szHostname, _szIncomingIp,
		tm->tm_mday, tm->tm_mon+1, tm->tm_year+1900,
		tm->tm_hour, tm->tm_min, tm->tm_sec);
}

void SendHttpHeader(BIO *io, int nCode, const char *szContentType, const char *szContent)
{
	if (!szContentType) szContentType="text/html";

	BIO_putf(io, "HTTP/1.1 %d OK\r\n", nCode);
	MyBIO_puts(io,"Server: Microtest Spider " VERSION "\r\n");
	BIO_putf(io, "Content-type: %s\r\n", szContentType);
	if (szContent) BIO_putf(io, "Content-length: %d\r\n", strlen(szContent));
	MyBIO_puts(io, "\r\n");
}

int ParseURI(const char *szURI, const char ***ppszName, const char ***ppszValue, char bEncoded)
// Parses a URI of the form a=b+3&c=d%3b-%3e to produce the following:
// *ppszName = [ "a", "c", NULL ]
// *ppszValue = [ "b 3", "d<->", NULL ] or
// *ppszValue = [ "b+3", "d3&c=d%3b-%3e", NULL ] if !bEncoded (i.e. bEncoded indicates values are encoded
// I.e. Name and Value are two arrays of names and values ending in NULL pointers (like argv)
// Passing in NULL for szURI, ppszName or ppszValue is safe if the values aren't wanted.
// Returns the number of parameters found
{
	const char *chp;

	int nParams=0;
	const char **pszName = NEW(const char*, 1);			// Two vectors, just large enough to hold the terminating
	const char **pszValue = NEW(const char*, 1);		// NULL pointers that are added at the end

	if (szURI) {
		char *pA;										// Ampersands
		char *pEq;										// Equalss
		char *szParams;									// Copy of the parameters

		szParams=strdup(szURI);							// Buffer we can muck up
		char *szTmpParams = szParams;					// Copy the pointer so we can free it

		for (;;) {
			pA = strchr(szParams, '&');					// Find separator
			if (pA) *pA='\0';

			pEq=strchr(szParams, '=');
			if (pEq) {
				*pEq='\0';
				pszName=RENEW(pszName, const char *, nParams+2);
				pszValue=RENEW(pszValue, const char *, nParams+2);
				pszName[nParams]=strdup(szParams);
				if (bEncoded) UriDecode(pEq+1);
				pszValue[nParams]=strdup(pEq+1);
				nParams++;
			}
			if (!pA) break;
			szParams=pA+1;
		}
		szDelete(szTmpParams);
	}

	pszName[nParams]=NULL;
	pszValue[nParams]=NULL;

	if (ppszName) *ppszName=pszName; else DeleteArgv(pszName);		// Assign back names and values if passed pointers
	if (ppszValue) *ppszValue=pszValue; else DeleteArgv(pszValue);	// weren't NULL, otherwise free them up

	return nParams;
}

int ParseAddress(const char *szURI, const char **pszAddr, const char ***ppszName, const char ***ppszValue)
// Parses a URI of the form /whatever?a=b+3&c=d%3b-%3e to produce the following:
// *pszAddr = "/whatever"
// *ppszName = [ "a", "c", NULL ]
// *ppszValue = [ "b 3", "d<->", NULL ]
// I.e. Name and Value are two arrays of names and values ending in NULL pointers (like argv)
// Addr is the tidied up URI (it is safe to call with (szUri, &szUri, ...))
// Passing in NULL for pszAddr, ppszName or ppszValue is safe if the values aren't wanted.
{
	int nParams=0;
	const char *chp = NULL;
	const char *szAddr;

	if (szURI) chp=strchr(szURI, '?');						// Look for parameters...
	if (chp) {												// /uri?a=b&c=d
		szAddr=strnappend(NULL, szURI, chp-szURI);			// szAddr is the portion before the '?'
		nParams = ParseURI(chp+1, ppszName, ppszValue, 1);
	} else {
		szAddr=szURI ? strdup(szURI) : NULL;
		nParams = ParseURI(NULL, ppszName, ppszValue, 1);	// Basically just sets Name and Value to empty arrays
	}

	if (pszAddr) *pszAddr=szAddr; else szDelete(szAddr);

	return nParams;
}

const char *HtmlEscape(const char *szText)
// szText MUST be on the heap.
// The return value is a separate copy of the text passed, with '<' and '>' expanded.
// The parameter passed IS NOT deleted by this function.
{
	const char *szEscaped = strdup(szText);

	szEscaped=strsubst(szEscaped, "<", "&lt;");
	szEscaped=strsubst(szEscaped, ">", "&gt;");

	return szEscaped;
}

void RpcEntryForm(BIO *io, char bDebug, const char *szXml)
{
	const char *szEscaped = HtmlEscape(szXml);

	BIO_putf(io, "<table><tr>\n");
	BIO_putf(io, "<form method=POST>\n");
	BIO_putf(io, "<input type=hidden name=browser value=1>\n");
	BIO_putf(io, "<tr>");
	BIO_putf(io, "<td valign=top><input type=submit value=Execute></td>\n");
	BIO_putf(io, "<td rowspan=2><textarea name=xml cols=80 rows=20>%s</textarea></td>", szEscaped);
	BIO_putf(io, "</tr>");
	BIO_putf(io, "<tr>");
	BIO_putf(io, "<td valign=top>Debug <input type=checkbox ");
	if (bDebug) BIO_putf(io, "checked ");
	BIO_putf(io, "name=debug></td>\n");
	BIO_putf(io, "</tr>");
	BIO_putf(io, "</form>\n");
	BIO_putf(io, "</table>");

	szDelete(szEscaped);
}

int DealWithGET(BIO *io, const char *szURI)
{
	MIME *mime=GetIOMIMEHeader(io);
	const char *szStr=mime_RenderHeap(mime);
	const char *szAddr = NULL;						// Address part of szURI (always starts with '/')
	const char **szNames = NULL;					// Vector of names of parameters
	const char **szValues = NULL;					// Vector of values of parameters
	int nParams=0;									// Number of parameters

	NoteInhibit(1);

	// This is a web request from a workstation so we want to use the environment configured for messages
	// coming from that workstation, not those coming in from the spine.
//	GetEnvironment(_szSenderIp, _nIncomingPort);

	Log("HTTP GET %s", szURI);
	nParams = ParseAddress(szURI, &szAddr, &szNames, &szValues);

	if (!strcasecmp(szAddr, "/")) {
		const char *szMime;
		char szHostname[50];
//		X509 *certPeer = SSL_get_peer_certificate(ssl);
		int nSecs=time(NULL)-_nStartTime;
		int nHours=nSecs/3600;
		int nMins=nSecs/60%60;

		nSecs %= 60;

		gethostname(szHostname, sizeof(szHostname));

		SendHttpHeader(io, 200, NULL, NULL);
		SendHtmlHeader(io);

		MyBIO_puts(io, "<table border=0 bgcolor=#ddddff>");
		BIO_putf(io, "<tr><td width=150>Uptime<td bgcolor=#eeeeff>%d:%02d:%02d", nHours, nMins, nSecs);
		BIO_putf(io, "<tr><td width=150>Server<td bgcolor=#eeeeff>%s on %s", szHostname, _szIncomingIp);
		BIO_putf(io, "<tr><td>Client (you)<td bgcolor=#eeeeff>%s:%d", PeerIp(1), PeerPort(1));
		if (szEnvironment) {
			BIO_putf(io, "<tr><td>Environment<td bgcolor=#eeeeff><a href=\"/setenv\">%s</a>", szEnvironment);
		} else {
			BIO_putf(io, "<tr><td>Environment<td bgcolor=#eeeeff>%s", "Unknown");
		}
		BIO_putf(io, "<tr><td>Server parent process<td bgcolor=#eeeeff>%d", getppid());
		BIO_putf(io, "<tr><td>Server child process<td bgcolor=#eeeeff>%d", getpid());
		BIO_putf(io, "<tr><td>Compiled<td bgcolor=#eeeeff>%s at %s", __DATE__, __TIME__);
//		BIO_putf(io, "<tr><td>Application port<td bgcolor=#eeeeff>%d", nListenPort_int);
//		BIO_putf(io, "<tr><td>TLS/SSL port<td bgcolor=#eeeeff>%d", nListenPort_ext);
//		BIO_putf(io, "<tr><td>Connections on application port<td bgcolor=#eeeeff>%d", _nInternalCount);
//		BIO_putf(io, "<tr><td>Connections on TLS/SSL port<td bgcolor=#eeeeff>%d", _nExternalCount);
		BIO_putf(io, "<tr><td>Files from drop directory<td bgcolor=#eeeeff>%d", _nDroppedCount);
		BIO_putf(io, "<tr><td>Total connections processed<td bgcolor=#eeeeff>%d (<a href=/status>click for details</a>)", _nTotalConnections);
		MyBIO_puts(io, "</table>");

		MyBIO_puts(io, "<hr>");
		MyBIO_puts(io, "Your request was:<xmp>\r\n");
		szMime=mime_RenderHeap(mime);
		MyBIO_puts(io, szMime);
		MyBIO_puts(io, "</xmp>\r\n");
		szDelete(szMime);
	} else if (!strncasecmp(szAddr, "/mtrpc", 6)) {
		SendHttpHeader(io, 200, NULL, NULL);
		SendHtmlHeader(io);
		RpcEntryForm(io, 0, "");
	} else if (!strcasecmp(szAddr, "/status")) {
		int nSecs=time(NULL)-_nStartTime;
		int nHours=nSecs/3600;
		int nMins=nSecs/60%60;
		int nMessages=100;
		const char *szFilter="";
		const char *szParam;
		int i;

		nSecs%=60;

		SendHttpHeader(io, 200, NULL, NULL);
		SendHtmlHeader(io);

		for (i=0;i<nParams;i++) {
			if (!stricmp(szNames[i], "n")) nMessages=atoi(szValues[i]);
			if (!stricmp(szNames[i], "f")) szFilter=szValues[i];
//BIO_putf(io, "('%s'='%s') %d '%s'<br>", szNames[i], szValues[i], nMessages, szFilter);
		}

//BIO_putf(io, "Params='%s', Addr='%s', szParam='%s', szValue='%s'<br>", szParams, szAddr, szParam, szValue);
		BIO_putf(io, "<table><tr><form><td>Display <input name=n value=%d size=4> messages, filtered on <input name=f size=20 value=\"%s\"> <input type=submit value=Display></form></table>", nMessages, szFilter);

		MyBIO_puts(io, "<table width=100% bgcolour=#eeddee>");
		MyBIO_puts(io, "<tr><td valign=top>");
		TableMessageLog(io, nMessages, szFilter);

		MyBIO_puts(io, "<td valign=top>");
//		TableActiveChildren(io);
		MyBIO_puts(io, "</table>");

	} else if (!strncasecmp(szAddr, "/getinteraction/", 16)) {
		const char *szDir=szAddr+16;
		note_t *note=note_LoadMessage(szDir);
		FILE *fp;
		int i;
		const char *szInteractionName;
		const char *szInteractionSection;
		const char *szInteraction = note_FindEntry(note, 'Y');

		szInteractionName = MessageDescription(szInteraction, &szInteractionSection);

		SendHttpHeader(io, 200, NULL, NULL);
		SendHtmlHeader(io);

		BIO_putf(io, "<table width=100%% bgcolor=#0077ff>\r\n");
		BIO_putf(io, "<tr><td align=center><font size=5 color=white>");
		BIO_putf(io, "%s %s from ", szInteractionSection, szInteractionName);
		BIO_putf(io, "%s", note_FindEntry(note, 'H'));
		BIO_putf(io, " on %.2s-%.2s-%.4s", szDir+6, szDir+4, szDir);
		BIO_putf(io, ", %.2s:%.2s:%.2s UTC", szDir+8, szDir+10, szDir+12);
		BIO_putf(io, "</font>\r\n");
		BIO_putf(io, "</table>\r\n");
		BIO_putf(io, "<hr>\r\n");

		BIO_putf(io, "<table width=100%>");

		BIO_putf(io, "<tr><td valign=top>");
		TableNotes(io, note, szDir);
		BIO_putf(io, "<hr>");
		TableNoteMessages(io, note, szDir);

		BIO_putf(io, "<td valign=top>");
		TableNoteLogs(io, note, szDir);

		BIO_putf(io, "</table>");


		note_Delete(note);
	} else if (!strncasecmp(szAddr, "/getmessage/", 12)) {
		const char *szFilename=hprintf(NULL, "%s/%s", szMsgLogDir, szAddr+12);
		FILE *fp=fopen(szFilename, "r");
		char buf[1024];
		int got;
		const char *szExt = strrchr(szAddr, '.');
		const char *szContentType;

		if (szExt) szExt++;
		else szExt="text";

		hprintf(szContentType, "application/%s", szExt);
		SendHttpHeader(io, 200, szContentType, NULL);
		szDelete(szContentType);

		while (got=fread(buf, 1, sizeof(buf), fp))
			MyBIO_write(io, buf, got);
		fclose(fp);
	} else {
		char *szRequest=strdup(szAddr+1);						// command/path1/path2?param1=a&param2=b
		char *szParams=strchr(szRequest, '?');					// ?param1=a&param2=b
		char *szCommand=NULL;									// Command used to execute the script
		char *szScript=NULL;									// Name of script file
		char *szCommandLine=NULL;								// Full command line passed to shell
		char buf[1024];
		FILE *fp = NULL;
		int got;
		char *szPathInfo;
		char *chp;
		const char *szBaseDir = GetBaseDir();

		if (szParams) {
			char *chp=szParams+1;								// param1=a&param2=b

			while (*chp) {
				if (*chp == '&') *chp=' ';
				chp++;
			}
			*szParams++='\0';									// param1=a param2=b
		}

		chp=strchr(szRequest, '/');								// /path1/path2
		if (chp) {
			szPathInfo=hprintf(NULL, "PATH_INFO=%s", chp);
			*chp='\0';
		} else {
			szPathInfo=strdup("PATH_INFO=");
		}
		putenv(szPathInfo);
		chdir(szBaseDir);

		// We'll try php, perl and bourne shell in that order
		if (!szCommand) {
			szDelete(szScript);
			szScript=hprintf(NULL, "%s/docs/%s.php", szBaseDir, szRequest);		// Try it as php
			if (!access(szScript, 1)) {						// Can execute it as php
				szCommand="php";
			}
		}

		if (!szCommand) {
			szDelete(szScript);
			szScript=hprintf(NULL, "%s/docs/%s.pl", szBaseDir, szRequest);		// Try it as perl
			if (!access(szScript, 1)) {					// Can execute it as perl
				szCommand="perl";
			}
		}

		if (!szCommand) {
			szDelete(szScript);
			szScript=hprintf(NULL, "%s/docs/%s.sh", szBaseDir, szRequest);		// Try it as bourne shell
			if (!access(szScript, 1)) {					// Can execute it as bourne shell
				szCommand="sh";
			}
		}

		if (szCommand) {
			szCommandLine = hprintf(NULL, "%s %s %s", szCommand, szScript, szParams);
			fp=popen(szCommandLine, "r");
//			szDelete(szCommandLine);
		}

		if (fp) {
			MyBIO_puts(io, "HTTP/1.1 200 OK\r\n");
//BIO_putf(io, "Content-type: text/html\r\n\r\nCommand line = '%s'<hr>", szCommandLine);
			while (got=fread(buf, 1, sizeof(buf), fp)) {
				MyBIO_write(io, buf, got);
			}
			fclose(fp);
		} else {
			MyBIO_puts(io, "HTTP/1.1 403 Forbidden\r\n");
			MyBIO_puts(io, "Server: Microtest Spider " VERSION "\r\n");
			MyBIO_puts(io, "\r\n");
			MyBIO_puts(io, "You are not allowed to do whatever it was you just tried to do.");
		}
		putenv("PATH_INFO=");
	}

	mime_Delete(mime);

	return 0;
}

int DealWithPUT(BIO *io, const char *szURI)
{
	Log("HTTP PUT %s", szURI);
	NoteInhibit(1);

	return 0;
}

int RogRename(const char *szSrc, const char *szDest)
// Returns	0		All is good
//			1...	Errno
{
	int err;

	err=rename(szSrc, szDest);
	if (err && errno == EXDEV) {					// Different file system, we can deal with that...
		FILE *fpDest, *fpSrc;
		char buf[10240];
		size_t got;

		fpDest=fopen(szDest, "w");					// Create a new file
		if (!fpDest) return -1;						// Failed - can't do it then
		fpSrc=fopen(szSrc, "r");					// Open up the original
		if (!fpSrc) {fclose(fpDest); return -1;}	// Someone is giving us a duff filename?
		while (got=fread(buf, 1, sizeof(buf), fpSrc)) {
			fwrite(buf, 1, got, fpDest);			// Copy it over
		}
		fclose(fpSrc);								// Close them up
		fclose(fpDest);
		if (unlink(szSrc)) {						// Damn - copied it but can't delete the original!
			unlink(szDest);							// If we can't tidy the dest, we're stuffed...
			return -1;
		}
		err=0;										// We did it.
	}

	return err ? errno : 0;
}

int CopyFile(const char *szSrc, const char *szDest)
// Copies szSrc to szDest
// Returns		-1		Could not open szDest
//				-2		Could not open szSrc
//				0		Ok
{
	FILE *fpDest, *fpSrc;
	char buf[10240];
	size_t got;

	fpDest=fopen(szDest, "w");					// Create a new file
	if (!fpDest) return -1;						// Failed - can't do it then
	fpSrc=fopen(szSrc, "r");					// Open up the original
	if (!fpSrc) {fclose(fpDest); return -2;}	// Someone is giving us a duff filename?
	while (got=fread(buf, 1, sizeof(buf), fpSrc)) {
		fwrite(buf, 1, got, fpDest);			// Copy it over
	}
	fclose(fpSrc);								// Close them up
	fclose(fpDest);

	return 0;
}

int ReceiveHTTP(BIO *io, const char *szMethod, const char *szURI, const char *szVersion)
// Dispatcher for all incoming HTTPS messaging
{
	int n;

	Note("S|%s|%d", _szSenderIp, _nSenderPort);
	Note("H|HTTPS on TLS/SSL port (%d)", _nIncomingPort);
	Note("J|%s", InternalId());

	if (!stricmp(szMethod, "GET")) {		n=DealWithGET(io, szURI); }
	else if (!stricmp(szMethod, "PUT")) {	n=DealWithPUT(io, szURI); }
	else if (!stricmp(szMethod, "POST")) {	n=DealWithPOST(io, szURI); }
	else {
		Log("Unrecognised HTTP method: '%s'", szMethod);
		NoteInhibit(1);
		n=0;
	}

	return n;
}

static void ServeRequest(BIO *io)
// Talk to the Client that's calling us
{
	char buf[1024];
	int nGot;					// Bytes got from a read
	int nPut;					// Bytes (or ok indication) from a write
	int nLen;
	char bClosed = 0;			// Socket has closed
	int nLine=0;				// Line number

	nGot=MyBIO_gets(io, buf, sizeof(buf)-1);
	// The spec is very specific here but we'll be lax and allow extra spaces.
	// The spec (RFC 2616) recommends allowing a blank line at the top of the request
	// We don't allow that.
	if (nGot) {
		const char *szMethod = NULL;
		const char *szURI = NULL;
		const char *szVersion = NULL;
		char *szLine=buf;
		char *szSpace;
		char *chp;

		while (isspace(*szLine)) szLine++;
		chp=strchr(szLine, '\n');
		if (chp) *chp='\0';

		szSpace = strchr(szLine, ' ');			// Following method

		if (szSpace) {
			char *chp;
			szMethod=strnappend(NULL, szLine, szSpace-szLine);
			while (*szSpace == ' ') szSpace++;
			chp=szSpace;
			szSpace=strchr(chp, ' ');
			if (szSpace) {
				szURI=strnappend(NULL, chp, szSpace-chp);
			}
			while (*szSpace == ' ') szSpace++;
			szVersion=strdup(szSpace);
		}
		// szMethod, szURI and szVersion should now all be kosher
		if (szMethod && szURI && szVersion) {
			ReceiveHTTP(io, szMethod, szURI, szVersion);
			szDelete(szMethod);
			szDelete(szURI);
			szDelete(szVersion);
		}
	} else {
		Log("Incoming connection didn't say anything");
		NoteInhibit(1);
	}

	MyBIO_flush(io);

	return;
}

int tcp_ListenOn(int nPort)
// Creates an incoming port and listens on it.
// Listen on a TCP port and return a socket
// Returns	0...	Socket number
//			-1		Failed to make the socket (most odd)
//			-2		Couldn't bind (usually means something already has it)
//			-3		Listen failed (also most odd)
{
	int nSock;
	struct sockaddr_in sin;
	int val=1;
	int i;

	if ((nSock=socket(AF_INET,SOCK_STREAM,0))<0) {
		SetError(1001, "Couldn't make socket for port %d (errno = %d)", nPort, errno);
		return -1;
	}

	memset(&sin,0,sizeof(sin));
	sin.sin_addr.s_addr=INADDR_ANY;
	sin.sin_family=AF_INET;
	sin.sin_port=htons(nPort);
	setsockopt(nSock,SOL_SOCKET,SO_REUSEADDR, &val,sizeof(val));

	if (bind(nSock, (struct sockaddr *)&sin, sizeof(sin))>=0) {
		if (listen(nSock, 5)) {
			SetError(1002, "Couldn't listen on socket for port %d (errno = %d)", nPort, errno);
			close(nSock);
			return -3;
		}
		return nSock;
	}

	return -2;
}

int tcp_Connect(const char *szHost, int nPort)
// Creates an outgoing connection to the given host and port
// Returns	0		Failed (0 can't be valid outgoing as it would already have been used for an incoming...!)
//			1...	The socket number
{
	struct hostent *hp;
	struct sockaddr_in addr;
	int nSock;
	time_t nStarted, nFinished;

	memset(&addr,0,sizeof(addr));
	addr.sin_family=AF_INET;
	addr.sin_port=htons(nPort);

	// This call takes 75 seconds if there is no DNS...
	nStarted=time(NULL);
	hp=gethostbyname(szHost);
	nFinished=time(NULL);
	if (nFinished - nStarted > 5) {
		Log("Lookup of '%s' was slow (%d seconds) - DNS Problem?", szHost, nFinished-nStarted);
	}

	if (hp) {
		addr.sin_addr=*(struct in_addr*)hp->h_addr_list[0];
	} else {
		unsigned int ad=inet_addr(szHost);
		addr.sin_addr=*(struct in_addr*)&ad;
	}

	if((nSock=socket(AF_INET,SOCK_STREAM, IPPROTO_TCP))<0) {
		LogError(10, "Couldn't create socket to connect to %s", szHost);
		return 0;
	}

	if(connect(nSock,(struct sockaddr *)&addr, sizeof(addr))<0) {
		LogError(11, "Couldn't connect socket to '%s' (%s)", szHost, inet_ntoa(addr.sin_addr));
		return 0;
	}

	return nSock;
}

int _nHttpStatusCode = 0;
const char *_szHttpStatusText = NULL;

void http_ParseReceivedHeader(const char *szHTTP)
// Parses an HTTP header line, extracting the code and message so that the following
// functions can return them.
// A duff string will set us up with '0, NULL'.
{
	const char *chp;

	chp=strchr(szHTTP, ' ');
	if (chp)
		_nHttpStatusCode = atoi(++chp);
	else
		_nHttpStatusCode = 0;				// Something screwy

	if (chp) chp=strchr(chp, ' ');
	if (chp) {								// Otherwise NULL, which works out fine
		char *chp2;

		++chp;
		chp2=strchr(chp, '\n'); if (chp2) *(char*)chp2='\0';
		chp2=strchr(chp, '\r'); if (chp2) *(char*)chp2='\0';
	}

	strset(&_szHttpStatusText, chp);
}

int http_GetLastStatusCode()				{ return _nHttpStatusCode; }
const char *http_GetLastStatusText()		{ return _szHttpStatusText; }

void SplitEndpoint(const char *szEndpoint, const char **pszProtocol, const char **pszAddress, int *pnPort, const char **pszURI)
// Splits a protocol://address:port/URI strings into bits
// Give NULL pointers for anything you don't want.
// Suitable defaults are given for any missing bits apart from the actual address.
// Protocol="https", URI="/", Port=443.
{
	char *copy=strdup(szEndpoint);
	char *chp;
	const char *szProtocol = NULL;
	const char *szAddress = NULL;
	const char *szURI = NULL;
	int nPort = 0;
	char *szColon, *szSlash;

	szEndpoint = copy;
	chp = strstr(szEndpoint, "://");							// First take the protocol off the front
	if (chp) {
		*chp='\0';
		szProtocol=strdup(szEndpoint);
		szEndpoint=chp+3;
	}

	szColon=strchr(szEndpoint, ':');							// Look for a port number
	szSlash=strchr(szEndpoint, '/');							// Look for a URI
	if (szColon && (!szSlash || szColon < szSlash)) {			// fred.com:123 or fred.com:123/uri
		*szColon='\0';
		szAddress=strdup(szEndpoint);
		nPort=atoi(szColon+1);
		if (szSlash) {											// fred.com:123/uri
			szURI=strdup(szSlash);
		} else {												// fred.com:123
			szURI=strdup("/");
		}
	} else {													// fred.com/uri or fred.com
		if (szSlash) {											// fred.com/uri
			szURI=strdup(szSlash);
			*szSlash='\0';
		} else {												// fred.com
			szURI=strdup("/");
		}
		szAddress=strdup(szEndpoint);
	}

	// Here, szProtocol or nPort may not be set so allow them to default each other or assume https/443
	if (!szProtocol || !nPort) {
		if (!szProtocol) {										// No protocol so default it from port
			if (nPort == 443 || !nPort) {
				szProtocol=strdup("https");						// 443 implies https
			} else {
				szProtocol=strdup("http");
			}
		}
		if (!nPort) {											// Let the port set from the protocol
			if (!stricmp(szProtocol, "http")) {
				nPort=80;
			} else {
				nPort=443;
			}
		}
	}

	szDelete(copy);

	if (pszProtocol) *pszProtocol=szProtocol; else szDelete(szProtocol);
	if (pszAddress) *pszAddress=szAddress; else szDelete(szAddress);
	if (pszURI) *pszURI=szURI; else szDelete(szURI);
	if (pnPort) *pnPort=nPort;
}

int LogSslError(SSL *ssl, int ret)
// Logs the error that occurred.
// Returns	0	It was some miscellaneous error
//			1	Dropped line
//			2	Broken pipe (roughly equivalent to dropping the line)
{
	int nErr2 = SSL_get_error(ssl, ret);
	int nErr3;
	const char *szErr;
	int nResult;

	switch (nErr2) {
	case SSL_ERROR_NONE:				szErr="NONE";	break;
	case SSL_ERROR_SSL:					szErr="SSL"; break;
	case SSL_ERROR_WANT_READ:			szErr="WANT_READ"; break;
	case SSL_ERROR_WANT_WRITE:			szErr="WANT_WRITE"; break;
	case SSL_ERROR_WANT_X509_LOOKUP:	szErr="WANT_X509_LOOKUP"; break;
	case SSL_ERROR_SYSCALL:				szErr="SYSCALL"; break;
	case SSL_ERROR_ZERO_RETURN:			szErr="ZERO_RETURN"; break;
	case SSL_ERROR_WANT_CONNECT:		szErr="WANT_CONNECT"; break;
	case SSL_ERROR_WANT_ACCEPT:			szErr="WANT_ACCEPT"; break;
	default:	szErr="Dunno"; break;
	}

	if (nErr2 == SSL_ERROR_SYSCALL && !ret) {
		nResult=1;								// The far end dropped the line neatly
	} else if (nErr2 == SSL_ERROR_SYSCALL && ret == -1 && errno == 32) {
		nResult=2;								// Broken pipe - the far end broke off mid-protocol?
	} else {
		nResult=0;
		Log("SSL Error ret = %d -> %d \"SSL_ERROR_%s\" (errno = %d)", ret, nErr2, szErr, errno);
	}

	while (nErr3 = ERR_get_error()) {
		Log("SSL: %s", ERR_error_string(nErr3, NULL));
	}

	return nResult;
}

int g_sock = -1;							// Global things relating to the current SSL connection
SSL *g_ssl = NULL;
SSL_CTX *g_ctx = NULL;

BIO *BuildConnection(const char *szAddress, int nPort)
// Builds a connection using SSL if the port number is 443
{
	BIO *io_socket;								// The way SSL talks to the port
	BIO *io_buffer;								// Buffered BIO - the way we talk through the SSL
	int nErr;

	// Create the SSL/TLS connection to the spine
//	Log("Making TCP connection");
	g_sock = tcp_Connect(szAddress, nPort);
	if (!g_sock) {
		SetError(5, "Failed to open TCP/IP connection to %s:%d", szAddress, nPort);
		return NULL;
	}

//	Log("Making socket");
	io_socket=BIO_new_socket(g_sock, BIO_NOCLOSE);
	ioset(io_socket);								// So ioprint() works
	if (!io_socket) {
		SetError(7, "Failed to create new BIO socket");
		return NULL;
	}

	if (nPort == 443 || nPort == 444) {				// 444 to cope with QuickSilva's GP2DRS port usage
//	Log("Creating TLS/SSL context");
		BIO *io_ssl;								// SSL BIO talks directly to SSL

		g_ctx=ctx_New(GetCertificateDir(), PASSWORD);
		// TODO: Make this better and less intrusive!
		if (!g_ctx) {
			SetError(4, "Crypto Config Error: %s", ctx_Error());
			return NULL;
		}

//	Log("Making TLS/SSL connection");
		g_ssl=SSL_new(g_ctx);
		if (!g_ssl) {
			SetError(6, "Failed to setup a new SSL/TLS connection");
			return NULL;
		}

		SSL_set_bio(g_ssl, io_socket, io_socket);					// g_ssl = SSL <-> socket

		nErr=SSL_connect(g_ssl);
		if (nErr <= 0) {
			int nErr2 = SSL_get_error(g_ssl, nErr);
			int nErr3;

			Log("SSL Connection error %d", nErr2);
			while (nErr3 = ERR_get_error()) {
				Log("SSL: %s", ERR_error_string(nErr3, NULL));
			}
			SetError(8, "Error %d(%d) opening SSL/TLS connection to %s:%d", nErr, nErr2, szAddress, nPort);
			return NULL;
		}
// Connect a BIO that we can neatly talk to SSL with
		io_ssl=BIO_new(BIO_f_ssl());
		BIO_set_ssl(io_ssl, g_ssl, BIO_CLOSE);				// io_ssl = g_ssl <-> socket

		io_buffer=BIO_new(BIO_f_buffer());
		BIO_push(io_buffer, io_ssl);						// buffer -> g_ssl <-> socket
	} else {
		g_ssl=NULL;
		g_ctx=NULL;
		io_buffer=BIO_new(BIO_f_buffer());
		BIO_push(io_buffer, io_socket);						// buffer -> connection
	}

	return io_buffer;
}

void AcceptPlainConnection(int fd)
// Using the same protocol as an incoming TLS connection, but without the TLS...
{
	BIO *bio;
	int r;

//	GetEnvironment(_szSenderIp, _nIncomingPort);
	Log("External HTTP connection on %d from %s (assuming environment %s)", _nIncomingPort, _szSenderIp, szEnvironment);

	Note("S|%s|%d", _szSenderIp, _nSenderPort);
	Note("H|External HTTP (%d)", _nIncomingPort);

	bio=BIO_new_socket(fd, BIO_NOCLOSE);
	ioset(bio);								// So ioprint() works

//	RememberEnvironment(_szSenderIp, _nIncomingPort, szEnvironment, 1);	// Assert that this barbeque tastes good...

	ServeRequest(bio);

	shutdown(fd, SHUT_WR);
	close(fd);
//	BIO_close(bio);

	Log("Natural end of external plain connection");

	Exit(0);				// Only a child and we're done
}

void AcceptTlsConnection(int fd)
{
	SSL_CTX *ctx;
	SSL *ssl;
	BIO *sbio;
	int r;
	int nOk;
	BIO *io,*ssl_bio;
	X509 *peer;
	int err;
	const char *szCheck;
	int nMode = 0;								// Caller certificate verification mode

//	GetEnvironment(_szSenderIp, _nIncomingPort);
	Log("TLS connection on %d from %s (assuming environment %s)", _nIncomingPort, _szSenderIp, szEnvironment);

	/* Build our SSL context*/
	ctx=ctx_New(GetCertificateDir(), PASSWORD);
	if (!ctx) {
//		RememberEnvironment(_szSenderIp, _nIncomingPort, szEnvironment, 0);	// Stop liking this environment
		FatalSSL(ctx_Error());
	}
	SSL_CTX_set_session_id_context(ctx, (void*)&s_server_session_id_context, sizeof s_server_session_id_context);

	// Arrange that we ask the remote end for their certificate
	szCheck=config_EnvGetString(szEnvironment, "verify-tls");
	if (!szCheck) szCheck="No";

	switch (toupper(*szCheck)) {
	case 'V': case 'A':							// Verify or Ask
		nMode = SSL_VERIFY_PEER;
		break;
	case 'M':									// Must
		nMode = SSL_VERIFY_PEER | SSL_VERIFY_FAIL_IF_NO_PEER_CERT;
		break;
	case 'O':									// Once
		nMode = SSL_VERIFY_PEER | SSL_VERIFY_CLIENT_ONCE;
		break;
	case 'N':									// None or No
		nMode = SSL_VERIFY_NONE;
		break;
	default:
		Log("WARNING: VERIFY-TLS setting (%s) is not recognised", szCheck);
		nMode = SSL_VERIFY_NONE;
	}

	SSL_CTX_set_verify(ctx,nMode,0);

	Note("S|%s|%d", _szSenderIp, _nSenderPort);
	Note("H|External HTTPS on (%d)", _nIncomingPort);

	ssl=SSL_new(ctx);
	sbio=BIO_new_socket(fd, BIO_NOCLOSE);
	ioset(sbio);								// So ioprint() works
	SSL_set_bio(ssl, sbio, sbio);

	if (((r=SSL_accept(ssl)) <= 0)) {
		int nOk = LogSslError(ssl,r);
		if (!nOk) {
//			RememberEnvironment(_szSenderIp, _nIncomingPort, szEnvironment, 0);	// Stop liking this environment
			FatalSSL("SSL accept error (r=%d, errno=%d)", r, errno);
		} else {
			NoteInhibit(1);
			ctx_Delete(ctx);				// Tidy up
			if (nOk == 1) {
				Log("Calling SSL connection immediately hung up");
			} else {
				Log("Calling SSL connection broke the connection");
			}
			Exit(0);						// Only a child and we're done
		}
	}

//	RememberEnvironment(_szSenderIp, _nIncomingPort, szEnvironment, 1);	// Assert that this barbeque tastes good...

	io=BIO_new(BIO_f_buffer());
	ssl_bio=BIO_new(BIO_f_ssl());
	BIO_set_ssl(ssl_bio,ssl,BIO_CLOSE);
	BIO_push(io,ssl_bio);

//	int nErr = SSL_get_error(ssl, nGot);

	err = SSL_get_verify_result(ssl);
	peer=SSL_get_peer_certificate(ssl);

// Here is where we need to check the name returned below against the expected CN of the caller.
	if (peer) {
		char buf[256];

		X509_NAME_get_text_by_NID(X509_get_subject_name(peer), NID_commonName, buf, sizeof(buf));
		Log("Peer identified as '%s'", buf);

//		X509_NAME_oneline(X509_get_subject_name(peer), buf, 256);
//		Log("Issuer of certificate was '%s'", buf);

		X509_free(peer);
	} else {
		if (nMode & SSL_VERIFY_PEER) Log("Caller refused to identify themselves");
	}

	ServeRequest(io);

	// Ok, we're done so we'll close the socket now
	nOk=SSL_shutdown(ssl);
	if(!nOk){
		// If we called SSL_shutdown() first then we always get return value of '0'.
		// In this case, try again, but first send a TCP FIN to trigger the other side's
		// close_notify.
		shutdown(fd, SHUT_WR);
		nOk=SSL_shutdown(ssl);
	}

	switch(nOk){
		case 1:		break;		// Ok
		case 0:		break;		// Tried twice to shut down, call it ok.
		case -1:
		default: FatalSSL("Shutdown failed (code=%d)", nOk);
	}

	SSL_free(ssl);

	close(fd);

	ctx_Delete(ctx);				// Tidy up

	Log("Natural end of external connection");

	Exit(0);				// Only a child and we're done
}

void SetIds(const char *szUser)
// Sets the effective user and group IDs to those of the given user
{
	struct passwd *pw = getpwnam(szUser);

	if (pw) {
		int nErr;

		nErr = setgid(pw->pw_gid);
		if (nErr) Log("Error %d setting group id of %d (to match %s)", nErr, pw->pw_gid, szUser);
		nErr = setuid(pw->pw_uid);
		if (nErr) Log("Error %d setting user id of %d (to match %s)", nErr, pw->pw_uid, szUser);
	} else {
		Log("Failed to set uid/gid to those of '%s'", szUser);
	}
}

rogxml *Greeting(const char *szIp, const char *szDescr)
// Generates a greeting XML message to send over the local connection
{
	rogxml *rxGreeting;
	rogxml *rx;
	int day, mon, year, hour, min, sec;
	time_t now=time(NULL);
	struct tm *tm = gmtime(&now);
	const char szMon[]="JanFebMarAprMayJunJulAugSepOctNovDec";
	char szHostname[255];

	for (mon=0;mon<12;mon++) if (!memcmp(szMon+mon*3, __DATE__, 3)) break;
	mon++;
	day=atoi(__DATE__+4);
	year=atoi(__DATE__+7);
	hour=atoi(__TIME__);
	min=atoi(__TIME__+3);
	sec=atoi(__TIME__+6);

	gethostname(szHostname, sizeof(szHostname));

	// Create and send the greeting message
	rxGreeting = rogxml_NewRoot();
	rogxml_SetLinefeedString("\r\n");
	rogxml_SetIndentString("  ");

	rxGreeting=rogxml_AddChild(rxGreeting, "SPIDER-Hello");
	rogxml_SetAttr(rxGreeting, "version", VERSION);
	rogxml_SetAttr(rxGreeting, "host", szHostname);
	rogxml_SetAttrf(rxGreeting, "compiled", "%04d%02d%02d%02d%02d%02d", year, mon, day, hour, min, sec);
	rogxml_AddTextChildf(rxGreeting, "servertime",
			"%04d-%02d-%02d %02d:%02d:%02d",
			tm->tm_year+1900, tm->tm_mon+1, tm->tm_mday,
			tm->tm_hour, tm->tm_min, tm->tm_sec);
	rx=rogxml_AddTextChild(rxGreeting, "peer", szDescr);
	rogxml_AddAttr(rx, "ip", szIp);

	return rxGreeting;
}

rogxml *PutXmlIntoDropDir(rogxml *rx, const char *szFilename)
// Create a file with the XML in the drop directory, setting the modify time from 'delay' attribute if there is one
// If the filename is provided then that is used, otherwise we'll make one up
// Any file of the same name will be over-written
// Returns	An Ack message suitable for returning to the user or an xml Error
{
	const char *szDelay = rogxml_GetAttr(rx, "delay");
	const char *szGuid;
	const char *szTmp;
	const char *szDest;
	time_t tDelay=0;									// Default to not timestamping
	time_t now=time(NULL);
	rogxml *rxAck;

	if (szDelay) {
		const char *chp;
		int bNumeric=1;

		for (chp=szDelay;*chp;chp++) {					// Check if delay is purely numeric
			if (!isdigit(*chp)) {
				bNumeric=0;
				break;
			}
		}
		if (bNumeric) {
			tDelay=time(NULL)+atol(szDelay);
		} else {
			tDelay=DecodeTimeStamp(szDelay);
			if (!tDelay) {
				return rogxml_NewError(111, "Delay time (%s) not understood", szDelay);
			}
		}
	}

	if (!strcmp(rogxml_GetLocalName(rx), "SPIDER-Package")) {
		if (szEnvironment) {
			rogxml_SetAttr(rx, "environment", szEnvironment);
		}
	}

	if (szFilename) {									// We've been given a name
		const char *szDot = strrchr(szFilename, '.');
		if (!szDot) {									// No extension, odd
			szGuid=strdup(szFilename);
		} else {
			szGuid=strnappend(NULL, szFilename, szDot-szFilename);
		}
	} else {
		szGuid = guid_ToText(NULL);						// Choose a random name
	}
	szTmp = hprintf(NULL, "%s/%s.dropping", szOutDir, szGuid);
	szDest = hprintf(NULL, "%s/%s.xml", szOutDir, szGuid);

	Log("Writing file as %s.xml", szGuid);
	rogxml_WriteFile(rx, szTmp);
	if (tDelay) {										// We want to post-date the file
		struct utimbuf utb;

		utb.actime=now;
		utb.modtime=tDelay;
		utime(szTmp, &utb);
		Log("Delaying file until %s GMT", TimeStamp(tDelay));
	}

	unlink(szDest);					// Get rid of any previous copy
	if (rename(szTmp, szDest)) {	// Renamed .xml to .tmp ok
		Log("Errno=%d writing %s", errno, szDest);
		return rogxml_NewError(110, "Failed to rename file in drop dir");
	}

	rxAck = AckMessage(tDelay ? "delayed" : "immediate", szGuid, NULL, NULL);
	if (tDelay) {
		rogxml_SetAttr(rxAck, "due", TimeStamp(tDelay));
	}

	szDelete(szTmp);
	szDelete(szDest);
	szDelete(szGuid);

	return rxAck;
}

rogxml *SPIDERRPCFunction(rogxml *rxRpc)
// Handles the NEW style RPC with a _function attribute.
// Note there is a subtle side-effect in here...  If szRpcError is non-NULL on exit, the content is written to
// the log AFTER the result is returned.  This should be the stderr of the executed binary.
{
	rogxml *rx = NULL;
	const char *szFunction;
	const char *szBinary;
	const char *stdin_buf = NULL;
	HBUF	*BufStdout = NULL;				// Incoming buffers for stdout and stderr
	HBUF	*BufStderr = NULL;
	rogxml *rxResultSet = rogxml_NewElement(NULL,"SPIDER-RPC-Result");
	int retval;
	pid_t pid;
	int fdin[2];							// Pipe for stdin
	int fdout[2];							// Pipe for stdout
	int fderr[2];							// Pipe for stderr
	const char **args;						// Program arguments passed through
	const char *szError=NULL;				// Internally generated prefix to stderr if we can't read stdout
	int nErrno = 0;							// Error number tacked onto the result

	szFunction = strdup(rogxml_GetAttr(rxRpc, "_function"));
	if (!szFunction || !*szFunction) {		// We should only get here if it's defined but it may be blank...
		return ErrorMessage(501, 1, "No _function attribute provided");
	}

	// Take the function component by component and look for a binary
	szBinary=hprintf(NULL, "%s/rpc", GetBaseDir());
	const char *chp=szFunction;

	for (;;) {
		const char *next;
		struct stat st;

		if (!*chp || *chp=='.') return rogxml_NewError(502, "Blank component in function (%s)", szFunction);
		next = strchr(chp, '.');
		if (!next) next=chp+strlen(chp);						// Last component
		szBinary=hprintf(szBinary, "/%.*s", next-chp, chp);			// Add it to our path
		int err = stat(szBinary, &st);

		if (err && errno == ENOENT)
			return rogxml_NewError(503, "Function component not found at '%.*s' (%s)",
					next-szFunction, szFunction, szBinary);

		if (st.st_mode & S_IFREG) break;							// We're there, worry about executability later

		if (!(st.st_mode & S_IFDIR))
			return rogxml_NewError(504, "Strange file entry found at '%s'", szBinary);

		if (!*next)
			return rogxml_NewError(505, "Incomplete function '%s'", szFunction);	// Final component is dir

		chp=next+1;												// Move on to next component
	}

	if (access( szBinary, R_OK|X_OK)) return rogxml_NewError(506, "Function '%s' not executable (at %s)", szFunction, szBinary);

	// Build the argument list, which looks as if the rpc is called as:
	// /usr/mt/spider/rpc/fred _function=fred attr1=whatever attr2=whatever
	// Where 'attr1' etc. are all attributes passed in the root element

	int nArgs=0;												// Count of arguments
	rogxml *rxAttr;
	for (rxAttr=rogxml_FindFirstAttribute(rxRpc);rxAttr;rxAttr=rogxml_FindNextSibling(rxAttr)) {
		nArgs++;
	}

	args = NEW(const char *, nArgs+3);				// +2 is program, possibly RPC_CLIENTIP and NULL
	args[0]=strdup(szBinary);
	int nArg=1;

	for (rxAttr=rogxml_FindFirstAttribute(rxRpc);rxAttr;rxAttr=rogxml_FindNextSibling(rxAttr)) {
		const char *szName = rogxml_GetLocalName(rxAttr);
		if (strcmp(szName, "RPC_CLIENTIP"))
			args[nArg++]=hprintf(NULL, "%s=%s", szName, rogxml_GetValue(rxAttr));
	}
	args[nArg++]=hprintf(NULL, "RPC_CLIENTIP=%s", _szSenderIp);
	args[nArg]=NULL;

	// Look for contained elements that we currently support (just "input")
	for(rx = rogxml_FindFirstChild(rxRpc); rx != NULL; rx = rogxml_FindNextSibling(rx) ) {
		const char *name = rogxml_GetLocalName(rx);
		if (!strcmp( name, "input" )) {
			if (stdin_buf) return rogxml_NewError(507, "Multiple input elements are not allowed");
			rogxml *rxWalk = rogxml_FindFirstChild(rx);		// Want to walk through all children, rendering them (1.04)

			while (rxWalk) {
				if (rogxml_IsElement(rxWalk)) {
					stdin_buf = strappend(stdin_buf, rogxml_ToText(rxWalk));	// element so render it
				} else {
					stdin_buf = strappend(stdin_buf, rogxml_GetValue(rxWalk));	// Text child so need it verbatim
				}

				rxWalk = rogxml_FindNextSibling(rxWalk);
			}
//			stdin_buf = rogxml_GetValue(rx);		// Change to rogxml_ToText(rx) for v1.02
//			stdin_buf = rogxml_ToText(rx);		// Change to rogxml_ToText(rx) for v1.02
		}
	}

	// Create three pipes for stdin, stdout and stderr
	if( pipe(fdin) == -1 || pipe(fdout) == -1 || pipe(fderr) == -1 ) {
		const char* err = strerror(errno);
		return rogxml_NewError(508, "Error %d creating pipe: %s", errno, err);
	}

	EnvSet("SPIDER_VERSION", VERSION);
	EnvSet("SPIDER_BASEDIR", GetBaseDir());
	EnvSet("SPIDER_SERVER", argv0);

	EnvSet("RPC_BASEDIR", GetBaseDir());

	if (!(pid = fork())) {								// Child process
		close(fdin[1]);									// Close un-used pipe ends
		close(fdout[0]);
		close(fderr[0]);

		// Map STDIN, STDOUT and STERRR to the pipe ends
		if (dup2(fdin[0], STDIN_FILENO) == -1) return rogxml_NewError(509, "Error %d piping stdin", errno);
		if (dup2(fdout[1], STDOUT_FILENO) == -1) return rogxml_NewError(509, "Error %d piping stdout", errno);
		if (dup2(fderr[1], STDERR_FILENO) == -1) return rogxml_NewError(509, "Error %d piping stderr", errno);

		close(fdin[0]);									// Close duplicated pipe ends
		close(fdout[1]);
		close(fderr[1]);

		umask(02);										// Set a sensitive and caring environment for
		SetIds("pm1");									// the API, which acts as user pm1

		Log("Executing RPC command: %s", szBinary);
		if (execv(szBinary, (char * const *)args) == -1) {
			char* err = strerror(errno);
			return rogxml_NewError(510, "Error %d (%s) running RPC process: %s", errno, err, szBinary);
		}
	}

	ssize_t r = 0, w = 0;
	int status = 0;
	struct pollfd fds[2];

	close(fdin[0]);										// Close unused pipe-ends
	close(fdout[1]);
	close(fderr[1]);

	fds[0].fd = fdout[0];
	fds[1].fd = fderr[0];
	/* PORTABILITY ISSUE */
	/* Checking for EOF on a pipe is done with the POLLHUP flag on UnixWare
	   and Linux, this is not always true on other systems */
	fds[0].events = POLLIN | POLLHUP;
	fds[1].events = POLLIN | POLLHUP;

	/* Write input to child stdin */
	if (stdin_buf) {
		int written;

		do {
			written = write( fdin[1], stdin_buf + w, strlen(stdin_buf) - w );
			if (written == -1) return rogxml_NewError(511, "Error %d (%s) writing to RPC stdin", errno, strerror(errno));
			w += written;
		} while( written > 0 && w != strlen(stdin_buf) );
	}
	close( fdin[1] );

	BufStdout= hbuf_New();										// Buffers to hold stdout and stderr
	BufStderr= hbuf_New();

	/* read all out put until pipe closes */
	int pollval;
	while ((pollval = poll( fds, 2, 1000 )) >= 0) {				// The 1000 is 1000ms
		char buf[1024];

		if( fds[0].revents & POLLIN ) {							/* Read RPC stdout */
			r = read( fds[0].fd, buf, sizeof(buf));				// Read what we can
			hbuf_AddBuffer(BufStdout, r, buf);					// Add it to the buffer
			if( fds[0].revents & POLLHUP ) {					// Other program terminated
				while (r) {										// Suck the buffer clean
					r = read( fds[0].fd, buf, sizeof(buf));
					hbuf_AddBuffer(BufStdout, r, buf);
				}
			}
		}

		if( fds[1].revents & POLLIN ) {							/* Read RPC stderr */
			r = read( fds[1].fd, buf, sizeof(buf));				// Read what we can
			hbuf_AddBuffer(BufStderr, r, buf);					// Add it to the buffer
			if( fds[1].revents & POLLHUP ) {					// Other program terminated
				while (r) {										// Suck the buffer clean
					r = read( fds[1].fd, buf, sizeof(buf));
					hbuf_AddBuffer(BufStderr, r, buf);
				}
			}
		}

		if( fds[0].revents & POLLHUP ) {						/* Close RPC stdout */
			fds[0].fd = -1;
			break;												/* if stdout closes, we're done */
		}

		if( fds[1].revents & POLLHUP ) {						/* Close RPC stderr */
			fds[1].fd = -1;
		}
	}

	if (pollval == -1) return rogxml_NewError(512, "Error %d (%s) polling RPC", errno, strerror(errno));

	if (waitpid( pid, &status, 0 ) == -1 ) {					// Await termination status of child
		return rogxml_NewError(513, "Error %d (%s) waiting for RPC (%d) to finish", errno, strerror(errno), pid);
	}

	/* package stderr */
	int nStderrLen = hbuf_GetLength(BufStderr);						// See if we had any stderr
	if (nStderrLen) {
		hbuf_AddChar(BufStderr, 0);									// Terminate the buffer
		const char * buf = hbuf_ReleaseBuffer(BufStderr);			// Get the buffer

//Log("Err len = %d: %s", nStderrLen, buf);
		Note("M|stderr.txt|Error output from RPC");
		if (szRpcError) {											// Prepend any existing error message
			szRpcError = strappend(szRpcError, buf);
			szDelete(buf);
		} else {
			szRpcError = buf;
		}
	}
	hbuf_Delete(BufStderr);

	if (!WIFEXITED(status)) {									// Non-standard exit from RPC binary
		if (WIFSIGNALED(status)) {								// Someone killed the child (may be it errored)
			return rogxml_NewError(514, "RPC %s terminated with SIGNAL %d", szBinary, WTERMSIG(status));
		} else {
			return rogxml_NewError(515, "RPC %s exited oddly", szBinary);
		}
	}

	retval = WEXITSTATUS(status);
	Log("RPC call exited with status = %d", retval);
	if (retval > 1 && retval < 10)
		return rogxml_NewError(516, "Invalid return code (%d) from RPC '%s' (must not be 2..9)", retval, szFunction);
	if (retval == 1) {											// Indicates error returned from binary
		nErrno=500;
		szError=hprintf(NULL, "System error returned by RPC process '%s'", szFunction);
	}

	// Stdout might contain a number of results and/or a number of errors, or something non-XML
	// This is where we interpret that stuff.
	int nStdoutLen = hbuf_GetLength(BufStdout);
Log("We have stdout of length %d", nStdoutLen);
	if (nStdoutLen) {
		hbuf_AddChar(BufStdout, 0);									// Terminate the buffer
		const char * buf = hbuf_ReleaseBuffer(BufStdout);			// Get the buffer
		const char *next=SkipSpaces(buf);							// To allow reading of multiple elements
		rogxml *rxErrors = rogxml_NewElement(NULL, "errors");		// Element to hang errors from
		rogxml *rxResult = rogxml_NewElement(NULL, "result");		// Element to hang results from

NoteMessage(buf, -1, "rpc-out2", "doc", "Hello, I'm a description");

		while (*next) {
			rogxml *rx=rogxml_FromText(next);						// Try and interpret it as XML

			if (rx) {
				if (rogxml_ErrorNo(rx)) {								// Some duff XML from the binary
					Log("Bad XML from RPC: %s", rogxml_ErrorText(rx));
					szRpcError=hprintf(NULL, "Bad XML in stdout: %s\n---- Stdout from here\n%s\n---- Stderr from here\n", rogxml_ErrorText(rx), buf);
					retval=1;
					nErrno=517;

					rogxml *rx=rogxml_NewElement(NULL, "error");		// Prepend to any other errors
					rogxml_SetAttr(rx, "source", "SPIDER");
					rogxml_AddTextf(rx, "Invalid XML returned from RPC '%s' (retval was %d)", szFunction, retval);
					rogxml_LinkChild(rxErrors, rx);
					break;
				}

				const char *szName = rogxml_GetLocalName(rx);

				if (!strcmp(szName, "error")) {						// Child is returning an error
					if (!retval) {									// Returning error elements on no error...
						retval=1;
						nErrno=518;
						rogxml *rx=rogxml_NewElement(NULL, "error");		// Prepend to any other errors
						rogxml_SetAttr(rx, "source", "SPIDER");
						rogxml_AddTextf(rx, "Undetected errors within RPC '%s'", szFunction);
						rogxml_LinkChild(rxErrors, rx);
					}
					rogxml_LinkChild(rxErrors, rx);
					rx=NULL;
					if (nErrno == 500) {							// Forget our own default error
						szDelete(szError);
						szError=NULL;
					}
				} else {
					rogxml_LinkChild(rxResult, rx);					// Link it in
				}
			}

			next = SkipSpaces(rogxml_GetNextText());
		}

		if (rogxml_FindFirstChild(rxResult)) {							// Add results if we have any
			rogxml_LinkChild(rxResultSet, rxResult);
		} else {
			rogxml_Delete(rxResult);									// Otherwise drop the element
		}

		for (;;) {														// Add any error elements
			rogxml *rx = rogxml_FindFirstChild(rxErrors);

			if (rx) {
				rogxml_LinkChild(rxResultSet, rx);
			} else {
				break;
			}
		}
		rogxml_Delete(rxErrors);

		szDelete(buf);
	}
	hbuf_Delete(BufStdout);

	if (szError) {											// We have our own error we'd like to add
		rogxml *rx=rogxml_NewElement(NULL, "error");		// Prepend to any other errors
		rogxml_SetAttr(rx, "source", "SPIDER");
		rogxml_AddText(rx, szError);
		rogxml_LinkChild(rxResultSet, rx);
	}

	if (retval == 0 || retval >= 10) {
		rogxml_SetAttrInt(rxResultSet, "status", retval ? 2 : 0);		// Always return 2 for a business error
		if (retval >= 10) rogxml_SetAttrInt(rxResultSet, "error", retval);	// Return the actual exit code here
	} else {
		rogxml_SetAttrInt(rxResultSet, "status", retval);
		if (nErrno) rogxml_SetAttrInt(rxResultSet, "error", nErrno);
	}

	return rxResultSet;
}

/**
 * Handles an SPIDER-rpc message
 * Execute the nominated script/program and return the stdout
 */
rogxml *SPIDERRpcName(rogxml *rxRpc)
// Old style RPC handling with the name attribute
{
	rogxml *rx = NULL;
	rogxml *xmlErr = NULL;
	char   *pgname = NULL;
	char   *basepgname;
	const char *baseDir;
	const char *param[128]; /* max 128 parameters */
	const char *stdin_buf = NULL;
	HBUF	*BufStdout = NULL;				// Incoming buffers for stdout and stderr
	HBUF	*BufStderr = NULL;
	rogxml *rxResultSet = rogxml_NewElement(NULL,"SPIDER-RPC-Result");
	int i, retval;
	pid_t pid;
	int  fd1[2]; /* stdin */
	int  fd2[2]; /* stdout */
	int  fd3[2]; /* stderr */

	/* initialise the array of parameters */
	memset(param,0,sizeof(param));

	/* Retrieve Name attribute */
	basepgname = strdup(rogxml_GetAttr(rxRpc, "name"));
	if( basepgname == NULL ) {
		/* Error getting "name" attribute */
		return ErrorMessage(501, 1, "No procedure name");
	}
	/* Parse the name space to find the location of the application */
	for( i = 0; basepgname[i] != NULL; ++i ) {
		if( basepgname[i] == '.' )
			basepgname[i] = '/';
	}

	baseDir = GetBaseDir();
	pgname  = (char*)malloc(strlen(basepgname)+strlen(baseDir)+strlen("/rpc/")+1);
	sprintf( pgname, "%s/rpc/%s", baseDir, basepgname );
	param[0] = strdup( pgname );

	if( access( pgname, R_OK|X_OK ) != 0 )
	{	/* error checking file */
		rogxml* err = ErrorMessage(502, 1, "Procedure '%s' not known", pgname);
		// cleanup
		free(pgname);
		free(basepgname);
		for(i=0; param[i] != NULL; ++i ) {
			free( (void*)param[i] );
		}
		return err;
	}

	/* Build parameter list */
	for( rx = rogxml_FindFirstChild(rxRpc), i=1; rx != NULL; rx = rogxml_FindNextSibling(rx) ) {
		const char *name = rogxml_GetLocalName(rx);
		if( strcmp( name, "p" ) == 0 ) {
			param[i++] = rogxml_GetValue(rx);
		}
		else if( strcmp( name, "stdin" ) == 0 ) {
			/* extract stdin data */
			stdin_buf = rogxml_ToText(rx);			// v1.02
		}
		else {
			/* unknown element - ignore */
		}
	}

	/* Create Pipe */
	if( pipe(fd1) == -1 || pipe(fd2) == -1 || pipe(fd3) == -1 ) {
		char* err = strerror(errno);
		Log("Error creating pipe: %s", err);
		return ErrorMessage(503, 1, err);
	}

	if( (pid = fork()) == 0 ) {
		/* Child Process */

		/* Close unused pipe-ends */
		close( fd1[1] );
		close( fd2[0] );
		close( fd3[0] );

		/* Map STDIN and STDOUT to the pipe ends and execute */
		if( fd1[0] != STDIN_FILENO ) {
			if( dup2( fd1[0], STDIN_FILENO) == -1 ) {
				char* err = strerror(errno);
				Log("Error copying pipe: %s", err);
				return ErrorMessage(504, 1, err);
			}
			close(fd1[0]);
		}
		if( fd2[1] != STDOUT_FILENO ) {
			if( dup2( fd2[1], STDOUT_FILENO) == -1 ) {
				char* err = strerror(errno);
				Log("Error copying pipe: %s", err);
				return ErrorMessage(504, 1, err);
			}
			close(fd2[1]);
		}
		if( fd3[1] != STDERR_FILENO ) {
			if( dup2( fd3[1], STDERR_FILENO) == -1 ) {
				char* err = strerror(errno);
				Log("Error copying pipe: %s", err);
				return ErrorMessage(504, 1, err);
			}
			close(fd3[1]);
		}

		// Arrange that all attributes to the RPC element appear as environment variables in the form
		// RPCNAME=value (name is always capitalised)
		rogxml *rxAttr;
		for (rxAttr=rogxml_FindFirstAttribute(rxRpc);rxAttr;rxAttr=rogxml_FindNextSibling(rxAttr)) {
			char *szName = strdup(rogxml_GetLocalName(rxAttr));
			strupr(szName);
			const char *szTmp = hprintf(NULL, "RPC%s=%s", szName, rogxml_GetValue(rxAttr));	// Acceptable leak
			putenv((char*)szTmp);
			szDelete(szName);
		}

		Log("Executing RPC command: %s", pgname );
		if( execv( pgname, (char * const *)param ) == -1 ) {
			char* err = strerror(errno);
			Log("Error running process: %s", err);
			return ErrorMessage(505, 1, err);
		}
	}
	else {
		/* Parent Process */
		ssize_t r = 0, w = 0;
		int status = 0;
		struct pollfd fds[2];

		/* close unused pipe-ends */
		close( fd1[0] );
		close( fd2[1] );
		close( fd3[1] );

		fds[0].fd = fd2[0];
		fds[1].fd = fd3[0];
		/* PORTABILITY ISSUE */
		/* Checking for EOF on a pipe is done with the POLLHUP flag on UnixWare
		   and Linux, this is not always true on other systems */
		fds[0].events = POLLIN | POLLHUP;
		fds[1].events = POLLIN | POLLHUP;

		/* Write input to child stdin */
		if( stdin_buf != NULL ) {
			do {
				retval = write( fd1[1], stdin_buf + w, strlen(stdin_buf) - w );
				if( retval == -1 ) {
					Log("Error writing to RPC stdin: %s", strerror(errno));
					break;
				}
				w += retval;
			} while( retval > 0 && w != strlen(stdin_buf) );
		}
		close( fd1[1] );

		BufStdout= hbuf_New();
		BufStderr= hbuf_New();

		/* read all out put until pipe closes */
		while( (retval = poll( fds, 2, 1000 )) >= 0 ) {				// The 1000 is 1000ms
			char buf[1024];

			if( fds[0].revents & POLLIN ) {							/* Read RPC stdout */
				r = read( fds[0].fd, buf, sizeof(buf));				// Read what we can
				hbuf_AddBuffer(BufStdout, r, buf);					// Add it to the buffer
				if( fds[0].revents & POLLHUP ) {					// Other program terminated
					while (r) {										// Suck the buffer clean
						r = read( fds[0].fd, buf, sizeof(buf));
						hbuf_AddBuffer(BufStdout, r, buf);
					}
				}
			}

			if( fds[1].revents & POLLIN ) {							/* Read RPC stderr */
				r = read( fds[1].fd, buf, sizeof(buf));				// Read what we can
				hbuf_AddBuffer(BufStderr, r, buf);					// Add it to the buffer
				if( fds[1].revents & POLLHUP ) {					// Other program terminated
					while (r) {										// Suck the buffer clean
						r = read( fds[1].fd, buf, sizeof(buf));
						hbuf_AddBuffer(BufStderr, r, buf);
					}
				}
			}

			if( fds[0].revents & POLLHUP ) {						/* Close RPC stdout */
				fds[0].fd = -1;
				break;												/* if stdout closes, we're done */
			}

			if( fds[1].revents & POLLHUP ) {						/* Close RPC stderr */
				fds[1].fd = -1;
			}
		}
		if( retval == 0 ) {
			Log("Warning: poll() timed out.");
		}
		if( retval == -1 ) {
			Log("Error reading from RPC: %s", strerror(errno));
		}

		/* All pipes are closed, wait to prevent zombie process */
		/* Wait for child process to end */
		if( waitpid( pid, &status, 0 ) == -1 ) {
			/* wait error */
			Log("Error waiting for RPC to finish: %s", strerror(errno));
		}

		if( WIFEXITED(status) ) {
			/* child process exited */
			int retval = WEXITSTATUS(status);
			rogxml_SetAttrInt(rxResultSet,"result",retval);
			Log("RPC call exited normally (exit code = %d)", retval);
		}
		else if( WIFSIGNALED(status) ) {
			/* child process killed by signal */
			rogxml_SetAttrInt(rxResultSet,"termsig", WTERMSIG(status));
			Log("RPC killed with kill -%d", WTERMSIG(status));
		}
		else {
			/* unknown exit reason */
			Log("RPC exited with unknown status");
		}

	}
	Log("Tidying up RPC");

	/* package stdout */
	int nStdoutLen = hbuf_GetLength(BufStdout);
	if (nStdoutLen) {
		hbuf_AddChar(BufStdout, 0);									// Terminate the buffer
		const char * buf = hbuf_ReleaseBuffer(BufStdout);			// Get the buffer

		rogxml *rx=rogxml_FromText(buf);							// Try and interpret it as XML
		if (!rogxml_ErrorNo(rx)) {									// Yay, XML it is then
			rogxml *rxStdout = rogxml_AddChild( rxResultSet, "stdout");
			rogxml_LinkChild(rxStdout, rx);
			Log("Added XML stdout (size=%d)", nStdoutLen);
		} else {													// Just text so add it as CDATA
			rogxml_AddCDataChild( rxResultSet, "stdout", buf );
			Log("Added CDATA stdout (size=%d)", nStdoutLen);
			rogxml_Delete(rx);
		}
	}
	hbuf_Delete(BufStdout);

	/* package stderr */
	int nStderrLen = hbuf_GetLength(BufStderr);						// See if we had any stderr
	if (nStderrLen) {
		hbuf_AddChar(BufStderr, 0);									// Terminate the buffer
		const char * buf = hbuf_ReleaseBuffer(BufStderr);			// Get the buffer
		xmlErr = rogxml_AddCDataChild( rxResultSet, "stderr", buf);	// Always treat stderr as CDATA
		Log("Added CDATA stderr (size=%d)", nStderrLen);
	}
	hbuf_Delete(BufStderr);

	/* cleanup */
	free(pgname);
	free(basepgname);
	for(i=0; param[i] != NULL; ++i ) {
		free( (void*)param[i] );
	}

	return rxResultSet;
}

int QueueProcess(const char *szProcess, SSMAP *ssParams)
// Queues an external process with the parameters given
// Returns	0		All went well
//			1...	Error
{
	const char *szFilename = hprintf(NULL, "%s/todo/%s", GetBaseDir(), InternalId());
	const char *szTmp = hprintf(NULL, "%s.tmp", szFilename);
	const char *szTodo = hprintf(NULL, "%s.todo", szFilename);
	FILE *fp;
	int nResult=0;

	fp=fopen(szTmp, "w");
	if (fp) {
		const char *szKey, *szValue;
		int nErr;

		Log("Queuing process %s (%s)", szProcess, szTodo);
		Log("Environment = %s", szEnvironment);

		fprintf(fp, "Process=%s\n", szProcess);
		fprintf(fp, "Environment=%s\n", szEnvironment);
		ssmap_Reset(ssParams);
		while (ssmap_GetNextEntry(ssParams, &szKey, &szValue)) {	// Convert the map into a string
			fprintf(fp, "param-%s=", szKey);
			fprintf(fp, "%s\n", szValue);					// Needs encoding if funny chars
			Log("Parameter %s = %s", szKey, szValue);
		}
		fclose(fp);
		nErr=RogRename(szTmp, szTodo);
		if (nErr) {
			Log("Error %d renaming '%s' to '%s'", nErr, szTmp, szTodo);
			nResult=2;
		}
	} else {
		Log("Failed to create file %s", szTmp);
		nResult=1;
	}

	szDelete(szTodo);
	szDelete(szTmp);
	szDelete(szFilename);

	return nResult;
}

rogxml *SPIDERSystemError(int nErr, const char *szErr)
// Create an RPC system error lump with the given error number and text
{
	rogxml *rxResult = rogxml_NewElement(NULL, "SPIDER-RPC-Result");
	rogxml_SetAttr(rxResult, "status", "1");					// System error
	rogxml_SetAttrInt(rxResult, "error", nErr);					// Error number
	rogxml *rxError = rogxml_AddTextChild(rxResult, "error", szErr);
	rogxml_SetAttr(rxError, "source", "SPIDER");

	return rxResult;
}

rogxml *SPIDERRpc(rogxml *rxRpc)
// Dual purpose rpc handling.  If there is a '_function' attribute then we're using the new style
// argument passing and return mechanism, if instead there's a 'name' attribute then we're using
// the old one, if there neither then it's an error.
{
	const char *function = rogxml_GetAttr(rxRpc, "_function");
	rogxml *rxRpcResult = NULL;

	if (function) {									// New style call with _function
		Log("SPIDER-RPC Function=%s", function);
		rxRpcResult=SPIDERRPCFunction(rxRpc);
		NoteMessageXML(rxRpcResult, "rpc-out", "Raw RPC result", 1);

		int nErr = rogxml_ErrorNo(rxRpcResult);

		Note("Z|%s", function);
		if (nErr) {						// We've returned an error, which will be a system error
			const char *szErr = rogxml_ErrorText(rxRpcResult);

			Log("RPC Error %d: %s", nErr, szErr);
			rogxml *rxResult=SPIDERSystemError(nErr, szErr);
			rogxml_Delete(rxRpcResult);
			rxRpcResult=rxResult;
		}

		if (szRpcError) {
			rogxml_SetAttr(rxRpcResult, "errorlog", NoteDirSuffix());
		}
	} else {
		const char *name = rogxml_GetAttr(rxRpc, "name");
		if (name) {
			Log("SPIDER-RPC Name=%s", name);
			rxRpcResult = SPIDERRpcName(rxRpc);
			NoteMessageXML(rxRpcResult, "rpc-out", "Raw RPC result", 1);
		} else {
			rxRpcResult = rogxml_NewError(101, "RPC call must include either _function or name attribute");
		}
	}

	if (!_bNoteInhibit) {
		NoteRpcError();					// Stderr from the RPC is held in a global var, logged away in this function
	}

	return rxRpcResult;
}

int DealWithPOST(BIO *io, const char *szURI)
// Post has come in over SSL/io addressed to szURI
{
	MIME *mime;
	int nBodyCount;
//	int bAuth;
	int i;
	rogxml *rx;

	const char *szAddr = NULL;						// Address part of szURI (always starts with '/')
	const char **szNames = NULL;					// Vector of names of parameters
	const char **szValues = NULL;					// Vector of values of parameters
	int nParams=0;									// Number of parameters

	Log("HTTP POST %s", szURI);

//	bAuth=AuthenticatePeer(ssl, NULL, 1);
//	if (!bAuth) Fatal("POSTs only accepted from authenticated peers");
//	if (!bAuth) Log("Peer authentication problem ignored");

	msg_SetLogDir(NoteDir());

	mime_ParseHeaderValues(0);				// Don't want to parse header values
	mime=GetIOMIME(io);
	if (!mime) Fatal("Malformed MIME received");

	nParams = ParseAddress(szURI, &szAddr, &szNames, &szValues);

	if (!strcasecmp(szAddr, "/mtrpc")) {
		const char *szBody = mime_GetBodyText(mime);
		const char **name;
		const char **value;
		int i;
		int bBrowser=0;						// 1 if we're coming in via a browser and hence want to present a form etc.
		char bDebug=0;						// 1 if we want to log progress
		const char *szXML = NULL;
		const char *szFunction = NULL;
		const char *szContentType=mime_GetContentType(mime);
		char bEncoded = !!stristr(szContentType, "urlencoded");	// All browsers use "application/x-www-form-urlencoded"
		int parts=0;

		if (bEncoded) {
			parts = ParseURI(szBody, &name, &value, 1);
		} else {
			szXML = szBody;
		}

		const char *szDebug = mime_GetHeader(mime, "X-MTRPC-DEBUG");
		if (szDebug) bDebug=atoi(szDebug);

		const char *szAccept = mime_GetHeader(mime, "Accept");		// Return an HTTP header if we receive an 'Accept'

		for (i=0;i<parts;i++) {
			if (!stricmp(name[i], "debug")) {
				bDebug=1;
			} else if (!stricmp(name[i], "XML")) {
				szXML=value[i];
			} else if (!stricmp(name[i], "browser")) {
				bBrowser=atoi(value[i]);
			}
		}

		if (!bDebug) NoteInhibit(1);						// Only record notes if we're debugging

		if (bBrowser) {
			SendHttpHeader(io, 200, "text/html", NULL);
			SendHtmlHeader(io);
			RpcEntryForm(io, bDebug, szXML);
			if (bDebug) {
				ioprintf("Message log (%s) is <a href=\"/getinteraction/%s\">here</a>",
						NoteDirSuffix(), NoteDirSuffix());
			}
			BIO_putf(io, "<hr>");
		}

		if (szXML) {
			rogxml *rxRpc = rogxml_FromText(szXML);
			rogxml *rxResult = NULL;

			NoteMessageXML(rxRpc, "rpc-in", "Raw RPC request", 1);
			if (rogxml_ErrorNo(rxRpc)) {
				rxResult=SPIDERSystemError(rogxml_ErrorNo(rxRpc), rogxml_ErrorText(rxRpc));
			} else {
				rxResult=SPIDERRpc(rxRpc);			// The actual RPC call is made here
			}
			if (rxResult) {

				const char *szResult = rogxml_ToText(rxResult);

				// Already have a header if we're a browser request
				if (szAccept && !bBrowser) SendHttpHeader(io, 200, "text/xml", szResult);

				if (bBrowser) MyBIO_puts(io, "<xmp>");
				MyBIO_puts(io, szResult);
				if (bBrowser) MyBIO_puts(io, "</xmp>");
			} else {
				if (bBrowser) {
					ioprintf("Strangely, there is no result at all...");
				}
			}
		}
	} else {
		Fatal("Received posted MIME message to '%s' and don't know what to do with it...", szURI);
	}

	return 0;
}

////////////// Mersenne Twister Functions

#define MT_LEN			624
#define MT_IA			397
#define MT_IB			(MT_LEN - MT_IA)
#define MT_TWIST(b,i,j)	((b)[i] & 0x80000000) | ((b)[j] & 0x7FFFFFFF)
#define MT_MAGIC(s)		(((s)&1)*0x9908B0DF)

int mt_index = MT_LEN*sizeof(unsigned long);
unsigned long mt_state[MT_LEN];

void mt_init()
{
	int i;
	for (i = 0; i < MT_LEN; i++)
		mt_state[i] = rand();
	mt_index = MT_LEN*sizeof(unsigned long);
}

void mt_seed(const char *data, int len)
{
	while (len > 0) {
		unsigned long s;
		int i;

		if (len >= 4) {
			s=*(unsigned long*)data;
		} else if (len == 3) {
			s=*data+(data[1]<<8)+(data[2]<<16);
		} else if (len == 2) {
			s=*(unsigned short*)data;
		} else {
			s=*data;
		}
		len-=4; data+=4;

		mt_state[0] ^= s;
		for (i = 1; i < MT_LEN; i++) {
			mt_state[i] = 1812433253UL * (mt_state[i - 1] ^ (mt_state[i - 1] >> 30)) + i;
			mt_state[i] &= 0xFFFFFFFFUL; // for > 32 bit machines
		}
	}
	mt_index = MT_LEN*sizeof(unsigned long);
}

unsigned long mt_random(unsigned long nMax) {
	unsigned long * b = mt_state;
	int idx = mt_index;
	unsigned long s;
	int i;
	unsigned long long n64;				// Use a 64-bit to scale the result

	if (idx == MT_LEN*sizeof(unsigned long)) {
		idx = 0;
		i = 0;
		for (; i < MT_IB; i++) {
			s = MT_TWIST(b, i, i+1);
			b[i] = b[i + MT_IA] ^ (s >> 1) ^ MT_MAGIC(s);
		}
		for (; i < MT_LEN-1; i++) {
			s = MT_TWIST(b, i, i+1);
			b[i] = b[i - MT_IB] ^ (s >> 1) ^ MT_MAGIC(s);
		}

		s = MT_TWIST(b, MT_LEN-1, 0);
		b[MT_LEN-1] = b[MT_IA-1] ^ (s >> 1) ^ MT_MAGIC(s);
	}
	mt_index = idx + sizeof(unsigned long);

	n64=*(unsigned long *)((unsigned char *)b + idx);
	n64*=nMax;

	return (unsigned long)(n64 >> 32);
}

const char *GenPassword(int nBits)
// Generates a password with at least nBits bits of entropy
{
	const char *szPassword = strdup("");
	const char *szGuid = guid_ToText(NULL);
	time_t now = time(NULL);
	double fBits = nBits;

	mt_seed(szGuid, 36);
	mt_seed((const char *)&now, sizeof(now));

	while (fBits > 0) {
		if (fBits >= 3.322*2) {
			char buf[3];

			buf[0]="bcdfghjklmnpqrstvwxyz"[mt_random(21)];
			buf[1]="aeiou"[mt_random(5)];
			buf[2]="bcdfghjklmnpqrstvwxyz"[mt_random(21)];
			szPassword=strnappend((char*)szPassword, buf, 3);
			fBits-=11.722;
		} else {
			char buf[1];

			buf[0]="0123456789"[mt_random(10)];
			szPassword=strnappend((char*)szPassword, buf, 1);
			fBits-=3.322;
		}
	}

	return szPassword;
}

void AcceptIpConnection(int fd, int sock)
{
	rogxml *rx, *rx2;
	const char *szError;
	const char *szType;
	int bWrapped;
	const char *szOutgoingMessageId = NULL;		// Very handy thing to have later on (when we want to ack)
	int nErr;
	const char *szDelay;						// Delay from 'delay="whatever"' attribute
	int nSendErr = 0;

	const char *szPeerDescr = allow_Allowed(_szSenderIp);

	if (!szPeerDescr) {							// We don't know this peer
		const char *szReject;

		szReject = hprintf(NULL, "Connection from unknown peer (%s) rejected", _szSenderIp);

		Note("S|%s|%d", _szSenderIp, _nSenderPort);
		Note("H|Rejected connection from unknown peer on application port (%d)", _nIncomingPort);
		Log("Rejecting connection from unknown peer");
		SendError(fd, 101, 1, "%s", szReject);
		close(fd);
		exit(0);
	}

	//// Greet the incoming connection
	rx=Greeting(_szSenderIp, szPeerDescr);					// Say hello to the guy knocking on our door
	nErr=SendXML(fd, rx, "hello");
	if (nErr) {												// Fail to send 'hello', just bail out
		Log("Error %d sending initial hello", nErr);
		exit(0);
	}
	rogxml_DeleteTree(rx);

	Note("S|%s|%d", _szSenderIp, _nSenderPort);
	Note("H|Application on %s", szPeerDescr);
	Note("J|%s", InternalId());

	msg_SetLogDir(NoteDir());

	//// Accept an XML message from it
	rx=ReceiveXML(fd, 30);						// Accept an XML message back

	//// See if it translates and if not, send an error back and quit
	szError=rogxml_ErrorText(rx);
	if (szError) {
		Log("XML Error %d: %s", rogxml_ErrorNo(rx), rogxml_ErrorText(rx));
		SendError(fd, 102, 1, "%s", szError);
		close(fd);
		exit(0);
	}

	const char *szPacked = rogxml_GetAttr(rx, "packed");	// Forcing packed mode or not
	if (szPacked) {
		_bPackXML = atoi(szPacked);
		rogxml *rx=rogxml_FindAttr(rx, "packed");			// Pretend we didn't see it
		rogxml_Delete(rx);
		Log("Packed response is turned %s", _bPackXML ? "on" : "off");
	}

	//// Log the message away
	NoteMessageXML(rx, "rcv", "Message as received from application", 1);		// Save log of message before translation

	szDelay=rogxml_GetAttr(rx, "delay");		// See if a delay has been set
	if (szDelay) {
		rogxml *rxDropped=PutXmlIntoDropDir(rx, NULL);
		int nErr = rogxml_ErrorNo(rxDropped);

		if (rxDropped && nErr) {
			SendError(fd, nErr, 1, "%s", rogxml_ErrorText(rxDropped));
		} else {
			Log("Dropped delayed message into drop dir");
			SendXML(fd, rxDropped, "dropping");
		}
		rogxml_Delete(rxDropped);
		close(fd);
		exit(0);
	}

	if (!strcmp(rogxml_GetLocalName(rx), "SPIDER-RPC")) {			// It's a Remote Procedure Call
		rogxml *rxResponse;

		rxResponse=SPIDERRpc(rx);
		SendXML(fd, rxResponse, "response");
		rogxml_Delete(rxResponse);
		close(fd);
		Log("Internal Connection Terminated Normally");

		return;
	}

	SendError(fd, nErr, 2, "Unrecognised message type '%s'", rogxml_GetLocalName(rx));

	shutdown(fd, SHUT_WR);
	close(fd);
	if (nSendErr) {
		Log("Internal Connection Terminated - lost contact");
	} else {
		Log("Internal Connection Terminated ok");
	}
	Exit(0);
}

void Idle()
// We arrive here a couple times a second.
{
	int childpid;
	int status;
	struct rusage rusage;
	static int nCounter = 0;

	nCounter++;

	if (bIsDaemon) {
		// Don't put anything that doesn't relate to time here - look further down

		if (nCounter & 1) {								// Once a second

	ReadEnvironmentFile("etc/environment");
		}

		// Only put things that need to be run/checked regularly here as there is a chance the time/date
		// will be screwy beforehand.

		while ((childpid = wait3(&status, WNOHANG, &rusage)) > 0) {
			int nChildren;

			nChildren = child_Forget(childpid);
			Log("Child %d terminated (%d child%s now active)", childpid, nChildren, nChildren==1?"":"ren");
		}

		if (nCounter %20 == 2) {						// Every 10 seconds, first check 1 second in
			CheckWeAreDaemon();
		}

	}
}

void Exit(int nCode)
	// Quits the daemon nice and tidily
{
	fflush(stdout);
	fflush(stderr);

	if (bIsDaemon) {
		if (szPidFile) unlink(szPidFile);       // Stops 'unexpected termination' message from status call

		if (nPids) {
			int i;

			Log("Daemon exiting: %d child%s to tidy up", nPids, nPids==1?"":"ren");
			for (i=0;i<nPids;i++) {					// Ask all the children to commit suicide
				Log("Sending kill %s to %d", SignalName(3), aPid[i]);
				kill(aPid[i].pid, 3);				// Send kill gently signal
			}
			sleep(2);								// Give them chance to cross into Hades
			Idle();									// Note their deaths...

			for (i=0;i<nPids;i++) {					// Slaughter any that are still alive
				Log("Sending kill %s to %d", SignalName(9), aPid[i]);
				kill(aPid[i].pid, 9);				// Send kill signal
			}
			sleep(1);								// Give them chance to cross into Hades
			Idle();									// Note their deaths...
		} else {
			Log("Daemon exiting: No active children");
		}
	}

	exit(nCode);
}

void StartDaemon(char bRestart)
// Become a daemon...
// bRestart indicates that we expect a server to be already running
{
//	int sock_int;									// For internal port
//	int sock_ext;									// For external port
	pid_t pid;
	time_t now;
	struct tm *tm;
	FILE *fp;
	char buf[1000];
	int i;
	int nOldPid;
	int nChildPid;

	const char *szStdOut, *szStdErr;

	nOldPid = StopAnyPrevious();
	if (nOldPid && !bRestart) printf("%s: Previous server %d stopped\n", szMyName, nOldPid);

	if (nChildPid = fork()) {
		printf("New SPIDER daemon process (v%s) is %d\n", VERSION, nChildPid);
		exit(0);							// Drop into the background
	}

	setpgrp();										// Release the terminal

	szStdOut = config_GetFile("stdout", "tmp/stdout");
	szStdErr = config_GetFile("stderr", "tmp/stderr");
	freopen(szStdErr, "w", stderr);
	freopen(szStdOut, "w", stdout);
	szDelete(szStdOut);
	szDelete(szStdErr);

	Log("Started as daemon " VERSION " (Compiled "__TIME__" on "__DATE__")");
	if (szEnvironment) {
		Log("Using default environment '%s'", szEnvironment);
	}

	if (!(fp=fopen(szPidFile, "w"))) {
		    Log("Cannot open '%s' to store my pid - exiting", szPidFile);
		    fprintf(stderr, "%s: Cannot open '%s' to store my pid\n", szMyName, szPidFile);
			exit(6);
	}
	time(&now);
	tm=gmtime(&now);
	snprintf(buf, sizeof(buf), "%d started on %02d/%02d/%04d at %02d:%02d:%02d UTC\n",
	        getpid(),
	        tm->tm_mday, tm->tm_mon+1, tm->tm_year+1900, tm->tm_hour, tm->tm_min, tm->tm_sec);
	fputs(buf, fp);
	fclose(fp);
	chmod(szPidFile, 0600);

	for (i=SIGHUP;i<=SIGUSR2;i++) {
//		if (i < 4 || i > 12) {					// We want 4-12 to core dump us for debugging...
			if (i == SIGHUP) {
				signal(i, SIG_IGN);                                 // A problem otherwise
			} else if (i == SIGPIPE) {
				signal(i, SIG_IGN);									// So writes on a broken connection error
			} else {
				signal(i, HandleSignal);                            // Catch whatever we can
			}
//		}
	}


	for (i=0;i<nNetworkPorts;i++) {
		int nSock = tcp_ListenOn(NetworkPort[i].nPort);

		if (nSock < 0) Log("Socket setup error %d - %s", GetErrorNo(), GetErrorStr());

		if (nSock == -1) {								// Failed to make socket (we won't recover from this)
			NetworkPort[i].nSock=0;
			NetworkPort[i].nRetries=0;
			NetworkPort[i].bEnabled=0;
			Log("Failed to create a socket for port %d", NetworkPort[i].nPort);
		} else if (nSock == -2) {						// Couldn't bind the socket (probably already in use)
			NetworkPort[i].nSock=0;
			NetworkPort[i].nRetries=5;
			NetworkPort[i].bEnabled=0;
			NetworkPort[i].tRetry=time(NULL)+5;			// Start trying again in five seconds
		} else if (nSock == -3) {						// The listen failed, which is most unusual
			NetworkPort[i].nSock=0;
			NetworkPort[i].nRetries=5;
			NetworkPort[i].bEnabled=0;
			NetworkPort[i].tRetry=time(NULL)+5;			// Start trying again in five seconds
		} else {
			NetworkPort[i].nSock = nSock;
			NetworkPort[i].bEnabled=1;
		}
	}

	for (;;) {
		int fd;
		char bExt;								// True if external port was felt
		int nPorts;
		const char *szDropped = NULL;			// Name of file collected from drop dir
		int nMaxSock=-1;
		int nSrc;
		int nSrcProtocol;
		int nSock;

		struct timeval timeout;
		fd_set fdsetin, fdseterr;

		FD_ZERO(&fdsetin); FD_ZERO(&fdseterr);
		for (i=0;i<nNetworkPorts;i++) {
			if (NetworkPort[i].bEnabled) {
				FD_SET(NetworkPort[i].nSock, &fdsetin);
				FD_SET(NetworkPort[i].nSock, &fdseterr);
				nMaxSock = max(nMaxSock, NetworkPort[i].nSock);
			}
		}

		timeout.tv_sec=0;						// Seconds
		timeout.tv_usec=500000;					// Microseconds

		nPorts = select(nMaxSock+1, &fdsetin, NULL, &fdseterr, &timeout);
		// nPorts seems to be 0 even when we have something selected...

		for (i=0;i<nNetworkPorts;i++) {
			if (FD_ISSET(NetworkPort[i].nSock, &fdseterr)) {		// Error on the port...???
				Log("Error listening on port %d - temporarily disabling", NetworkPort[i].nPort);
				NetworkPort[i].bEnabled=0;
				NetworkPort[i].nRetries=5;
				NetworkPort[i].tRetry=time(NULL)+20;
			}
		}

		nSrc=-1;
		for (i=0;i<nNetworkPorts;i++) {
			if (FD_ISSET(NetworkPort[i].nSock, &fdsetin)) {			// Found out input
				nSrc=i;
				break;
			}
		}

		if (nSrc == -1) {						// Nothing interesting happening
			Idle();
			continue;
		}

		_nTotalConnections++;
		szDelete(_szSenderIp);						// IP it's come from
		szDelete(_szIncomingIp);					// IP that we appear as

		if (nSrc == SRC_DROPPED) {
			_szSenderIp=strdup("0.0.0.0");
			_nSenderPort=0;

			_szIncomingIp=strdup("0.0.0.0");
			_nIncomingPort=0;

			_nDroppedCount++;
			nSrcProtocol=SRC_DROPPED;
			Log("File dropped (%s)", szDropped);
			fd=-1;
		} else {
			struct sockaddr_in sin;

#ifdef __SCO_VERSION__
			size_t sin_len = sizeof(sin);
#else
			socklen_t sin_len=(socklen_t)sizeof(sin);
#endif
			NetworkPort[nSrc].nCount++;
			nSrcProtocol=NetworkPort[nSrc].nProtocol;
			nSock=NetworkPort[nSrc].nSock;

			if ((fd=accept(nSock,0,0)) < 0) {
				Log("Problem accepting (errno=%d) on port %d", errno, _nIncomingPort);
				continue;
			}

			memset(&sin,0,sizeof(sin));

			getpeername(fd, (struct sockaddr*)&sin, &sin_len);
			_szSenderIp = strdup((char*)inet_ntoa(sin.sin_addr));
			_nSenderPort = ((sin.sin_port << 8) & 0xff00) | ((sin.sin_port >> 8) & 0xff);

			getsockname(fd, (struct sockaddr*)&sin, &sin_len);
			_szIncomingIp = strdup((char*)inet_ntoa(sin.sin_addr));
			_nIncomingPort = ((sin.sin_port << 8) & 0xff00) | ((sin.sin_port >> 8) & 0xff);

			Log("Connection on network port %d", _nIncomingPort);
		}

		if (pid=fork()) {						// Master
			// Remember the child process so we can take it with us when we die etc.
			int nChildren = child_Add(pid, bExt, _szSenderIp, NULL);
			Log("Child %d processing connection from %s", pid, _szSenderIp);
			if (fd != -1)
				close(fd);							// Child will take care of it
			szDelete(szDropped);				// We don't need it here
		} else {
			bIsDaemon=0;						// We are but a child...
			_tChildStart=time(NULL);
			switch (nSrcProtocol) {
			case SRC_IP:						// 'Plain' application connection
				AcceptIpConnection(fd, nSock);
				break;
			case SRC_TLS:						// TLS connection
				AcceptTlsConnection(fd);
				break;
			case SRC_PLAIN:						// Plain connection
				AcceptPlainConnection(fd);
				break;
			case SRC_DROPPED:					// Dropped file
//				AcceptFileConnection(szDropped);
				break;
			}
			exit(0);
		}
	}
}

void Usage(int n)
{
	fprintf(stderr, "Usage: %s -anpde\n", szMyName);
	fprintf(stderr, "Where:\n"
		"  Ok, this bit needs revising...\n"
//		"  -a type         Required authentication level\n"
//		"     r              Request authentication\n"
//		"     n              Need authentication\n"
//		"     z              Zero authentication required\n"
//		"  -p              Local port on which to listen (%d)\n"
//		"  -P              Remote port on which to listen (%d)\n",
//			nListenPort_int,
//			nListenPort_ext
		);

	Exit(n);
}

int main(int argc, char *argv[])
{
	extern char *optarg;
	int c;
	int nErr=0;
	const char *szCommand;
	int bSend = 0;												// 1 if we're just sending a message
	int bSendSync;
	const char *szBaseDir = NULL;

#include "compile"

	argv0 = argv[0];											// Used for IPC

	// TODO: Really need to replace this!
	RAND_seed("ewrlgfuwheglithvglithirhvliewjhflewiuhffru", 40);

	_nStartTime = time(NULL);

	while((c=getopt(argc,argv,"b:c:d:e:p:P:sSh:v"))!=-1){
		switch(c){
			case 'b': strset(&szBaseDir, optarg);			break;	// Set base directory
			case 'e': strset(&szEnvironment, optarg);		break;	// Set default environment
//			case 'p': nListenPort_int = atoi(optarg);		break;	// Set local network port (default is 10023)
//			case 'P': nListenPort_ext = atoi(optarg);		break;	// Set external port (default is 443)
			case 's': bSend=1; bSendSync=1;					break;	// Send a message over app port
			case 'S': bSend=1; bSendSync=0;					break;	// Send via Drop Dir
			case 'v': bVerbose=1;							break;
			case '?': nErr++;								break;	// Something wasn't understood
		}
	}

	if (nErr) Usage(1);

	if (!szBaseDir) szBaseDir = "/usr/mt/spider";		// THE base directory

	SetBaseDir(szBaseDir);
	SetEtcDir(config_GetDir("etcdir", "etc"));
	SetConfigFile("mmts.conf");

	if (!szLogDir) szLogDir=config_GetDir("logdir", "logs");
	if (!szOutDir) szOutDir=config_GetDir("outdir", "out");
	if (!szRpcDir) szRpcDir=config_GetDir("rpc", "rpc");
	if (!szRpcDataDir) szRpcDataDir=config_GetDir("rpcdata", "rpcdata");
	if (!szMsgLogDir) szMsgLogDir=config_GetDir("msglogdir", "msglog");

	szMyUrl = config_GetString("myurl");								// For Nasp2 headers

	allow_Init();

	if (bSend) {							// We simply want to send a message
		if (bSendSync) {					// Send by transmitting to the host
			int nSock;
			rogxml *rxGreeting;
			rogxml *rxAck;
			rogxml *rxResponse;
			const char *szHost;
			const char *szResponse;
			const char *szFilename;
			int got;
			char buf[1024];
			FILE *fpin = NULL;

			szHost = szCommand=argv[optind++];
			if (!szHost) Fatal("Usage: mmts -s host file");

			szFilename = szCommand=argv[optind++];
			if (!szFilename) Fatal("Usage: mmts -s host file");

			fpin=fopen(szFilename, "r");
			if (!fpin) {
				Fatal("Cannot open file '%s' for input",szFilename);
			}
			nSock = tcp_Connect(szHost, PORT_APP);
			if (!nSock) {
				Fatal("Could not create a connection to %s:%d\n", szHost, PORT_APP);
			}
			rxGreeting=ReceiveXML(nSock, 30);						// Accept an XML message back
			if (bVerbose) {
				const char *szGreeting;

				szGreeting = rogxml_ToNiceText(rxGreeting);
				fwrite(szGreeting, strlen(szGreeting), 1, stderr);
				szDelete(szGreeting);
			}
			if (rogxml_ErrorNo(rxGreeting)) exit(2);				// Error, which we've just printed
			rogxml_Delete(rxGreeting);

			while (got=fread(buf, 1, sizeof(buf), fpin)) {
				int nSent = write(nSock, buf, got);
				if (nSent != got) {
					fprintf(stderr, "Error %d sending %d bytes to %s (sent %d)\n", errno, got, szHost, nSent);
				}
			}
			fclose(fpin);

			rxAck=ReceiveXML(nSock, 30);						// Accept an XML message back
			if (!rxAck) Fatal("No acknowledgement received");
			if (bVerbose) {
				const char *szAck;

				szAck = rogxml_ToNiceText(rxAck);
				fwrite(szAck, strlen(szAck), 1, stderr);
				szDelete(szAck);
			}
			rogxml_Delete(rxAck);

			rxResponse=ReceiveXML(nSock, 190);						// Accept an XML message back
			if (!rxResponse) Fatal("No response received");
			szResponse = rogxml_ToNiceText(rxResponse);
			fwrite(szResponse, strlen(szResponse), 1, stdout);
			szDelete(szResponse);
			rogxml_Delete(rxResponse);

			close(nSock);
			exit(0);
		} else {							// Send by copying to the out dir
			const char *szDest;
			const char *szFile;
			int err;
			const char *szFilename;

			szFilename = szCommand=argv[optind++];
			if (!szFilename) Fatal("Usage: mmts -S file");

			szFile = strrchr(szFilename, '/');
			if (szFile) szFile++; else szFile=szFilename;

			szDest = hprintf(NULL, "%s/%s.xml", szOutDir, szFile);
			err = CopyFile(szFilename, szDest);
			if (!err) {
				if (bVerbose) printf("File deposited in Drop Dir as '%s'\n", szDest);
			} else {
				Fatal("Error %d copying %s to %s", err, szFilename, szDest);
			}
		}
		exit (0);
	}

	szPidFile=config_GetFile("pidfile", "etc/mmts.pid");

	ReadEnvironmentFile("etc/environment");

	szCommand=argv[optind++];
	if (!szCommand) szCommand="status";

	if (!stricmp(szCommand, "start")) {
		StartDaemon(0);
	} else if (!stricmp(szCommand, "restart")) {
		StartDaemon(1);
	} else if (!stricmp(szCommand, "stop")) {
		int nPid = StopAnyPrevious();
		if (nPid) {
			printf("Daemon %d stopped\n", nPid);
		} else {
			printf("Daemon was not running\n");
		}
	} else if (!stricmp(szCommand, "status")) {
		int nFilePid = GetRecordedDaemonPid();
		int nDaemonPid = GetDaemonPid();
		if (nFilePid && !nDaemonPid) {          // There is a pid in the file but no daemon
			printf("Daemon %d was running but has terminated unexpectedly\n", nFilePid);
		} else if (!nFilePid) {
		   printf("There is no daemon running\n");
		    return 0;
		} else {
			printf("Daemon is running as process %d\n", nFilePid);
		}
	}

	exit(0);

	return 0;
}
