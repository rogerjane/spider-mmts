!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.4	//
ADDR	safe/sqlite3.c	8641;"	d	file:
AGGREGATE	safe/sqlite3.c	10048;"	d	file:
ALWAYS	safe/sqlite3.c	117724;"	d	file:
ALWAYS	safe/sqlite3.c	117727;"	d	file:
ALWAYS	safe/sqlite3.c	526;"	d	file:
ALWAYS	safe/sqlite3.c	529;"	d	file:
ALWAYS	safe/sqlite3.c	532;"	d	file:
API	mtchannel.c	12;"	d	file:
API	mtjson.c	7;"	d	file:
API	mtwamp.c	19;"	d	file:
API	mtwamputil.c	18;"	d	file:
API	mtwebsocket.c	12;"	d	file:
API	safe/mtchannel.c	12;"	d	file:
API	safe/mtjson.c	7;"	d	file:
API	safe/mtwamp.c	16;"	d	file:
API	safe/mtwebsocket.c	12;"	d	file:
AcceptIpConnection	safe/spider.133.c	/^static void AcceptIpConnection(int fd, int sock)$/;"	f	file:
AcceptIpConnection	safe/spider.135.c	/^static void AcceptIpConnection(int fd, int sock)$/;"	f	file:
AcceptIpConnection	safe/spider.200.c	/^static void AcceptIpConnection(int fd, int sock)$/;"	f	file:
AcceptIpConnection	safe/spider.203.c	/^static void AcceptIpConnection(int fd, int sock)$/;"	f	file:
AcceptIpConnection	safe/spider.204.c	/^static void AcceptIpConnection(int fd, int sock)$/;"	f	file:
AcceptIpConnection	safe/spider.210.c	/^static void AcceptIpConnection(int fd, int sock)$/;"	f	file:
AcceptIpConnection	safe/spider.c	/^static void AcceptIpConnection(int fd, int sock)$/;"	f	file:
AcceptIpConnection	spider.c	/^static void AcceptIpConnection(int fd, int sock)$/;"	f	file:
AcceptPlainConnection	safe/spider.133.c	/^static void AcceptPlainConnection(int fd)$/;"	f	file:
AcceptPlainConnection	safe/spider.135.c	/^static void AcceptPlainConnection(int fd)$/;"	f	file:
AcceptPlainConnection	safe/spider.200.c	/^static void AcceptPlainConnection(int fd)$/;"	f	file:
AcceptPlainConnection	safe/spider.203.c	/^static void AcceptPlainConnection(int fd)$/;"	f	file:
AcceptPlainConnection	safe/spider.204.c	/^static void AcceptPlainConnection(int fd)$/;"	f	file:
AcceptPlainConnection	safe/spider.210.c	/^static void AcceptPlainConnection(int fd)$/;"	f	file:
AcceptPlainConnection	safe/spider.c	/^static void AcceptPlainConnection(int fd)$/;"	f	file:
AcceptPlainConnection	spider.c	/^static void AcceptPlainConnection(int fd)$/;"	f	file:
AcceptTlsConnection	safe/spider.133.c	/^static void AcceptTlsConnection(int fd)$/;"	f	file:
AcceptTlsConnection	safe/spider.135.c	/^static void AcceptTlsConnection(int fd)$/;"	f	file:
AcceptTlsConnection	safe/spider.200.c	/^static void AcceptTlsConnection(int fd)$/;"	f	file:
AcceptTlsConnection	safe/spider.203.c	/^static void AcceptTlsConnection(int fd)$/;"	f	file:
AcceptTlsConnection	safe/spider.204.c	/^static void AcceptTlsConnection(int fd)$/;"	f	file:
AcceptTlsConnection	safe/spider.210.c	/^static void AcceptTlsConnection(int fd)$/;"	f	file:
AcceptTlsConnection	safe/spider.c	/^static void AcceptTlsConnection(int fd)$/;"	f	file:
AcceptTlsConnection	spider.c	/^static void AcceptTlsConnection(int fd)$/;"	f	file:
AckMessage	safe/spider.133.c	/^static rogxml *AckMessage(const char *szMsgType, const char *szMsgId, const char *szMsgRcv, const char *szMsgSnd)$/;"	f	file:
AckMessage	safe/spider.135.c	/^static rogxml *AckMessage(const char *szMsgType, const char *szMsgId, const char *szMsgRcv, const char *szMsgSnd)$/;"	f	file:
AckMessage	safe/spider.200.c	/^static rogxml *AckMessage(const char *szMsgType, const char *szMsgId, const char *szMsgRcv, const char *szMsgSnd)$/;"	f	file:
AckMessage	safe/spider.203.c	/^static rogxml *AckMessage(const char *szMsgType, const char *szMsgId, const char *szMsgRcv, const char *szMsgSnd)$/;"	f	file:
AckMessage	safe/spider.204.c	/^static rogxml *AckMessage(const char *szMsgType, const char *szMsgId, const char *szMsgRcv, const char *szMsgSnd)$/;"	f	file:
AckMessage	safe/spider.210.c	/^static rogxml *AckMessage(const char *szMsgType, const char *szMsgId, const char *szMsgRcv, const char *szMsgSnd)$/;"	f	file:
AckMessage	safe/spider.c	/^static rogxml *AckMessage(const char *szMsgType, const char *szMsgId, const char *szMsgRcv, const char *szMsgSnd)$/;"	f	file:
AckMessage	spider.c	/^static rogxml *AckMessage(const char *szMsgType, const char *szMsgId, const char *szMsgRcv, const char *szMsgSnd)$/;"	f	file:
AddArguments	mtwamp.c	/^STATIC AddArguments(JSON *json, JSON *argList, JSON *argDict)$/;"	f
AddPort	safe/spider.133.c	/^static void AddPort(int nProtocol, int nPort)$/;"	f	file:
AddPort	safe/spider.135.c	/^static void AddPort(int nProtocol, int nPort)$/;"	f	file:
AddPort	safe/spider.200.c	/^static void AddPort(int nProtocol, int nPort)$/;"	f	file:
AddPort	safe/spider.203.c	/^static void AddPort(int nProtocol, int nPort)$/;"	f	file:
AddPort	safe/spider.204.c	/^static void AddPort(int nProtocol, int nPort)$/;"	f	file:
AddPort	safe/spider.210.c	/^static void AddPort(int nProtocol, int nPort)$/;"	f	file:
AddPort	safe/spider.c	/^static void AddPort(int nProtocol, int nPort)$/;"	f	file:
AddPort	spider.c	/^static void AddPort(int nProtocol, int nPort)$/;"	f	file:
AddPorts	safe/spider.133.c	/^static void AddPorts(int nProtocol, const char *szPorts)$/;"	f	file:
AddPorts	safe/spider.135.c	/^static void AddPorts(int nProtocol, const char *szPorts)$/;"	f	file:
AddPorts	safe/spider.200.c	/^static void AddPorts(int nProtocol, const char *szPorts)$/;"	f	file:
AddPorts	safe/spider.203.c	/^static void AddPorts(int nProtocol, const char *szPorts)$/;"	f	file:
AddPorts	safe/spider.204.c	/^static void AddPorts(int nProtocol, const char *szPorts)$/;"	f	file:
AddPorts	safe/spider.210.c	/^static void AddPorts(int nProtocol, const char *szPorts)$/;"	f	file:
AddPorts	safe/spider.c	/^static void AddPorts(int nProtocol, const char *szPorts)$/;"	f	file:
AddPorts	spider.c	/^static void AddPorts(int nProtocol, const char *szPorts)$/;"	f	file:
AdjustTree	safe/sqlite3.c	/^static int AdjustTree($/;"	f	file:
AggInfo	safe/sqlite3.c	/^struct AggInfo {$/;"	s	file:
AggInfo	safe/sqlite3.c	/^typedef struct AggInfo AggInfo;$/;"	t	file:
AggInfo_col	safe/sqlite3.c	/^  struct AggInfo_col {    \/* For each column used in source tables *\/$/;"	s	struct:AggInfo	file:
AggInfo_func	safe/sqlite3.c	/^  struct AggInfo_func {   \/* For each aggregate function *\/$/;"	s	struct:AggInfo	file:
ApiNeeds	safe/spider.c	/^void ApiNeeds(const char *szName, const char *szValue)$/;"	f
ApiNeeds	spider.c	/^void ApiNeeds(const char *szName, const char *szValue)$/;"	f
ApiSessionFromRpc	safe/spider.133.c	/^const char *ApiSessionFromRpc(const char *szRpcSession)$/;"	f
ApiSessionFromRpc	safe/spider.135.c	/^const char *ApiSessionFromRpc(const char *szRpcSession)$/;"	f
ApiSessionFromRpc	safe/spider.200.c	/^const char *ApiSessionFromRpc(const char *szRpcSession)$/;"	f
ApiSessionFromRpc	safe/spider.203.c	/^const char *ApiSessionFromRpc(const char *szRpcSession)$/;"	f
ApiSessionFromRpc	safe/spider.204.c	/^const char *ApiSessionFromRpc(const char *szRpcSession)$/;"	f
ApiSessionFromRpc	safe/spider.210.c	/^const char *ApiSessionFromRpc(const char *szRpcSession)$/;"	f
ApiSessionFromRpc	safe/spider.c	/^const char *ApiSessionFromRpc(const char *szRpcSession)$/;"	f
ApiSessionFromRpc	spider.c	/^const char *ApiSessionFromRpc(const char *szRpcSession)$/;"	f
ArraySize	safe/sqlite3.c	8128;"	d	file:
AssignCells	safe/sqlite3.c	134207;"	d	file:
AssignCells	safe/sqlite3.c	134212;"	d	file:
AssignCells	safe/sqlite3.c	134215;"	d	file:
AttachKey	safe/sqlite3.c	/^struct AttachKey { int type;  Token key; };$/;"	s	file:
AuthContext	safe/sqlite3.c	/^struct AuthContext {$/;"	s	file:
AuthContext	safe/sqlite3.c	/^typedef struct AuthContext AuthContext;$/;"	t	file:
AutoincInfo	safe/sqlite3.c	/^struct AutoincInfo {$/;"	s	file:
AutoincInfo	safe/sqlite3.c	/^typedef struct AutoincInfo AutoincInfo;$/;"	t	file:
AuxData	safe/sqlite3.c	/^  struct AuxData {$/;"	s	struct:VdbeFunc	file:
BIO_putf	safe/spider.133.c	/^static int BIO_putf(BIO *b, const char *szFmt, ...)$/;"	f	file:
BIO_putf	safe/spider.135.c	/^static int BIO_putf(BIO *b, const char *szFmt, ...)$/;"	f	file:
BIO_putf	safe/spider.200.c	/^static int BIO_putf(BIO *b, const char *szFmt, ...)$/;"	f	file:
BIO_putf	safe/spider.203.c	/^static int BIO_putf(BIO *b, const char *szFmt, ...)$/;"	f	file:
BIO_putf	safe/spider.204.c	/^static int BIO_putf(BIO *b, const char *szFmt, ...)$/;"	f	file:
BIO_putf	safe/spider.210.c	/^static int BIO_putf(BIO *b, const char *szFmt, ...)$/;"	f	file:
BIO_putf	safe/spider.c	/^static int BIO_putf(BIO *b, const char *szFmt, ...)$/;"	f	file:
BIO_putf	spider.c	/^static int BIO_putf(BIO *b, const char *szFmt, ...)$/;"	f	file:
BITVEC_HASH	safe/sqlite3.c	36607;"	d	file:
BITVEC_MXHASH	safe/sqlite3.c	36602;"	d	file:
BITVEC_NBIT	safe/sqlite3.c	36596;"	d	file:
BITVEC_NELEM	safe/sqlite3.c	36594;"	d	file:
BITVEC_NINT	safe/sqlite3.c	36599;"	d	file:
BITVEC_NPTR	safe/sqlite3.c	36609;"	d	file:
BITVEC_SZ	safe/sqlite3.c	36580;"	d	file:
BITVEC_SZELEM	safe/sqlite3.c	36592;"	d	file:
BITVEC_TELEM	safe/sqlite3.c	36590;"	d	file:
BITVEC_USIZE	safe/sqlite3.c	36584;"	d	file:
BMS	safe/sqlite3.c	10802;"	d	file:
BTCURSOR_MAX_DEPTH	safe/sqlite3.c	49761;"	d	file:
BTREE_AUTOVACUUM_FULL	safe/sqlite3.c	8271;"	d	file:
BTREE_AUTOVACUUM_INCR	safe/sqlite3.c	8272;"	d	file:
BTREE_AUTOVACUUM_NONE	safe/sqlite3.c	8270;"	d	file:
BTREE_BLOBKEY	safe/sqlite3.c	8346;"	d	file:
BTREE_DEFAULT_CACHE_SIZE	safe/sqlite3.c	8370;"	d	file:
BTREE_FILE_FORMAT	safe/sqlite3.c	8369;"	d	file:
BTREE_FREE_PAGE_COUNT	safe/sqlite3.c	8367;"	d	file:
BTREE_INCR_VACUUM	safe/sqlite3.c	8374;"	d	file:
BTREE_INTKEY	safe/sqlite3.c	8345;"	d	file:
BTREE_LARGEST_ROOT_PAGE	safe/sqlite3.c	8371;"	d	file:
BTREE_MEMORY	safe/sqlite3.c	8298;"	d	file:
BTREE_OMIT_JOURNAL	safe/sqlite3.c	8297;"	d	file:
BTREE_SCHEMA_VERSION	safe/sqlite3.c	8368;"	d	file:
BTREE_SINGLE	safe/sqlite3.c	8299;"	d	file:
BTREE_TEXT_ENCODING	safe/sqlite3.c	8372;"	d	file:
BTREE_UNORDERED	safe/sqlite3.c	8300;"	d	file:
BTREE_USER_VERSION	safe/sqlite3.c	8373;"	d	file:
BTS_EXCLUSIVE	safe/sqlite3.c	49732;"	d	file:
BTS_INITIALLY_EMPTY	safe/sqlite3.c	49730;"	d	file:
BTS_NO_WAL	safe/sqlite3.c	49731;"	d	file:
BTS_PAGESIZE_FIXED	safe/sqlite3.c	49728;"	d	file:
BTS_PENDING	safe/sqlite3.c	49733;"	d	file:
BTS_READ_ONLY	safe/sqlite3.c	49727;"	d	file:
BTS_SECURE_DELETE	safe/sqlite3.c	49729;"	d	file:
BYTESWAP32	safe/sqlite3.c	46760;"	d	file:
BackMeUp	safe/spider.135.c	/^void BackMeUp()$/;"	f
BackMeUp	safe/spider.200.c	/^void BackMeUp()$/;"	f
BackMeUp	safe/spider.203.c	/^void BackMeUp()$/;"	f
BackMeUp	safe/spider.204.c	/^void BackMeUp()$/;"	f
BackMeUp	safe/spider.210.c	/^void BackMeUp()$/;"	f
BackMeUp	safe/spider.c	/^void BackMeUp()$/;"	f
BackMeUp	spider.c	/^void BackMeUp()$/;"	f
BeDaemon	spider.c	/^void BeDaemon()$/;"	f
BecomeLegacyHandler	safe/spider.c	/^void BecomeLegacyHandler(int fd)$/;"	f
BecomeLegacyHandler	spider.c	/^void BecomeLegacyHandler(int fd)$/;"	f
BenignMallocHooks	safe/sqlite3.c	/^static SQLITE_WSD struct BenignMallocHooks {$/;"	s	file:
BenignMallocHooks	safe/sqlite3.c	/^typedef struct BenignMallocHooks BenignMallocHooks;$/;"	t	file:
BinaryFromApi	safe/spider.210.c	/^const char *BinaryFromApi(const char *szApi)$/;"	f
BinaryFromApi	safe/spider.c	/^const char *BinaryFromApi(const char *szApi)$/;"	f
BinaryFromApi	spider.c	/^const char *BinaryFromApi(const char *szApi)$/;"	f
Bitmask	safe/sqlite3.c	/^typedef u64 Bitmask;$/;"	t	file:
Bitvec	safe/sqlite3.c	/^struct Bitvec {$/;"	s	file:
Bitvec	safe/sqlite3.c	/^typedef struct Bitvec Bitvec;$/;"	t	file:
Blob	safe/sqlite3.c	/^struct Blob {$/;"	s	file:
Blob	safe/sqlite3.c	/^typedef struct Blob Blob;$/;"	t	file:
Bool	safe/sqlite3.c	/^typedef unsigned char Bool;$/;"	t	file:
BtCursor	safe/sqlite3.c	/^struct BtCursor {$/;"	s	file:
BtCursor	safe/sqlite3.c	/^typedef struct BtCursor BtCursor;$/;"	t	file:
BtLock	safe/sqlite3.c	/^struct BtLock {$/;"	s	file:
BtLock	safe/sqlite3.c	/^typedef struct BtLock BtLock;$/;"	t	file:
BtShared	safe/sqlite3.c	/^struct BtShared {$/;"	s	file:
BtShared	safe/sqlite3.c	/^typedef struct BtShared BtShared;$/;"	t	file:
Btree	safe/sqlite3.c	/^struct Btree {$/;"	s	file:
Btree	safe/sqlite3.c	/^typedef struct Btree Btree;$/;"	t	file:
BuildConnection	safe/spider.c	/^BIO *BuildConnection(const char *szAddress, int nPort, int isSsl)$/;"	f
BuildConnection	spider.c	/^static BIO *BuildConnection(const char *szAddress, int nPort, int isSsl)$/;"	f	file:
BusyHandler	safe/sqlite3.c	/^struct BusyHandler {$/;"	s	file:
BusyHandler	safe/sqlite3.c	/^typedef struct BusyHandler BusyHandler;$/;"	t	file:
ByteRangeLockPB2	safe/sqlite3.c	/^struct ByteRangeLockPB2$/;"	s	file:
CACHE_STALE	safe/sqlite3.c	13065;"	d	file:
CFLAGS	jtest.mak	/^CFLAGS=$(INCLUDES)  -I\/microtest\/users\/faircomm\/ctree\/include -I\/microtest\/users\/faircomm\/ctree\/custom -I\/microtest\/users\/faircomm\/rtree\/include -I\/usr\/local\/ssl\/include -L$(PM2_LIBPATH) -L$(CTREE_LIBPATH)  -L\/usr\/local\/lib -I\/usr\/include\/mysql -L\/usr\/local\/mysql\/lib\/mysql  -I\/usr\/local\/mysql\/include\/mysql -DEHR_UNIXWARE$/;"	m
CFLAGS	makefile	/^CFLAGS=$(INCLUDES)  -I\/microtest\/users\/faircomm\/ctree\/include -I\/microtest\/users\/faircomm\/ctree\/custom -I\/microtest\/users\/faircomm\/rtree\/include -I\/usr\/local\/ssl\/include -L$(PM2_LIBPATH) -L$(CTREE_LIBPATH)  -L\/usr\/local\/lib -I\/usr\/include\/mysql -L\/usr\/local\/mysql\/lib\/mysql  -I\/usr\/local\/mysql\/include\/mysql -DEHR_UNIXWARE$/;"	m
CFLAGS	spider.mak	/^CFLAGS=$(INCLUDES)  -I\/microtest\/users\/faircomm\/ctree\/include -I\/microtest\/users\/faircomm\/ctree\/custom -I\/microtest\/users\/faircomm\/rtree\/include -I\/usr\/local\/ssl\/include -L$(PM2_LIBPATH) -L$(CTREE_LIBPATH)  -L\/usr\/local\/lib -I\/usr\/include\/mysql -L\/usr\/local\/mysql\/lib\/mysql  -I\/usr\/local\/mysql\/include\/mysql -DEHR_UNIXWARE$/;"	m
CHAN	mtchannel.h	/^typedef struct CHAN {$/;"	s
CHAN	mtchannel.h	/^} CHAN;$/;"	t
CHAN	safe/mtchannel.h	/^typedef struct CHAN {$/;"	s
CHAN	safe/mtchannel.h	/^} CHAN;$/;"	t
CHANCB_DeleteCallback	mtchannel.h	/^typedef void (*CHANCB_DeleteCallback)(struct CHAN *channel);$/;"	t
CHANCB_Idler	mtchannel.h	/^typedef void (*CHANCB_Idler)(struct CHANPOOL *pool);$/;"	t
CHANCB_Pseudo	mtchannel.h	/^typedef int (*CHANCB_Pseudo)(int type, struct CHAN *channel);$/;"	t
CHANCB_Receiver	mtchannel.h	/^typedef int (*CHANCB_Receiver)(struct CHAN *channel);$/;"	t
CHANCB_Receiver	safe/mtchannel.h	/^typedef int (*CHANCB_Receiver)(struct CHAN *channel);$/;"	t
CHANPOOL	mtchannel.h	/^typedef struct CHANPOOL {$/;"	s
CHANPOOL	mtchannel.h	/^} CHANPOOL;$/;"	t
CHANPOOL	safe/mtchannel.h	/^typedef struct CHANPOOL {$/;"	s
CHANPOOL	safe/mtchannel.h	/^} CHANPOOL;$/;"	t
CHAN_CLOSE	mtchannel.c	37;"	d	file:
CHAN_CLOSE	safe/mtchannel.c	34;"	d	file:
CHAN_CLOSE	safe/mtchannel.h	13;"	d
CHAN_DELETE	mtchannel.c	38;"	d	file:
CHAN_DIRTY	mtchannel.c	36;"	d	file:
CHAN_DIRTY	safe/mtchannel.c	33;"	d	file:
CHAN_DIRTY	safe/mtchannel.h	12;"	d
CHAN_IN	mtchannel.c	50;"	d	file:
CHAN_IN	mtchannel.h	11;"	d
CHAN_IN	safe/mtchannel.c	31;"	d	file:
CHAN_IN	safe/mtchannel.h	10;"	d
CHAN_OUT	mtchannel.c	51;"	d	file:
CHAN_OUT	mtchannel.h	12;"	d
CHAN_OUT	safe/mtchannel.c	32;"	d	file:
CHAN_OUT	safe/mtchannel.h	11;"	d
CHECK_FOR_INTERRUPT	safe/sqlite3.c	65787;"	d	file:
CHECK_PAGE	safe/sqlite3.c	40417;"	d	file:
CHECK_PAGE	safe/sqlite3.c	40428;"	d	file:
CLEARBIT	safe/sqlite3.c	36840;"	d	file:
CLIENT_AUTH_NEED	safe/spider.133.c	197;"	d	file:
CLIENT_AUTH_NEED	safe/spider.135.c	206;"	d	file:
CLIENT_AUTH_NEED	safe/spider.200.c	212;"	d	file:
CLIENT_AUTH_NEED	safe/spider.203.c	226;"	d	file:
CLIENT_AUTH_NEED	safe/spider.204.c	242;"	d	file:
CLIENT_AUTH_NEED	safe/spider.210.c	262;"	d	file:
CLIENT_AUTH_NEED	safe/spider.c	317;"	d	file:
CLIENT_AUTH_NEED	spider.c	335;"	d	file:
CLIENT_AUTH_NONE	safe/spider.133.c	195;"	d	file:
CLIENT_AUTH_NONE	safe/spider.135.c	204;"	d	file:
CLIENT_AUTH_NONE	safe/spider.200.c	210;"	d	file:
CLIENT_AUTH_NONE	safe/spider.203.c	224;"	d	file:
CLIENT_AUTH_NONE	safe/spider.204.c	240;"	d	file:
CLIENT_AUTH_NONE	safe/spider.210.c	260;"	d	file:
CLIENT_AUTH_NONE	safe/spider.c	315;"	d	file:
CLIENT_AUTH_NONE	spider.c	333;"	d	file:
CLIENT_AUTH_REQUEST	safe/spider.133.c	196;"	d	file:
CLIENT_AUTH_REQUEST	safe/spider.135.c	205;"	d	file:
CLIENT_AUTH_REQUEST	safe/spider.200.c	211;"	d	file:
CLIENT_AUTH_REQUEST	safe/spider.203.c	225;"	d	file:
CLIENT_AUTH_REQUEST	safe/spider.204.c	241;"	d	file:
CLIENT_AUTH_REQUEST	safe/spider.210.c	261;"	d	file:
CLIENT_AUTH_REQUEST	safe/spider.c	316;"	d	file:
CLIENT_AUTH_REQUEST	spider.c	334;"	d	file:
CODEC1	safe/sqlite3.c	39657;"	d	file:
CODEC1	safe/sqlite3.c	39663;"	d	file:
CODEC2	safe/sqlite3.c	39659;"	d	file:
CODEC2	safe/sqlite3.c	39664;"	d	file:
COLNAME_COLUMN	safe/sqlite3.c	8624;"	d	file:
COLNAME_DATABASE	safe/sqlite3.c	8622;"	d	file:
COLNAME_DECLTYPE	safe/sqlite3.c	8621;"	d	file:
COLNAME_N	safe/sqlite3.c	8626;"	d	file:
COLNAME_N	safe/sqlite3.c	8629;"	d	file:
COLNAME_N	safe/sqlite3.c	8631;"	d	file:
COLNAME_NAME	safe/sqlite3.c	8620;"	d	file:
COLNAME_TABLE	safe/sqlite3.c	8623;"	d	file:
COLUMN_MASK	safe/sqlite3.c	89627;"	d	file:
CONTRACT_INCLUDE	safe/spider.210.c	1946;"	d	file:
CONTRACT_INCLUDE	safe/spider.c	2085;"	d	file:
CONTRACT_INCLUDE	spider.c	2169;"	d	file:
CTIMEOPT_VAL	safe/sqlite3.c	12537;"	d	file:
CTIMEOPT_VAL_	safe/sqlite3.c	12536;"	d	file:
CTREE_INCPATH	jtest.mak	/^CTREE_INCPATH=-I$(CTREE_PATH)\/include -I$(CTREE_PATH)\/custom -I$(RTREE_PATH)\/include$/;"	m
CTREE_INCPATH	makefile	/^CTREE_INCPATH=-I$(CTREE_PATH)\/include -I$(CTREE_PATH)\/custom -I$(RTREE_PATH)\/include$/;"	m
CTREE_INCPATH	spider.mak	/^CTREE_INCPATH=-I$(CTREE_PATH)\/include -I$(CTREE_PATH)\/custom -I$(RTREE_PATH)\/include$/;"	m
CTREE_LIBPATH	jtest.mak	/^CTREE_LIBPATH=\/microtest\/users\/faircomm\/lib.fpg$/;"	m
CTREE_LIBPATH	makefile	/^CTREE_LIBPATH=\/microtest\/users\/faircomm\/lib.fpg$/;"	m
CTREE_LIBPATH	spider.mak	/^CTREE_LIBPATH=\/microtest\/users\/faircomm\/lib.fpg$/;"	m
CTREE_PATH	jtest.mak	/^CTREE_PATH=\/microtest\/users\/faircomm\/ctree$/;"	m
CTREE_PATH	makefile	/^CTREE_PATH=\/microtest\/users\/faircomm\/ctree$/;"	m
CTREE_PATH	spider.mak	/^CTREE_PATH=\/microtest\/users\/faircomm\/ctree$/;"	m
CTRL_FREE	safe/sqlite3.c	16860;"	d	file:
CTRL_LOGSIZE	safe/sqlite3.c	16859;"	d	file:
CURSOR_FAULT	safe/sqlite3.c	49831;"	d	file:
CURSOR_INVALID	safe/sqlite3.c	49828;"	d	file:
CURSOR_REQUIRESEEK	safe/sqlite3.c	49830;"	d	file:
CURSOR_VALID	safe/sqlite3.c	49829;"	d	file:
CXXFLAGS	jtest.mak	/^CXXFLAGS=$(INCLUDES) -I\/microtest\/users\/faircomm\/ctree\/include -I\/microtest\/users\/faircomm\/ctree\/custom -I\/microtest\/users\/faircomm\/rtree\/include -I\/usr\/local\/ssl\/include -L$(PM2_LIBPATH) -L$(CTREE_LIBPATH)  -L\/usr\/local\/lib -DUSING_SCO_SC -I\/usr\/include\/mysql -L\/usr\/local\/mysql\/lib\/mysql -I\/usr\/local\/mysql\/include\/mysql -DEHR_UNIXWARE$/;"	m
CXXFLAGS	makefile	/^CXXFLAGS=$(INCLUDES) -I\/microtest\/users\/faircomm\/ctree\/include -I\/microtest\/users\/faircomm\/ctree\/custom -I\/microtest\/users\/faircomm\/rtree\/include -I\/usr\/local\/ssl\/include -L$(PM2_LIBPATH) -L$(CTREE_LIBPATH)  -L\/usr\/local\/lib -DUSING_SCO_SC -I\/usr\/include\/mysql -L\/usr\/local\/mysql\/lib\/mysql -I\/usr\/local\/mysql\/include\/mysql -DEHR_UNIXWARE$/;"	m
CXXFLAGS	spider.mak	/^CXXFLAGS=$(INCLUDES) -I\/microtest\/users\/faircomm\/ctree\/include -I\/microtest\/users\/faircomm\/ctree\/custom -I\/microtest\/users\/faircomm\/rtree\/include -I\/usr\/local\/ssl\/include -L$(PM2_LIBPATH) -L$(CTREE_LIBPATH)  -L\/usr\/local\/lib -DUSING_SCO_SC -I\/usr\/include\/mysql -L\/usr\/local\/mysql\/lib\/mysql -I\/usr\/local\/mysql\/include\/mysql -DEHR_UNIXWARE$/;"	m
CallApi	callSpider.php	/^function CallApi($api, $params, $input, &$result)$/;"	f
CallSpider	safe/spider.210.c	/^void CallSpider(const char *szApi, char *argv[])$/;"	f
CallSpider	safe/spider.c	/^void CallSpider(const char *szHost, const char *szSessionData, const char *szLoginData, const char *szApi, char *argv[], const char *szInputFile, const char *szOrganisationProduct)$/;"	f
CallSpider	spider.c	/^void CallSpider(const char *szHost, const char *szSessionData, const char *szLoginData, const char *szApi, char *argv[], const char *szInputFile, const char *szOrganisationProduct)$/;"	f
CellInfo	safe/sqlite3.c	/^struct CellInfo {$/;"	s	file:
CellInfo	safe/sqlite3.c	/^typedef struct CellInfo CellInfo;$/;"	t	file:
CheckAuthorisation	safe/spider.133.c	/^static rogxml *CheckAuthorisation(const char *auth)$/;"	f	file:
CheckAuthorisation	safe/spider.135.c	/^static rogxml *CheckAuthorisation(const char *auth)$/;"	f	file:
CheckAuthorisation	safe/spider.200.c	/^static rogxml *CheckAuthorisation(const char *auth)$/;"	f	file:
CheckAuthorisation	safe/spider.203.c	/^static rogxml *CheckAuthorisation(const char *auth)$/;"	f	file:
CheckAuthorisation	safe/spider.204.c	/^static rogxml *CheckAuthorisation(const char *auth)$/;"	f	file:
CheckAuthorisation	safe/spider.210.c	/^static rogxml *CheckAuthorisation(const char *auth)$/;"	f	file:
CheckAuthorisation	safe/spider.c	/^static rogxml *CheckAuthorisation(const char *auth)$/;"	f	file:
CheckAuthorisation	spider.c	/^static rogxml *CheckAuthorisation(const char *auth)$/;"	f	file:
CheckWampHttpResponse	mtwamputil.c	/^STATIC const char *CheckWampHttpResponse(SSMAP *headerMap, const char *nonce)$/;"	f
CheckWeAreDaemon	safe/spider.133.c	/^static void CheckWeAreDaemon()$/;"	f	file:
CheckWeAreDaemon	safe/spider.135.c	/^static void CheckWeAreDaemon()$/;"	f	file:
CheckWeAreDaemon	safe/spider.200.c	/^static void CheckWeAreDaemon()$/;"	f	file:
CheckWeAreDaemon	safe/spider.203.c	/^static void CheckWeAreDaemon()$/;"	f	file:
CheckWeAreDaemon	safe/spider.204.c	/^static void CheckWeAreDaemon()$/;"	f	file:
CheckWeAreDaemon	safe/spider.210.c	/^static void CheckWeAreDaemon()$/;"	f	file:
CheckWeAreDaemon	safe/spider.c	/^static void CheckWeAreDaemon()$/;"	f	file:
CheckWeAreDaemon	spider.c	/^static void CheckWeAreDaemon()$/;"	f	file:
ChooseLeaf	safe/sqlite3.c	/^static int ChooseLeaf($/;"	f	file:
ChownAs	safe/spider.c	/^static void ChownAs(const char *szFilename, const char *szUser)$/;"	f	file:
ChownAs	spider.c	/^static void ChownAs(const char *szFilename, const char *szUser)$/;"	f	file:
Cleanup	safe/sqlite3.c	/^static void Cleanup(Vdbe *p){$/;"	f	file:
CloseReadStreamDebug	safe/spider.133.c	/^static void CloseReadStreamDebug()$/;"	f	file:
CloseReadStreamDebug	safe/spider.135.c	/^static void CloseReadStreamDebug()$/;"	f	file:
CloseReadStreamDebug	safe/spider.200.c	/^static void CloseReadStreamDebug()$/;"	f	file:
CloseReadStreamDebug	safe/spider.203.c	/^static void CloseReadStreamDebug()$/;"	f	file:
CloseReadStreamDebug	safe/spider.204.c	/^static void CloseReadStreamDebug()$/;"	f	file:
CloseReadStreamDebug	safe/spider.210.c	/^static void CloseReadStreamDebug()$/;"	f	file:
CloseUsageDatabase	safe/spider.203.c	/^void CloseUsageDatabase()$/;"	f
CloseUsageDatabase	safe/spider.204.c	/^void CloseUsageDatabase()$/;"	f
Codepoint2Utf8	mtjson.c	/^STATIC const char *Codepoint2Utf8(long code, int *plen)$/;"	f
CollSeq	safe/sqlite3.c	/^struct CollSeq {$/;"	s	file:
CollSeq	safe/sqlite3.c	/^typedef struct CollSeq CollSeq;$/;"	t	file:
Column	safe/sqlite3.c	/^struct Column {$/;"	s	file:
Column	safe/sqlite3.c	/^typedef struct Column Column;$/;"	t	file:
CopyFile	safe/spider.135.c	/^int CopyFile(const char *szSrc, const char *szDest)$/;"	f
CopyFile	safe/spider.200.c	/^int CopyFile(const char *szSrc, const char *szDest)$/;"	f
CopyFile	safe/spider.203.c	/^int CopyFile(const char *szSrc, const char *szDest)$/;"	f
CopyFile	safe/spider.204.c	/^int CopyFile(const char *szSrc, const char *szDest)$/;"	f
CopyFile	safe/spider.210.c	/^int CopyFile(const char *szSrc, const char *szDest)$/;"	f
CopyFile	safe/spider.c	/^int CopyFile(const char *szSrc, const char *szDest)$/;"	f
CopyFile	spider.c	/^int CopyFile(const char *szSrc, const char *szDest)$/;"	f
CountCtx	safe/sqlite3.c	/^struct CountCtx {$/;"	s	file:
CountCtx	safe/sqlite3.c	/^typedef struct CountCtx CountCtx;$/;"	t	file:
CreateAccessDb	safe/spider.200.c	/^int CreateAccessDb(const char *szName)$/;"	f
CreateAccessDb	safe/spider.203.c	/^void CreateAccessDb(const char *szName)$/;"	f
CreateAccessDb	safe/spider.204.c	/^void CreateAccessDb(const char *szName)$/;"	f
CreateAccessDb	safe/spider.210.c	/^void CreateAccessDb(const char *szName)$/;"	f
CreateAccessDb	safe/spider.c	/^void CreateAccessDb(const char *szName)$/;"	f
CreateAccessDb	spider.c	/^void CreateAccessDb(const char *szName)$/;"	f
CreateLegacyChild	safe/spider.c	/^int CreateLegacyChild()$/;"	f
CreateMsglogDir	safe/spider.c	/^void CreateMsglogDir()$/;"	f
CreateMsglogDir	spider.c	/^void CreateMsglogDir()$/;"	f
D	safe/sqlite3.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
DB_Empty	safe/sqlite3.c	9732;"	d	file:
DB_SchemaLoaded	safe/sqlite3.c	9730;"	d	file:
DB_UnresetViews	safe/sqlite3.c	9731;"	d	file:
DCOORD	safe/sqlite3.c	134365;"	d	file:
DCOORD	safe/sqlite3.c	134367;"	d	file:
DIRECT_MODE	safe/sqlite3.c	44890;"	d	file:
DIRECT_MODE	safe/sqlite3.c	44894;"	d	file:
DISABLE_USAGE	safe/spider.c	200;"	d	file:
DISABLE_USAGE	spider.c	201;"	d	file:
DOCID_CMP	safe/sqlite3.c	120128;"	d	file:
DOTLOCK_SUFFIX	safe/sqlite3.c	27059;"	d	file:
DO_OS_MALLOC_TEST	safe/sqlite3.c	14814;"	d	file:
DO_OS_MALLOC_TEST	safe/sqlite3.c	14821;"	d	file:
DateTime	safe/sqlite3.c	/^struct DateTime {$/;"	s	file:
DateTime	safe/sqlite3.c	/^typedef struct DateTime DateTime;$/;"	t	file:
Db	safe/sqlite3.c	/^struct Db {$/;"	s	file:
Db	safe/sqlite3.c	/^typedef struct Db Db;$/;"	t	file:
DbClearProperty	safe/sqlite3.c	9718;"	d	file:
DbFixer	safe/sqlite3.c	/^struct DbFixer {$/;"	s	file:
DbFixer	safe/sqlite3.c	/^typedef struct DbFixer DbFixer;$/;"	t	file:
DbHasAnyProperty	safe/sqlite3.c	9716;"	d	file:
DbHasProperty	safe/sqlite3.c	9715;"	d	file:
DbPage	safe/sqlite3.c	/^typedef struct PgHdr DbPage;$/;"	t	file:
DbSetProperty	safe/sqlite3.c	9717;"	d	file:
DealWithGET	safe/spider.133.c	/^static int DealWithGET(BIO *io, const char *szURI)$/;"	f	file:
DealWithGET	safe/spider.135.c	/^static int DealWithGET(BIO *io, const char *szURI)$/;"	f	file:
DealWithGET	safe/spider.200.c	/^static int DealWithGET(BIO *io, const char *szURI, const char *szOrganisation, const char *szProduct)$/;"	f	file:
DealWithGET	safe/spider.203.c	/^static int DealWithGET(BIO *io, const char *szURI, const char *szOrganisation, const char *szProduct)$/;"	f	file:
DealWithGET	safe/spider.204.c	/^static int DealWithGET(BIO *io, const char *szURI, const char *szOrganisation, const char *szProduct)$/;"	f	file:
DealWithGET	safe/spider.210.c	/^static int DealWithGET(BIO *io, const char *szURI)$/;"	f	file:
DealWithGET	safe/spider.c	/^static int DealWithGET(BIO *io, const char *szURI)$/;"	f	file:
DealWithGET	spider.c	/^static int DealWithGET(BIO *io, const char *szURI)$/;"	f	file:
DealWithHEAD	safe/spider.c	/^static int DealWithHEAD(BIO *io, const char *szURI)$/;"	f	file:
DealWithHEAD	spider.c	/^static int DealWithHEAD(BIO *io, const char *szURI)$/;"	f	file:
DealWithOPTIONS	safe/spider.c	/^static int DealWithOPTIONS(BIO *io, const char *szURI)$/;"	f	file:
DealWithOPTIONS	spider.c	/^static int DealWithOPTIONS(BIO *io, const char *szURI)$/;"	f	file:
DealWithPOST	safe/spider.133.c	/^static int DealWithPOST(BIO *io, const char *szURI)$/;"	f	file:
DealWithPOST	safe/spider.135.c	/^static int DealWithPOST(BIO *io, const char *szURI)$/;"	f	file:
DealWithPOST	safe/spider.200.c	/^static int DealWithPOST(BIO *io, const char *szURI, const char *szOrganisation, const char *szProduct)$/;"	f	file:
DealWithPOST	safe/spider.203.c	/^static int DealWithPOST(BIO *io, const char *szURI, const char *szOrganisation, const char *szProduct)$/;"	f	file:
DealWithPOST	safe/spider.204.c	/^static int DealWithPOST(BIO *io, const char *szURI, const char *szOrganisation, const char *szProduct)$/;"	f	file:
DealWithPOST	safe/spider.210.c	/^static int DealWithPOST(BIO *io, const char *szURI)$/;"	f	file:
DealWithPOST	safe/spider.c	/^static int DealWithPOST(BIO *io, const char *szURI)$/;"	f	file:
DealWithPOST	spider.c	/^static int DealWithPOST(BIO *io, const char *szURI)$/;"	f	file:
DealWithPROPFIND	safe/spider.c	/^static int DealWithPROPFIND(BIO *io, const char *szURI)$/;"	f	file:
DealWithPROPFIND	spider.c	/^static int DealWithPROPFIND(BIO *io, const char *szURI)$/;"	f	file:
DealWithPUT	safe/spider.133.c	/^static int DealWithPUT(BIO *io, const char *szURI)$/;"	f	file:
DealWithPUT	safe/spider.135.c	/^static int DealWithPUT(BIO *io, const char *szURI)$/;"	f	file:
DealWithPUT	safe/spider.200.c	/^static int DealWithPUT(BIO *io, const char *szURI, const char *szOrganisation, const char *szProduct)$/;"	f	file:
DealWithPUT	safe/spider.203.c	/^static int DealWithPUT(BIO *io, const char *szURI, const char *szOrganisation, const char *szProduct)$/;"	f	file:
DealWithPUT	safe/spider.204.c	/^static int DealWithPUT(BIO *io, const char *szURI, const char *szOrganisation, const char *szProduct)$/;"	f	file:
DealWithPUT	safe/spider.210.c	/^static int DealWithPUT(BIO *io, const char *szURI)$/;"	f	file:
DealWithPUT	safe/spider.c	/^static int DealWithPUT(BIO *io, const char *szURI)$/;"	f	file:
DealWithPUT	spider.c	/^static int DealWithPUT(BIO *io, const char *szURI)$/;"	f	file:
DealWithWebsocket	safe/spider.c	/^static int DealWithWebsocket(BIO *io, const char *szURI, MIME *header)$/;"	f	file:
DecodeTimeStamp	safe/spider.133.c	/^static time_t DecodeTimeStamp(const char *szDt)$/;"	f	file:
DecodeTimeStamp	safe/spider.135.c	/^static time_t DecodeTimeStamp(const char *szDt)$/;"	f	file:
DecodeTimeStamp	safe/spider.200.c	/^static time_t DecodeTimeStamp(const char *szDt)$/;"	f	file:
DecodeTimeStamp	safe/spider.203.c	/^static time_t DecodeTimeStamp(const char *szDt)$/;"	f	file:
DecodeTimeStamp	safe/spider.204.c	/^static time_t DecodeTimeStamp(const char *szDt)$/;"	f	file:
DecodeTimeStamp	safe/spider.210.c	/^static time_t DecodeTimeStamp(const char *szDt)$/;"	f	file:
DecodeTimeStamp	safe/spider.c	/^static time_t DecodeTimeStamp(const char *szDt)$/;"	f	file:
DecodeTimeStamp	spider.c	/^static time_t DecodeTimeStamp(const char *szDt)$/;"	f	file:
Deephemeralize	safe/sqlite3.c	65370;"	d	file:
DeleteArgv	safe/spider.133.c	/^static void DeleteArgv(const char **argv)$/;"	f	file:
DeleteArgv	safe/spider.135.c	/^static void DeleteArgv(const char **argv)$/;"	f	file:
DeleteArgv	safe/spider.200.c	/^static void DeleteArgv(const char **argv)$/;"	f	file:
DeleteArgv	safe/spider.203.c	/^static void DeleteArgv(const char **argv)$/;"	f	file:
DeleteArgv	safe/spider.204.c	/^static void DeleteArgv(const char **argv)$/;"	f	file:
DeleteArgv	safe/spider.210.c	/^static void DeleteArgv(const char **argv)$/;"	f	file:
DeleteArgv	safe/spider.c	/^static void DeleteArgv(const char **argv)$/;"	f	file:
DeleteArgv	spider.c	/^static void DeleteArgv(const char **argv)$/;"	f	file:
DescribeApi	callSpider.php	/^function DescribeApi($function)$/;"	f
EIGHT_BYTE_ALIGNMENT	safe/sqlite3.c	8084;"	d	file:
EIGHT_BYTE_ALIGNMENT	safe/sqlite3.c	8086;"	d	file:
ENC	safe/sqlite3.c	9899;"	d	file:
EP2_Irreducible	safe/sqlite3.c	10696;"	d	file:
EP2_MallocedToken	safe/sqlite3.c	10695;"	d	file:
EP_Agg	safe/sqlite3.c	10676;"	d	file:
EP_DblQuoted	safe/sqlite3.c	10681;"	d	file:
EP_Distinct	safe/sqlite3.c	10679;"	d	file:
EP_Error	safe/sqlite3.c	10678;"	d	file:
EP_ExpCollate	safe/sqlite3.c	10683;"	d	file:
EP_FixedDest	safe/sqlite3.c	10684;"	d	file:
EP_FromJoin	safe/sqlite3.c	10675;"	d	file:
EP_Hint	safe/sqlite3.c	10687;"	d	file:
EP_InfixFunc	safe/sqlite3.c	10682;"	d	file:
EP_IntValue	safe/sqlite3.c	10685;"	d	file:
EP_Reduced	safe/sqlite3.c	10688;"	d	file:
EP_Resolved	safe/sqlite3.c	10677;"	d	file:
EP_Static	safe/sqlite3.c	10690;"	d	file:
EP_TokenOnly	safe/sqlite3.c	10689;"	d	file:
EP_VarSelect	safe/sqlite3.c	10680;"	d	file:
EP_xIsSelect	safe/sqlite3.c	10686;"	d	file:
ERR_TRACE	safe/sqlite3.c	23701;"	d	file:
ERR_TRACE	safe/sqlite3.c	23704;"	d	file:
EXCLUSIVE_LOCK	safe/sqlite3.c	9462;"	d	file:
EXPRDUP_REDUCE	safe/sqlite3.c	10732;"	d	file:
EXPR_FULLSIZE	safe/sqlite3.c	10724;"	d	file:
EXPR_REDUCEDSIZE	safe/sqlite3.c	10725;"	d	file:
EXPR_TOKENONLYSIZE	safe/sqlite3.c	10726;"	d	file:
EXTRA_SIZE	safe/sqlite3.c	49588;"	d	file:
EnvSet	safe/spider.133.c	/^static void EnvSet(const char *szName, const char *szValue)$/;"	f	file:
EnvSet	safe/spider.135.c	/^static void EnvSet(const char *szName, const char *szValue)$/;"	f	file:
EnvSet	safe/spider.200.c	/^static void EnvSet(const char *szName, const char *szValue)$/;"	f	file:
EnvSet	safe/spider.203.c	/^static void EnvSet(const char *szName, const char *szValue)$/;"	f	file:
EnvSet	safe/spider.204.c	/^static void EnvSet(const char *szName, const char *szValue)$/;"	f	file:
EnvSet	safe/spider.210.c	/^static void EnvSet(const char *szName, const char *szValue)$/;"	f	file:
EnvSet	safe/spider.c	/^static void EnvSet(const char *szName, const char *szValue)$/;"	f	file:
EnvSet	spider.c	/^static void EnvSet(const char *szName, const char *szValue)$/;"	f	file:
ErrAuthorizationFailed	mtwamp.c	/^STATIC const char *ErrAuthorizationFailed = "wamp.error.authorization_failed";$/;"	v
ErrAuthorizationFailed	safe/mtwamp.c	/^STATIC const char *ErrAuthorizationFailed = "wamp.error.authorization_failed";$/;"	v
ErrCloseRealm	mtwamp.c	/^STATIC const char *ErrCloseRealm = "wamp.error.close_realm";$/;"	v
ErrCloseRealm	safe/mtwamp.c	/^STATIC const char *ErrCloseRealm = "wamp.error.close_realm";$/;"	v
ErrDomainAlreadyExists	mtwamp.c	/^STATIC const char *ErrDomainAlreadyExists = "wamp.error.procedure_already_exists";$/;"	v
ErrDomainAlreadyExists	safe/mtwamp.c	/^STATIC const char *ErrDomainAlreadyExists = "wamp.error.procedure_already_exists";$/;"	v
ErrGoodbyeAndOut	mtwamp.c	/^STATIC const char *ErrGoodbyeAndOut = "wamp.error.goodbye_and_out";$/;"	v
ErrGoodbyeAndOut	safe/mtwamp.c	/^STATIC const char *ErrGoodbyeAndOut = "wamp.error.goodbye_and_out";$/;"	v
ErrInvalidArgument	mtwamp.c	/^STATIC const char *ErrInvalidArgument = "wamp.error.invalid_argument";$/;"	v
ErrInvalidArgument	safe/mtwamp.c	/^STATIC const char *ErrInvalidArgument = "wamp.error.invalid_argument";$/;"	v
ErrInvalidUri	mtwamp.c	/^STATIC const char *ErrInvalidUri = "wamp.error.invalid_uri";$/;"	v
ErrInvalidUri	safe/mtwamp.c	/^STATIC const char *ErrInvalidUri = "wamp.error.invalid_uri";$/;"	v
ErrNoSuchDomain	mtwamp.c	/^STATIC const char *ErrNoSuchDomain = "wamp.error.no_such_procedure";$/;"	v
ErrNoSuchDomain	safe/mtwamp.c	/^STATIC const char *ErrNoSuchDomain = "wamp.error.no_such_procedure";$/;"	v
ErrNoSuchRealm	mtwamp.c	/^STATIC const char *ErrNoSuchRealm = "wamp.error.no_such_realm";$/;"	v
ErrNoSuchRealm	safe/mtwamp.c	/^STATIC const char *ErrNoSuchRealm = "wamp.error.no_such_realm";$/;"	v
ErrNoSuchRegistration	mtwamp.c	/^STATIC const char *ErrNoSuchRegistration = "wamp.error.no_such_registration";$/;"	v
ErrNoSuchRegistration	safe/mtwamp.c	/^STATIC const char *ErrNoSuchRegistration = "wamp.error.no_such_registration";$/;"	v
ErrNoSuchRole	mtwamp.c	/^STATIC const char *ErrNoSuchRole = "wamp.error.no_such_role";$/;"	v
ErrNoSuchRole	safe/mtwamp.c	/^STATIC const char *ErrNoSuchRole = "wamp.error.no_such_role";$/;"	v
ErrNoSuchSubscription	mtwamp.c	/^STATIC const char *ErrNoSuchSubscription = "wamp.error.no_such_subscription";$/;"	v
ErrNoSuchSubscription	safe/mtwamp.c	/^STATIC const char *ErrNoSuchSubscription = "wamp.error.no_such_subscription";$/;"	v
ErrNotAuthorized	mtwamp.c	/^STATIC const char *ErrNotAuthorized = "wamp.error.not_authorized";$/;"	v
ErrNotAuthorized	safe/mtwamp.c	/^STATIC const char *ErrNotAuthorized = "wamp.error.not_authorized";$/;"	v
ErrSystemShutdown	mtwamp.c	/^STATIC const char *ErrSystemShutdown = "wamp.error.system_shutdown";$/;"	v
ErrSystemShutdown	safe/mtwamp.c	/^STATIC const char *ErrSystemShutdown = "wamp.error.system_shutdown";$/;"	v
ErrorMessage	safe/spider.133.c	/^static rogxml *ErrorMessage(int nErr, int nSeverity, const char *szFmt, ...)$/;"	f	file:
ErrorMessage	safe/spider.135.c	/^static rogxml *ErrorMessage(int nErr, int nSeverity, const char *szFmt, ...)$/;"	f	file:
ErrorMessage	safe/spider.200.c	/^static rogxml *ErrorMessage(int nErr, int nSeverity, const char *szFmt, ...)$/;"	f	file:
ErrorMessage	safe/spider.203.c	/^static rogxml *ErrorMessage(int nErr, int nSeverity, const char *szFmt, ...)$/;"	f	file:
ErrorMessage	safe/spider.204.c	/^static rogxml *ErrorMessage(int nErr, int nSeverity, const char *szFmt, ...)$/;"	f	file:
ErrorMessage	safe/spider.210.c	/^static rogxml *ErrorMessage(int nErr, int nSeverity, const char *szFmt, ...)$/;"	f	file:
ErrorMessage	safe/spider.c	/^static rogxml *ErrorMessage(int nErr, int nSeverity, const char *szFmt, ...)$/;"	f	file:
ErrorMessage	spider.c	/^static rogxml *ErrorMessage(int nErr, int nSeverity, const char *szFmt, ...)$/;"	f	file:
Exit	safe/spider.133.c	/^static void Exit(int nCode)$/;"	f	file:
Exit	safe/spider.135.c	/^static void Exit(int nCode)$/;"	f	file:
Exit	safe/spider.200.c	/^static void Exit(int nCode)$/;"	f	file:
Exit	safe/spider.203.c	/^static void Exit(int nCode)$/;"	f	file:
Exit	safe/spider.204.c	/^static void Exit(int nCode)$/;"	f	file:
Exit	safe/spider.210.c	/^static void Exit(int nCode)$/;"	f	file:
Exit	safe/spider.c	/^static void Exit(int nCode)$/;"	f	file:
Exit	spider.c	/^static void Exit(int nCode)$/;"	f	file:
ExpandBlob	safe/sqlite3.c	13393;"	d	file:
ExpandBlob	safe/sqlite3.c	13396;"	d	file:
Explain	safe/sqlite3.c	/^struct Explain {$/;"	s	file:
Explain	safe/sqlite3.c	/^typedef struct Explain Explain;$/;"	t	file:
Expr	safe/sqlite3.c	/^struct Expr {$/;"	s	file:
Expr	safe/sqlite3.c	/^typedef struct Expr Expr;$/;"	t	file:
ExprClearProperty	safe/sqlite3.c	10717;"	d	file:
ExprHasAnyProperty	safe/sqlite3.c	10715;"	d	file:
ExprHasProperty	safe/sqlite3.c	10714;"	d	file:
ExprList	safe/sqlite3.c	/^struct ExprList {$/;"	s	file:
ExprList	safe/sqlite3.c	/^typedef struct ExprList ExprList;$/;"	t	file:
ExprList_item	safe/sqlite3.c	/^  struct ExprList_item { \/* For each expression in the list *\/$/;"	s	struct:ExprList	file:
ExprSetIrreducible	safe/sqlite3.c	10705;"	d	file:
ExprSetIrreducible	safe/sqlite3.c	10707;"	d	file:
ExprSetProperty	safe/sqlite3.c	10716;"	d	file:
ExprSpan	safe/sqlite3.c	/^struct ExprSpan {$/;"	s	file:
ExprSpan	safe/sqlite3.c	/^typedef struct ExprSpan ExprSpan;$/;"	t	file:
FABS	safe/sqlite3.c	135938;"	d	file:
FILEHANDLEID	safe/sqlite3.c	39376;"	d	file:
FILE_ATTRIBUTE_MASK	safe/sqlite3.c	32275;"	d	file:
FILE_FLAG_MASK	safe/sqlite3.c	32271;"	d	file:
FKey	safe/sqlite3.c	/^struct FKey {$/;"	s	file:
FKey	safe/sqlite3.c	/^typedef struct FKey FKey;$/;"	t	file:
FLAG_INTERN	safe/sqlite3.c	19544;"	d	file:
FLAG_SIGNED	safe/sqlite3.c	19543;"	d	file:
FLAG_STRING	safe/sqlite3.c	19545;"	d	file:
FOREGUARD	safe/sqlite3.c	15625;"	d	file:
FTS3_DOCID_SEARCH	safe/sqlite3.c	117910;"	d	file:
FTS3_EVAL_FILTER	safe/sqlite3.c	117890;"	d	file:
FTS3_EVAL_MATCHINFO	safe/sqlite3.c	117892;"	d	file:
FTS3_EVAL_NEXT	safe/sqlite3.c	117891;"	d	file:
FTS3_FULLSCAN_SEARCH	safe/sqlite3.c	117909;"	d	file:
FTS3_FULLTEXT_SEARCH	safe/sqlite3.c	117911;"	d	file:
FTS3_HASH_BINARY	safe/sqlite3.c	117595;"	d	file:
FTS3_HASH_STRING	safe/sqlite3.c	117594;"	d	file:
FTS3_MATCHINFO_AVGLENGTH	safe/sqlite3.c	131874;"	d	file:
FTS3_MATCHINFO_DEFAULT	safe/sqlite3.c	131882;"	d	file:
FTS3_MATCHINFO_HITS	safe/sqlite3.c	131877;"	d	file:
FTS3_MATCHINFO_LCS	safe/sqlite3.c	131876;"	d	file:
FTS3_MATCHINFO_LENGTH	safe/sqlite3.c	131875;"	d	file:
FTS3_MATCHINFO_NCOL	safe/sqlite3.c	131872;"	d	file:
FTS3_MATCHINFO_NDOC	safe/sqlite3.c	131873;"	d	file:
FTS3_MATCHINFO_NPHRASE	safe/sqlite3.c	131871;"	d	file:
FTS3_MAX_PENDING_DATA	safe/sqlite3.c	117658;"	d	file:
FTS3_MERGE_COUNT	safe/sqlite3.c	117648;"	d	file:
FTS3_NODE_CHUNKSIZE	safe/sqlite3.c	126515;"	d	file:
FTS3_NODE_CHUNKSIZE	safe/sqlite3.c	126518;"	d	file:
FTS3_NODE_CHUNK_THRESHOLD	safe/sqlite3.c	126516;"	d	file:
FTS3_NODE_CHUNK_THRESHOLD	safe/sqlite3.c	126519;"	d	file:
FTS3_NODE_PADDING	safe/sqlite3.c	126493;"	d	file:
FTS3_SEGCURSOR_ALL	safe/sqlite3.c	118040;"	d	file:
FTS3_SEGCURSOR_PENDING	safe/sqlite3.c	118039;"	d	file:
FTS3_SEGDIR_MAXLEVEL	safe/sqlite3.c	117696;"	d	file:
FTS3_SEGDIR_MAXLEVEL_STR	safe/sqlite3.c	117697;"	d	file:
FTS3_SEGMENT_COLUMN_FILTER	safe/sqlite3.c	118052;"	d	file:
FTS3_SEGMENT_FIRST	safe/sqlite3.c	118055;"	d	file:
FTS3_SEGMENT_IGNORE_EMPTY	safe/sqlite3.c	118051;"	d	file:
FTS3_SEGMENT_PREFIX	safe/sqlite3.c	118053;"	d	file:
FTS3_SEGMENT_REQUIRE_POS	safe/sqlite3.c	118050;"	d	file:
FTS3_SEGMENT_SCAN	safe/sqlite3.c	118054;"	d	file:
FTS3_TERMS_SCHEMA	safe/sqlite3.c	123254;"	d	file:
FTS3_VARINT_MAX	safe/sqlite3.c	117679;"	d	file:
FTS4AUX_EQ_CONSTRAINT	safe/sqlite3.c	123333;"	d	file:
FTS4AUX_GE_CONSTRAINT	safe/sqlite3.c	123334;"	d	file:
FTS4AUX_LE_CONSTRAINT	safe/sqlite3.c	123335;"	d	file:
FTSQUERY_AND	safe/sqlite3.c	118009;"	d	file:
FTSQUERY_NEAR	safe/sqlite3.c	118007;"	d	file:
FTSQUERY_NOT	safe/sqlite3.c	118008;"	d	file:
FTSQUERY_OR	safe/sqlite3.c	118010;"	d	file:
FTSQUERY_PHRASE	safe/sqlite3.c	118011;"	d	file:
FTS_CORRUPT_VTAB	safe/sqlite3.c	117767;"	d	file:
FTS_CORRUPT_VTAB	safe/sqlite3.c	117769;"	d	file:
FTS_MAX_APPENDABLE_HEIGHT	safe/sqlite3.c	126481;"	d	file:
FTS_STAT_AUTOINCRMERGE	safe/sqlite3.c	126528;"	d	file:
FTS_STAT_DOCTOTAL	safe/sqlite3.c	126526;"	d	file:
FTS_STAT_INCRMERGEHINT	safe/sqlite3.c	126527;"	d	file:
FUNCTION	safe/sqlite3.c	10037;"	d	file:
FUNCTION2	safe/sqlite3.c	10040;"	d	file:
FUNC_PERFECT_MATCH	safe/sqlite3.c	86277;"	d	file:
FailWebsocket	safe/spider.c	/^int FailWebsocket(BIO *io, const char *reason)$/;"	f
FailWebsocket	spider.c	/^static int FailWebsocket(BIO *io, const char *reason)$/;"	f	file:
Fatal	safe/spider.133.c	/^static void Fatal(const char *szFmt, ...)$/;"	f	file:
Fatal	safe/spider.135.c	/^static void Fatal(const char *szFmt, ...)$/;"	f	file:
Fatal	safe/spider.200.c	/^static void Fatal(const char *szFmt, ...)$/;"	f	file:
Fatal	safe/spider.203.c	/^static void Fatal(const char *szFmt, ...)$/;"	f	file:
Fatal	safe/spider.204.c	/^static void Fatal(const char *szFmt, ...)$/;"	f	file:
Fatal	safe/spider.210.c	/^static void Fatal(const char *szFmt, ...)$/;"	f	file:
Fatal	safe/spider.c	/^static void Fatal(const char *szFmt, ...)$/;"	f	file:
Fatal	spider.c	/^static void Fatal(const char *szFmt, ...)$/;"	f	file:
FatalHttp	safe/spider.200.c	/^static int FatalHttp(BIO *io, int nCode, const char *szFmt, ...)$/;"	f	file:
FatalHttp	safe/spider.203.c	/^static void FatalHttp(BIO *io, int nCode, const char *szFmt, ...)$/;"	f	file:
FatalHttp	safe/spider.204.c	/^static void FatalHttp(BIO *io, int nCode, const char *szFmt, ...)$/;"	f	file:
FatalHttp	safe/spider.210.c	/^static void FatalHttp(BIO *io, int nCode, const char *szFmt, ...)$/;"	f	file:
FatalHttp	safe/spider.c	/^static void FatalHttp(BIO *io, int nCode, const char *szFmt, ...)$/;"	f	file:
FatalHttp	spider.c	/^static void FatalHttp(BIO *io, int nCode, const char *szFmt, ...)$/;"	f	file:
FatalSSL	safe/spider.133.c	/^static void FatalSSL(const char *szFmt, ...)$/;"	f	file:
FatalSSL	safe/spider.135.c	/^static void FatalSSL(const char *szFmt, ...)$/;"	f	file:
FatalSSL	safe/spider.200.c	/^static void FatalSSL(const char *szFmt, ...)$/;"	f	file:
FatalSSL	safe/spider.203.c	/^static void FatalSSL(const char *szFmt, ...)$/;"	f	file:
FatalSSL	safe/spider.204.c	/^static void FatalSSL(const char *szFmt, ...)$/;"	f	file:
FatalSSL	safe/spider.210.c	/^static void FatalSSL(const char *szFmt, ...)$/;"	f	file:
FatalSSL	safe/spider.c	/^static void FatalSSL(const char *szFmt, ...)$/;"	f	file:
FatalSSL	spider.c	/^static void FatalSSL(const char *szFmt, ...)$/;"	f	file:
FileChunk	safe/sqlite3.c	/^struct FileChunk {$/;"	s	file:
FileChunk	safe/sqlite3.c	/^typedef struct FileChunk FileChunk;$/;"	t	file:
FileDescription	safe/spider.203.c	/^static void FileDescription(const char *szFilename, const char *szDescription)$/;"	f	file:
FileDescription	safe/spider.204.c	/^static void FileDescription(const char *szFilename, const char *szDescription)$/;"	f	file:
FileDescription	safe/spider.210.c	/^static void FileDescription(const char *szFilename, const char *szDescription)$/;"	f	file:
FileDescription	safe/spider.c	/^static void FileDescription(const char *szFilename, const char *szDescription)$/;"	f	file:
FileDescription	spider.c	/^static void FileDescription(const char *szFilename, const char *szDescription)$/;"	f	file:
FilePoint	safe/sqlite3.c	/^struct FilePoint {$/;"	s	file:
FilePoint	safe/sqlite3.c	/^typedef struct FilePoint FilePoint;$/;"	t	file:
FileTime	safe/spider.200.c	/^time_t FileTime(const char *szFile)$/;"	f
FileTime	safe/spider.203.c	/^time_t FileTime(const char *szFile)$/;"	f
FileTime	safe/spider.204.c	/^time_t FileTime(const char *szFile)$/;"	f
FileTime	safe/spider.210.c	/^time_t FileTime(const char *szFile)$/;"	f
FileTime	safe/spider.c	/^time_t FileTime(const char *szFile)$/;"	f
FileTime	spider.c	/^time_t FileTime(const char *szFile)$/;"	f
FlushInput	spider.c	/^static void FlushInput(BIO *io)$/;"	f	file:
FromLegcayApi	spider.c	/^int FromLegcayApi(CHAN *chan)$/;"	f
Fts3Cursor	safe/sqlite3.c	/^struct Fts3Cursor {$/;"	s	file:
Fts3Cursor	safe/sqlite3.c	/^typedef struct Fts3Cursor Fts3Cursor;$/;"	t	file:
Fts3DeferredToken	safe/sqlite3.c	/^struct Fts3DeferredToken {$/;"	s	file:
Fts3DeferredToken	safe/sqlite3.c	/^typedef struct Fts3DeferredToken Fts3DeferredToken;$/;"	t	file:
Fts3Doclist	safe/sqlite3.c	/^struct Fts3Doclist {$/;"	s	file:
Fts3Doclist	safe/sqlite3.c	/^typedef struct Fts3Doclist Fts3Doclist;$/;"	t	file:
Fts3Expr	safe/sqlite3.c	/^struct Fts3Expr {$/;"	s	file:
Fts3Expr	safe/sqlite3.c	/^typedef struct Fts3Expr Fts3Expr;$/;"	t	file:
Fts3Hash	safe/sqlite3.c	/^struct Fts3Hash {$/;"	s	file:
Fts3Hash	safe/sqlite3.c	/^typedef struct Fts3Hash Fts3Hash;$/;"	t	file:
Fts3HashElem	safe/sqlite3.c	/^struct Fts3HashElem {$/;"	s	file:
Fts3HashElem	safe/sqlite3.c	/^typedef struct Fts3HashElem Fts3HashElem;$/;"	t	file:
Fts3Index	safe/sqlite3.c	/^  struct Fts3Index {$/;"	s	struct:Fts3Table	file:
Fts3MultiSegReader	safe/sqlite3.c	/^struct Fts3MultiSegReader {$/;"	s	file:
Fts3MultiSegReader	safe/sqlite3.c	/^typedef struct Fts3MultiSegReader Fts3MultiSegReader;$/;"	t	file:
Fts3Phrase	safe/sqlite3.c	/^struct Fts3Phrase {$/;"	s	file:
Fts3Phrase	safe/sqlite3.c	/^typedef struct Fts3Phrase Fts3Phrase;$/;"	t	file:
Fts3PhraseToken	safe/sqlite3.c	/^struct Fts3PhraseToken {$/;"	s	file:
Fts3PhraseToken	safe/sqlite3.c	/^typedef struct Fts3PhraseToken Fts3PhraseToken;$/;"	t	file:
Fts3SegFilter	safe/sqlite3.c	/^struct Fts3SegFilter {$/;"	s	file:
Fts3SegFilter	safe/sqlite3.c	/^typedef struct Fts3SegFilter Fts3SegFilter;$/;"	t	file:
Fts3SegReader	safe/sqlite3.c	/^struct Fts3SegReader {$/;"	s	file:
Fts3SegReader	safe/sqlite3.c	/^typedef struct Fts3SegReader Fts3SegReader;$/;"	t	file:
Fts3Table	safe/sqlite3.c	/^struct Fts3Table {$/;"	s	file:
Fts3Table	safe/sqlite3.c	/^typedef struct Fts3Table Fts3Table;$/;"	t	file:
Fts3TokenAndCost	safe/sqlite3.c	/^struct Fts3TokenAndCost {$/;"	s	file:
Fts3TokenAndCost	safe/sqlite3.c	/^typedef struct Fts3TokenAndCost Fts3TokenAndCost;$/;"	t	file:
Fts3auxColstats	safe/sqlite3.c	/^  struct Fts3auxColstats {$/;"	s	struct:Fts3auxCursor	file:
Fts3auxCursor	safe/sqlite3.c	/^struct Fts3auxCursor {$/;"	s	file:
Fts3auxCursor	safe/sqlite3.c	/^typedef struct Fts3auxCursor Fts3auxCursor;$/;"	t	file:
Fts3auxTable	safe/sqlite3.c	/^struct Fts3auxTable {$/;"	s	file:
Fts3auxTable	safe/sqlite3.c	/^typedef struct Fts3auxTable Fts3auxTable;$/;"	t	file:
FullSignalName	safe/spider.133.c	/^const char *FullSignalName(int sig)$/;"	f
FullSignalName	safe/spider.135.c	/^const char *FullSignalName(int sig)$/;"	f
FullSignalName	safe/spider.200.c	/^const char *FullSignalName(int sig)$/;"	f
FullSignalName	safe/spider.203.c	/^const char *FullSignalName(int sig)$/;"	f
FullSignalName	safe/spider.204.c	/^const char *FullSignalName(int sig)$/;"	f
FullSignalName	safe/spider.210.c	/^const char *FullSignalName(int sig)$/;"	f
FullSignalName	safe/spider.c	/^const char *FullSignalName(int sig)$/;"	f
FullSignalName	spider.c	/^const char *FullSignalName(int sig)$/;"	f
FuncDef	safe/sqlite3.c	/^struct FuncDef {$/;"	s	file:
FuncDef	safe/sqlite3.c	/^typedef struct FuncDef FuncDef;$/;"	t	file:
FuncDefHash	safe/sqlite3.c	/^struct FuncDefHash {$/;"	s	file:
FuncDefHash	safe/sqlite3.c	/^typedef struct FuncDefHash FuncDefHash;$/;"	t	file:
FuncDestructor	safe/sqlite3.c	/^struct FuncDestructor {$/;"	s	file:
FuncDestructor	safe/sqlite3.c	/^typedef struct FuncDestructor FuncDestructor;$/;"	t	file:
GLOBAL	safe/sqlite3.c	8156;"	d	file:
GLOBAL	safe/sqlite3.c	8162;"	d	file:
GetAllApis	safe/spider.133.c	/^const char **GetAllApis()$/;"	f
GetAllApis	safe/spider.135.c	/^const char **GetAllApis()$/;"	f
GetAllApis	safe/spider.200.c	/^const char **GetAllApis()$/;"	f
GetAllApis	safe/spider.203.c	/^const char **GetAllApis()$/;"	f
GetAllApis	safe/spider.204.c	/^const char **GetAllApis()$/;"	f
GetAllApis	safe/spider.210.c	/^const char **GetAllApis()$/;"	f
GetAllApis	safe/spider.c	/^const char **GetAllApis()$/;"	f
GetAllApis	spider.c	/^const char **GetAllApis()$/;"	f
GetCertificateDir	safe/spider.133.c	/^static const char *GetCertificateDir()$/;"	f	file:
GetCertificateDir	safe/spider.135.c	/^static const char *GetCertificateDir()$/;"	f	file:
GetCertificateDir	safe/spider.200.c	/^static const char *GetCertificateDir()$/;"	f	file:
GetCertificateDir	safe/spider.203.c	/^static const char *GetCertificateDir()$/;"	f	file:
GetCertificateDir	safe/spider.204.c	/^static const char *GetCertificateDir()$/;"	f	file:
GetCertificateDir	safe/spider.210.c	/^static const char *GetCertificateDir()$/;"	f	file:
GetCertificateDir	safe/spider.c	/^static const char *GetCertificateDir()$/;"	f	file:
GetCertificateDir	spider.c	/^static const char *GetCertificateDir()$/;"	f	file:
GetCurrentProcessId	safe/sqlite3.c	/^int GetCurrentProcessId(void) {$/;"	f
GetDaemonPid	safe/spider.133.c	/^static int GetDaemonPid()$/;"	f	file:
GetDaemonPid	safe/spider.135.c	/^static int GetDaemonPid()$/;"	f	file:
GetDaemonPid	safe/spider.200.c	/^static int GetDaemonPid()$/;"	f	file:
GetDaemonPid	safe/spider.203.c	/^static int GetDaemonPid()$/;"	f	file:
GetDaemonPid	safe/spider.204.c	/^static int GetDaemonPid()$/;"	f	file:
GetDaemonPid	safe/spider.210.c	/^static int GetDaemonPid()$/;"	f	file:
GetDaemonPid	safe/spider.c	/^static int GetDaemonPid()$/;"	f	file:
GetDaemonPid	spider.c	/^static int GetDaemonPid()$/;"	f	file:
GetDirEntries	safe/spider.133.c	/^const char **GetDirEntries(const char **list, const char *prefix, const char *szDir)$/;"	f
GetDirEntries	safe/spider.135.c	/^const char **GetDirEntries(const char **list, const char *prefix, const char *szDir)$/;"	f
GetDirEntries	safe/spider.200.c	/^const char **GetDirEntries(const char **list, const char *prefix, const char *szDir)$/;"	f
GetDirEntries	safe/spider.203.c	/^const char **GetDirEntries(const char **list, const char *prefix, const char *szDir)$/;"	f
GetDirEntries	safe/spider.204.c	/^const char **GetDirEntries(const char **list, const char *prefix, const char *szDir)$/;"	f
GetDirEntries	safe/spider.210.c	/^const char **GetDirEntries(const char **list, const char *prefix, const char *szDir, const char *szExt)$/;"	f
GetDirEntries	safe/spider.c	/^const char **GetDirEntries(const char **list, const char *prefix, const char *szDir, const char *szExt)$/;"	f
GetDirEntries	spider.c	/^const char **GetDirEntries(const char *prefix, const char *szDir, const char *szExt, int depth)$/;"	f
GetErrorNo	safe/spider.133.c	/^int GetErrorNo()			{ return _nError; }$/;"	f
GetErrorNo	safe/spider.135.c	/^int GetErrorNo()			{ return _nError; }$/;"	f
GetErrorNo	safe/spider.200.c	/^int GetErrorNo()			{ return _nError; }$/;"	f
GetErrorNo	safe/spider.203.c	/^int GetErrorNo()			{ return _nError; }$/;"	f
GetErrorNo	safe/spider.204.c	/^int GetErrorNo()			{ return _nError; }$/;"	f
GetErrorNo	safe/spider.210.c	/^int GetErrorNo()			{ return _nError; }$/;"	f
GetErrorNo	safe/spider.c	/^int GetErrorNo()			{ return _nError; }$/;"	f
GetErrorNo	spider.c	/^static int GetErrorNo()			{ return _nError; }$/;"	f	file:
GetErrorStr	safe/spider.133.c	/^const char *GetErrorStr()	{ return _szError; }$/;"	f
GetErrorStr	safe/spider.135.c	/^const char *GetErrorStr()	{ return _szError; }$/;"	f
GetErrorStr	safe/spider.200.c	/^const char *GetErrorStr()	{ return _szError; }$/;"	f
GetErrorStr	safe/spider.203.c	/^const char *GetErrorStr()	{ return _szError; }$/;"	f
GetErrorStr	safe/spider.204.c	/^const char *GetErrorStr()	{ return _szError; }$/;"	f
GetErrorStr	safe/spider.210.c	/^const char *GetErrorStr()	{ return _szError; }$/;"	f
GetErrorStr	safe/spider.c	/^const char *GetErrorStr()	{ return _szError; }$/;"	f
GetErrorStr	spider.c	/^static const char *GetErrorStr()	{ return _szError; }$/;"	f	file:
GetEtcDir	safe/spider.133.c	/^static const char *GetEtcDir()					{ return szEtcDir; }$/;"	f	file:
GetEtcDir	safe/spider.135.c	/^static const char *GetEtcDir()					{ return szEtcDir; }$/;"	f	file:
GetEtcDir	safe/spider.200.c	/^static const char *GetEtcDir()					{ return szEtcDir; }$/;"	f	file:
GetEtcDir	safe/spider.203.c	/^static const char *GetEtcDir()					{ return szEtcDir; }$/;"	f	file:
GetEtcDir	safe/spider.204.c	/^static const char *GetEtcDir()					{ return szEtcDir; }$/;"	f	file:
GetEtcDir	safe/spider.210.c	/^static const char *GetEtcDir()					{ return szEtcDir; }$/;"	f	file:
GetEtcDir	safe/spider.c	/^static const char *GetEtcDir()					{ return szEtcDir; }$/;"	f	file:
GetEtcDir	spider.c	/^static const char *GetEtcDir()					{ return szEtcDir; }$/;"	f	file:
GetFullHttpRequest	safe/spider.c	/^SSMAP *GetFullHttpRequest(BIO *io, const char **pMethod, const char **pURI, const char **pBody, unsigned long *pLen)$/;"	f
GetFullHttpRequest	spider.c	/^SSMAP *GetFullHttpRequest(BIO *io, const char **pMethod, const char **pURI, const char **pBody, unsigned long *pLen)$/;"	f
GetHttpBody	safe/spider.c	/^const char *GetHttpBody(BIO *io, SSMAP *header, unsigned long *pLen)$/;"	f
GetHttpBody	spider.c	/^const char *GetHttpBody(BIO *io, SSMAP *header, unsigned long *pLen)$/;"	f
GetHttpHeader	safe/spider.c	/^SSMAP *GetHttpHeader(BIO *io)$/;"	f
GetHttpHeader	spider.c	/^SSMAP *GetHttpHeader(BIO *io)$/;"	f
GetHttpRequest	safe/spider.c	/^SSMAP *GetHttpRequest(BIO *io, const char **pBody, unsigned long *pLen)$/;"	f
GetHttpRequest	spider.c	/^SSMAP *GetHttpRequest(BIO *io, const char **pBody, unsigned long *pLen)$/;"	f
GetIOMIME	safe/spider.133.c	/^static MIME *GetIOMIME(BIO *io)$/;"	f	file:
GetIOMIME	safe/spider.135.c	/^static MIME *GetIOMIME(BIO *io)$/;"	f	file:
GetIOMIME	safe/spider.200.c	/^static MIME *GetIOMIME(BIO *io)$/;"	f	file:
GetIOMIME	safe/spider.203.c	/^static MIME *GetIOMIME(BIO *io)$/;"	f	file:
GetIOMIME	safe/spider.204.c	/^static MIME *GetIOMIME(BIO *io)$/;"	f	file:
GetIOMIME	safe/spider.210.c	/^static MIME *GetIOMIME(BIO *io)$/;"	f	file:
GetIOMIME	safe/spider.c	/^static MIME *GetIOMIME(BIO *io)$/;"	f	file:
GetIOMIME	spider.c	/^static MIME *GetIOMIME(BIO *io)$/;"	f	file:
GetIOMIMEHeader	safe/spider.133.c	/^static MIME *GetIOMIMEHeader(BIO *io)$/;"	f	file:
GetIOMIMEHeader	safe/spider.135.c	/^static MIME *GetIOMIMEHeader(BIO *io)$/;"	f	file:
GetIOMIMEHeader	safe/spider.200.c	/^static MIME *GetIOMIMEHeader(BIO *io)$/;"	f	file:
GetIOMIMEHeader	safe/spider.203.c	/^static MIME *GetIOMIMEHeader(BIO *io)$/;"	f	file:
GetIOMIMEHeader	safe/spider.204.c	/^static MIME *GetIOMIMEHeader(BIO *io)$/;"	f	file:
GetIOMIMEHeader	safe/spider.210.c	/^static MIME *GetIOMIMEHeader(BIO *io)$/;"	f	file:
GetIOMIMEHeader	safe/spider.c	/^static MIME *GetIOMIMEHeader(BIO *io)$/;"	f	file:
GetIOMIMEHeader	spider.c	/^static MIME *GetIOMIMEHeader(BIO *io)$/;"	f	file:
GetIncomingHeader	safe/spider.c	/^int GetIncomingHeader(BIO *io, const char **pMethod, const char **pURI, const char **pVersion)$/;"	f
GetIncomingHeader	spider.c	/^int GetIncomingHeader(BIO *io, const char **pMethod, const char **pURI, const char **pVersion)$/;"	f
GetNow	safe/spider.c	/^double GetNow()$/;"	f
GetNow	spider.c	/^double GetNow()$/;"	f
GetRecordedDaemonPid	safe/spider.133.c	/^static int GetRecordedDaemonPid()$/;"	f	file:
GetRecordedDaemonPid	safe/spider.135.c	/^static int GetRecordedDaemonPid()$/;"	f	file:
GetRecordedDaemonPid	safe/spider.200.c	/^static int GetRecordedDaemonPid()$/;"	f	file:
GetRecordedDaemonPid	safe/spider.203.c	/^static int GetRecordedDaemonPid()$/;"	f	file:
GetRecordedDaemonPid	safe/spider.204.c	/^static int GetRecordedDaemonPid()$/;"	f	file:
GetRecordedDaemonPid	safe/spider.210.c	/^static int GetRecordedDaemonPid()$/;"	f	file:
GetRecordedDaemonPid	safe/spider.c	/^static int GetRecordedDaemonPid()$/;"	f	file:
GetRecordedDaemonPid	spider.c	/^static int GetRecordedDaemonPid()$/;"	f	file:
GlogUpperToLower	safe/sqlite3.c	87675;"	d	file:
GlogUpperToLower	safe/sqlite3.c	87677;"	d	file:
Greeting	safe/spider.133.c	/^static rogxml *Greeting(const char *szIp, const char *szDescr)$/;"	f	file:
Greeting	safe/spider.135.c	/^static rogxml *Greeting(const char *szIp, const char *szDescr)$/;"	f	file:
Greeting	safe/spider.200.c	/^static rogxml *Greeting(const char *szIp, const char *szDescr)$/;"	f	file:
Greeting	safe/spider.203.c	/^static rogxml *Greeting(const char *szIp, const char *szDescr)$/;"	f	file:
Greeting	safe/spider.204.c	/^static rogxml *Greeting(const char *szIp, const char *szDescr)$/;"	f	file:
Greeting	safe/spider.210.c	/^static rogxml *Greeting(const char *szIp, const char *szDescr)$/;"	f	file:
Greeting	safe/spider.c	/^static rogxml *Greeting(const char *szIp, const char *szDescr)$/;"	f	file:
Greeting	spider.c	/^static rogxml *Greeting(const char *szIp, const char *szDescr)$/;"	f	file:
GrepFile	safe/spider.133.c	/^int GrepFile(const char *szDir, const char *szFile, const char *szSearch)$/;"	f
GrepFile	safe/spider.135.c	/^int GrepFile(const char *szDir, const char *szFile, const char *szSearch)$/;"	f
GrepFile	safe/spider.200.c	/^int GrepFile(const char *szDir, const char *szFile, const char *szSearch)$/;"	f
GrepFile	safe/spider.203.c	/^int GrepFile(const char *szDir, const char *szFile, const char *szSearch)$/;"	f
GrepFile	safe/spider.204.c	/^int GrepFile(const char *szDir, const char *szFile, const char *szSearch)$/;"	f
GrepFile	safe/spider.210.c	/^int GrepFile(const char *szDir, const char *szFile, const char *szSearch)$/;"	f
GrepFile	safe/spider.c	/^int GrepFile(const char *szDir, const char *szFile, const char *szSearch)$/;"	f
GrepFile	spider.c	/^int GrepFile(const char *szDir, const char *szFile, const char *szSearch)$/;"	f
HANDLE_TO_WINFILE	safe/sqlite3.c	33746;"	d	file:
HASHSIZE	safe/sqlite3.c	134259;"	d	file:
HASHTABLE_HASH_1	safe/sqlite3.c	46674;"	d	file:
HASHTABLE_NPAGE	safe/sqlite3.c	46673;"	d	file:
HASHTABLE_NPAGE_ONE	safe/sqlite3.c	46682;"	d	file:
HASHTABLE_NSLOT	safe/sqlite3.c	46675;"	d	file:
HAVE_FULLFSYNC	safe/sqlite3.c	28353;"	d	file:
HAVE_FULLFSYNC	safe/sqlite3.c	28355;"	d	file:
HAVE_LOCALTIME_S	safe/sqlite3.c	14055;"	d	file:
HL7TimeStamp	safe/spider.133.c	/^static const char *HL7TimeStamp(time_t t)$/;"	f	file:
HL7TimeStamp	safe/spider.135.c	/^static const char *HL7TimeStamp(time_t t)$/;"	f	file:
HL7TimeStamp	safe/spider.200.c	/^static const char *HL7TimeStamp(time_t t)$/;"	f	file:
HL7TimeStamp	safe/spider.203.c	/^static const char *HL7TimeStamp(time_t t)$/;"	f	file:
HL7TimeStamp	safe/spider.204.c	/^static const char *HL7TimeStamp(time_t t)$/;"	f	file:
HL7TimeStamp	safe/spider.210.c	/^static const char *HL7TimeStamp(time_t t)$/;"	f	file:
HL7TimeStamp	safe/spider.c	/^static const char *HL7TimeStamp(time_t t)$/;"	f	file:
HL7TimeStamp	spider.c	/^static const char *HL7TimeStamp(time_t t)$/;"	f	file:
HandleIncomingUtf8	safe/spider.c	/^int HandleIncomingUtf8(WS *channel, int len, const char *text)$/;"	f
HandleSignal	safe/spider.133.c	/^static void HandleSignal(int n)$/;"	f	file:
HandleSignal	safe/spider.135.c	/^static void HandleSignal(int n)$/;"	f	file:
HandleSignal	safe/spider.200.c	/^static void HandleSignal(int n)$/;"	f	file:
HandleSignal	safe/spider.203.c	/^static void HandleSignal(int n)$/;"	f	file:
HandleSignal	safe/spider.204.c	/^static void HandleSignal(int n)$/;"	f	file:
HandleSignal	safe/spider.210.c	/^static void HandleSignal(int n)$/;"	f	file:
HandleSignal	safe/spider.c	/^static void HandleSignal(int n)$/;"	f	file:
HandleSignal	spider.c	/^static void HandleSignal(int n)$/;"	f	file:
Hash	safe/sqlite3.c	/^struct Hash {$/;"	s	file:
Hash	safe/sqlite3.c	/^typedef struct Hash Hash;$/;"	t	file:
HashElem	safe/sqlite3.c	/^struct HashElem {$/;"	s	file:
HashElem	safe/sqlite3.c	/^typedef struct HashElem HashElem;$/;"	t	file:
Html	safe/spider.c	/^static const char *Html(const char *szText)$/;"	f	file:
Html	spider.c	/^static const char *Html(const char *szText)$/;"	f	file:
HtmlEscape	safe/spider.133.c	/^static const char *HtmlEscape(const char *szText)$/;"	f	file:
HtmlEscape	safe/spider.135.c	/^static const char *HtmlEscape(const char *szText)$/;"	f	file:
HtmlEscape	safe/spider.200.c	/^static const char *HtmlEscape(const char *szText)$/;"	f	file:
HtmlEscape	safe/spider.203.c	/^static const char *HtmlEscape(const char *szText)$/;"	f	file:
HtmlEscape	safe/spider.204.c	/^static const char *HtmlEscape(const char *szText)$/;"	f	file:
HtmlEscape	safe/spider.210.c	/^static const char *HtmlEscape(const char *szText)$/;"	f	file:
HtmlEscape	safe/spider.c	/^static const char *HtmlEscape(const char *szText)$/;"	f	file:
HtmlEscape	spider.c	/^static const char *HtmlEscape(const char *szText)$/;"	f	file:
HttpHeader	safe/spider.133.c	/^static const char *HttpHeader(nCode)$/;"	f	file:
HttpHeader	safe/spider.135.c	/^static const char *HttpHeader(nCode)$/;"	f	file:
HttpHeader	safe/spider.200.c	/^static const char *HttpHeader(nCode)$/;"	f	file:
HttpHeader	safe/spider.203.c	/^static const char *HttpHeader(nCode)$/;"	f	file:
HttpHeader	safe/spider.204.c	/^static const char *HttpHeader(nCode)$/;"	f	file:
HttpHeader	safe/spider.210.c	/^static const char *HttpHeader(nCode)$/;"	f	file:
HttpHeader	safe/spider.c	/^static const char *HttpHeader(nCode)$/;"	f	file:
HttpHeader	spider.c	/^static const char *HttpHeader(nCode)$/;"	f	file:
HttpLoop	safe/spider.c	/^int HttpLoop(BIO *io, const char *szMethod, const char *szURI)$/;"	f
HttpLoop	spider.c	/^int HttpLoop(BIO *io, const char *szMethod, const char *szURI)$/;"	f
HttpRequest	safe/spider.c	/^int HttpRequest(const char *szAddr, int nPort, int isSsl, const char *verb, const char *uri, SSMAP *headers, const char *content, int len)$/;"	f
HttpRequest	spider.c	/^int HttpRequest(const char *szAddr, int nPort, int isSsl, const char *verb, const char *uri, SSMAP *headers, const char *content, int len)$/;"	f
HttpRequestValues	safe/spider.c	/^int HttpRequestValues(const char *szAddr, int nPort, int isSsl, const char *verb, const char *uri, SSMAP *headers, SSMAP *values, const char *payload)$/;"	f
HttpRequestValues	spider.c	/^int HttpRequestValues(const char *szAddr, int nPort, int isSsl, const char *verb, const char *uri, SSMAP *headers, SSMAP *values, const char *payload)$/;"	f
HttpResponseText	safe/spider.133.c	/^const char *HttpResponseText(int code)$/;"	f
HttpResponseText	safe/spider.135.c	/^const char *HttpResponseText(int code)$/;"	f
HttpResponseText	safe/spider.200.c	/^const char *HttpResponseText(int code)$/;"	f
HttpResponseText	safe/spider.203.c	/^const char *HttpResponseText(int code)$/;"	f
HttpResponseText	safe/spider.204.c	/^const char *HttpResponseText(int code)$/;"	f
HttpResponseText	safe/spider.210.c	/^const char *HttpResponseText(int code)$/;"	f
HttpResponseText	safe/spider.c	/^const char *HttpResponseText(int code)$/;"	f
HttpResponseText	spider.c	/^const char *HttpResponseText(int code)$/;"	f
ID	jtest.mak	/^ID=jtest$/;"	m
ID	makefile	/^ID=spider$/;"	m
ID	spider.mak	/^ID=spider$/;"	m
IDMAP	mtwamp.c	33;"	d	file:
IDMAP	mtwamp.h	10;"	d
IDMAP	safe/mtwamp.c	18;"	d	file:
INCLUDES	jtest.mak	/^INCLUDES=-I. -I$(PM2_INCPATH) $(CTREE_INCPATH)$/;"	m
INCLUDES	makefile	/^INCLUDES=-I. -I$(PM2_INCPATH) $(CTREE_INCPATH)$/;"	m
INCLUDES	spider.mak	/^INCLUDES=-I. -I$(PM2_INCPATH) $(CTREE_INCPATH)$/;"	m
INCL_DOSDATETIME	safe/sqlite3.c	9344;"	d	file:
INCL_DOSERRORS	safe/sqlite3.c	9346;"	d	file:
INCL_DOSFILEMGR	safe/sqlite3.c	9345;"	d	file:
INCL_DOSMISC	safe/sqlite3.c	9347;"	d	file:
INCL_DOSMODULEMGR	safe/sqlite3.c	9349;"	d	file:
INCL_DOSPROCESS	safe/sqlite3.c	9348;"	d	file:
INCL_DOSSEMAPHORES	safe/sqlite3.c	9350;"	d	file:
INT16_TYPE	safe/sqlite3.c	7985;"	d	file:
INT16_TYPE	safe/sqlite3.c	7987;"	d	file:
INT8_TYPE	safe/sqlite3.c	7999;"	d	file:
INT8_TYPE	safe/sqlite3.c	8001;"	d	file:
INTERFACE	safe/sqlite3.c	109091;"	d	file:
INTWAMPFN	mtwamputil.c	/^typedef int (*INTWAMPFN)(WAMP *wamp);$/;"	t	file:
INTWAMPFN	mtwamputil.h	/^typedef int (*INTWAMPFN)(WAMP *wamp);$/;"	t
INVALID_FILE_ATTRIBUTES	safe/sqlite3.c	32267;"	d	file:
INVALID_SET_FILE_POINTER	safe/sqlite3.c	34083;"	d	file:
IN_DECLARE_VTAB	safe/sqlite3.c	11265;"	d	file:
IN_DECLARE_VTAB	safe/sqlite3.c	11267;"	d	file:
IN_INDEX_EPH	safe/sqlite3.c	12179;"	d	file:
IN_INDEX_INDEX	safe/sqlite3.c	12180;"	d	file:
IN_INDEX_ROWID	safe/sqlite3.c	12178;"	d	file:
IOMETHODS	safe/sqlite3.c	29481;"	d	file:
IOTRACE	safe/sqlite3.c	12228;"	d	file:
IOTRACE	safe/sqlite3.c	12232;"	d	file:
ISAUTOVACUUM	safe/sqlite3.c	49910;"	d	file:
ISAUTOVACUUM	safe/sqlite3.c	49912;"	d	file:
IS_BIG_INT	safe/sqlite3.c	541;"	d	file:
IS_LINUX	mtchannel.c	19;"	d	file:
IS_LINUX	safe/spider.c	125;"	d	file:
IS_LINUX	spider.c	125;"	d	file:
IS_LOCK_ERROR	safe/sqlite3.c	25104;"	d	file:
IS_SCO	mtchannel.c	16;"	d	file:
IS_SCO	safe/spider.c	122;"	d	file:
IS_SCO	spider.c	122;"	d	file:
IcuCursor	safe/sqlite3.c	/^struct IcuCursor {$/;"	s	file:
IcuCursor	safe/sqlite3.c	/^typedef struct IcuCursor IcuCursor;$/;"	t	file:
IcuTokenizer	safe/sqlite3.c	/^struct IcuTokenizer {$/;"	s	file:
IcuTokenizer	safe/sqlite3.c	/^typedef struct IcuTokenizer IcuTokenizer;$/;"	t	file:
IdChar	safe/sqlite3.c	112770;"	d	file:
IdChar	safe/sqlite3.c	112788;"	d	file:
IdChar	safe/sqlite3.c	113240;"	d	file:
IdChar	safe/sqlite3.c	113244;"	d	file:
IdList	safe/sqlite3.c	/^struct IdList {$/;"	s	file:
IdList	safe/sqlite3.c	/^typedef struct IdList IdList;$/;"	t	file:
IdList_item	safe/sqlite3.c	/^  struct IdList_item {$/;"	s	struct:IdList	file:
Idle	safe/spider.133.c	/^static void Idle()$/;"	f	file:
Idle	safe/spider.135.c	/^static void Idle()$/;"	f	file:
Idle	safe/spider.200.c	/^static void Idle()$/;"	f	file:
Idle	safe/spider.203.c	/^static void Idle()$/;"	f	file:
Idle	safe/spider.204.c	/^static void Idle()$/;"	f	file:
Idle	safe/spider.210.c	/^static void Idle()$/;"	f	file:
Idle	safe/spider.c	/^static void Idle()$/;"	f	file:
Idle	spider.c	/^static void Idle()$/;"	f	file:
Idler	spider.c	/^static void Idler(CHANPOOL *pool)$/;"	f	file:
IgnorableOrderby	safe/sqlite3.c	11075;"	d	file:
InLoop	safe/sqlite3.c	/^      struct InLoop {$/;"	s	struct:WhereLevel::<anonymous>::<anonymous>	file:
Incrblob	safe/sqlite3.c	/^struct Incrblob {$/;"	s	file:
Incrblob	safe/sqlite3.c	/^typedef struct Incrblob Incrblob;$/;"	t	file:
IncrmergeWriter	safe/sqlite3.c	/^struct IncrmergeWriter {$/;"	s	file:
IncrmergeWriter	safe/sqlite3.c	/^typedef struct IncrmergeWriter IncrmergeWriter;$/;"	t	file:
Index	safe/sqlite3.c	/^struct Index {$/;"	s	file:
Index	safe/sqlite3.c	/^typedef struct Index Index;$/;"	t	file:
IndexSample	safe/sqlite3.c	/^struct IndexSample {$/;"	s	file:
IndexSample	safe/sqlite3.c	/^typedef struct IndexSample IndexSample;$/;"	t	file:
InfoInt	safe/spider.203.c	/^static void InfoInt(const char *szName, int nValue)$/;"	f	file:
InfoInt	safe/spider.204.c	/^static void InfoInt(const char *szName, int nValue)$/;"	f	file:
InfoInt	safe/spider.210.c	/^static void InfoInt(const char *szName, int nValue)$/;"	f	file:
InfoInt	safe/spider.c	/^static void InfoInt(const char *szName, int nValue)$/;"	f	file:
InfoInt	spider.c	/^static void InfoInt(const char *szName, int nValue)$/;"	f	file:
InfoStr	safe/spider.203.c	/^static void InfoStr(const char *szName, const char *szValue)$/;"	f	file:
InfoStr	safe/spider.204.c	/^static void InfoStr(const char *szName, const char *szValue)$/;"	f	file:
InfoStr	safe/spider.210.c	/^static void InfoStr(const char *szName, const char *szValue)$/;"	f	file:
InfoStr	safe/spider.c	/^static void InfoStr(const char *szName, const char *szValue)$/;"	f	file:
InfoStr	spider.c	/^static void InfoStr(const char *szName, const char *szValue)$/;"	f	file:
InitData	safe/sqlite3.c	/^} InitData;$/;"	t	file:
InitReadStream	safe/spider.133.c	/^static void InitReadStream(int fd)$/;"	f	file:
InitReadStream	safe/spider.135.c	/^static void InitReadStream(int fd)$/;"	f	file:
InitReadStream	safe/spider.200.c	/^static void InitReadStream(int fd)$/;"	f	file:
InitReadStream	safe/spider.203.c	/^static void InitReadStream(int fd)$/;"	f	file:
InitReadStream	safe/spider.204.c	/^static void InitReadStream(int fd)$/;"	f	file:
InitReadStream	safe/spider.210.c	/^static void InitReadStream(int fd)$/;"	f	file:
InitReadStream	safe/spider.c	/^static void InitReadStream(int fd)$/;"	f	file:
InitReadStream	spider.c	/^static void InitReadStream(int fd)$/;"	f	file:
InstallApi	safe/spider.c	/^void InstallApi(const char *szFilename, int bForce)$/;"	f
InstallApi	spider.c	/^void InstallApi(const char *szFilename, int bForce)$/;"	f
IntegrityCk	safe/sqlite3.c	/^struct IntegrityCk {$/;"	s	file:
IntegrityCk	safe/sqlite3.c	/^typedef struct IntegrityCk IntegrityCk;$/;"	t	file:
InternalId	safe/spider.133.c	/^static const char *InternalId()$/;"	f	file:
InternalId	safe/spider.135.c	/^static const char *InternalId()$/;"	f	file:
InternalId	safe/spider.200.c	/^static const char *InternalId()$/;"	f	file:
IsDir	safe/spider.133.c	/^int IsDir(const char *szDir)$/;"	f
IsDir	safe/spider.135.c	/^int IsDir(const char *szDir)$/;"	f
IsDir	safe/spider.200.c	/^int IsDir(const char *szDir)$/;"	f
IsDir	safe/spider.203.c	/^int IsDir(const char *szDir)$/;"	f
IsDir	safe/spider.204.c	/^int IsDir(const char *szDir)$/;"	f
IsDir	safe/spider.210.c	/^int IsDir(const char *szDir)$/;"	f
IsDir	safe/spider.c	/^int IsDir(const char *szDir)$/;"	f
IsDir	spider.c	/^int IsDir(const char *szDir)$/;"	f
IsHiddenColumn	safe/sqlite3.c	10303;"	d	file:
IsHiddenColumn	safe/sqlite3.c	10306;"	d	file:
IsPubsubProtocol	spider.c	/^static int IsPubsubProtocol(nProtocol)$/;"	f	file:
IsVirtual	safe/sqlite3.c	10302;"	d	file:
IsVirtual	safe/sqlite3.c	10305;"	d	file:
JOURNAL_CHUNKSIZE	safe/sqlite3.c	73706;"	d	file:
JOURNAL_HDR_SZ	safe/sqlite3.c	39998;"	d	file:
JOURNAL_PG_SZ	safe/sqlite3.c	39992;"	d	file:
JSON	mtjson.h	/^typedef struct JSON {$/;"	s
JSON	mtjson.h	/^} JSON;$/;"	t
JSON	safe/mtjson.h	/^typedef struct JSON {$/;"	s
JSON	safe/mtjson.h	/^} JSON;$/;"	t
JSON_ARRAY	mtjson.c	45;"	d	file:
JSON_ARRAY	mtjson.h	28;"	d
JSON_ARRAY	safe/mtjson.c	28;"	d	file:
JSON_ARRAY	safe/mtjson.h	13;"	d
JSON_BOOL	mtjson.c	44;"	d	file:
JSON_BOOL	mtjson.h	27;"	d
JSON_BOOL	safe/mtjson.c	27;"	d	file:
JSON_BOOL	safe/mtjson.h	12;"	d
JSON_ERROR	mtjson.c	40;"	d	file:
JSON_ERROR	mtjson.h	23;"	d
JSON_ERROR	safe/mtjson.c	23;"	d	file:
JSON_ERROR	safe/mtjson.h	8;"	d
JSON_FLOAT	mtjson.c	42;"	d	file:
JSON_FLOAT	mtjson.h	25;"	d
JSON_FLOAT	safe/mtjson.c	25;"	d	file:
JSON_FLOAT	safe/mtjson.h	10;"	d
JSON_INTEGER	mtjson.c	41;"	d	file:
JSON_INTEGER	mtjson.h	24;"	d
JSON_INTEGER	safe/mtjson.c	24;"	d	file:
JSON_INTEGER	safe/mtjson.h	9;"	d
JSON_NULL	mtjson.c	43;"	d	file:
JSON_NULL	mtjson.h	26;"	d
JSON_NULL	safe/mtjson.c	26;"	d	file:
JSON_NULL	safe/mtjson.h	11;"	d
JSON_OBJECT	mtjson.c	46;"	d	file:
JSON_OBJECT	mtjson.h	29;"	d
JSON_OBJECT	safe/mtjson.c	29;"	d	file:
JSON_OBJECT	safe/mtjson.h	14;"	d
JSON_STRING	mtjson.c	47;"	d	file:
JSON_STRING	mtjson.h	30;"	d
JSON_STRING	safe/mtjson.c	30;"	d	file:
JSON_STRING	safe/mtjson.h	15;"	d
JT_CROSS	safe/sqlite3.c	10853;"	d	file:
JT_ERROR	safe/sqlite3.c	10858;"	d	file:
JT_INNER	safe/sqlite3.c	10852;"	d	file:
JT_LEFT	safe/sqlite3.c	10855;"	d	file:
JT_NATURAL	safe/sqlite3.c	10854;"	d	file:
JT_OUTER	safe/sqlite3.c	10857;"	d	file:
JT_RIGHT	safe/sqlite3.c	10856;"	d	file:
JournalFile	safe/sqlite3.c	/^struct JournalFile {$/;"	s	file:
JournalFile	safe/sqlite3.c	/^typedef struct JournalFile JournalFile;$/;"	t	file:
JournalFileMethods	safe/sqlite3.c	/^static struct sqlite3_io_methods JournalFileMethods = {$/;"	v	file:
KeepNotes	safe/spider.c	/^static void KeepNotes(int flows, int errors, int always)$/;"	f	file:
KeepNotes	spider.c	/^static void KeepNotes(int flows, int errors, int always)$/;"	f	file:
KeyClass	safe/sqlite3.c	/^typedef struct KeyClass KeyClass;$/;"	t	file:
KeyInfo	safe/sqlite3.c	/^struct KeyInfo {$/;"	s	file:
KeyInfo	safe/sqlite3.c	/^typedef struct KeyInfo KeyInfo;$/;"	t	file:
LARGEST_INT64	safe/sqlite3.c	8060;"	d	file:
LCS_ITERATOR_FINISHED	safe/sqlite3.c	132730;"	d	file:
LIKEFUNC	safe/sqlite3.c	10046;"	d	file:
LOCKFILE_EXCLUSIVE_LOCK	safe/sqlite3.c	34472;"	d	file:
LOCKFILE_FAIL_IMMEDIATELY	safe/sqlite3.c	34468;"	d	file:
LOCK_TIMEOUT	safe/sqlite3.c	23072;"	d	file:
LOGFILE_LIMIT	safe/spider.210.c	157;"	d	file:
LOGFILE_LIMIT	safe/spider.c	206;"	d	file:
LOGFILE_LIMIT	spider.c	210;"	d	file:
LOGMAX	safe/sqlite3.c	16854;"	d	file:
LONGDOUBLE_TYPE	safe/sqlite3.c	7893;"	d	file:
LONGDOUBLE_TYPE	safe/sqlite3.c	8005;"	d	file:
LcsIterator	safe/sqlite3.c	/^struct LcsIterator {$/;"	s	file:
LcsIterator	safe/sqlite3.c	/^typedef struct LcsIterator LcsIterator;$/;"	t	file:
LegacyApiGone	spider.c	/^int LegacyApiGone(CHAN *chan)$/;"	f
LikeOp	safe/sqlite3.c	/^struct LikeOp {$/;"	s	file:
LimitVal	safe/sqlite3.c	/^struct LimitVal {$/;"	s	file:
LinearPickNext	safe/sqlite3.c	/^static RtreeCell *LinearPickNext($/;"	f	file:
LinearPickSeeds	safe/sqlite3.c	/^static void LinearPickSeeds($/;"	f	file:
Link	safe/spider.204.c	/^static const char *Link(const char *fmt, ...)$/;"	f	file:
Link	safe/spider.210.c	/^static const char *Link(const char *fmt, ...)$/;"	f	file:
Link	safe/spider.c	/^static const char *Link(const char *fmt, ...)$/;"	f	file:
Link	spider.c	/^static const char *Link(const char *fmt, ...)$/;"	f	file:
LoadDoclistCtx	safe/sqlite3.c	/^struct LoadDoclistCtx {$/;"	s	file:
LoadDoclistCtx	safe/sqlite3.c	/^typedef struct LoadDoclistCtx LoadDoclistCtx;$/;"	t	file:
Log	safe/spider.133.c	/^static void Log(const char *szFmt, ...)$/;"	f	file:
Log	safe/spider.135.c	/^static void Log(const char *szFmt, ...)$/;"	f	file:
Log	safe/spider.200.c	/^static void Log(const char *szFmt, ...)$/;"	f	file:
Log	safe/spider.203.c	/^static void Log(const char *szFmt, ...)$/;"	f	file:
Log	safe/spider.204.c	/^static void Log(const char *szFmt, ...)$/;"	f	file:
Log	safe/spider.210.c	/^static void Log(const char *szFmt, ...)$/;"	f	file:
Log	safe/spider.c	/^void Log(const char *szFmt, ...)$/;"	f
Log	spider.c	/^void Log(const char *szFmt, ...)$/;"	f
LogBuffer	safe/spider.c	/^void LogBuffer(const char *message, int len, const char *data)$/;"	f
LogBuffer	spider.c	/^void LogBuffer(const char *message, int len, const char *data)$/;"	f
LogMap	safe/spider.c	/^void LogMap(SSMAP *map)$/;"	f
LogMap	spider.c	/^void LogMap(SSMAP *map)$/;"	f
LogMi	safe/spider.133.c	/^static void LogMi()$/;"	f	file:
LogMi	safe/spider.135.c	/^static void LogMi()$/;"	f	file:
LogMi	safe/spider.200.c	/^static void LogMi()$/;"	f	file:
LogMi	safe/spider.203.c	/^static void LogMi()$/;"	f	file:
LogMi	safe/spider.204.c	/^static void LogMi()$/;"	f	file:
LogMi	safe/spider.210.c	/^static void LogMi()$/;"	f	file:
LogMi	safe/spider.c	/^static void LogMi()$/;"	f	file:
LogMi	spider.c	/^static void LogMi()$/;"	f	file:
LogSslError	safe/spider.133.c	/^static int LogSslError(SSL *ssl, int ret)$/;"	f	file:
LogSslError	safe/spider.135.c	/^static int LogSslError(SSL *ssl, int ret)$/;"	f	file:
LogSslError	safe/spider.200.c	/^static int LogSslError(SSL *ssl, int ret)$/;"	f	file:
LogSslError	safe/spider.203.c	/^static int LogSslError(SSL *ssl, int ret)$/;"	f	file:
LogSslError	safe/spider.204.c	/^static int LogSslError(SSL *ssl, int ret)$/;"	f	file:
LogSslError	safe/spider.210.c	/^static int LogSslError(SSL *ssl, int ret)$/;"	f	file:
LogSslError	safe/spider.c	/^static int LogSslError(SSL *ssl, int ret)$/;"	f	file:
LogSslError	spider.c	/^static int LogSslError(SSL *ssl, int ret)$/;"	f	file:
LogString	mtwamp.c	/^STATIC LogString(WAMP *wamp, const char *prefix, const char *string)$/;"	f
Login	callSpider.php	/^function Login($practice,$user,$pass)$/;"	f
Lookaside	safe/sqlite3.c	/^struct Lookaside {$/;"	s	file:
Lookaside	safe/sqlite3.c	/^typedef struct Lookaside Lookaside;$/;"	t	file:
LookasideSlot	safe/sqlite3.c	/^struct LookasideSlot {$/;"	s	file:
LookasideSlot	safe/sqlite3.c	/^typedef struct LookasideSlot LookasideSlot;$/;"	t	file:
M	safe/sqlite3.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
MAINFILE	jtest.mak	/^MAINFILE=jtest.c$/;"	m
MAINFILE	makefile	/^MAINFILE=spider.c$/;"	m
MAINFILE	spider.mak	/^MAINFILE=spider.c$/;"	m
MAINOBJ	jtest.mak	/^MAINOBJ=jtest.o$/;"	m
MAINOBJ	makefile	/^MAINOBJ=spider.o$/;"	m
MAINOBJ	spider.mak	/^MAINOBJ=spider.o$/;"	m
MASTER_NAME	safe/sqlite3.c	8111;"	d	file:
MASTER_ROOT	safe/sqlite3.c	8117;"	d	file:
MAX	safe/sqlite3.c	117672;"	d	file:
MAX	safe/sqlite3.c	134449;"	d	file:
MAX_6BYTE	safe/sqlite3.c	62977;"	d	file:
MAX_PATHNAME	safe/sqlite3.c	25098;"	d	file:
MAX_ROWID	safe/sqlite3.c	69644;"	d	file:
MAX_ROWID	safe/sqlite3.c	69650;"	d	file:
MAX_SECTOR_SIZE	safe/sqlite3.c	39673;"	d	file:
MEM5LINK	safe/sqlite3.c	16917;"	d	file:
MEMCELLSIZE	safe/sqlite3.c	59848;"	d	file:
MEMDB	safe/sqlite3.c	40007;"	d	file:
MEMDB	safe/sqlite3.c	40009;"	d	file:
MEMTYPE_DB	safe/sqlite3.c	12277;"	d	file:
MEMTYPE_HEAP	safe/sqlite3.c	12273;"	d	file:
MEMTYPE_LOOKASIDE	safe/sqlite3.c	12274;"	d	file:
MEMTYPE_PCACHE	safe/sqlite3.c	12276;"	d	file:
MEMTYPE_SCRATCH	safe/sqlite3.c	12275;"	d	file:
MEM_Agg	safe/sqlite3.c	13126;"	d	file:
MEM_Blob	safe/sqlite3.c	13111;"	d	file:
MEM_Dyn	safe/sqlite3.c	13123;"	d	file:
MEM_Ephem	safe/sqlite3.c	13125;"	d	file:
MEM_Frame	safe/sqlite3.c	13113;"	d	file:
MEM_Int	safe/sqlite3.c	13109;"	d	file:
MEM_Invalid	safe/sqlite3.c	13114;"	d	file:
MEM_Null	safe/sqlite3.c	13107;"	d	file:
MEM_Real	safe/sqlite3.c	13110;"	d	file:
MEM_RowSet	safe/sqlite3.c	13112;"	d	file:
MEM_Static	safe/sqlite3.c	13124;"	d	file:
MEM_Str	safe/sqlite3.c	13108;"	d	file:
MEM_Term	safe/sqlite3.c	13122;"	d	file:
MEM_TypeMask	safe/sqlite3.c	13115;"	d	file:
MEM_Zero	safe/sqlite3.c	13127;"	d	file:
MEM_Zero	safe/sqlite3.c	13129;"	d	file:
MEM_Zero	safe/sqlite3.c	13130;"	d	file:
MIFILE_LIMIT	safe/spider.210.c	158;"	d	file:
MIFILE_LIMIT	safe/spider.c	207;"	d	file:
MIFILE_LIMIT	spider.c	211;"	d	file:
MIN	safe/sqlite3.c	117669;"	d	file:
MIN	safe/sqlite3.c	134452;"	d	file:
MIN	safe/sqlite3.c	32260;"	d	file:
MIN	safe/sqlite3.c	58536;"	d	file:
MIN	safe/sqlite3.c	73711;"	d	file:
MT_IA	safe/spider.133.c	5562;"	d	file:
MT_IA	safe/spider.135.c	5719;"	d	file:
MT_IA	safe/spider.200.c	6577;"	d	file:
MT_IA	safe/spider.203.c	7416;"	d	file:
MT_IA	safe/spider.204.c	7378;"	d	file:
MT_IA	safe/spider.210.c	8344;"	d	file:
MT_IA	safe/spider.c	9889;"	d	file:
MT_IA	spider.c	10378;"	d	file:
MT_IB	safe/spider.133.c	5563;"	d	file:
MT_IB	safe/spider.135.c	5720;"	d	file:
MT_IB	safe/spider.200.c	6578;"	d	file:
MT_IB	safe/spider.203.c	7417;"	d	file:
MT_IB	safe/spider.204.c	7379;"	d	file:
MT_IB	safe/spider.210.c	8345;"	d	file:
MT_IB	safe/spider.c	9890;"	d	file:
MT_IB	spider.c	10379;"	d	file:
MT_LEN	safe/spider.133.c	5561;"	d	file:
MT_LEN	safe/spider.135.c	5718;"	d	file:
MT_LEN	safe/spider.200.c	6576;"	d	file:
MT_LEN	safe/spider.203.c	7415;"	d	file:
MT_LEN	safe/spider.204.c	7377;"	d	file:
MT_LEN	safe/spider.210.c	8343;"	d	file:
MT_LEN	safe/spider.c	9888;"	d	file:
MT_LEN	spider.c	10377;"	d	file:
MT_MAGIC	safe/spider.133.c	5565;"	d	file:
MT_MAGIC	safe/spider.135.c	5722;"	d	file:
MT_MAGIC	safe/spider.200.c	6580;"	d	file:
MT_MAGIC	safe/spider.203.c	7419;"	d	file:
MT_MAGIC	safe/spider.204.c	7381;"	d	file:
MT_MAGIC	safe/spider.210.c	8347;"	d	file:
MT_MAGIC	safe/spider.c	9892;"	d	file:
MT_MAGIC	spider.c	10381;"	d	file:
MT_TWIST	safe/spider.133.c	5564;"	d	file:
MT_TWIST	safe/spider.135.c	5721;"	d	file:
MT_TWIST	safe/spider.200.c	6579;"	d	file:
MT_TWIST	safe/spider.203.c	7418;"	d	file:
MT_TWIST	safe/spider.204.c	7380;"	d	file:
MT_TWIST	safe/spider.210.c	8346;"	d	file:
MT_TWIST	safe/spider.c	9891;"	d	file:
MT_TWIST	spider.c	10380;"	d	file:
MUTEX_LOGIC	safe/sqlite3.c	9656;"	d	file:
MUTEX_LOGIC	safe/sqlite3.c	9658;"	d	file:
MX_CELL	safe/sqlite3.c	49513;"	d	file:
MX_CELL_SIZE	safe/sqlite3.c	49506;"	d	file:
MX_CLOSE_ATTEMPT	safe/sqlite3.c	34151;"	d	file:
MX_SMALL	safe/sqlite3.c	16127;"	d	file:
MatchInfo	safe/sqlite3.c	/^struct MatchInfo {$/;"	s	file:
MatchInfo	safe/sqlite3.c	/^typedef struct MatchInfo MatchInfo;$/;"	t	file:
Mem	safe/sqlite3.c	/^struct Mem {$/;"	s	file:
Mem	safe/sqlite3.c	/^typedef struct Mem Mem;$/;"	t	file:
Mem0Global	safe/sqlite3.c	/^static SQLITE_WSD struct Mem0Global {$/;"	s	file:
Mem3Block	safe/sqlite3.c	/^struct Mem3Block {$/;"	s	file:
Mem3Block	safe/sqlite3.c	/^typedef struct Mem3Block Mem3Block;$/;"	t	file:
Mem3Global	safe/sqlite3.c	/^static SQLITE_WSD struct Mem3Global {$/;"	s	file:
Mem5Global	safe/sqlite3.c	/^static SQLITE_WSD struct Mem5Global {$/;"	s	file:
Mem5Link	safe/sqlite3.c	/^struct Mem5Link {$/;"	s	file:
Mem5Link	safe/sqlite3.c	/^typedef struct Mem5Link Mem5Link;$/;"	t	file:
MemBlockHdr	safe/sqlite3.c	/^struct MemBlockHdr {$/;"	s	file:
MemJournal	safe/sqlite3.c	/^struct MemJournal {$/;"	s	file:
MemJournal	safe/sqlite3.c	/^typedef struct MemJournal MemJournal;$/;"	t	file:
MemJournalMethods	safe/sqlite3.c	/^static const struct sqlite3_io_methods MemJournalMethods = {$/;"	v	file:
MemPage	safe/sqlite3.c	/^struct MemPage {$/;"	s	file:
MemPage	safe/sqlite3.c	/^typedef struct MemPage MemPage;$/;"	t	file:
MemSetTypeFlag	safe/sqlite3.c	13136;"	d	file:
Module	safe/sqlite3.c	/^struct Module {$/;"	s	file:
Module	safe/sqlite3.c	/^typedef struct Module Module;$/;"	t	file:
MonthNames	safe/spider.203.c	/^const char *MonthNames[] = {"?","January","February","March","April","May","June","July","August","September","October","November","December"};$/;"	v
MonthNames	safe/spider.204.c	/^const char *MonthNames[] = {"?","January","February","March","April","May","June","July","August","September","October","November","December"};$/;"	v
MonthNames	safe/spider.210.c	/^const char *MonthNames[] = {"?","January","February","March","April","May","June","July","August","September","October","November","December"};$/;"	v
MonthNames	safe/spider.c	/^const char *MonthNames[] = {"?","January","February","March","April","May","June","July","August","September","October","November","December"};$/;"	v
MonthNames	spider.c	/^const char *MonthNames[] = {"?","January","February","March","April","May","June","July","August","September","October","November","December"};$/;"	v
MoveStderr	safe/spider.c	/^static const char *MoveStderr(int move)$/;"	f	file:
MoveStderr	spider.c	/^static const char *MoveStderr(int move)$/;"	f	file:
MustParam	safe/spider.c	/^const char *MustParam(rogxml *rx, const char *szName)$/;"	f
MustParam	spider.c	/^const char *MustParam(rogxml *rx, const char *szName)$/;"	f
MyBIO_flush	safe/spider.133.c	/^static int MyBIO_flush(BIO *io)$/;"	f	file:
MyBIO_flush	safe/spider.135.c	/^static int MyBIO_flush(BIO *io)$/;"	f	file:
MyBIO_flush	safe/spider.200.c	/^static int MyBIO_flush(BIO *io)$/;"	f	file:
MyBIO_flush	safe/spider.203.c	/^static int MyBIO_flush(BIO *io)$/;"	f	file:
MyBIO_flush	safe/spider.204.c	/^static int MyBIO_flush(BIO *io)$/;"	f	file:
MyBIO_flush	safe/spider.210.c	/^static int MyBIO_flush(BIO *io)$/;"	f	file:
MyBIO_flush	safe/spider.c	/^static int MyBIO_flush(BIO *io)$/;"	f	file:
MyBIO_flush	spider.c	/^static int MyBIO_flush(BIO *io)$/;"	f	file:
MyBIO_getc	safe/spider.133.c	/^static int MyBIO_getc(BIO *io)$/;"	f	file:
MyBIO_getc	safe/spider.135.c	/^static int MyBIO_getc(BIO *io)$/;"	f	file:
MyBIO_getc	safe/spider.200.c	/^static int MyBIO_getc(BIO *io)$/;"	f	file:
MyBIO_getc	safe/spider.203.c	/^static int MyBIO_getc(BIO *io)$/;"	f	file:
MyBIO_getc	safe/spider.204.c	/^static int MyBIO_getc(BIO *io)$/;"	f	file:
MyBIO_getc	safe/spider.210.c	/^static int MyBIO_getc(BIO *io)$/;"	f	file:
MyBIO_getc	safe/spider.c	/^static int MyBIO_getc(BIO *io)$/;"	f	file:
MyBIO_getc	spider.c	/^static int MyBIO_getc(BIO *io)$/;"	f	file:
MyBIO_gets	safe/spider.133.c	/^static int MyBIO_gets(BIO *io, char *buf, int nLen)$/;"	f	file:
MyBIO_gets	safe/spider.135.c	/^static int MyBIO_gets(BIO *io, char *buf, int nLen)$/;"	f	file:
MyBIO_gets	safe/spider.200.c	/^static int MyBIO_gets(BIO *io, char *buf, int nLen)$/;"	f	file:
MyBIO_gets	safe/spider.203.c	/^static int MyBIO_gets(BIO *io, char *buf, int nLen)$/;"	f	file:
MyBIO_gets	safe/spider.204.c	/^static int MyBIO_gets(BIO *io, char *buf, int nLen)$/;"	f	file:
MyBIO_gets	safe/spider.210.c	/^static int MyBIO_gets(BIO *io, char *buf, int nLen)$/;"	f	file:
MyBIO_gets	safe/spider.c	/^static int MyBIO_gets(BIO *io, char *buf, int nLen)$/;"	f	file:
MyBIO_gets	spider.c	/^static int MyBIO_gets(BIO *io, char *buf, int nLen)$/;"	f	file:
MyBIO_puts	safe/spider.133.c	/^static int MyBIO_puts(BIO *io, const char *szText)$/;"	f	file:
MyBIO_puts	safe/spider.135.c	/^static int MyBIO_puts(BIO *io, const char *szText)$/;"	f	file:
MyBIO_puts	safe/spider.200.c	/^static int MyBIO_puts(BIO *io, const char *szText)$/;"	f	file:
MyBIO_puts	safe/spider.203.c	/^static int MyBIO_puts(BIO *io, const char *szText)$/;"	f	file:
MyBIO_puts	safe/spider.204.c	/^static int MyBIO_puts(BIO *io, const char *szText)$/;"	f	file:
MyBIO_puts	safe/spider.210.c	/^static int MyBIO_puts(BIO *io, const char *szText)$/;"	f	file:
MyBIO_puts	safe/spider.c	/^static int MyBIO_puts(BIO *io, const char *szText)$/;"	f	file:
MyBIO_puts	spider.c	/^static int MyBIO_puts(BIO *io, const char *szText)$/;"	f	file:
MyBIO_write	safe/spider.133.c	/^static int MyBIO_write(BIO *io, const char *szData, int nLen)$/;"	f	file:
MyBIO_write	safe/spider.135.c	/^static int MyBIO_write(BIO *io, const char *szData, int nLen)$/;"	f	file:
MyBIO_write	safe/spider.200.c	/^static int MyBIO_write(BIO *io, const char *szData, int nLen)$/;"	f	file:
MyBIO_write	safe/spider.203.c	/^static int MyBIO_write(BIO *io, const char *szData, int nLen)$/;"	f	file:
MyBIO_write	safe/spider.204.c	/^static int MyBIO_write(BIO *io, const char *szData, int nLen)$/;"	f	file:
MyBIO_write	safe/spider.210.c	/^static int MyBIO_write(BIO *io, const char *szData, int nLen)$/;"	f	file:
MyBIO_write	safe/spider.c	/^static int MyBIO_write(BIO *io, const char *szData, int nLen)$/;"	f	file:
MyBIO_write	spider.c	/^static int MyBIO_write(BIO *io, const char *szData, int nLen)$/;"	f	file:
NB	safe/sqlite3.c	55895;"	d	file:
NCELL	safe/sqlite3.c	134404;"	d	file:
NCSIZE	safe/sqlite3.c	15631;"	d	file:
NC_AllowAgg	safe/sqlite3.c	11006;"	d	file:
NC_HasAgg	safe/sqlite3.c	11007;"	d	file:
NC_InAggFunc	safe/sqlite3.c	11009;"	d	file:
NC_IsCheck	safe/sqlite3.c	11008;"	d	file:
NDEBUG	safe/sqlite3.c	117341;"	d	file:
NDEBUG	safe/sqlite3.c	117749;"	d	file:
NDEBUG	safe/sqlite3.c	134219;"	d	file:
NDEBUG	safe/sqlite3.c	458;"	d	file:
NDEBUG	safe/sqlite3.c	461;"	d	file:
NDELAY	safe/sqlite3.c	114594;"	d	file:
NEVER	safe/sqlite3.c	117725;"	d	file:
NEVER	safe/sqlite3.c	117728;"	d	file:
NEVER	safe/sqlite3.c	527;"	d	file:
NEVER	safe/sqlite3.c	530;"	d	file:
NEVER	safe/sqlite3.c	533;"	d	file:
NN	safe/sqlite3.c	55894;"	d	file:
NO_LOCK	safe/sqlite3.c	9458;"	d	file:
N_HASH	safe/sqlite3.c	16133;"	d	file:
N_SORT_BUCKET	safe/sqlite3.c	37460;"	d	file:
N_STATEMENT	safe/sqlite3.c	137070;"	d	file:
NameContext	safe/sqlite3.c	/^struct NameContext {$/;"	s	file:
NameContext	safe/sqlite3.c	/^typedef struct NameContext NameContext;$/;"	t	file:
NetworkPort	safe/spider.133.c	/^NetworkPort_t *NetworkPort = NULL;$/;"	v
NetworkPort	safe/spider.135.c	/^NetworkPort_t *NetworkPort = NULL;$/;"	v
NetworkPort	safe/spider.200.c	/^NetworkPort_t *NetworkPort = NULL;$/;"	v
NetworkPort	safe/spider.203.c	/^NetworkPort_t *NetworkPort = NULL;$/;"	v
NetworkPort	safe/spider.204.c	/^NetworkPort_t *NetworkPort = NULL;$/;"	v
NetworkPort	safe/spider.210.c	/^NetworkPort_t *NetworkPort = NULL;$/;"	v
NetworkPort	safe/spider.c	/^NetworkPort_t *NetworkPort = NULL;$/;"	v
NetworkPort	spider.c	/^NetworkPort_t *NetworkPort = NULL;$/;"	v
NetworkPort_t	safe/spider.133.c	/^typedef struct NetworkPort_t {$/;"	s	file:
NetworkPort_t	safe/spider.133.c	/^} NetworkPort_t;$/;"	t	file:
NetworkPort_t	safe/spider.135.c	/^typedef struct NetworkPort_t {$/;"	s	file:
NetworkPort_t	safe/spider.135.c	/^} NetworkPort_t;$/;"	t	file:
NetworkPort_t	safe/spider.200.c	/^typedef struct NetworkPort_t {$/;"	s	file:
NetworkPort_t	safe/spider.200.c	/^} NetworkPort_t;$/;"	t	file:
NetworkPort_t	safe/spider.203.c	/^typedef struct NetworkPort_t {$/;"	s	file:
NetworkPort_t	safe/spider.203.c	/^} NetworkPort_t;$/;"	t	file:
NetworkPort_t	safe/spider.204.c	/^typedef struct NetworkPort_t {$/;"	s	file:
NetworkPort_t	safe/spider.204.c	/^} NetworkPort_t;$/;"	t	file:
NetworkPort_t	safe/spider.210.c	/^typedef struct NetworkPort_t {$/;"	s	file:
NetworkPort_t	safe/spider.210.c	/^} NetworkPort_t;$/;"	t	file:
NetworkPort_t	safe/spider.c	/^typedef struct NetworkPort_t {$/;"	s	file:
NetworkPort_t	safe/spider.c	/^} NetworkPort_t;$/;"	t	file:
NetworkPort_t	spider.c	/^typedef struct NetworkPort_t {$/;"	s	file:
NetworkPort_t	spider.c	/^} NetworkPort_t;$/;"	t	file:
NewResult	safe/spider.135.c	/^static rogxml *NewResult()$/;"	f	file:
NewResult	safe/spider.200.c	/^static rogxml *NewResult()$/;"	f	file:
NewResult	safe/spider.203.c	/^static rogxml *NewResult()$/;"	f	file:
NewResult	safe/spider.204.c	/^static rogxml *NewResult()$/;"	f	file:
NewResult	safe/spider.210.c	/^static rogxml *NewResult()$/;"	f	file:
NewResult	safe/spider.c	/^static rogxml *NewResult()$/;"	f	file:
NewResult	spider.c	/^static rogxml *NewResult()$/;"	f	file:
NewSessionId	safe/spider.133.c	/^const char *NewSessionId(const char *szRpcSession)$/;"	f
NewSessionId	safe/spider.135.c	/^const char *NewSessionId(const char *szRpcSession)$/;"	f
NewSessionId	safe/spider.200.c	/^const char *NewSessionId(const char *szRpcSession)$/;"	f
NewSessionId	safe/spider.203.c	/^const char *NewSessionId(const char *szRpcSession)$/;"	f
NewSessionId	safe/spider.204.c	/^const char *NewSessionId(const char *szRpcSession)$/;"	f
NewSessionId	safe/spider.210.c	/^const char *NewSessionId(const char *szRpcSession)$/;"	f
NewSessionId	safe/spider.c	/^const char *NewSessionId(const char *szRpcSession)$/;"	f
NewSessionId	spider.c	/^const char *NewSessionId(const char *szRpcSession)$/;"	f
NiceBuf	mtchannel.c	/^STATIC const char *NiceBuf(int len, const char *buf)$/;"	f
NiceBuf	mtwamp.c	/^STATIC const char *NiceBuf(int len, const char *buf)$/;"	f
NiceTime	safe/spider.200.c	/^const char *NiceTime(time_t t)$/;"	f
NiceTime	safe/spider.203.c	/^const char *NiceTime(time_t t)$/;"	f
NiceTime	safe/spider.204.c	/^const char *NiceTime(time_t t)$/;"	f
NiceTime	safe/spider.210.c	/^const char *NiceTime(time_t t)$/;"	f
NiceTime	safe/spider.c	/^const char *NiceTime(time_t t)$/;"	f
NiceTime	spider.c	/^const char *NiceTime(time_t t)$/;"	f
NodeReader	safe/sqlite3.c	/^struct NodeReader {$/;"	s	file:
NodeReader	safe/sqlite3.c	/^typedef struct NodeReader NodeReader;$/;"	t	file:
NodeWriter	safe/sqlite3.c	/^struct NodeWriter {$/;"	s	file:
NodeWriter	safe/sqlite3.c	/^typedef struct NodeWriter NodeWriter;$/;"	t	file:
Note	safe/spider.133.c	/^static void Note(const char *szFmt, ...)$/;"	f	file:
Note	safe/spider.135.c	/^static void Note(const char *szFmt, ...)$/;"	f	file:
Note	safe/spider.200.c	/^static void Note(const char *szFmt, ...)$/;"	f	file:
Note	safe/spider.203.c	/^static void Note(const char *szFmt, ...)$/;"	f	file:
Note	safe/spider.204.c	/^static void Note(const char *szFmt, ...)$/;"	f	file:
Note	safe/spider.210.c	/^static void Note(const char *szFmt, ...)$/;"	f	file:
Note	safe/spider.c	/^static void Note(const char *szFmt, ...)$/;"	f	file:
Note	spider.c	/^static void Note(const char *szFmt, ...)$/;"	f	file:
NoteDir	safe/spider.133.c	/^static const char *NoteDir()$/;"	f	file:
NoteDir	safe/spider.135.c	/^static const char *NoteDir()$/;"	f	file:
NoteDir	safe/spider.200.c	/^static const char *NoteDir()$/;"	f	file:
NoteDirSuffix	safe/spider.133.c	/^static const char *NoteDirSuffix()$/;"	f	file:
NoteDirSuffix	safe/spider.135.c	/^static const char *NoteDirSuffix()$/;"	f	file:
NoteDirSuffix	safe/spider.200.c	/^static const char *NoteDirSuffix()$/;"	f	file:
NoteDirSuffix	safe/spider.203.c	/^static const char *NoteDirSuffix()$/;"	f	file:
NoteDirSuffix	safe/spider.204.c	/^static const char *NoteDirSuffix()$/;"	f	file:
NoteDirSuffix	safe/spider.210.c	/^static const char *NoteDirSuffix()$/;"	f	file:
NoteDirSuffix	safe/spider.c	/^static const char *NoteDirSuffix()$/;"	f	file:
NoteDirSuffix	spider.c	/^static const char *NoteDirSuffix()$/;"	f	file:
NoteFileAnchor	safe/spider.210.c	/^const char *NoteFileAnchor(const char *file, const char *title)$/;"	f
NoteFileAnchor	safe/spider.c	/^const char *NoteFileAnchor(const char *file, const char *title)$/;"	f
NoteFileAnchor	spider.c	/^const char *NoteFileAnchor(const char *file, const char *title)$/;"	f
NoteInhibit	safe/spider.133.c	/^static void NoteInhibit(int bOpt)$/;"	f	file:
NoteInhibit	safe/spider.135.c	/^static void NoteInhibit(int bOpt)$/;"	f	file:
NoteInhibit	safe/spider.200.c	/^static void NoteInhibit(int bOpt)$/;"	f	file:
NoteInhibit	safe/spider.203.c	/^static void NoteInhibit(int bOpt)$/;"	f	file:
NoteInhibit	safe/spider.204.c	/^static void NoteInhibit(int bOpt)$/;"	f	file:
NoteInhibit	safe/spider.210.c	/^static void NoteInhibit(int bOpt)$/;"	f	file:
NoteList	safe/spider.c	/^HLIST *NoteList(const char *filename)$/;"	f
NoteList	spider.c	/^HLIST *NoteList(const char *filename)$/;"	f
NoteLog	safe/spider.133.c	/^static void NoteLog(const char *szText)$/;"	f	file:
NoteLog	safe/spider.135.c	/^static void NoteLog(const char *szText)$/;"	f	file:
NoteLog	safe/spider.200.c	/^static void NoteLog(const char *szText)$/;"	f	file:
NoteLog	safe/spider.203.c	/^static void NoteLog(const char *szText)$/;"	f	file:
NoteLog	safe/spider.204.c	/^static void NoteLog(const char *szText)$/;"	f	file:
NoteLog	safe/spider.210.c	/^static void NoteLog(const char *szText)$/;"	f	file:
NoteLog	safe/spider.c	/^static void NoteLog(const char *szText)$/;"	f	file:
NoteLog	spider.c	/^static void NoteLog(const char *szText)$/;"	f	file:
NoteMessage	safe/spider.133.c	/^static void NoteMessage(const char *szMessage, int nLen, const char *szTag, const char *szExt, const char *szDescr)$/;"	f	file:
NoteMessage	safe/spider.135.c	/^static void NoteMessage(const char *szMessage, int nLen, const char *szTag, const char *szExt, const char *szDescr)$/;"	f	file:
NoteMessage	safe/spider.200.c	/^static void NoteMessage(const char *szMessage, int nLen, const char *szTag, const char *szExt, const char *szDescr)$/;"	f	file:
NoteMessage	safe/spider.203.c	/^static void NoteMessage(const char *szMessage, int nLen, const char *szTag, const char *szExt, const char *szDescr)$/;"	f	file:
NoteMessage	safe/spider.204.c	/^static void NoteMessage(const char *szMessage, int nLen, const char *szTag, const char *szExt, const char *szDescr)$/;"	f	file:
NoteMessage	safe/spider.210.c	/^static void NoteMessage(const char *szMessage, int nLen, const char *szTag, const char *szExt, const char *szDescr)$/;"	f	file:
NoteMessage	safe/spider.c	/^static void NoteMessage(const char *szMessage, int nLen, const char *szTag, const char *szExt, const char *szDescr)$/;"	f	file:
NoteMessage	spider.c	/^static void NoteMessage(const char *szMessage, int nLen, const char *szTag, const char *szExt, const char *szDescr)$/;"	f	file:
NoteMessageXML	safe/spider.133.c	/^static void NoteMessageXML(rogxml *rx, const char *szTag, const char *szDescr, char cSize)$/;"	f	file:
NoteMessageXML	safe/spider.135.c	/^static void NoteMessageXML(rogxml *rx, const char *szTag, const char *szDescr, char cSize)$/;"	f	file:
NoteMessageXML	safe/spider.200.c	/^static void NoteMessageXML(rogxml *rx, const char *szTag, const char *szDescr, char cSize)$/;"	f	file:
NoteMessageXML	safe/spider.203.c	/^static void NoteMessageXML(rogxml *rx, const char *szTag, const char *szDescr, char cSize)$/;"	f	file:
NoteMessageXML	safe/spider.204.c	/^static void NoteMessageXML(rogxml *rx, const char *szTag, const char *szDescr, char cSize)$/;"	f	file:
NoteMessageXML	safe/spider.210.c	/^static void NoteMessageXML(rogxml *rx, const char *szTag, const char *szDescr, char cSize)$/;"	f	file:
NoteMessageXML	safe/spider.c	/^static void NoteMessageXML(rogxml *rx, const char *filename, const char *szDescr, char cSize)$/;"	f	file:
NoteMessageXML	spider.c	/^static void NoteMessageXML(rogxml *rx, const char *filename, const char *szDescr, char cSize)$/;"	f	file:
NoteRpcError	safe/spider.133.c	/^static void NoteRpcError()$/;"	f	file:
NoteRpcError	safe/spider.135.c	/^static void NoteRpcError()$/;"	f	file:
NoteRpcError	safe/spider.200.c	/^static void NoteRpcError()$/;"	f	file:
NoteRpcError	safe/spider.203.c	/^static void NoteRpcError()$/;"	f	file:
NoteRpcError	safe/spider.204.c	/^static void NoteRpcError()$/;"	f	file:
NoteRpcError	safe/spider.210.c	/^static void NoteRpcError()$/;"	f	file:
NoteSeenError	safe/spider.c	/^static void NoteSeenError()$/;"	f	file:
NoteSeenError	spider.c	/^static void NoteSeenError()$/;"	f	file:
OBJ_ANY	safe/sqlite3.c	23079;"	d	file:
OE_Abort	safe/sqlite3.c	10372;"	d	file:
OE_Cascade	safe/sqlite3.c	10380;"	d	file:
OE_Default	safe/sqlite3.c	10382;"	d	file:
OE_Fail	safe/sqlite3.c	10373;"	d	file:
OE_Ignore	safe/sqlite3.c	10374;"	d	file:
OE_None	safe/sqlite3.c	10370;"	d	file:
OE_Replace	safe/sqlite3.c	10375;"	d	file:
OE_Restrict	safe/sqlite3.c	10377;"	d	file:
OE_Rollback	safe/sqlite3.c	10371;"	d	file:
OE_SetDflt	safe/sqlite3.c	10379;"	d	file:
OE_SetNull	safe/sqlite3.c	10378;"	d	file:
OMIT_TEMPDB	safe/sqlite3.c	7912;"	d	file:
OMIT_TEMPDB	safe/sqlite3.c	7914;"	d	file:
OPFLAG_APPEND	safe/sqlite3.c	11285;"	d	file:
OPFLAG_CLEARCACHE	safe/sqlite3.c	11287;"	d	file:
OPFLAG_ISUPDATE	safe/sqlite3.c	11284;"	d	file:
OPFLAG_LASTROWID	safe/sqlite3.c	11283;"	d	file:
OPFLAG_LENGTHARG	safe/sqlite3.c	11288;"	d	file:
OPFLAG_NCHANGE	safe/sqlite3.c	11282;"	d	file:
OPFLAG_TYPEOFARG	safe/sqlite3.c	11289;"	d	file:
OPFLAG_USESEEKRESULT	safe/sqlite3.c	11286;"	d	file:
OPFLG_IN1	safe/sqlite3.c	8809;"	d	file:
OPFLG_IN2	safe/sqlite3.c	8810;"	d	file:
OPFLG_IN3	safe/sqlite3.c	8811;"	d	file:
OPFLG_INITIALIZER	safe/sqlite3.c	8814;"	d	file:
OPFLG_JUMP	safe/sqlite3.c	8807;"	d	file:
OPFLG_OUT2	safe/sqlite3.c	8812;"	d	file:
OPFLG_OUT2_PRERELEASE	safe/sqlite3.c	8808;"	d	file:
OPFLG_OUT3	safe/sqlite3.c	8813;"	d	file:
OP_Add	safe/sqlite3.c	8670;"	d	file:
OP_AddImm	safe/sqlite3.c	8681;"	d	file:
OP_Affinity	safe/sqlite3.c	8708;"	d	file:
OP_AggFinal	safe/sqlite3.c	8780;"	d	file:
OP_AggStep	safe/sqlite3.c	8779;"	d	file:
OP_And	safe/sqlite3.c	8698;"	d	file:
OP_AutoCommit	safe/sqlite3.c	8712;"	d	file:
OP_BitAnd	safe/sqlite3.c	8677;"	d	file:
OP_BitNot	safe/sqlite3.c	8701;"	d	file:
OP_BitOr	safe/sqlite3.c	8678;"	d	file:
OP_Blob	safe/sqlite3.c	8663;"	d	file:
OP_Checkpoint	safe/sqlite3.c	8781;"	d	file:
OP_Clear	safe/sqlite3.c	8759;"	d	file:
OP_Close	safe/sqlite3.c	8723;"	d	file:
OP_CollSeq	safe/sqlite3.c	8675;"	d	file:
OP_Column	safe/sqlite3.c	8707;"	d	file:
OP_Compare	safe/sqlite3.c	8696;"	d	file:
OP_Concat	safe/sqlite3.c	8669;"	d	file:
OP_Copy	safe/sqlite3.c	8666;"	d	file:
OP_Count	safe/sqlite3.c	8710;"	d	file:
OP_CreateIndex	safe/sqlite3.c	8760;"	d	file:
OP_CreateTable	safe/sqlite3.c	8761;"	d	file:
OP_Delete	safe/sqlite3.c	8737;"	d	file:
OP_Destroy	safe/sqlite3.c	8758;"	d	file:
OP_Divide	safe/sqlite3.c	8673;"	d	file:
OP_DropIndex	safe/sqlite3.c	8765;"	d	file:
OP_DropTable	safe/sqlite3.c	8764;"	d	file:
OP_DropTrigger	safe/sqlite3.c	8766;"	d	file:
OP_Eq	safe/sqlite3.c	8689;"	d	file:
OP_Expire	safe/sqlite3.c	8785;"	d	file:
OP_Explain	safe/sqlite3.c	8800;"	d	file:
OP_FkCounter	safe/sqlite3.c	8773;"	d	file:
OP_FkIfZero	safe/sqlite3.c	8774;"	d	file:
OP_Found	safe/sqlite3.c	8730;"	d	file:
OP_Function	safe/sqlite3.c	8676;"	d	file:
OP_Ge	safe/sqlite3.c	8694;"	d	file:
OP_Gosub	safe/sqlite3.c	8652;"	d	file:
OP_Goto	safe/sqlite3.c	8651;"	d	file:
OP_Gt	safe/sqlite3.c	8693;"	d	file:
OP_Halt	safe/sqlite3.c	8656;"	d	file:
OP_HaltIfNull	safe/sqlite3.c	8655;"	d	file:
OP_IdxDelete	safe/sqlite3.c	8754;"	d	file:
OP_IdxGE	safe/sqlite3.c	8757;"	d	file:
OP_IdxInsert	safe/sqlite3.c	8753;"	d	file:
OP_IdxLT	safe/sqlite3.c	8756;"	d	file:
OP_IdxRowid	safe/sqlite3.c	8755;"	d	file:
OP_If	safe/sqlite3.c	8703;"	d	file:
OP_IfNeg	safe/sqlite3.c	8777;"	d	file:
OP_IfNot	safe/sqlite3.c	8704;"	d	file:
OP_IfPos	safe/sqlite3.c	8776;"	d	file:
OP_IfZero	safe/sqlite3.c	8778;"	d	file:
OP_IncrVacuum	safe/sqlite3.c	8784;"	d	file:
OP_Insert	safe/sqlite3.c	8735;"	d	file:
OP_InsertInt	safe/sqlite3.c	8736;"	d	file:
OP_Int64	safe/sqlite3.c	8658;"	d	file:
OP_Integer	safe/sqlite3.c	8657;"	d	file:
OP_IntegrityCk	safe/sqlite3.c	8767;"	d	file:
OP_IsNull	safe/sqlite3.c	8705;"	d	file:
OP_IsUnique	safe/sqlite3.c	8731;"	d	file:
OP_JournalMode	safe/sqlite3.c	8782;"	d	file:
OP_Jump	safe/sqlite3.c	8697;"	d	file:
OP_Last	safe/sqlite3.c	8745;"	d	file:
OP_Le	safe/sqlite3.c	8692;"	d	file:
OP_LoadAnalysis	safe/sqlite3.c	8763;"	d	file:
OP_Lt	safe/sqlite3.c	8691;"	d	file:
OP_MakeRecord	safe/sqlite3.c	8709;"	d	file:
OP_MaxPgcnt	safe/sqlite3.c	8797;"	d	file:
OP_MemMax	safe/sqlite3.c	8775;"	d	file:
OP_Move	safe/sqlite3.c	8665;"	d	file:
OP_Multiply	safe/sqlite3.c	8672;"	d	file:
OP_MustBeInt	safe/sqlite3.c	8682;"	d	file:
OP_Ne	safe/sqlite3.c	8690;"	d	file:
OP_NewRowid	safe/sqlite3.c	8734;"	d	file:
OP_Next	safe/sqlite3.c	8751;"	d	file:
OP_Noop	safe/sqlite3.c	8799;"	d	file:
OP_Not	safe/sqlite3.c	8700;"	d	file:
OP_NotExists	safe/sqlite3.c	8732;"	d	file:
OP_NotFound	safe/sqlite3.c	8729;"	d	file:
OP_NotNull	safe/sqlite3.c	8706;"	d	file:
OP_Null	safe/sqlite3.c	8662;"	d	file:
OP_NullRow	safe/sqlite3.c	8744;"	d	file:
OP_Once	safe/sqlite3.c	8702;"	d	file:
OP_OpenAutoindex	safe/sqlite3.c	8719;"	d	file:
OP_OpenEphemeral	safe/sqlite3.c	8720;"	d	file:
OP_OpenPseudo	safe/sqlite3.c	8722;"	d	file:
OP_OpenRead	safe/sqlite3.c	8717;"	d	file:
OP_OpenWrite	safe/sqlite3.c	8718;"	d	file:
OP_Or	safe/sqlite3.c	8699;"	d	file:
OP_Pagecount	safe/sqlite3.c	8796;"	d	file:
OP_Param	safe/sqlite3.c	8772;"	d	file:
OP_ParseSchema	safe/sqlite3.c	8762;"	d	file:
OP_Permutation	safe/sqlite3.c	8695;"	d	file:
OP_Prev	safe/sqlite3.c	8750;"	d	file:
OP_Program	safe/sqlite3.c	8771;"	d	file:
OP_ReadCookie	safe/sqlite3.c	8714;"	d	file:
OP_Real	safe/sqlite3.c	8659;"	d	file:
OP_RealAffinity	safe/sqlite3.c	8683;"	d	file:
OP_Remainder	safe/sqlite3.c	8674;"	d	file:
OP_ResetCount	safe/sqlite3.c	8738;"	d	file:
OP_ResultRow	safe/sqlite3.c	8668;"	d	file:
OP_Return	safe/sqlite3.c	8653;"	d	file:
OP_Rewind	safe/sqlite3.c	8748;"	d	file:
OP_RowData	safe/sqlite3.c	8742;"	d	file:
OP_RowKey	safe/sqlite3.c	8741;"	d	file:
OP_RowSetAdd	safe/sqlite3.c	8768;"	d	file:
OP_RowSetRead	safe/sqlite3.c	8769;"	d	file:
OP_RowSetTest	safe/sqlite3.c	8770;"	d	file:
OP_Rowid	safe/sqlite3.c	8743;"	d	file:
OP_SCopy	safe/sqlite3.c	8667;"	d	file:
OP_Savepoint	safe/sqlite3.c	8711;"	d	file:
OP_Seek	safe/sqlite3.c	8728;"	d	file:
OP_SeekGe	safe/sqlite3.c	8726;"	d	file:
OP_SeekGt	safe/sqlite3.c	8727;"	d	file:
OP_SeekLe	safe/sqlite3.c	8725;"	d	file:
OP_SeekLt	safe/sqlite3.c	8724;"	d	file:
OP_Sequence	safe/sqlite3.c	8733;"	d	file:
OP_SetCookie	safe/sqlite3.c	8715;"	d	file:
OP_ShiftLeft	safe/sqlite3.c	8679;"	d	file:
OP_ShiftRight	safe/sqlite3.c	8680;"	d	file:
OP_Sort	safe/sqlite3.c	8747;"	d	file:
OP_SorterCompare	safe/sqlite3.c	8739;"	d	file:
OP_SorterData	safe/sqlite3.c	8740;"	d	file:
OP_SorterInsert	safe/sqlite3.c	8752;"	d	file:
OP_SorterNext	safe/sqlite3.c	8749;"	d	file:
OP_SorterOpen	safe/sqlite3.c	8721;"	d	file:
OP_SorterSort	safe/sqlite3.c	8746;"	d	file:
OP_String	safe/sqlite3.c	8661;"	d	file:
OP_String8	safe/sqlite3.c	8660;"	d	file:
OP_Subtract	safe/sqlite3.c	8671;"	d	file:
OP_TableLock	safe/sqlite3.c	8786;"	d	file:
OP_ToBlob	safe/sqlite3.c	8685;"	d	file:
OP_ToInt	safe/sqlite3.c	8687;"	d	file:
OP_ToNumeric	safe/sqlite3.c	8686;"	d	file:
OP_ToReal	safe/sqlite3.c	8688;"	d	file:
OP_ToText	safe/sqlite3.c	8684;"	d	file:
OP_Trace	safe/sqlite3.c	8798;"	d	file:
OP_Transaction	safe/sqlite3.c	8713;"	d	file:
OP_VBegin	safe/sqlite3.c	8787;"	d	file:
OP_VColumn	safe/sqlite3.c	8792;"	d	file:
OP_VCreate	safe/sqlite3.c	8788;"	d	file:
OP_VDestroy	safe/sqlite3.c	8789;"	d	file:
OP_VFilter	safe/sqlite3.c	8791;"	d	file:
OP_VNext	safe/sqlite3.c	8793;"	d	file:
OP_VOpen	safe/sqlite3.c	8790;"	d	file:
OP_VRename	safe/sqlite3.c	8794;"	d	file:
OP_VUpdate	safe/sqlite3.c	8795;"	d	file:
OP_Vacuum	safe/sqlite3.c	8783;"	d	file:
OP_Variable	safe/sqlite3.c	8664;"	d	file:
OP_VerifyCookie	safe/sqlite3.c	8716;"	d	file:
OP_Yield	safe/sqlite3.c	8654;"	d	file:
OS	mtchannel.c	15;"	d	file:
OS	mtchannel.c	18;"	d	file:
OS	safe/spider.203.c	87;"	d	file:
OS	safe/spider.203.c	89;"	d	file:
OS	safe/spider.204.c	88;"	d	file:
OS	safe/spider.204.c	90;"	d	file:
OS	safe/spider.210.c	92;"	d	file:
OS	safe/spider.210.c	94;"	d	file:
OS	safe/spider.c	121;"	d	file:
OS	safe/spider.c	124;"	d	file:
OS	spider.c	121;"	d	file:
OS	spider.c	124;"	d	file:
OS2_SHM_BASE	safe/sqlite3.c	23811;"	d	file:
OS2_SHM_BASE	safe/sqlite3.c	23813;"	d	file:
OS2_SHM_DMS	safe/sqlite3.c	23816;"	d	file:
OSTRACE	safe/sqlite3.c	22881;"	d	file:
OSTRACE	safe/sqlite3.c	22883;"	d	file:
OSTRACE	safe/sqlite3.c	25228;"	d	file:
OSTRACE	safe/sqlite3.c	25230;"	d	file:
OSTRACE	safe/sqlite3.c	32084;"	d	file:
OSTRACE	safe/sqlite3.c	32086;"	d	file:
OS_VXWORKS	safe/sqlite3.c	25001;"	d	file:
OS_VXWORKS	safe/sqlite3.c	25003;"	d	file:
O_BINARY	safe/sqlite3.c	25414;"	d	file:
O_LARGEFILE	safe/sqlite3.c	25404;"	d	file:
O_LARGEFILE	safe/sqlite3.c	25407;"	d	file:
O_LARGEFILE	safe/sqlite3.c	25408;"	d	file:
O_NOFOLLOW	safe/sqlite3.c	25411;"	d	file:
OnChannelConnected	spider.c	/^int OnChannelConnected(CHAN *chan)$/;"	f
OnInvoked	safe/spider.c	/^void OnInvoked(WAMP *wamp, long long requestId, const char *procedure, JSON *list, JSON *dict)$/;"	f
OnInvoked	spider.c	/^void OnInvoked(WAMP *wamp, long long requestId, const char *procedure, JSON *list, JSON *dict)$/;"	f
OnInwardWampConnected	spider.c	/^static int OnInwardWampConnected(WAMP *wamp)$/;"	f	file:
OnPubsubConnected	spider.c	/^static int OnPubsubConnected(WAMP *wamp)$/;"	f	file:
OnSocketDeleted	mtwamp.c	/^STATIC void OnSocketDeleted(WS *ws)$/;"	f
OnWampRedirectConnected	spider.c	/^static int OnWampRedirectConnected(WAMP *wamp)$/;"	f	file:
OnWampRedirectResult	spider.c	/^static int OnWampRedirectResult(WAMP *wamp, int type, JSON *payload)$/;"	f	file:
OnWampSpider	spider.c	/^static void OnWampSpider(WAMP *wamp, long long requestId, const char *procedure, JSON *argList, JSON *argDict)$/;"	f	file:
Op	safe/sqlite3.c	/^typedef struct VdbeOp Op;$/;"	t	file:
OpenCounter	safe/sqlite3.c	23043;"	d	file:
OpenCounter	safe/sqlite3.c	23045;"	d	file:
OpenCounter	safe/sqlite3.c	25390;"	d	file:
OpenCounter	safe/sqlite3.c	25392;"	d	file:
OpenCounter	safe/sqlite3.c	32246;"	d	file:
OpenCounter	safe/sqlite3.c	32248;"	d	file:
P4_ADVANCE	safe/sqlite3.c	8604;"	d	file:
P4_COLLSEQ	safe/sqlite3.c	8591;"	d	file:
P4_DYNAMIC	safe/sqlite3.c	8589;"	d	file:
P4_FUNCDEF	safe/sqlite3.c	8592;"	d	file:
P4_INT32	safe/sqlite3.c	8601;"	d	file:
P4_INT64	safe/sqlite3.c	8600;"	d	file:
P4_INTARRAY	safe/sqlite3.c	8602;"	d	file:
P4_KEYINFO	safe/sqlite3.c	8593;"	d	file:
P4_KEYINFO_HANDOFF	safe/sqlite3.c	8613;"	d	file:
P4_KEYINFO_STATIC	safe/sqlite3.c	8614;"	d	file:
P4_MEM	safe/sqlite3.c	8595;"	d	file:
P4_MPRINTF	safe/sqlite3.c	8598;"	d	file:
P4_NOTUSED	safe/sqlite3.c	8588;"	d	file:
P4_REAL	safe/sqlite3.c	8599;"	d	file:
P4_STATIC	safe/sqlite3.c	8590;"	d	file:
P4_SUBPROGRAM	safe/sqlite3.c	8603;"	d	file:
P4_TRANSIENT	safe/sqlite3.c	8596;"	d	file:
P4_VDBEFUNC	safe/sqlite3.c	8594;"	d	file:
P4_VTAB	safe/sqlite3.c	8597;"	d	file:
PAGERID	safe/sqlite3.c	39375;"	d	file:
PAGERTRACE	safe/sqlite3.c	39362;"	d	file:
PAGERTRACE	safe/sqlite3.c	39364;"	d	file:
PAGER_ERROR	safe/sqlite3.c	39601;"	d	file:
PAGER_INCR	safe/sqlite3.c	39954;"	d	file:
PAGER_INCR	safe/sqlite3.c	39956;"	d	file:
PAGER_JOURNALMODE_DELETE	safe/sqlite3.c	8986;"	d	file:
PAGER_JOURNALMODE_MEMORY	safe/sqlite3.c	8990;"	d	file:
PAGER_JOURNALMODE_OFF	safe/sqlite3.c	8988;"	d	file:
PAGER_JOURNALMODE_PERSIST	safe/sqlite3.c	8987;"	d	file:
PAGER_JOURNALMODE_QUERY	safe/sqlite3.c	8985;"	d	file:
PAGER_JOURNALMODE_TRUNCATE	safe/sqlite3.c	8989;"	d	file:
PAGER_JOURNALMODE_WAL	safe/sqlite3.c	8991;"	d	file:
PAGER_LOCKINGMODE_EXCLUSIVE	safe/sqlite3.c	8980;"	d	file:
PAGER_LOCKINGMODE_NORMAL	safe/sqlite3.c	8979;"	d	file:
PAGER_LOCKINGMODE_QUERY	safe/sqlite3.c	8978;"	d	file:
PAGER_MAX_PGNO	safe/sqlite3.c	40015;"	d	file:
PAGER_MEMORY	safe/sqlite3.c	8973;"	d	file:
PAGER_MJ_PGNO	safe/sqlite3.c	8965;"	d	file:
PAGER_OMIT_JOURNAL	safe/sqlite3.c	8972;"	d	file:
PAGER_OPEN	safe/sqlite3.c	39595;"	d	file:
PAGER_READER	safe/sqlite3.c	39596;"	d	file:
PAGER_STAT_HIT	safe/sqlite3.c	39941;"	d	file:
PAGER_STAT_MISS	safe/sqlite3.c	39942;"	d	file:
PAGER_STAT_WRITE	safe/sqlite3.c	39943;"	d	file:
PAGER_WRITER_CACHEMOD	safe/sqlite3.c	39598;"	d	file:
PAGER_WRITER_DBMOD	safe/sqlite3.c	39599;"	d	file:
PAGER_WRITER_FINISHED	safe/sqlite3.c	39600;"	d	file:
PAGER_WRITER_LOCKED	safe/sqlite3.c	39597;"	d	file:
PASSWORD	safe/spider.133.c	189;"	d	file:
PASSWORD	safe/spider.135.c	198;"	d	file:
PASSWORD	safe/spider.200.c	204;"	d	file:
PASSWORD	safe/spider.203.c	218;"	d	file:
PASSWORD	safe/spider.204.c	234;"	d	file:
PASSWORD	safe/spider.210.c	254;"	d	file:
PASSWORD	safe/spider.c	305;"	d	file:
PASSWORD	spider.c	318;"	d	file:
PCache	safe/sqlite3.c	/^struct PCache {$/;"	s	file:
PCache	safe/sqlite3.c	/^typedef struct PCache PCache;$/;"	t	file:
PCache1	safe/sqlite3.c	/^struct PCache1 {$/;"	s	file:
PCache1	safe/sqlite3.c	/^typedef struct PCache1 PCache1;$/;"	t	file:
PCacheGlobal	safe/sqlite3.c	/^static SQLITE_WSD struct PCacheGlobal {$/;"	s	file:
PENDING_BYTE	safe/sqlite3.c	9520;"	d	file:
PENDING_BYTE	safe/sqlite3.c	9522;"	d	file:
PENDING_BYTE_PAGE	safe/sqlite3.c	49836;"	d	file:
PENDING_LOCK	safe/sqlite3.c	9461;"	d	file:
PGHDR_DIRTY	safe/sqlite3.c	9152;"	d	file:
PGHDR_DONT_WRITE	safe/sqlite3.c	9157;"	d	file:
PGHDR_NEED_READ	safe/sqlite3.c	9155;"	d	file:
PGHDR_NEED_SYNC	safe/sqlite3.c	9153;"	d	file:
PGHDR_REUSE_UNLIKELY	safe/sqlite3.c	9156;"	d	file:
PGroup	safe/sqlite3.c	/^struct PGroup {$/;"	s	file:
PGroup	safe/sqlite3.c	/^typedef struct PGroup PGroup;$/;"	t	file:
PIDSTRBASE	safe/spider.133.c	1322;"	d	file:
PIDSTRBASE	safe/spider.135.c	1398;"	d	file:
PIDSTRBASE	safe/spider.200.c	1622;"	d	file:
PIDSTRBASE	safe/spider.203.c	1948;"	d	file:
PIDSTRBASE	safe/spider.204.c	1960;"	d	file:
PIDSTRBASE	safe/spider.210.c	2778;"	d	file:
PIDSTRBASE	safe/spider.c	2920;"	d	file:
PIDSTRBASE	spider.c	3099;"	d	file:
PM2_INCPATH	jtest.mak	/^PM2_INCPATH=$(PM2_BASE)\/include$/;"	m
PM2_INCPATH	makefile	/^PM2_INCPATH=$(PM2_BASE)\/include$/;"	m
PM2_INCPATH	spider.mak	/^PM2_INCPATH=$(PM2_BASE)\/include$/;"	m
PM2_LIBPATH	jtest.mak	/^PM2_LIBPATH=$(PM2_BASE)\/libs$/;"	m
PM2_LIBPATH	makefile	/^PM2_LIBPATH=$(PM2_BASE)\/libs$/;"	m
PM2_LIBPATH	spider.mak	/^PM2_LIBPATH=$(PM2_BASE)\/libs$/;"	m
PORT_APP	safe/spider.133.c	122;"	d	file:
PORT_APP	safe/spider.135.c	131;"	d	file:
PORT_APP	safe/spider.200.c	137;"	d	file:
PORT_APP	safe/spider.203.c	148;"	d	file:
PORT_APP	safe/spider.204.c	149;"	d	file:
PORT_APP	safe/spider.210.c	153;"	d	file:
PORT_APP	safe/spider.c	202;"	d	file:
PORT_APP	spider.c	205;"	d	file:
PORT_HTTP	safe/spider.210.c	155;"	d	file:
PORT_HTTP	safe/spider.c	204;"	d	file:
PORT_HTTP	spider.c	207;"	d	file:
PORT_HTTPS	safe/spider.210.c	154;"	d	file:
PORT_HTTPS	safe/spider.c	203;"	d	file:
PORT_HTTPS	spider.c	206;"	d	file:
PORT_PUBSUB	spider.c	208;"	d	file:
POSITION_LIST_END	safe/sqlite3.c	119733;"	d	file:
POS_COLUMN	safe/sqlite3.c	117710;"	d	file:
POS_END	safe/sqlite3.c	117711;"	d	file:
PROXY_CONCHVERSION	safe/sqlite3.c	31115;"	d	file:
PROXY_HEADERLEN	safe/sqlite3.c	31116;"	d	file:
PROXY_HOSTIDLEN	safe/sqlite3.c	31077;"	d	file:
PROXY_MAXCONCHLEN	safe/sqlite3.c	31118;"	d	file:
PROXY_PATHINDEX	safe/sqlite3.c	31117;"	d	file:
PTF_INTKEY	safe/sqlite3.c	49539;"	d	file:
PTF_LEAF	safe/sqlite3.c	49542;"	d	file:
PTF_LEAFDATA	safe/sqlite3.c	49541;"	d	file:
PTF_ZERODATA	safe/sqlite3.c	49540;"	d	file:
PTRMAP_BTREE	safe/sqlite3.c	49892;"	d	file:
PTRMAP_FREEPAGE	safe/sqlite3.c	49889;"	d	file:
PTRMAP_ISPAGE	safe/sqlite3.c	49855;"	d	file:
PTRMAP_OVERFLOW1	safe/sqlite3.c	49890;"	d	file:
PTRMAP_OVERFLOW2	safe/sqlite3.c	49891;"	d	file:
PTRMAP_PAGENO	safe/sqlite3.c	49853;"	d	file:
PTRMAP_PTROFFSET	safe/sqlite3.c	49854;"	d	file:
PTRMAP_ROOTPAGE	safe/sqlite3.c	49888;"	d	file:
Pager	safe/sqlite3.c	/^struct Pager {$/;"	s	file:
Pager	safe/sqlite3.c	/^typedef struct Pager Pager;$/;"	t	file:
PagerSavepoint	safe/sqlite3.c	/^struct PagerSavepoint {$/;"	s	file:
PagerSavepoint	safe/sqlite3.c	/^typedef struct PagerSavepoint PagerSavepoint;$/;"	t	file:
Parse	safe/sqlite3.c	/^struct Parse {$/;"	s	file:
Parse	safe/sqlite3.c	/^typedef struct Parse Parse;$/;"	t	file:
ParseAddress	safe/spider.133.c	/^static int ParseAddress(const char *szURI, const char **pszAddr, const char ***ppszName, const char ***ppszValue)$/;"	f	file:
ParseAddress	safe/spider.135.c	/^static int ParseAddress(const char *szURI, const char **pszAddr, const char ***ppszName, const char ***ppszValue)$/;"	f	file:
ParseAddress	safe/spider.200.c	/^static int ParseAddress(const char *szURI, const char **pszAddr, const char ***ppszName, const char ***ppszValue)$/;"	f	file:
ParseAddress	safe/spider.203.c	/^static int ParseAddress(const char *szURI, const char **pszAddr, const char ***ppszName, const char ***ppszValue)$/;"	f	file:
ParseAddress	safe/spider.204.c	/^static int ParseAddress(const char *szURI, const char **pszAddr, const char ***ppszName, const char ***ppszValue)$/;"	f	file:
ParseAddress	safe/spider.210.c	/^static int ParseAddress(const char *szURI, const char **pszAddr, const char ***ppszName, const char ***ppszValue)$/;"	f	file:
ParseAddress	safe/spider.c	/^static int ParseAddress(const char *szURI, const char **pszAddr, const char ***ppszName, const char ***ppszValue)$/;"	f	file:
ParseAddress	spider.c	/^static int ParseAddress(const char *szURI, const char **pszAddr, const char ***ppszName, const char ***ppszValue)$/;"	f	file:
ParseContext	safe/sqlite3.c	/^struct ParseContext {$/;"	s	file:
ParseContext	safe/sqlite3.c	/^typedef struct ParseContext ParseContext;$/;"	t	file:
ParseURI	safe/spider.133.c	/^static int ParseURI(const char *szURI, const char ***ppszName, const char ***ppszValue, char bEncoded)$/;"	f	file:
ParseURI	safe/spider.135.c	/^static int ParseURI(const char *szURI, const char ***ppszName, const char ***ppszValue, char bEncoded)$/;"	f	file:
ParseURI	safe/spider.200.c	/^static int ParseURI(const char *szURI, const char ***ppszName, const char ***ppszValue, char bEncoded)$/;"	f	file:
ParseURI	safe/spider.203.c	/^static int ParseURI(const char *szURI, const char ***ppszName, const char ***ppszValue, char bEncoded)$/;"	f	file:
ParseURI	safe/spider.204.c	/^static int ParseURI(const char *szURI, const char ***ppszName, const char ***ppszValue, char bEncoded)$/;"	f	file:
ParseURI	safe/spider.210.c	/^static int ParseURI(const char *szURI, const char ***ppszName, const char ***ppszValue, char bEncoded)$/;"	f	file:
ParseURI	safe/spider.c	/^static int ParseURI(const char *szURI, const char ***ppszName, const char ***ppszValue, char bEncoded)$/;"	f	file:
ParseURI	spider.c	/^static int ParseURI(const char *szURI, const char ***ppszName, const char ***ppszValue, char bEncoded)$/;"	f	file:
PeerIp	safe/spider.133.c	/^static const char *PeerIp()$/;"	f	file:
PeerIp	safe/spider.135.c	/^static const char *PeerIp()$/;"	f	file:
PeerIp	safe/spider.200.c	/^static const char *PeerIp()$/;"	f	file:
PeerIp	safe/spider.203.c	/^static const char *PeerIp()$/;"	f	file:
PeerIp	safe/spider.204.c	/^static const char *PeerIp()$/;"	f	file:
PeerIp	safe/spider.210.c	/^static const char *PeerIp()$/;"	f	file:
PeerIp	safe/spider.c	/^static const char *PeerIp()$/;"	f	file:
PeerIp	spider.c	/^static const char *PeerIp()$/;"	f	file:
PeerPort	safe/spider.133.c	/^int PeerPort(void) { return _nSenderPort; }$/;"	f
PeerPort	safe/spider.135.c	/^int PeerPort(void) { return _nSenderPort; }$/;"	f
PeerPort	safe/spider.200.c	/^int PeerPort(void) { return _nSenderPort; }$/;"	f
PeerPort	safe/spider.203.c	/^int PeerPort(void) { return _nSenderPort; }$/;"	f
PeerPort	safe/spider.204.c	/^int PeerPort(void) { return _nSenderPort; }$/;"	f
PeerPort	safe/spider.210.c	/^int PeerPort(void) { return _nSenderPort; }$/;"	f
PeerPort	safe/spider.c	/^int PeerPort(void) { return _nSenderPort; }$/;"	f
PeerPort	spider.c	/^int PeerPort(void) { return _nSenderPort; }$/;"	f
PendingList	safe/sqlite3.c	/^struct PendingList {$/;"	s	file:
PendingList	safe/sqlite3.c	/^typedef struct PendingList PendingList;$/;"	t	file:
PgFreeslot	safe/sqlite3.c	/^struct PgFreeslot {$/;"	s	file:
PgFreeslot	safe/sqlite3.c	/^typedef struct PgFreeslot PgFreeslot;$/;"	t	file:
PgHdr	safe/sqlite3.c	/^struct PgHdr {$/;"	s	file:
PgHdr	safe/sqlite3.c	/^typedef struct PgHdr PgHdr;$/;"	t	file:
PgHdr1	safe/sqlite3.c	/^struct PgHdr1 {$/;"	s	file:
PgHdr1	safe/sqlite3.c	/^typedef struct PgHdr1 PgHdr1;$/;"	t	file:
Pgno	safe/sqlite3.c	/^typedef u32 Pgno;$/;"	t	file:
PickNext	safe/sqlite3.c	134205;"	d	file:
PickNext	safe/sqlite3.c	134210;"	d	file:
PickSeeds	safe/sqlite3.c	134206;"	d	file:
PickSeeds	safe/sqlite3.c	134211;"	d	file:
ProcessAlive	safe/spider.133.c	/^static int ProcessAlive(int nPid)$/;"	f	file:
ProcessAlive	safe/spider.135.c	/^static int ProcessAlive(int nPid)$/;"	f	file:
ProcessAlive	safe/spider.200.c	/^static int ProcessAlive(int nPid)$/;"	f	file:
ProcessAlive	safe/spider.203.c	/^static int ProcessAlive(int nPid)$/;"	f	file:
ProcessAlive	safe/spider.204.c	/^static int ProcessAlive(int nPid)$/;"	f	file:
ProcessAlive	safe/spider.210.c	/^static int ProcessAlive(int nPid)$/;"	f	file:
ProcessAlive	safe/spider.c	/^static int ProcessAlive(int nPid)$/;"	f	file:
ProcessAlive	spider.c	/^static int ProcessAlive(int nPid)$/;"	f	file:
ProcessHttp	safe/spider.c	/^static void ProcessHttp(BIO *io, const char *szMethod, const char *szURI, MIME *mime)$/;"	f	file:
ProcessHttp	spider.c	/^static void ProcessHttp(BIO *io, const char *szMethod, const char *szURI, MIME *mime)$/;"	f	file:
ProcessIncomingConnection	safe/spider.c	/^static void ProcessIncomingConnection(BIO *io)$/;"	f	file:
ProcessIncomingConnection	spider.c	/^static void ProcessIncomingConnection(BIO *io)$/;"	f	file:
ProtocolName	safe/spider.133.c	/^static const char *ProtocolName(nProtocol)$/;"	f	file:
ProtocolName	safe/spider.135.c	/^static const char *ProtocolName(nProtocol)$/;"	f	file:
ProtocolName	safe/spider.200.c	/^static const char *ProtocolName(nProtocol)$/;"	f	file:
ProtocolName	safe/spider.203.c	/^static const char *ProtocolName(nProtocol)$/;"	f	file:
ProtocolName	safe/spider.204.c	/^static const char *ProtocolName(nProtocol)$/;"	f	file:
ProtocolName	safe/spider.210.c	/^static const char *ProtocolName(nProtocol)$/;"	f	file:
ProtocolName	safe/spider.c	/^static const char *ProtocolName(nProtocol)$/;"	f	file:
ProtocolName	spider.c	/^static const char *ProtocolName(nProtocol)$/;"	f	file:
PutXmlIntoDropDir	safe/spider.133.c	/^static rogxml *PutXmlIntoDropDir(rogxml *rx, const char *szFilename)$/;"	f	file:
PutXmlIntoDropDir	safe/spider.135.c	/^static rogxml *PutXmlIntoDropDir(rogxml *rx, const char *szFilename)$/;"	f	file:
PutXmlIntoDropDir	safe/spider.200.c	/^static rogxml *PutXmlIntoDropDir(rogxml *rx, const char *szFilename)$/;"	f	file:
PutXmlIntoDropDir	safe/spider.203.c	/^static rogxml *PutXmlIntoDropDir(rogxml *rx, const char *szFilename)$/;"	f	file:
PutXmlIntoDropDir	safe/spider.204.c	/^static rogxml *PutXmlIntoDropDir(rogxml *rx, const char *szFilename)$/;"	f	file:
PutXmlIntoDropDir	safe/spider.210.c	/^static rogxml *PutXmlIntoDropDir(rogxml *rx, const char *szFilename)$/;"	f	file:
PutXmlIntoDropDir	safe/spider.c	/^static rogxml *PutXmlIntoDropDir(rogxml *rx, const char *szFilename)$/;"	f	file:
PutXmlIntoDropDir	spider.c	/^static rogxml *PutXmlIntoDropDir(rogxml *rx, const char *szFilename)$/;"	f	file:
QuadraticPickNext	safe/sqlite3.c	/^static RtreeCell *QuadraticPickNext($/;"	f	file:
QuadraticPickSeeds	safe/sqlite3.c	/^static void QuadraticPickSeeds($/;"	f	file:
QualifyFile	safe/spider.133.c	/^static const char *QualifyFile(const char *szName)$/;"	f	file:
QualifyFile	safe/spider.135.c	/^static const char *QualifyFile(const char *szName)$/;"	f	file:
QualifyFile	safe/spider.200.c	/^static const char *QualifyFile(const char *szName)$/;"	f	file:
QualifyFile	safe/spider.203.c	/^static const char *QualifyFile(const char *szName)$/;"	f	file:
QualifyFile	safe/spider.204.c	/^static const char *QualifyFile(const char *szName)$/;"	f	file:
QualifyFile	safe/spider.210.c	/^static const char *QualifyFile(const char *szName)$/;"	f	file:
QualifyFile	safe/spider.c	/^static const char *QualifyFile(const char *szName)$/;"	f	file:
QualifyFile	spider.c	/^static const char *QualifyFile(const char *szName)$/;"	f	file:
QualifyInDir	safe/spider.135.c	/^static const char *QualifyInDir(const char *szDir, const char *szName)$/;"	f	file:
QualifyInDir	safe/spider.200.c	/^static const char *QualifyInDir(const char *szDir, const char *szName)$/;"	f	file:
QualifyInDir	safe/spider.203.c	/^static const char *QualifyInDir(const char *szDir, const char *szName)$/;"	f	file:
QualifyInDir	safe/spider.204.c	/^static const char *QualifyInDir(const char *szDir, const char *szName)$/;"	f	file:
QualifyInDir	safe/spider.210.c	/^static const char *QualifyInDir(const char *szDir, const char *szName)$/;"	f	file:
QualifyInDir	safe/spider.c	/^static const char *QualifyInDir(const char *szDir, const char *szName)$/;"	f	file:
QualifyInDir	spider.c	/^static const char *QualifyInDir(const char *szDir, const char *szName)$/;"	f	file:
READMARK_NOT_USED	safe/sqlite3.c	46548;"	d	file:
READ_LOCK	safe/sqlite3.c	49605;"	d	file:
READ_UTF16BE	safe/sqlite3.c	20715;"	d	file:
READ_UTF16LE	safe/sqlite3.c	20705;"	d	file:
READ_UTF8	safe/sqlite3.c	133404;"	d	file:
READ_UTF8	safe/sqlite3.c	20752;"	d	file:
REARGUARD	safe/sqlite3.c	15626;"	d	file:
REGISTER_TRACE	safe/sqlite3.c	65672;"	d	file:
REGISTER_TRACE	safe/sqlite3.c	65674;"	d	file:
RESERVED_BYTE	safe/sqlite3.c	9524;"	d	file:
RESERVED_LOCK	safe/sqlite3.c	9460;"	d	file:
RNDAWAY	safe/sqlite3.c	136867;"	d	file:
RNDTOWARDS	safe/sqlite3.c	136866;"	d	file:
ROUND8	safe/sqlite3.c	8067;"	d	file:
ROUNDDOWN8	safe/sqlite3.c	8072;"	d	file:
ROWSET_ALLOCATION_SIZE	safe/sqlite3.c	38664;"	d	file:
ROWSET_ENTRY_PER_CHUNK	safe/sqlite3.c	38669;"	d	file:
ROWSET_NEXT	safe/sqlite3.c	38718;"	d	file:
ROWSET_SORTED	safe/sqlite3.c	38717;"	d	file:
RTREE_COORD_INT32	safe/sqlite3.c	134304;"	d	file:
RTREE_COORD_REAL32	safe/sqlite3.c	134303;"	d	file:
RTREE_EQ	safe/sqlite3.c	134386;"	d	file:
RTREE_GE	safe/sqlite3.c	134389;"	d	file:
RTREE_GEOMETRY_MAGIC	safe/sqlite3.c	134420;"	d	file:
RTREE_GT	safe/sqlite3.c	134390;"	d	file:
RTREE_LE	safe/sqlite3.c	134387;"	d	file:
RTREE_LT	safe/sqlite3.c	134388;"	d	file:
RTREE_MATCH	safe/sqlite3.c	134391;"	d	file:
RTREE_MAXCELLS	safe/sqlite3.c	134330;"	d	file:
RTREE_MAX_DEPTH	safe/sqlite3.c	134339;"	d	file:
RTREE_MAX_DIMENSIONS	safe/sqlite3.c	134253;"	d	file:
RTREE_MINCELLS	safe/sqlite3.c	134328;"	d	file:
RTREE_PATH	jtest.mak	/^RTREE_PATH=\/microtest\/users\/faircomm\/rtree$/;"	m
RTREE_PATH	makefile	/^RTREE_PATH=\/microtest\/users\/faircomm\/rtree$/;"	m
RTREE_PATH	spider.mak	/^RTREE_PATH=\/microtest\/users\/faircomm\/rtree$/;"	m
RTREE_REINSERT	safe/sqlite3.c	134329;"	d	file:
ReadEnvironmentFile	safe/spider.133.c	/^static void ReadEnvironmentFile(const char *szFile)$/;"	f	file:
ReadEnvironmentFile	safe/spider.135.c	/^static void ReadEnvironmentFile(const char *szFile)$/;"	f	file:
ReadEnvironmentFile	safe/spider.200.c	/^static void ReadEnvironmentFile(const char *szFile)$/;"	f	file:
ReadEnvironmentFile	safe/spider.203.c	/^static void ReadEnvironmentFile(const char *szFile)$/;"	f	file:
ReadEnvironmentFile	safe/spider.204.c	/^static void ReadEnvironmentFile(const char *szFile)$/;"	f	file:
ReadEnvironmentFile	safe/spider.210.c	/^static void ReadEnvironmentFile(const char *szFile)$/;"	f	file:
ReadEnvironmentFile	safe/spider.c	/^static void ReadEnvironmentFile(const char *szFile)$/;"	f	file:
ReadEnvironmentFile	spider.c	/^static void ReadEnvironmentFile(const char *szFile)$/;"	f	file:
ReadLine	safe/spider.133.c	/^static const char *ReadLine(FILE *fd)$/;"	f	file:
ReadLine	safe/spider.135.c	/^static const char *ReadLine(FILE *fd)$/;"	f	file:
ReadLine	safe/spider.200.c	/^static const char *ReadLine(FILE *fd)$/;"	f	file:
ReadLine	safe/spider.203.c	/^static const char *ReadLine(FILE *fd)$/;"	f	file:
ReadLine	safe/spider.204.c	/^static const char *ReadLine(FILE *fd)$/;"	f	file:
ReadLine	safe/spider.210.c	/^static char *ReadLine(FILE *fd)$/;"	f	file:
ReadLine	safe/spider.c	/^static char *ReadLine(FILE *fd)$/;"	f	file:
ReadLine	spider.c	/^static char *ReadLine(FILE *fd)$/;"	f	file:
ReadStream	safe/spider.133.c	/^static int ReadStream()$/;"	f	file:
ReadStream	safe/spider.135.c	/^static int ReadStream()$/;"	f	file:
ReadStream	safe/spider.200.c	/^static int ReadStream()$/;"	f	file:
ReadStream	safe/spider.203.c	/^static int ReadStream()$/;"	f	file:
ReadStream	safe/spider.204.c	/^static int ReadStream()$/;"	f	file:
ReadStream	safe/spider.210.c	/^static int ReadStream()$/;"	f	file:
ReadStream	safe/spider.c	/^static int ReadStream()$/;"	f	file:
ReadStream	spider.c	/^static int ReadStream()$/;"	f	file:
ReallyExit	safe/spider.210.c	/^static void ReallyExit(int nCode)$/;"	f	file:
ReallyExit	safe/spider.c	/^static void ReallyExit(int nCode)$/;"	f	file:
ReallyExit	spider.c	/^static void ReallyExit(int nCode)$/;"	f	file:
ReceiveHTTP	safe/spider.133.c	/^static int ReceiveHTTP(BIO *io, const char *szMethod, const char *szURI, const char *szVersion)$/;"	f	file:
ReceiveHTTP	safe/spider.135.c	/^static int ReceiveHTTP(BIO *io, const char *szMethod, const char *szURI, const char *szVersion)$/;"	f	file:
ReceiveHTTP	safe/spider.200.c	/^static int ReceiveHTTP(BIO *io, const char *szMethod, const char *szURI, const char *szVersion, const char *szOrganisation, const char *szProduct)$/;"	f	file:
ReceiveHTTP	safe/spider.203.c	/^static int ReceiveHTTP(BIO *io, const char *szMethod, const char *szURI, const char *szVersion, const char *szOrganisation, const char *szProduct)$/;"	f	file:
ReceiveHTTP	safe/spider.204.c	/^static int ReceiveHTTP(BIO *io, const char *szMethod, const char *szURI, const char *szVersion, const char *szOrganisation, const char *szProduct)$/;"	f	file:
ReceiveHTTP	safe/spider.210.c	/^static int ReceiveHTTP(BIO *io, const char *szMethod, const char *szURI, const char *szVersion)$/;"	f	file:
ReceiveHTTP	safe/spider.c	/^static int ReceiveHTTP(BIO *io, const char *szMethod, const char *szURI, const char *szVersion)$/;"	f	file:
ReceiveHTTP	spider.c	/^static int ReceiveHTTP(BIO *io, const char *szMethod, const char *szURI, const char *szVersion)$/;"	f	file:
ReceiveXML	safe/spider.133.c	/^static rogxml *ReceiveXML(int fd, int nTimeout)$/;"	f	file:
ReceiveXML	safe/spider.135.c	/^static rogxml *ReceiveXML(int fd, int nTimeout)$/;"	f	file:
ReceiveXML	safe/spider.200.c	/^static rogxml *ReceiveXML(int fd, int nTimeout)$/;"	f	file:
ReceiveXML	safe/spider.203.c	/^static rogxml *ReceiveXML(int fd, int nTimeout)$/;"	f	file:
ReceiveXML	safe/spider.204.c	/^static rogxml *ReceiveXML(int fd, int nTimeout)$/;"	f	file:
ReceiveXML	safe/spider.210.c	/^static rogxml *ReceiveXML(int fd, int nTimeout)$/;"	f	file:
ReceiveXML	safe/spider.c	/^static rogxml *ReceiveXML(int fd, int nTimeout)$/;"	f	file:
ReceiveXML	spider.c	/^static rogxml *ReceiveXML(int fd, int nTimeout)$/;"	f	file:
RefreshAccessDatabase	safe/spider.200.c	/^int RefreshAccessDatabase()$/;"	f
RefreshAccessDatabase	safe/spider.203.c	/^int RefreshAccessDatabase()$/;"	f
RefreshAccessDatabase	safe/spider.204.c	/^int RefreshAccessDatabase()$/;"	f
RefreshAccessDatabase	safe/spider.210.c	/^int RefreshAccessDatabase()$/;"	f
Reinsert	safe/sqlite3.c	/^static int Reinsert($/;"	f	file:
ReportUsage	safe/spider.c	/^void ReportUsage()$/;"	f
ReportUsage	spider.c	/^void ReportUsage()$/;"	f
ResultXml	safe/spider.c	/^static rogxml *ResultXml(int status, const char *api)$/;"	f	file:
ResultXml	spider.c	/^static rogxml *ResultXml(int status, const char *api)$/;"	f	file:
ReturnResult	safe/spider.c	/^void ReturnResult(BIO *io, int bWantHeader, const char *szApi, rogxml *rxResult)$/;"	f
ReturnResult	spider.c	/^void ReturnResult(BIO *io, int bWantHeader, const char *szApi, rogxml *rxResult)$/;"	f
RogRename	safe/spider.133.c	/^static int RogRename(const char *szSrc, const char *szDest)$/;"	f	file:
RogRename	safe/spider.135.c	/^static int RogRename(const char *szSrc, const char *szDest)$/;"	f	file:
RogRename	safe/spider.200.c	/^static int RogRename(const char *szSrc, const char *szDest)$/;"	f	file:
RogRename	safe/spider.203.c	/^static int RogRename(const char *szSrc, const char *szDest)$/;"	f	file:
RogRename	safe/spider.204.c	/^static int RogRename(const char *szSrc, const char *szDest)$/;"	f	file:
RogRename	safe/spider.210.c	/^static int RogRename(const char *szSrc, const char *szDest)$/;"	f	file:
RogRename	safe/spider.c	/^static int RogRename(const char *szSrc, const char *szDest)$/;"	f	file:
RogRename	spider.c	/^static int RogRename(const char *szSrc, const char *szDest)$/;"	f	file:
RowSet	safe/sqlite3.c	/^struct RowSet {$/;"	s	file:
RowSet	safe/sqlite3.c	/^typedef struct RowSet RowSet;$/;"	t	file:
RowSetChunk	safe/sqlite3.c	/^struct RowSetChunk {$/;"	s	file:
RowSetEntry	safe/sqlite3.c	/^struct RowSetEntry {            $/;"	s	file:
RpcEntryForm	safe/spider.133.c	/^static void RpcEntryForm(BIO *io, char bDebug, const char *szSession, const char *szXml, const char *szApi)$/;"	f	file:
RpcEntryForm	safe/spider.135.c	/^static void RpcEntryForm(BIO *io, char bDebug, const char *szSession, const char *szXml, const char *szApi)$/;"	f	file:
RpcEntryForm	safe/spider.200.c	/^static void RpcEntryForm(BIO *io, char bDebug, const char *szSession, const char *szXml, const char *szApi)$/;"	f	file:
RpcEntryForm	safe/spider.203.c	/^static void RpcEntryForm(BIO *io, char bDebug, const char *szSession, const char *szXml, const char *szApi)$/;"	f	file:
RpcEntryForm	safe/spider.204.c	/^static void RpcEntryForm(BIO *io, char bDebug, const char *szSession, const char *szXml, const char *szApi)$/;"	f	file:
RpcEntryForm	safe/spider.210.c	/^static void RpcEntryForm(BIO *io, char bDebug, const char *szSession, const char *szXml, const char *szApi)$/;"	f	file:
RpcEntryForm	safe/spider.c	/^static void RpcEntryForm(BIO *io, char bDebug, const char *szSession, const char *szXml, const char *szApi)$/;"	f	file:
RpcEntryForm	spider.c	/^static void RpcEntryForm(BIO *io, char bDebug, const char *szSession, const char *szXml, const char *szApi)$/;"	f	file:
RpcSessionFromApi	safe/spider.133.c	/^const char *RpcSessionFromApi(const char *szApiSession)$/;"	f
RpcSessionFromApi	safe/spider.135.c	/^const char *RpcSessionFromApi(const char *szApiSession)$/;"	f
RpcSessionFromApi	safe/spider.200.c	/^const char *RpcSessionFromApi(const char *szApiSession)$/;"	f
RpcSessionFromApi	safe/spider.203.c	/^const char *RpcSessionFromApi(const char *szApiSession)$/;"	f
RpcSessionFromApi	safe/spider.204.c	/^const char *RpcSessionFromApi(const char *szApiSession)$/;"	f
RpcSessionFromApi	safe/spider.210.c	/^const char *RpcSessionFromApi(const char *szApiSession)$/;"	f
RpcSessionFromApi	safe/spider.c	/^const char *RpcSessionFromApi(const char *szApiSession)$/;"	f
RpcSessionFromApi	spider.c	/^const char *RpcSessionFromApi(const char *szApiSession)$/;"	f
Rtree	safe/sqlite3.c	/^struct Rtree {$/;"	s	file:
Rtree	safe/sqlite3.c	/^typedef struct Rtree Rtree;$/;"	t	file:
RtreeCell	safe/sqlite3.c	/^struct RtreeCell {$/;"	s	file:
RtreeCell	safe/sqlite3.c	/^typedef struct RtreeCell RtreeCell;$/;"	t	file:
RtreeConstraint	safe/sqlite3.c	/^struct RtreeConstraint {$/;"	s	file:
RtreeConstraint	safe/sqlite3.c	/^typedef struct RtreeConstraint RtreeConstraint;$/;"	t	file:
RtreeCoord	safe/sqlite3.c	/^typedef union RtreeCoord RtreeCoord;$/;"	t	file:
RtreeCoord	safe/sqlite3.c	/^union RtreeCoord {$/;"	u	file:
RtreeCursor	safe/sqlite3.c	/^struct RtreeCursor {$/;"	s	file:
RtreeCursor	safe/sqlite3.c	/^typedef struct RtreeCursor RtreeCursor;$/;"	t	file:
RtreeDValue	safe/sqlite3.c	/^  typedef double RtreeDValue;              \/* High accuracy coordinate *\/$/;"	t	file:
RtreeDValue	safe/sqlite3.c	/^  typedef sqlite3_int64 RtreeDValue;       \/* High accuracy coordinate *\/$/;"	t	file:
RtreeGeomCallback	safe/sqlite3.c	/^struct RtreeGeomCallback {$/;"	s	file:
RtreeGeomCallback	safe/sqlite3.c	/^typedef struct RtreeGeomCallback RtreeGeomCallback;$/;"	t	file:
RtreeMatchArg	safe/sqlite3.c	/^struct RtreeMatchArg {$/;"	s	file:
RtreeMatchArg	safe/sqlite3.c	/^typedef struct RtreeMatchArg RtreeMatchArg;$/;"	t	file:
RtreeNode	safe/sqlite3.c	/^struct RtreeNode {$/;"	s	file:
RtreeNode	safe/sqlite3.c	/^typedef struct RtreeNode RtreeNode;$/;"	t	file:
RtreeValue	safe/sqlite3.c	/^  typedef float RtreeValue;                \/* Low accuracy coordinate *\/$/;"	t	file:
RtreeValue	safe/sqlite3.c	/^  typedef int RtreeValue;                  \/* Low accuracy coordinate *\/$/;"	t	file:
RunLegacyApi	spider.c	/^int RunLegacyApi(const char *api, SSMAP *argMap, int childStdin, int childStdout)$/;"	f
SAVEPOINT_BEGIN	safe/sqlite3.c	10068;"	d	file:
SAVEPOINT_RELEASE	safe/sqlite3.c	10069;"	d	file:
SAVEPOINT_ROLLBACK	safe/sqlite3.c	10070;"	d	file:
SAVE_SZ	safe/sqlite3.c	82420;"	d	file:
SCHEMA_TABLE	safe/sqlite3.c	8122;"	d	file:
SETBIT	safe/sqlite3.c	36839;"	d	file:
SET_FULLSYNC	safe/sqlite3.c	9406;"	d	file:
SF_Aggregate	safe/sqlite3.c	11057;"	d	file:
SF_Distinct	safe/sqlite3.c	11055;"	d	file:
SF_Expanded	safe/sqlite3.c	11059;"	d	file:
SF_HasTypeInfo	safe/sqlite3.c	11060;"	d	file:
SF_Resolved	safe/sqlite3.c	11056;"	d	file:
SF_UseSorter	safe/sqlite3.c	11061;"	d	file:
SF_UsesEphemeral	safe/sqlite3.c	11058;"	d	file:
SF_Values	safe/sqlite3.c	11062;"	d	file:
SHARED_FIRST	safe/sqlite3.c	9525;"	d	file:
SHARED_LOCK	safe/sqlite3.c	9459;"	d	file:
SHARED_SIZE	safe/sqlite3.c	9526;"	d	file:
SHUT_RD	safe/spider.133.c	117;"	d	file:
SHUT_RD	safe/spider.135.c	126;"	d	file:
SHUT_RD	safe/spider.200.c	132;"	d	file:
SHUT_RD	safe/spider.203.c	143;"	d	file:
SHUT_RD	safe/spider.204.c	144;"	d	file:
SHUT_RD	safe/spider.210.c	148;"	d	file:
SHUT_RD	safe/spider.c	195;"	d	file:
SHUT_RD	spider.c	196;"	d	file:
SHUT_RDWR	safe/spider.133.c	119;"	d	file:
SHUT_RDWR	safe/spider.135.c	128;"	d	file:
SHUT_RDWR	safe/spider.200.c	134;"	d	file:
SHUT_RDWR	safe/spider.203.c	145;"	d	file:
SHUT_RDWR	safe/spider.204.c	146;"	d	file:
SHUT_RDWR	safe/spider.210.c	150;"	d	file:
SHUT_RDWR	safe/spider.c	197;"	d	file:
SHUT_RDWR	spider.c	198;"	d	file:
SHUT_WR	safe/spider.133.c	118;"	d	file:
SHUT_WR	safe/spider.135.c	127;"	d	file:
SHUT_WR	safe/spider.200.c	133;"	d	file:
SHUT_WR	safe/spider.203.c	144;"	d	file:
SHUT_WR	safe/spider.204.c	145;"	d	file:
SHUT_WR	safe/spider.210.c	149;"	d	file:
SHUT_WR	safe/spider.c	196;"	d	file:
SHUT_WR	spider.c	197;"	d	file:
SIGN_JSON	mtjson.c	88;"	d	file:
SIGN_json	mtjson.c	89;"	d	file:
SLOT_2_0	safe/sqlite3.c	21825;"	d	file:
SLOT_4_2_0	safe/sqlite3.c	21826;"	d	file:
SMALLEST_INT64	safe/sqlite3.c	8061;"	d	file:
SORTER_MAX_MERGE_COUNT	safe/sqlite3.c	72689;"	d	file:
SORTER_MIN_WORKING	safe/sqlite3.c	72686;"	d	file:
SPIDERRPCFunction	safe/spider.133.c	/^static rogxml *SPIDERRPCFunction(rogxml *rxRpc)$/;"	f	file:
SPIDERRPCFunction	safe/spider.135.c	/^static rogxml *SPIDERRPCFunction(rogxml *rxRpc)$/;"	f	file:
SPIDERRPCFunction	safe/spider.200.c	/^static rogxml *SPIDERRPCFunction(rogxml *rxRpc, const char *szOrganisation, const char *szProduct)$/;"	f	file:
SPIDERRPCFunction	safe/spider.203.c	/^static rogxml *SPIDERRPCFunction(rogxml *rxRpc, const char *szOrganisation, const char *szProduct)$/;"	f	file:
SPIDERRPCFunction	safe/spider.204.c	/^static rogxml *SPIDERRPCFunction(rogxml *rxRpc, const char *szOrganisation, const char *szProduct)$/;"	f	file:
SPIDERRPCFunction	safe/spider.210.c	/^static rogxml *SPIDERRPCFunction(rogxml *rxRpc)$/;"	f	file:
SPIDERRPCFunction	safe/spider.c	/^static rogxml *SPIDERRPCFunction(rogxml *rxRpc)$/;"	f	file:
SPIDERRPCFunction	spider.c	/^static rogxml *SPIDERRPCFunction(rogxml *rxRpc)$/;"	f	file:
SPIDERRpc	safe/spider.133.c	/^static rogxml *SPIDERRpc(rogxml *rxRpc)$/;"	f	file:
SPIDERRpc	safe/spider.135.c	/^static rogxml *SPIDERRpc(rogxml *rxRpc)$/;"	f	file:
SPIDERRpc	safe/spider.200.c	/^static rogxml *SPIDERRpc(rogxml *rxRpc)$/;"	f	file:
SPIDERRpc	safe/spider.203.c	/^static rogxml *SPIDERRpc(rogxml *rxRpc)$/;"	f	file:
SPIDERRpc	safe/spider.204.c	/^static rogxml *SPIDERRpc(rogxml *rxRpc)$/;"	f	file:
SPIDERRpc	safe/spider.210.c	/^static rogxml *SPIDERRpc(rogxml *rxRpc)$/;"	f	file:
SPIDERRpc	safe/spider.c	/^static rogxml *SPIDERRpc(rogxml *rxRpc)$/;"	f	file:
SPIDERRpc	spider.c	/^static rogxml *SPIDERRpc(rogxml *rxRpc)$/;"	f	file:
SPIDERRpcName	safe/spider.133.c	/^static rogxml *SPIDERRpcName(rogxml *rxRpc)$/;"	f	file:
SPIDERRpcName	safe/spider.135.c	/^static rogxml *SPIDERRpcName(rogxml *rxRpc)$/;"	f	file:
SPIDERRpcName	safe/spider.200.c	/^static rogxml *SPIDERRpcName(rogxml *rxRpc)$/;"	f	file:
SPIDERRpcName	safe/spider.203.c	/^static rogxml *SPIDERRpcName(rogxml *rxRpc)$/;"	f	file:
SPIDERRpcName	safe/spider.204.c	/^static rogxml *SPIDERRpcName(rogxml *rxRpc)$/;"	f	file:
SPIDERRpcName	safe/spider.210.c	/^static rogxml *SPIDERRpcName(rogxml *rxRpc)$/;"	f	file:
SPIDERRpcName	safe/spider.c	/^static rogxml *SPIDERRpcName(rogxml *rxRpc)$/;"	f	file:
SPIDERRpcName	spider.c	/^static rogxml *SPIDERRpcName(rogxml *rxRpc)$/;"	f	file:
SPIDERSystemError	safe/spider.133.c	/^static rogxml *SPIDERSystemError(int nErr, const char *szErr)$/;"	f	file:
SPIDERSystemError	safe/spider.135.c	/^static rogxml *SPIDERSystemError(int nErr, const char *szErr)$/;"	f	file:
SPIDERSystemError	safe/spider.200.c	/^static rogxml *SPIDERSystemError(int nErr, const char *szErr)$/;"	f	file:
SPIDERSystemError	safe/spider.203.c	/^static rogxml *SPIDERSystemError(int nErr, const char *szErr)$/;"	f	file:
SPIDERSystemError	safe/spider.204.c	/^static rogxml *SPIDERSystemError(int nErr, const char *szErr)$/;"	f	file:
SPIDERSystemError	safe/spider.210.c	/^static rogxml *SPIDERSystemError(int nErr, const char *szErr)$/;"	f	file:
SPIDERSystemError	safe/spider.c	/^static rogxml *SPIDERSystemError(int nErr, const char *szErr)$/;"	f	file:
SPIDERSystemError	spider.c	/^static rogxml *SPIDERSystemError(int nErr, const char *szErr)$/;"	f	file:
SQLITE3_MUTEX_INITIALIZER	safe/sqlite3.c	17762;"	d	file:
SQLITE3_MUTEX_INITIALIZER	safe/sqlite3.c	17764;"	d	file:
SQLITE3_MUTEX_INITIALIZER	safe/sqlite3.c	18049;"	d	file:
SQLITE3_MUTEX_INITIALIZER	safe/sqlite3.c	18051;"	d	file:
SQLITE3_MUTEX_INITIALIZER	safe/sqlite3.c	18387;"	d	file:
SQLITE3_MUTEX_INITIALIZER	safe/sqlite3.c	18389;"	d	file:
SQLITE3_TEXT	safe/sqlite3.c	4084;"	d	file:
SQLITE3_TEXT	safe/sqlite3.h	3526;"	d
SQLITE_ABORT	safe/sqlite3.c	944;"	d	file:
SQLITE_ABORT	safe/sqlite3.h	386;"	d
SQLITE_ABORT_ROLLBACK	safe/sqlite3.c	1023;"	d	file:
SQLITE_ABORT_ROLLBACK	safe/sqlite3.h	465;"	d
SQLITE_ACCESS_EXISTS	safe/sqlite3.c	1644;"	d	file:
SQLITE_ACCESS_EXISTS	safe/sqlite3.h	1086;"	d
SQLITE_ACCESS_READ	safe/sqlite3.c	1646;"	d	file:
SQLITE_ACCESS_READ	safe/sqlite3.h	1088;"	d
SQLITE_ACCESS_READWRITE	safe/sqlite3.c	1645;"	d	file:
SQLITE_ACCESS_READWRITE	safe/sqlite3.h	1087;"	d
SQLITE_AFF_INTEGER	safe/sqlite3.c	10155;"	d	file:
SQLITE_AFF_MASK	safe/sqlite3.c	10164;"	d	file:
SQLITE_AFF_NONE	safe/sqlite3.c	10153;"	d	file:
SQLITE_AFF_NUMERIC	safe/sqlite3.c	10154;"	d	file:
SQLITE_AFF_REAL	safe/sqlite3.c	10156;"	d	file:
SQLITE_AFF_TEXT	safe/sqlite3.c	10152;"	d	file:
SQLITE_ALTER_TABLE	safe/sqlite3.c	2944;"	d	file:
SQLITE_ALTER_TABLE	safe/sqlite3.h	2386;"	d
SQLITE_AMALGAMATION	safe/sqlite3.c	22;"	d	file:
SQLITE_ANALYZE	safe/sqlite3.c	2946;"	d	file:
SQLITE_ANALYZE	safe/sqlite3.h	2388;"	d
SQLITE_ANY	safe/sqlite3.c	4442;"	d	file:
SQLITE_ANY	safe/sqlite3.h	3884;"	d
SQLITE_API	safe/sqlite3.c	27;"	d	file:
SQLITE_API	safe/sqlite3.c	611;"	d	file:
SQLITE_API	safe/sqlite3.h	53;"	d
SQLITE_ASCII	safe/sqlite3.c	7959;"	d	file:
SQLITE_ATTACH	safe/sqlite3.c	2942;"	d	file:
SQLITE_ATTACH	safe/sqlite3.h	2384;"	d
SQLITE_AUTH	safe/sqlite3.c	963;"	d	file:
SQLITE_AUTH	safe/sqlite3.h	405;"	d
SQLITE_AutoIndex	safe/sqlite3.c	9926;"	d	file:
SQLITE_BIGENDIAN	safe/sqlite3.c	8046;"	d	file:
SQLITE_BIGENDIAN	safe/sqlite3.c	8050;"	d	file:
SQLITE_BIG_DBL	safe/sqlite3.c	7895;"	d	file:
SQLITE_BIG_DBL	safe/sqlite3.c	7903;"	d	file:
SQLITE_BLOB	safe/sqlite3.c	4077;"	d	file:
SQLITE_BLOB	safe/sqlite3.h	3519;"	d
SQLITE_BUSY	safe/sqlite3.c	945;"	d	file:
SQLITE_BUSY	safe/sqlite3.h	387;"	d
SQLITE_BUSY_RECOVERY	safe/sqlite3.c	1017;"	d	file:
SQLITE_BUSY_RECOVERY	safe/sqlite3.h	459;"	d
SQLITE_CANTOPEN	safe/sqlite3.c	954;"	d	file:
SQLITE_CANTOPEN	safe/sqlite3.h	396;"	d
SQLITE_CANTOPEN_BKPT	safe/sqlite3.c	11513;"	d	file:
SQLITE_CANTOPEN_ISDIR	safe/sqlite3.c	1019;"	d	file:
SQLITE_CANTOPEN_ISDIR	safe/sqlite3.h	461;"	d
SQLITE_CANTOPEN_NOTEMPDIR	safe/sqlite3.c	1018;"	d	file:
SQLITE_CANTOPEN_NOTEMPDIR	safe/sqlite3.h	460;"	d
SQLITE_CHECKPOINT_FULL	safe/sqlite3.c	7450;"	d	file:
SQLITE_CHECKPOINT_FULL	safe/sqlite3.h	6892;"	d
SQLITE_CHECKPOINT_PASSIVE	safe/sqlite3.c	7449;"	d	file:
SQLITE_CHECKPOINT_PASSIVE	safe/sqlite3.h	6891;"	d
SQLITE_CHECKPOINT_RESTART	safe/sqlite3.c	7451;"	d	file:
SQLITE_CHECKPOINT_RESTART	safe/sqlite3.h	6893;"	d
SQLITE_CONFIG_GETMALLOC	safe/sqlite3.c	2119;"	d	file:
SQLITE_CONFIG_GETMALLOC	safe/sqlite3.h	1561;"	d
SQLITE_CONFIG_GETMUTEX	safe/sqlite3.c	2125;"	d	file:
SQLITE_CONFIG_GETMUTEX	safe/sqlite3.h	1567;"	d
SQLITE_CONFIG_GETPCACHE	safe/sqlite3.c	2129;"	d	file:
SQLITE_CONFIG_GETPCACHE	safe/sqlite3.h	1571;"	d
SQLITE_CONFIG_GETPCACHE2	safe/sqlite3.c	2133;"	d	file:
SQLITE_CONFIG_GETPCACHE2	safe/sqlite3.h	1575;"	d
SQLITE_CONFIG_HEAP	safe/sqlite3.c	2122;"	d	file:
SQLITE_CONFIG_HEAP	safe/sqlite3.h	1564;"	d
SQLITE_CONFIG_LOG	safe/sqlite3.c	2130;"	d	file:
SQLITE_CONFIG_LOG	safe/sqlite3.h	1572;"	d
SQLITE_CONFIG_LOOKASIDE	safe/sqlite3.c	2127;"	d	file:
SQLITE_CONFIG_LOOKASIDE	safe/sqlite3.h	1569;"	d
SQLITE_CONFIG_MALLOC	safe/sqlite3.c	2118;"	d	file:
SQLITE_CONFIG_MALLOC	safe/sqlite3.h	1560;"	d
SQLITE_CONFIG_MEMSTATUS	safe/sqlite3.c	2123;"	d	file:
SQLITE_CONFIG_MEMSTATUS	safe/sqlite3.h	1565;"	d
SQLITE_CONFIG_MULTITHREAD	safe/sqlite3.c	2116;"	d	file:
SQLITE_CONFIG_MULTITHREAD	safe/sqlite3.h	1558;"	d
SQLITE_CONFIG_MUTEX	safe/sqlite3.c	2124;"	d	file:
SQLITE_CONFIG_MUTEX	safe/sqlite3.h	1566;"	d
SQLITE_CONFIG_PAGECACHE	safe/sqlite3.c	2121;"	d	file:
SQLITE_CONFIG_PAGECACHE	safe/sqlite3.h	1563;"	d
SQLITE_CONFIG_PCACHE	safe/sqlite3.c	2128;"	d	file:
SQLITE_CONFIG_PCACHE	safe/sqlite3.h	1570;"	d
SQLITE_CONFIG_PCACHE2	safe/sqlite3.c	2132;"	d	file:
SQLITE_CONFIG_PCACHE2	safe/sqlite3.h	1574;"	d
SQLITE_CONFIG_SCRATCH	safe/sqlite3.c	2120;"	d	file:
SQLITE_CONFIG_SCRATCH	safe/sqlite3.h	1562;"	d
SQLITE_CONFIG_SERIALIZED	safe/sqlite3.c	2117;"	d	file:
SQLITE_CONFIG_SERIALIZED	safe/sqlite3.h	1559;"	d
SQLITE_CONFIG_SINGLETHREAD	safe/sqlite3.c	2115;"	d	file:
SQLITE_CONFIG_SINGLETHREAD	safe/sqlite3.h	1557;"	d
SQLITE_CONFIG_URI	safe/sqlite3.c	2131;"	d	file:
SQLITE_CONFIG_URI	safe/sqlite3.h	1573;"	d
SQLITE_CONSTRAINT	safe/sqlite3.c	959;"	d	file:
SQLITE_CONSTRAINT	safe/sqlite3.h	401;"	d
SQLITE_COPY	safe/sqlite3.c	2951;"	d	file:
SQLITE_COPY	safe/sqlite3.h	2393;"	d
SQLITE_CORE	safe/sqlite3.c	118160;"	d	file:
SQLITE_CORE	safe/sqlite3.c	21;"	d	file:
SQLITE_CORE	safe/sqlite3.c	92016;"	d	file:
SQLITE_CORRUPT	safe/sqlite3.c	951;"	d	file:
SQLITE_CORRUPT	safe/sqlite3.h	393;"	d
SQLITE_CORRUPT_BKPT	safe/sqlite3.c	11511;"	d	file:
SQLITE_CORRUPT_VTAB	safe/sqlite3.c	1020;"	d	file:
SQLITE_CORRUPT_VTAB	safe/sqlite3.h	462;"	d
SQLITE_CREATE_INDEX	safe/sqlite3.c	2919;"	d	file:
SQLITE_CREATE_INDEX	safe/sqlite3.h	2361;"	d
SQLITE_CREATE_TABLE	safe/sqlite3.c	2920;"	d	file:
SQLITE_CREATE_TABLE	safe/sqlite3.h	2362;"	d
SQLITE_CREATE_TEMP_INDEX	safe/sqlite3.c	2921;"	d	file:
SQLITE_CREATE_TEMP_INDEX	safe/sqlite3.h	2363;"	d
SQLITE_CREATE_TEMP_TABLE	safe/sqlite3.c	2922;"	d	file:
SQLITE_CREATE_TEMP_TABLE	safe/sqlite3.h	2364;"	d
SQLITE_CREATE_TEMP_TRIGGER	safe/sqlite3.c	2923;"	d	file:
SQLITE_CREATE_TEMP_TRIGGER	safe/sqlite3.h	2365;"	d
SQLITE_CREATE_TEMP_VIEW	safe/sqlite3.c	2924;"	d	file:
SQLITE_CREATE_TEMP_VIEW	safe/sqlite3.h	2366;"	d
SQLITE_CREATE_TRIGGER	safe/sqlite3.c	2925;"	d	file:
SQLITE_CREATE_TRIGGER	safe/sqlite3.h	2367;"	d
SQLITE_CREATE_VIEW	safe/sqlite3.c	2926;"	d	file:
SQLITE_CREATE_VIEW	safe/sqlite3.h	2368;"	d
SQLITE_CREATE_VTABLE	safe/sqlite3.c	2947;"	d	file:
SQLITE_CREATE_VTABLE	safe/sqlite3.h	2389;"	d
SQLITE_CURDIR	safe/sqlite3.c	9399;"	d	file:
SQLITE_CkptFullFSync	safe/sqlite3.c	9921;"	d	file:
SQLITE_ColumnCache	safe/sqlite3.c	9937;"	d	file:
SQLITE_CountRows	safe/sqlite3.c	9908;"	d	file:
SQLITE_DBCONFIG_ENABLE_FKEY	safe/sqlite3.c	2194;"	d	file:
SQLITE_DBCONFIG_ENABLE_FKEY	safe/sqlite3.h	1636;"	d
SQLITE_DBCONFIG_ENABLE_TRIGGER	safe/sqlite3.c	2195;"	d	file:
SQLITE_DBCONFIG_ENABLE_TRIGGER	safe/sqlite3.h	1637;"	d
SQLITE_DBCONFIG_LOOKASIDE	safe/sqlite3.c	2193;"	d	file:
SQLITE_DBCONFIG_LOOKASIDE	safe/sqlite3.h	1635;"	d
SQLITE_DBSTATUS_CACHE_HIT	safe/sqlite3.c	6627;"	d	file:
SQLITE_DBSTATUS_CACHE_HIT	safe/sqlite3.h	6069;"	d
SQLITE_DBSTATUS_CACHE_MISS	safe/sqlite3.c	6628;"	d	file:
SQLITE_DBSTATUS_CACHE_MISS	safe/sqlite3.h	6070;"	d
SQLITE_DBSTATUS_CACHE_USED	safe/sqlite3.c	6621;"	d	file:
SQLITE_DBSTATUS_CACHE_USED	safe/sqlite3.h	6063;"	d
SQLITE_DBSTATUS_CACHE_WRITE	safe/sqlite3.c	6629;"	d	file:
SQLITE_DBSTATUS_CACHE_WRITE	safe/sqlite3.h	6071;"	d
SQLITE_DBSTATUS_LOOKASIDE_HIT	safe/sqlite3.c	6624;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_HIT	safe/sqlite3.h	6066;"	d
SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL	safe/sqlite3.c	6626;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL	safe/sqlite3.h	6068;"	d
SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE	safe/sqlite3.c	6625;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE	safe/sqlite3.h	6067;"	d
SQLITE_DBSTATUS_LOOKASIDE_USED	safe/sqlite3.c	6620;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_USED	safe/sqlite3.h	6062;"	d
SQLITE_DBSTATUS_MAX	safe/sqlite3.c	6630;"	d	file:
SQLITE_DBSTATUS_MAX	safe/sqlite3.h	6072;"	d
SQLITE_DBSTATUS_SCHEMA_USED	safe/sqlite3.c	6622;"	d	file:
SQLITE_DBSTATUS_SCHEMA_USED	safe/sqlite3.h	6064;"	d
SQLITE_DBSTATUS_STMT_USED	safe/sqlite3.c	6623;"	d	file:
SQLITE_DBSTATUS_STMT_USED	safe/sqlite3.h	6065;"	d
SQLITE_DEBUG_OS_TRACE	safe/sqlite3.c	22878;"	d	file:
SQLITE_DEBUG_OS_TRACE	safe/sqlite3.c	25225;"	d	file:
SQLITE_DEBUG_OS_TRACE	safe/sqlite3.c	32081;"	d	file:
SQLITE_DEFAULT_AUTOVACUUM	safe/sqlite3.c	8267;"	d	file:
SQLITE_DEFAULT_CACHE_SIZE	safe/sqlite3.c	188;"	d	file:
SQLITE_DEFAULT_FILE_FORMAT	safe/sqlite3.c	7925;"	d	file:
SQLITE_DEFAULT_FILE_PERMISSIONS	safe/sqlite3.c	25085;"	d	file:
SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT	safe/sqlite3.c	8938;"	d	file:
SQLITE_DEFAULT_MEMSTATUS	safe/sqlite3.c	384;"	d	file:
SQLITE_DEFAULT_PAGE_SIZE	safe/sqlite3.c	240;"	d	file:
SQLITE_DEFAULT_PAGE_SIZE	safe/sqlite3.c	243;"	d	file:
SQLITE_DEFAULT_PAGE_SIZE	safe/sqlite3.c	244;"	d	file:
SQLITE_DEFAULT_PROXYDIR_PERMISSIONS	safe/sqlite3.c	25092;"	d	file:
SQLITE_DEFAULT_RECURSIVE_TRIGGERS	safe/sqlite3.c	7933;"	d	file:
SQLITE_DEFAULT_SECTOR_SIZE	safe/sqlite3.c	9413;"	d	file:
SQLITE_DEFAULT_TEMP_CACHE_SIZE	safe/sqlite3.c	191;"	d	file:
SQLITE_DEFAULT_WAL_AUTOCHECKPOINT	safe/sqlite3.c	199;"	d	file:
SQLITE_DELETE	safe/sqlite3.c	2927;"	d	file:
SQLITE_DELETE	safe/sqlite3.h	2369;"	d
SQLITE_DENY	safe/sqlite3.c	2896;"	d	file:
SQLITE_DENY	safe/sqlite3.h	2338;"	d
SQLITE_DEPRECATED	safe/sqlite3.c	628;"	d	file:
SQLITE_DEPRECATED	safe/sqlite3.h	70;"	d
SQLITE_DETACH	safe/sqlite3.c	2943;"	d	file:
SQLITE_DETACH	safe/sqlite3.h	2385;"	d
SQLITE_DONE	safe/sqlite3.c	968;"	d	file:
SQLITE_DONE	safe/sqlite3.h	410;"	d
SQLITE_DROP_INDEX	safe/sqlite3.c	2928;"	d	file:
SQLITE_DROP_INDEX	safe/sqlite3.h	2370;"	d
SQLITE_DROP_TABLE	safe/sqlite3.c	2929;"	d	file:
SQLITE_DROP_TABLE	safe/sqlite3.h	2371;"	d
SQLITE_DROP_TEMP_INDEX	safe/sqlite3.c	2930;"	d	file:
SQLITE_DROP_TEMP_INDEX	safe/sqlite3.h	2372;"	d
SQLITE_DROP_TEMP_TABLE	safe/sqlite3.c	2931;"	d	file:
SQLITE_DROP_TEMP_TABLE	safe/sqlite3.h	2373;"	d
SQLITE_DROP_TEMP_TRIGGER	safe/sqlite3.c	2932;"	d	file:
SQLITE_DROP_TEMP_TRIGGER	safe/sqlite3.h	2374;"	d
SQLITE_DROP_TEMP_VIEW	safe/sqlite3.c	2933;"	d	file:
SQLITE_DROP_TEMP_VIEW	safe/sqlite3.h	2375;"	d
SQLITE_DROP_TRIGGER	safe/sqlite3.c	2934;"	d	file:
SQLITE_DROP_TRIGGER	safe/sqlite3.h	2376;"	d
SQLITE_DROP_VIEW	safe/sqlite3.c	2935;"	d	file:
SQLITE_DROP_VIEW	safe/sqlite3.h	2377;"	d
SQLITE_DROP_VTABLE	safe/sqlite3.c	2948;"	d	file:
SQLITE_DROP_VTABLE	safe/sqlite3.h	2390;"	d
SQLITE_DYNAMIC	safe/sqlite3.c	8138;"	d	file:
SQLITE_DistinctOpt	safe/sqlite3.c	9944;"	d	file:
SQLITE_EBCDIC	safe/sqlite3.c	7957;"	d	file:
SQLITE_EMPTY	safe/sqlite3.c	956;"	d	file:
SQLITE_EMPTY	safe/sqlite3.h	398;"	d
SQLITE_ENABLE_FTS3	safe/sqlite3.c	11522;"	d	file:
SQLITE_ENABLE_FTS3	safe/sqlite3.c	117350;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	safe/sqlite3.c	24989;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	safe/sqlite3.c	24991;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	safe/sqlite3.c	93961;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	safe/sqlite3.c	93963;"	d	file:
SQLITE_ERROR	safe/sqlite3.c	941;"	d	file:
SQLITE_ERROR	safe/sqlite3.h	383;"	d
SQLITE_EXPERIMENTAL	safe/sqlite3.c	629;"	d	file:
SQLITE_EXPERIMENTAL	safe/sqlite3.h	71;"	d
SQLITE_EXTENSION_INIT1	safe/sqlite3.c	92462;"	d	file:
SQLITE_EXTENSION_INIT2	safe/sqlite3.c	92463;"	d	file:
SQLITE_EXTERN	safe/sqlite3.c	607;"	d	file:
SQLITE_EXTERN	safe/sqlite3.h	49;"	d
SQLITE_EnableTrigger	safe/sqlite3.c	9929;"	d	file:
SQLITE_FAIL	safe/sqlite3.c	7535;"	d	file:
SQLITE_FAIL	safe/sqlite3.h	6977;"	d
SQLITE_FAULTINJECTOR_COUNT	safe/sqlite3.c	12163;"	d	file:
SQLITE_FAULTINJECTOR_MALLOC	safe/sqlite3.c	12162;"	d	file:
SQLITE_FCNTL_CHUNK_SIZE	safe/sqlite3.c	1404;"	d	file:
SQLITE_FCNTL_CHUNK_SIZE	safe/sqlite3.h	846;"	d
SQLITE_FCNTL_DB_UNCHANGED	safe/sqlite3.c	9547;"	d	file:
SQLITE_FCNTL_FILE_POINTER	safe/sqlite3.c	1405;"	d	file:
SQLITE_FCNTL_FILE_POINTER	safe/sqlite3.h	847;"	d
SQLITE_FCNTL_LOCKSTATE	safe/sqlite3.c	1399;"	d	file:
SQLITE_FCNTL_LOCKSTATE	safe/sqlite3.h	841;"	d
SQLITE_FCNTL_OVERWRITE	safe/sqlite3.c	1409;"	d	file:
SQLITE_FCNTL_OVERWRITE	safe/sqlite3.h	851;"	d
SQLITE_FCNTL_PERSIST_WAL	safe/sqlite3.c	1408;"	d	file:
SQLITE_FCNTL_PERSIST_WAL	safe/sqlite3.h	850;"	d
SQLITE_FCNTL_POWERSAFE_OVERWRITE	safe/sqlite3.c	1411;"	d	file:
SQLITE_FCNTL_POWERSAFE_OVERWRITE	safe/sqlite3.h	853;"	d
SQLITE_FCNTL_PRAGMA	safe/sqlite3.c	1412;"	d	file:
SQLITE_FCNTL_PRAGMA	safe/sqlite3.h	854;"	d
SQLITE_FCNTL_SIZE_HINT	safe/sqlite3.c	1403;"	d	file:
SQLITE_FCNTL_SIZE_HINT	safe/sqlite3.h	845;"	d
SQLITE_FCNTL_SYNC_OMITTED	safe/sqlite3.c	1406;"	d	file:
SQLITE_FCNTL_SYNC_OMITTED	safe/sqlite3.h	848;"	d
SQLITE_FCNTL_VFSNAME	safe/sqlite3.c	1410;"	d	file:
SQLITE_FCNTL_VFSNAME	safe/sqlite3.h	852;"	d
SQLITE_FCNTL_WIN32_AV_RETRY	safe/sqlite3.c	1407;"	d	file:
SQLITE_FCNTL_WIN32_AV_RETRY	safe/sqlite3.h	849;"	d
SQLITE_FILE_HEADER	safe/sqlite3.c	49532;"	d	file:
SQLITE_FLOAT	safe/sqlite3.c	4076;"	d	file:
SQLITE_FLOAT	safe/sqlite3.h	3518;"	d
SQLITE_FORMAT	safe/sqlite3.c	964;"	d	file:
SQLITE_FORMAT	safe/sqlite3.h	406;"	d
SQLITE_FREE	safe/sqlite3.c	15349;"	d	file:
SQLITE_FREE	safe/sqlite3.c	15361;"	d	file:
SQLITE_FSFLAGS_IS_MSDOS	safe/sqlite3.c	25070;"	d	file:
SQLITE_FTS3_DEFAULT_NEAR_PARAM	safe/sqlite3.c	123761;"	d	file:
SQLITE_FULL	safe/sqlite3.c	953;"	d	file:
SQLITE_FULL	safe/sqlite3.h	395;"	d
SQLITE_FUNCTION	safe/sqlite3.c	2949;"	d	file:
SQLITE_FUNCTION	safe/sqlite3.h	2391;"	d
SQLITE_FUNC_CASE	safe/sqlite3.c	10004;"	d	file:
SQLITE_FUNC_COALESCE	safe/sqlite3.c	10008;"	d	file:
SQLITE_FUNC_COUNT	safe/sqlite3.c	10007;"	d	file:
SQLITE_FUNC_EPHEM	safe/sqlite3.c	10005;"	d	file:
SQLITE_FUNC_LENGTH	safe/sqlite3.c	10009;"	d	file:
SQLITE_FUNC_LIKE	safe/sqlite3.c	10003;"	d	file:
SQLITE_FUNC_NEEDCOLL	safe/sqlite3.c	10006;"	d	file:
SQLITE_FUNC_TYPEOF	safe/sqlite3.c	10010;"	d	file:
SQLITE_FactorOutConst	safe/sqlite3.c	9942;"	d	file:
SQLITE_ForeignKeys	safe/sqlite3.c	9925;"	d	file:
SQLITE_FullColNames	safe/sqlite3.c	9906;"	d	file:
SQLITE_FullFSync	safe/sqlite3.c	9920;"	d	file:
SQLITE_GET_LOCKPROXYFILE	safe/sqlite3.c	1400;"	d	file:
SQLITE_GET_LOCKPROXYFILE	safe/sqlite3.h	842;"	d
SQLITE_GroupByOrder	safe/sqlite3.c	9941;"	d	file:
SQLITE_HAVE_ISNAN	safe/sqlite3.c	7900;"	d	file:
SQLITE_IGNORE	safe/sqlite3.c	2897;"	d	file:
SQLITE_IGNORE	safe/sqlite3.h	2339;"	d
SQLITE_INDEX_CONSTRAINT_EQ	safe/sqlite3.c	5668;"	d	file:
SQLITE_INDEX_CONSTRAINT_EQ	safe/sqlite3.h	5110;"	d
SQLITE_INDEX_CONSTRAINT_GE	safe/sqlite3.c	5672;"	d	file:
SQLITE_INDEX_CONSTRAINT_GE	safe/sqlite3.h	5114;"	d
SQLITE_INDEX_CONSTRAINT_GT	safe/sqlite3.c	5669;"	d	file:
SQLITE_INDEX_CONSTRAINT_GT	safe/sqlite3.h	5111;"	d
SQLITE_INDEX_CONSTRAINT_LE	safe/sqlite3.c	5670;"	d	file:
SQLITE_INDEX_CONSTRAINT_LE	safe/sqlite3.h	5112;"	d
SQLITE_INDEX_CONSTRAINT_LT	safe/sqlite3.c	5671;"	d	file:
SQLITE_INDEX_CONSTRAINT_LT	safe/sqlite3.h	5113;"	d
SQLITE_INDEX_CONSTRAINT_MATCH	safe/sqlite3.c	5673;"	d	file:
SQLITE_INDEX_CONSTRAINT_MATCH	safe/sqlite3.h	5115;"	d
SQLITE_INSERT	safe/sqlite3.c	2936;"	d	file:
SQLITE_INSERT	safe/sqlite3.h	2378;"	d
SQLITE_INTEGER	safe/sqlite3.c	4075;"	d	file:
SQLITE_INTEGER	safe/sqlite3.h	3517;"	d
SQLITE_INTEGRITY_CHECK_ERROR_MAX	safe/sqlite3.c	94245;"	d	file:
SQLITE_INTERNAL	safe/sqlite3.c	942;"	d	file:
SQLITE_INTERNAL	safe/sqlite3.h	384;"	d
SQLITE_INTERRUPT	safe/sqlite3.c	949;"	d	file:
SQLITE_INTERRUPT	safe/sqlite3.h	391;"	d
SQLITE_INT_TO_PTR	safe/sqlite3.c	337;"	d	file:
SQLITE_INT_TO_PTR	safe/sqlite3.c	340;"	d	file:
SQLITE_INT_TO_PTR	safe/sqlite3.c	343;"	d	file:
SQLITE_INT_TO_PTR	safe/sqlite3.c	346;"	d	file:
SQLITE_IOCAP_ATOMIC	safe/sqlite3.c	1079;"	d	file:
SQLITE_IOCAP_ATOMIC	safe/sqlite3.h	521;"	d
SQLITE_IOCAP_ATOMIC16K	safe/sqlite3.c	1085;"	d	file:
SQLITE_IOCAP_ATOMIC16K	safe/sqlite3.h	527;"	d
SQLITE_IOCAP_ATOMIC1K	safe/sqlite3.c	1081;"	d	file:
SQLITE_IOCAP_ATOMIC1K	safe/sqlite3.h	523;"	d
SQLITE_IOCAP_ATOMIC2K	safe/sqlite3.c	1082;"	d	file:
SQLITE_IOCAP_ATOMIC2K	safe/sqlite3.h	524;"	d
SQLITE_IOCAP_ATOMIC32K	safe/sqlite3.c	1086;"	d	file:
SQLITE_IOCAP_ATOMIC32K	safe/sqlite3.h	528;"	d
SQLITE_IOCAP_ATOMIC4K	safe/sqlite3.c	1083;"	d	file:
SQLITE_IOCAP_ATOMIC4K	safe/sqlite3.h	525;"	d
SQLITE_IOCAP_ATOMIC512	safe/sqlite3.c	1080;"	d	file:
SQLITE_IOCAP_ATOMIC512	safe/sqlite3.h	522;"	d
SQLITE_IOCAP_ATOMIC64K	safe/sqlite3.c	1087;"	d	file:
SQLITE_IOCAP_ATOMIC64K	safe/sqlite3.h	529;"	d
SQLITE_IOCAP_ATOMIC8K	safe/sqlite3.c	1084;"	d	file:
SQLITE_IOCAP_ATOMIC8K	safe/sqlite3.h	526;"	d
SQLITE_IOCAP_POWERSAFE_OVERWRITE	safe/sqlite3.c	1091;"	d	file:
SQLITE_IOCAP_POWERSAFE_OVERWRITE	safe/sqlite3.h	533;"	d
SQLITE_IOCAP_SAFE_APPEND	safe/sqlite3.c	1088;"	d	file:
SQLITE_IOCAP_SAFE_APPEND	safe/sqlite3.h	530;"	d
SQLITE_IOCAP_SEQUENTIAL	safe/sqlite3.c	1089;"	d	file:
SQLITE_IOCAP_SEQUENTIAL	safe/sqlite3.h	531;"	d
SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN	safe/sqlite3.c	1090;"	d	file:
SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN	safe/sqlite3.h	532;"	d
SQLITE_IOERR	safe/sqlite3.c	950;"	d	file:
SQLITE_IOERR	safe/sqlite3.h	392;"	d
SQLITE_IOERR_ACCESS	safe/sqlite3.c	1006;"	d	file:
SQLITE_IOERR_ACCESS	safe/sqlite3.h	448;"	d
SQLITE_IOERR_BLOCKED	safe/sqlite3.c	1004;"	d	file:
SQLITE_IOERR_BLOCKED	safe/sqlite3.h	446;"	d
SQLITE_IOERR_CHECKRESERVEDLOCK	safe/sqlite3.c	1007;"	d	file:
SQLITE_IOERR_CHECKRESERVEDLOCK	safe/sqlite3.h	449;"	d
SQLITE_IOERR_CLOSE	safe/sqlite3.c	1009;"	d	file:
SQLITE_IOERR_CLOSE	safe/sqlite3.h	451;"	d
SQLITE_IOERR_DELETE	safe/sqlite3.c	1003;"	d	file:
SQLITE_IOERR_DELETE	safe/sqlite3.h	445;"	d
SQLITE_IOERR_DIR_CLOSE	safe/sqlite3.c	1010;"	d	file:
SQLITE_IOERR_DIR_CLOSE	safe/sqlite3.h	452;"	d
SQLITE_IOERR_DIR_FSYNC	safe/sqlite3.c	998;"	d	file:
SQLITE_IOERR_DIR_FSYNC	safe/sqlite3.h	440;"	d
SQLITE_IOERR_FSTAT	safe/sqlite3.c	1000;"	d	file:
SQLITE_IOERR_FSTAT	safe/sqlite3.h	442;"	d
SQLITE_IOERR_FSYNC	safe/sqlite3.c	997;"	d	file:
SQLITE_IOERR_FSYNC	safe/sqlite3.h	439;"	d
SQLITE_IOERR_LOCK	safe/sqlite3.c	1008;"	d	file:
SQLITE_IOERR_LOCK	safe/sqlite3.h	450;"	d
SQLITE_IOERR_NOMEM	safe/sqlite3.c	1005;"	d	file:
SQLITE_IOERR_NOMEM	safe/sqlite3.h	447;"	d
SQLITE_IOERR_RDLOCK	safe/sqlite3.c	1002;"	d	file:
SQLITE_IOERR_RDLOCK	safe/sqlite3.h	444;"	d
SQLITE_IOERR_READ	safe/sqlite3.c	994;"	d	file:
SQLITE_IOERR_READ	safe/sqlite3.h	436;"	d
SQLITE_IOERR_SEEK	safe/sqlite3.c	1015;"	d	file:
SQLITE_IOERR_SEEK	safe/sqlite3.h	457;"	d
SQLITE_IOERR_SHMLOCK	safe/sqlite3.c	1013;"	d	file:
SQLITE_IOERR_SHMLOCK	safe/sqlite3.h	455;"	d
SQLITE_IOERR_SHMMAP	safe/sqlite3.c	1014;"	d	file:
SQLITE_IOERR_SHMMAP	safe/sqlite3.h	456;"	d
SQLITE_IOERR_SHMOPEN	safe/sqlite3.c	1011;"	d	file:
SQLITE_IOERR_SHMOPEN	safe/sqlite3.h	453;"	d
SQLITE_IOERR_SHMSIZE	safe/sqlite3.c	1012;"	d	file:
SQLITE_IOERR_SHMSIZE	safe/sqlite3.h	454;"	d
SQLITE_IOERR_SHORT_READ	safe/sqlite3.c	995;"	d	file:
SQLITE_IOERR_SHORT_READ	safe/sqlite3.h	437;"	d
SQLITE_IOERR_TRUNCATE	safe/sqlite3.c	999;"	d	file:
SQLITE_IOERR_TRUNCATE	safe/sqlite3.h	441;"	d
SQLITE_IOERR_UNLOCK	safe/sqlite3.c	1001;"	d	file:
SQLITE_IOERR_UNLOCK	safe/sqlite3.h	443;"	d
SQLITE_IOERR_WRITE	safe/sqlite3.c	996;"	d	file:
SQLITE_IOERR_WRITE	safe/sqlite3.h	438;"	d
SQLITE_IdxRealAsInt	safe/sqlite3.c	9943;"	d	file:
SQLITE_IgnoreChecks	safe/sqlite3.c	9917;"	d	file:
SQLITE_IndexCover	safe/sqlite3.c	9940;"	d	file:
SQLITE_IndexSearch	safe/sqlite3.c	9939;"	d	file:
SQLITE_IndexSort	safe/sqlite3.c	9938;"	d	file:
SQLITE_InternChanges	safe/sqlite3.c	9905;"	d	file:
SQLITE_JUMPIFNULL	safe/sqlite3.c	10170;"	d	file:
SQLITE_LAST_ERRNO	safe/sqlite3.c	1402;"	d	file:
SQLITE_LAST_ERRNO	safe/sqlite3.h	844;"	d
SQLITE_LIMIT_ATTACHED	safe/sqlite3.c	3433;"	d	file:
SQLITE_LIMIT_ATTACHED	safe/sqlite3.h	2875;"	d
SQLITE_LIMIT_COLUMN	safe/sqlite3.c	3428;"	d	file:
SQLITE_LIMIT_COLUMN	safe/sqlite3.h	2870;"	d
SQLITE_LIMIT_COMPOUND_SELECT	safe/sqlite3.c	3430;"	d	file:
SQLITE_LIMIT_COMPOUND_SELECT	safe/sqlite3.h	2872;"	d
SQLITE_LIMIT_EXPR_DEPTH	safe/sqlite3.c	3429;"	d	file:
SQLITE_LIMIT_EXPR_DEPTH	safe/sqlite3.h	2871;"	d
SQLITE_LIMIT_FUNCTION_ARG	safe/sqlite3.c	3432;"	d	file:
SQLITE_LIMIT_FUNCTION_ARG	safe/sqlite3.h	2874;"	d
SQLITE_LIMIT_LENGTH	safe/sqlite3.c	3426;"	d	file:
SQLITE_LIMIT_LENGTH	safe/sqlite3.h	2868;"	d
SQLITE_LIMIT_LIKE_PATTERN_LENGTH	safe/sqlite3.c	3434;"	d	file:
SQLITE_LIMIT_LIKE_PATTERN_LENGTH	safe/sqlite3.h	2876;"	d
SQLITE_LIMIT_SQL_LENGTH	safe/sqlite3.c	3427;"	d	file:
SQLITE_LIMIT_SQL_LENGTH	safe/sqlite3.h	2869;"	d
SQLITE_LIMIT_TRIGGER_DEPTH	safe/sqlite3.c	3436;"	d	file:
SQLITE_LIMIT_TRIGGER_DEPTH	safe/sqlite3.h	2878;"	d
SQLITE_LIMIT_VARIABLE_NUMBER	safe/sqlite3.c	3435;"	d	file:
SQLITE_LIMIT_VARIABLE_NUMBER	safe/sqlite3.h	2877;"	d
SQLITE_LIMIT_VDBE_OP	safe/sqlite3.c	3431;"	d	file:
SQLITE_LIMIT_VDBE_OP	safe/sqlite3.h	2873;"	d
SQLITE_LITTLEENDIAN	safe/sqlite3.c	8047;"	d	file:
SQLITE_LITTLEENDIAN	safe/sqlite3.c	8051;"	d	file:
SQLITE_LOCKED	safe/sqlite3.c	946;"	d	file:
SQLITE_LOCKED	safe/sqlite3.h	388;"	d
SQLITE_LOCKED_SHAREDCACHE	safe/sqlite3.c	1016;"	d	file:
SQLITE_LOCKED_SHAREDCACHE	safe/sqlite3.h	458;"	d
SQLITE_LOCKFILEEX_FLAGS	safe/sqlite3.c	34492;"	d	file:
SQLITE_LOCKFILE_FLAGS	safe/sqlite3.c	34483;"	d	file:
SQLITE_LOCK_EXCLUSIVE	safe/sqlite3.c	1104;"	d	file:
SQLITE_LOCK_EXCLUSIVE	safe/sqlite3.h	546;"	d
SQLITE_LOCK_NONE	safe/sqlite3.c	1100;"	d	file:
SQLITE_LOCK_NONE	safe/sqlite3.h	542;"	d
SQLITE_LOCK_PENDING	safe/sqlite3.c	1103;"	d	file:
SQLITE_LOCK_PENDING	safe/sqlite3.h	545;"	d
SQLITE_LOCK_RESERVED	safe/sqlite3.c	1102;"	d	file:
SQLITE_LOCK_RESERVED	safe/sqlite3.h	544;"	d
SQLITE_LOCK_SHARED	safe/sqlite3.c	1101;"	d	file:
SQLITE_LOCK_SHARED	safe/sqlite3.h	543;"	d
SQLITE_LegacyFileFmt	safe/sqlite3.c	9919;"	d	file:
SQLITE_LoadExtension	safe/sqlite3.c	9928;"	d	file:
SQLITE_MAGIC_BUSY	safe/sqlite3.c	9955;"	d	file:
SQLITE_MAGIC_CLOSED	safe/sqlite3.c	9953;"	d	file:
SQLITE_MAGIC_ERROR	safe/sqlite3.c	9956;"	d	file:
SQLITE_MAGIC_OPEN	safe/sqlite3.c	9952;"	d	file:
SQLITE_MAGIC_SICK	safe/sqlite3.c	9954;"	d	file:
SQLITE_MALLOC	safe/sqlite3.c	15348;"	d	file:
SQLITE_MALLOC	safe/sqlite3.c	15360;"	d	file:
SQLITE_MALLOCSIZE	safe/sqlite3.c	15335;"	d	file:
SQLITE_MALLOCSIZE	safe/sqlite3.c	15351;"	d	file:
SQLITE_MALLOCSIZE	safe/sqlite3.c	15370;"	d	file:
SQLITE_MALLOCSIZE	safe/sqlite3.c	15373;"	d	file:
SQLITE_MALLOC_SOFT_LIMIT	safe/sqlite3.c	419;"	d	file:
SQLITE_MAX_ATTACHED	safe/sqlite3.c	208;"	d	file:
SQLITE_MAX_COLUMN	safe/sqlite3.c	128;"	d	file:
SQLITE_MAX_COMPOUND_SELECT	safe/sqlite3.c	165;"	d	file:
SQLITE_MAX_DEFAULT_PAGE_SIZE	safe/sqlite3.c	255;"	d	file:
SQLITE_MAX_DEFAULT_PAGE_SIZE	safe/sqlite3.c	258;"	d	file:
SQLITE_MAX_DEFAULT_PAGE_SIZE	safe/sqlite3.c	259;"	d	file:
SQLITE_MAX_EXPR_DEPTH	safe/sqlite3.c	153;"	d	file:
SQLITE_MAX_FILE_FORMAT	safe/sqlite3.c	7923;"	d	file:
SQLITE_MAX_FUNCTION_ARG	safe/sqlite3.c	180;"	d	file:
SQLITE_MAX_LENGTH	safe/sqlite3.c	107;"	d	file:
SQLITE_MAX_LIKE_PATTERN_LENGTH	safe/sqlite3.c	137532;"	d	file:
SQLITE_MAX_LIKE_PATTERN_LENGTH	safe/sqlite3.c	279;"	d	file:
SQLITE_MAX_PAGE_COUNT	safe/sqlite3.c	271;"	d	file:
SQLITE_MAX_PAGE_SIZE	safe/sqlite3.c	231;"	d	file:
SQLITE_MAX_PAGE_SIZE	safe/sqlite3.c	233;"	d	file:
SQLITE_MAX_SCHEMA_RETRY	safe/sqlite3.c	64099;"	d	file:
SQLITE_MAX_SQL_LENGTH	safe/sqlite3.c	139;"	d	file:
SQLITE_MAX_TRIGGER_DEPTH	safe/sqlite3.c	290;"	d	file:
SQLITE_MAX_U32	safe/sqlite3.c	8021;"	d	file:
SQLITE_MAX_VARIABLE_NUMBER	safe/sqlite3.c	216;"	d	file:
SQLITE_MAX_VDBE_OP	safe/sqlite3.c	173;"	d	file:
SQLITE_MISMATCH	safe/sqlite3.c	960;"	d	file:
SQLITE_MISMATCH	safe/sqlite3.h	402;"	d
SQLITE_MISUSE	safe/sqlite3.c	961;"	d	file:
SQLITE_MISUSE	safe/sqlite3.h	403;"	d
SQLITE_MISUSE_BKPT	safe/sqlite3.c	11512;"	d	file:
SQLITE_MIXED_ENDIAN_64BIT_FLOAT	safe/sqlite3.c	7899;"	d	file:
SQLITE_MUTEX_FAST	safe/sqlite3.c	6283;"	d	file:
SQLITE_MUTEX_FAST	safe/sqlite3.h	5725;"	d
SQLITE_MUTEX_NOOP	safe/sqlite3.c	20;"	d	file:
SQLITE_MUTEX_NOOP	safe/sqlite3.c	9638;"	d	file:
SQLITE_MUTEX_NREF	safe/sqlite3.c	18031;"	d	file:
SQLITE_MUTEX_NREF	safe/sqlite3.c	18033;"	d	file:
SQLITE_MUTEX_OMIT	safe/sqlite3.c	9628;"	d	file:
SQLITE_MUTEX_OS2	safe/sqlite3.c	9636;"	d	file:
SQLITE_MUTEX_PTHREADS	safe/sqlite3.c	9632;"	d	file:
SQLITE_MUTEX_RECURSIVE	safe/sqlite3.c	6284;"	d	file:
SQLITE_MUTEX_RECURSIVE	safe/sqlite3.h	5726;"	d
SQLITE_MUTEX_STATIC_LRU	safe/sqlite3.c	6290;"	d	file:
SQLITE_MUTEX_STATIC_LRU	safe/sqlite3.h	5732;"	d
SQLITE_MUTEX_STATIC_LRU2	safe/sqlite3.c	6291;"	d	file:
SQLITE_MUTEX_STATIC_LRU2	safe/sqlite3.h	5733;"	d
SQLITE_MUTEX_STATIC_MASTER	safe/sqlite3.c	6285;"	d	file:
SQLITE_MUTEX_STATIC_MASTER	safe/sqlite3.h	5727;"	d
SQLITE_MUTEX_STATIC_MEM	safe/sqlite3.c	6286;"	d	file:
SQLITE_MUTEX_STATIC_MEM	safe/sqlite3.h	5728;"	d
SQLITE_MUTEX_STATIC_MEM2	safe/sqlite3.c	6287;"	d	file:
SQLITE_MUTEX_STATIC_MEM2	safe/sqlite3.h	5729;"	d
SQLITE_MUTEX_STATIC_OPEN	safe/sqlite3.c	6288;"	d	file:
SQLITE_MUTEX_STATIC_OPEN	safe/sqlite3.h	5730;"	d
SQLITE_MUTEX_STATIC_PMEM	safe/sqlite3.c	6292;"	d	file:
SQLITE_MUTEX_STATIC_PMEM	safe/sqlite3.h	5734;"	d
SQLITE_MUTEX_STATIC_PRNG	safe/sqlite3.c	6289;"	d	file:
SQLITE_MUTEX_STATIC_PRNG	safe/sqlite3.h	5731;"	d
SQLITE_MUTEX_W32	safe/sqlite3.c	9634;"	d	file:
SQLITE_NOLFS	safe/sqlite3.c	962;"	d	file:
SQLITE_NOLFS	safe/sqlite3.h	404;"	d
SQLITE_NOMEM	safe/sqlite3.c	947;"	d	file:
SQLITE_NOMEM	safe/sqlite3.h	389;"	d
SQLITE_NOTADB	safe/sqlite3.c	966;"	d	file:
SQLITE_NOTADB	safe/sqlite3.h	408;"	d
SQLITE_NOTFOUND	safe/sqlite3.c	952;"	d	file:
SQLITE_NOTFOUND	safe/sqlite3.h	394;"	d
SQLITE_NULL	safe/sqlite3.c	4078;"	d	file:
SQLITE_NULL	safe/sqlite3.h	3520;"	d
SQLITE_NULLEQ	safe/sqlite3.c	10172;"	d	file:
SQLITE_N_BTREE_META	safe/sqlite3.c	8260;"	d	file:
SQLITE_N_COLCACHE	safe/sqlite3.c	11117;"	d	file:
SQLITE_N_KEYWORD	safe/sqlite3.c	112747;"	d	file:
SQLITE_N_LIMIT	safe/sqlite3.c	9738;"	d	file:
SQLITE_NullCallback	safe/sqlite3.c	9911;"	d	file:
SQLITE_OK	safe/sqlite3.c	939;"	d	file:
SQLITE_OK	safe/sqlite3.h	381;"	d
SQLITE_OMIT_DATETIME_FUNCS	safe/sqlite3.c	7897;"	d	file:
SQLITE_OMIT_TRACE	safe/sqlite3.c	7898;"	d	file:
SQLITE_OPEN_AUTOPROXY	safe/sqlite3.c	1037;"	d	file:
SQLITE_OPEN_AUTOPROXY	safe/sqlite3.h	479;"	d
SQLITE_OPEN_CREATE	safe/sqlite3.c	1034;"	d	file:
SQLITE_OPEN_CREATE	safe/sqlite3.h	476;"	d
SQLITE_OPEN_DELETEONCLOSE	safe/sqlite3.c	1035;"	d	file:
SQLITE_OPEN_DELETEONCLOSE	safe/sqlite3.h	477;"	d
SQLITE_OPEN_EXCLUSIVE	safe/sqlite3.c	1036;"	d	file:
SQLITE_OPEN_EXCLUSIVE	safe/sqlite3.h	478;"	d
SQLITE_OPEN_FULLMUTEX	safe/sqlite3.c	1048;"	d	file:
SQLITE_OPEN_FULLMUTEX	safe/sqlite3.h	490;"	d
SQLITE_OPEN_MAIN_DB	safe/sqlite3.c	1040;"	d	file:
SQLITE_OPEN_MAIN_DB	safe/sqlite3.h	482;"	d
SQLITE_OPEN_MAIN_JOURNAL	safe/sqlite3.c	1043;"	d	file:
SQLITE_OPEN_MAIN_JOURNAL	safe/sqlite3.h	485;"	d
SQLITE_OPEN_MASTER_JOURNAL	safe/sqlite3.c	1046;"	d	file:
SQLITE_OPEN_MASTER_JOURNAL	safe/sqlite3.h	488;"	d
SQLITE_OPEN_MEMORY	safe/sqlite3.c	1039;"	d	file:
SQLITE_OPEN_MEMORY	safe/sqlite3.h	481;"	d
SQLITE_OPEN_NOMUTEX	safe/sqlite3.c	1047;"	d	file:
SQLITE_OPEN_NOMUTEX	safe/sqlite3.h	489;"	d
SQLITE_OPEN_PRIVATECACHE	safe/sqlite3.c	1050;"	d	file:
SQLITE_OPEN_PRIVATECACHE	safe/sqlite3.h	492;"	d
SQLITE_OPEN_READONLY	safe/sqlite3.c	1032;"	d	file:
SQLITE_OPEN_READONLY	safe/sqlite3.h	474;"	d
SQLITE_OPEN_READWRITE	safe/sqlite3.c	1033;"	d	file:
SQLITE_OPEN_READWRITE	safe/sqlite3.h	475;"	d
SQLITE_OPEN_SHAREDCACHE	safe/sqlite3.c	1049;"	d	file:
SQLITE_OPEN_SHAREDCACHE	safe/sqlite3.h	491;"	d
SQLITE_OPEN_SUBJOURNAL	safe/sqlite3.c	1045;"	d	file:
SQLITE_OPEN_SUBJOURNAL	safe/sqlite3.h	487;"	d
SQLITE_OPEN_TEMP_DB	safe/sqlite3.c	1041;"	d	file:
SQLITE_OPEN_TEMP_DB	safe/sqlite3.h	483;"	d
SQLITE_OPEN_TEMP_JOURNAL	safe/sqlite3.c	1044;"	d	file:
SQLITE_OPEN_TEMP_JOURNAL	safe/sqlite3.h	486;"	d
SQLITE_OPEN_TRANSIENT_DB	safe/sqlite3.c	1042;"	d	file:
SQLITE_OPEN_TRANSIENT_DB	safe/sqlite3.h	484;"	d
SQLITE_OPEN_URI	safe/sqlite3.c	1038;"	d	file:
SQLITE_OPEN_URI	safe/sqlite3.h	480;"	d
SQLITE_OPEN_WAL	safe/sqlite3.c	1051;"	d	file:
SQLITE_OPEN_WAL	safe/sqlite3.h	493;"	d
SQLITE_OS2_NO_WAL_LOCK_FILE	safe/sqlite3.c	23692;"	d	file:
SQLITE_OS2_THREADS	safe/sqlite3.c	22837;"	d	file:
SQLITE_OS_OS2	safe/sqlite3.c	9304;"	d	file:
SQLITE_OS_OS2	safe/sqlite3.c	9305;"	d	file:
SQLITE_OS_OS2	safe/sqlite3.c	9316;"	d	file:
SQLITE_OS_OS2	safe/sqlite3.c	9320;"	d	file:
SQLITE_OS_OS2	safe/sqlite3.c	9324;"	d	file:
SQLITE_OS_OS2	safe/sqlite3.c	9328;"	d	file:
SQLITE_OS_OTHER	safe/sqlite3.c	9307;"	d	file:
SQLITE_OS_OTHER	safe/sqlite3.c	9311;"	d	file:
SQLITE_OS_UNIX	safe/sqlite3.c	9300;"	d	file:
SQLITE_OS_UNIX	safe/sqlite3.c	9301;"	d	file:
SQLITE_OS_UNIX	safe/sqlite3.c	9315;"	d	file:
SQLITE_OS_UNIX	safe/sqlite3.c	9319;"	d	file:
SQLITE_OS_UNIX	safe/sqlite3.c	9323;"	d	file:
SQLITE_OS_UNIX	safe/sqlite3.c	9327;"	d	file:
SQLITE_OS_WIN	safe/sqlite3.c	9302;"	d	file:
SQLITE_OS_WIN	safe/sqlite3.c	9303;"	d	file:
SQLITE_OS_WIN	safe/sqlite3.c	9314;"	d	file:
SQLITE_OS_WIN	safe/sqlite3.c	9318;"	d	file:
SQLITE_OS_WIN	safe/sqlite3.c	9322;"	d	file:
SQLITE_OS_WIN	safe/sqlite3.c	9332;"	d	file:
SQLITE_OS_WINCE	safe/sqlite3.c	9381;"	d	file:
SQLITE_OS_WINCE	safe/sqlite3.c	9383;"	d	file:
SQLITE_OS_WINNT	safe/sqlite3.c	9373;"	d	file:
SQLITE_OS_WINRT	safe/sqlite3.c	9391;"	d	file:
SQLITE_OptMask	safe/sqlite3.c	9945;"	d	file:
SQLITE_PERM	safe/sqlite3.c	943;"	d	file:
SQLITE_PERM	safe/sqlite3.h	385;"	d
SQLITE_POWERSAFE_OVERWRITE	safe/sqlite3.c	374;"	d	file:
SQLITE_PRAGMA	safe/sqlite3.c	2937;"	d	file:
SQLITE_PRAGMA	safe/sqlite3.h	2379;"	d
SQLITE_PRINT_BUF_SIZE	safe/sqlite3.c	19634;"	d	file:
SQLITE_PRIVATE	safe/sqlite3.c	24;"	d	file:
SQLITE_PROTOCOL	safe/sqlite3.c	955;"	d	file:
SQLITE_PROTOCOL	safe/sqlite3.h	397;"	d
SQLITE_PTR_TO_INT	safe/sqlite3.c	338;"	d	file:
SQLITE_PTR_TO_INT	safe/sqlite3.c	341;"	d	file:
SQLITE_PTR_TO_INT	safe/sqlite3.c	344;"	d	file:
SQLITE_PTR_TO_INT	safe/sqlite3.c	347;"	d	file:
SQLITE_PreferBuiltin	safe/sqlite3.c	9927;"	d	file:
SQLITE_QueryFlattener	safe/sqlite3.c	9936;"	d	file:
SQLITE_RANGE	safe/sqlite3.c	965;"	d	file:
SQLITE_RANGE	safe/sqlite3.h	407;"	d
SQLITE_READ	safe/sqlite3.c	2938;"	d	file:
SQLITE_READ	safe/sqlite3.h	2380;"	d
SQLITE_READONLY	safe/sqlite3.c	948;"	d	file:
SQLITE_READONLY	safe/sqlite3.h	390;"	d
SQLITE_READONLY_CANTLOCK	safe/sqlite3.c	1022;"	d	file:
SQLITE_READONLY_CANTLOCK	safe/sqlite3.h	464;"	d
SQLITE_READONLY_RECOVERY	safe/sqlite3.c	1021;"	d	file:
SQLITE_READONLY_RECOVERY	safe/sqlite3.h	463;"	d
SQLITE_REALLOC	safe/sqlite3.c	15350;"	d	file:
SQLITE_REALLOC	safe/sqlite3.c	15362;"	d	file:
SQLITE_REINDEX	safe/sqlite3.c	2945;"	d	file:
SQLITE_REINDEX	safe/sqlite3.h	2387;"	d
SQLITE_REPLACE	safe/sqlite3.c	7537;"	d	file:
SQLITE_REPLACE	safe/sqlite3.h	6979;"	d
SQLITE_ROLLBACK	safe/sqlite3.c	7533;"	d	file:
SQLITE_ROLLBACK	safe/sqlite3.h	6975;"	d
SQLITE_ROW	safe/sqlite3.c	967;"	d	file:
SQLITE_ROW	safe/sqlite3.h	409;"	d
SQLITE_ReadUncommitted	safe/sqlite3.c	9918;"	d	file:
SQLITE_RecTriggers	safe/sqlite3.c	9924;"	d	file:
SQLITE_RecoveryMode	safe/sqlite3.c	9922;"	d	file:
SQLITE_ReverseOrder	safe/sqlite3.c	9923;"	d	file:
SQLITE_SAVEPOINT	safe/sqlite3.c	2950;"	d	file:
SQLITE_SAVEPOINT	safe/sqlite3.h	2392;"	d
SQLITE_SCHEMA	safe/sqlite3.c	957;"	d	file:
SQLITE_SCHEMA	safe/sqlite3.h	399;"	d
SQLITE_SELECT	safe/sqlite3.c	2939;"	d	file:
SQLITE_SELECT	safe/sqlite3.h	2381;"	d
SQLITE_SET_LOCKPROXYFILE	safe/sqlite3.c	1401;"	d	file:
SQLITE_SET_LOCKPROXYFILE	safe/sqlite3.h	843;"	d
SQLITE_SHM_EXCLUSIVE	safe/sqlite3.c	1673;"	d	file:
SQLITE_SHM_EXCLUSIVE	safe/sqlite3.h	1115;"	d
SQLITE_SHM_LOCK	safe/sqlite3.c	1671;"	d	file:
SQLITE_SHM_LOCK	safe/sqlite3.h	1113;"	d
SQLITE_SHM_NLOCK	safe/sqlite3.c	1683;"	d	file:
SQLITE_SHM_NLOCK	safe/sqlite3.h	1125;"	d
SQLITE_SHM_SHARED	safe/sqlite3.c	1672;"	d	file:
SQLITE_SHM_SHARED	safe/sqlite3.h	1114;"	d
SQLITE_SHM_UNLOCK	safe/sqlite3.c	1670;"	d	file:
SQLITE_SHM_UNLOCK	safe/sqlite3.h	1112;"	d
SQLITE_SKIP_UTF8	safe/sqlite3.c	11495;"	d	file:
SQLITE_SOURCE_ID	safe/sqlite3.c	670;"	d	file:
SQLITE_SOURCE_ID	safe/sqlite3.h	112;"	d
SQLITE_SO_ASC	safe/sqlite3.c	10135;"	d	file:
SQLITE_SO_DESC	safe/sqlite3.c	10136;"	d	file:
SQLITE_STAT3_SAMPLES	safe/sqlite3.c	80458;"	d	file:
SQLITE_STATIC	safe/sqlite3.c	4649;"	d	file:
SQLITE_STATIC	safe/sqlite3.h	4091;"	d
SQLITE_STATUS_MALLOC_COUNT	safe/sqlite3.c	6510;"	d	file:
SQLITE_STATUS_MALLOC_COUNT	safe/sqlite3.h	5952;"	d
SQLITE_STATUS_MALLOC_SIZE	safe/sqlite3.c	6506;"	d	file:
SQLITE_STATUS_MALLOC_SIZE	safe/sqlite3.h	5948;"	d
SQLITE_STATUS_MEMORY_USED	safe/sqlite3.c	6501;"	d	file:
SQLITE_STATUS_MEMORY_USED	safe/sqlite3.h	5943;"	d
SQLITE_STATUS_PAGECACHE_OVERFLOW	safe/sqlite3.c	6503;"	d	file:
SQLITE_STATUS_PAGECACHE_OVERFLOW	safe/sqlite3.h	5945;"	d
SQLITE_STATUS_PAGECACHE_SIZE	safe/sqlite3.c	6508;"	d	file:
SQLITE_STATUS_PAGECACHE_SIZE	safe/sqlite3.h	5950;"	d
SQLITE_STATUS_PAGECACHE_USED	safe/sqlite3.c	6502;"	d	file:
SQLITE_STATUS_PAGECACHE_USED	safe/sqlite3.h	5944;"	d
SQLITE_STATUS_PARSER_STACK	safe/sqlite3.c	6507;"	d	file:
SQLITE_STATUS_PARSER_STACK	safe/sqlite3.h	5949;"	d
SQLITE_STATUS_SCRATCH_OVERFLOW	safe/sqlite3.c	6505;"	d	file:
SQLITE_STATUS_SCRATCH_OVERFLOW	safe/sqlite3.h	5947;"	d
SQLITE_STATUS_SCRATCH_SIZE	safe/sqlite3.c	6509;"	d	file:
SQLITE_STATUS_SCRATCH_SIZE	safe/sqlite3.h	5951;"	d
SQLITE_STATUS_SCRATCH_USED	safe/sqlite3.c	6504;"	d	file:
SQLITE_STATUS_SCRATCH_USED	safe/sqlite3.h	5946;"	d
SQLITE_STMTSTATUS_AUTOINDEX	safe/sqlite3.c	6688;"	d	file:
SQLITE_STMTSTATUS_AUTOINDEX	safe/sqlite3.h	6130;"	d
SQLITE_STMTSTATUS_FULLSCAN_STEP	safe/sqlite3.c	6686;"	d	file:
SQLITE_STMTSTATUS_FULLSCAN_STEP	safe/sqlite3.h	6128;"	d
SQLITE_STMTSTATUS_SORT	safe/sqlite3.c	6687;"	d	file:
SQLITE_STMTSTATUS_SORT	safe/sqlite3.h	6129;"	d
SQLITE_STOREP2	safe/sqlite3.c	10171;"	d	file:
SQLITE_SYNC_DATAONLY	safe/sqlite3.c	1134;"	d	file:
SQLITE_SYNC_DATAONLY	safe/sqlite3.h	576;"	d
SQLITE_SYNC_FULL	safe/sqlite3.c	1133;"	d	file:
SQLITE_SYNC_FULL	safe/sqlite3.h	575;"	d
SQLITE_SYNC_MASK	safe/sqlite3.c	39154;"	d	file:
SQLITE_SYNC_NORMAL	safe/sqlite3.c	1132;"	d	file:
SQLITE_SYNC_NORMAL	safe/sqlite3.h	574;"	d
SQLITE_SYSTEM_MALLOC	safe/sqlite3.c	411;"	d	file:
SQLITE_ShortColNames	safe/sqlite3.c	9907;"	d	file:
SQLITE_SqlTrace	safe/sqlite3.c	9913;"	d	file:
SQLITE_TEMP_FILE_PREFIX	safe/sqlite3.c	9438;"	d	file:
SQLITE_TEMP_STORE	safe/sqlite3.c	7941;"	d	file:
SQLITE_TESTCTRL_ALWAYS	safe/sqlite3.c	6378;"	d	file:
SQLITE_TESTCTRL_ALWAYS	safe/sqlite3.h	5820;"	d
SQLITE_TESTCTRL_ASSERT	safe/sqlite3.c	6377;"	d	file:
SQLITE_TESTCTRL_ASSERT	safe/sqlite3.h	5819;"	d
SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS	safe/sqlite3.c	6375;"	d	file:
SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS	safe/sqlite3.h	5817;"	d
SQLITE_TESTCTRL_BITVEC_TEST	safe/sqlite3.c	6373;"	d	file:
SQLITE_TESTCTRL_BITVEC_TEST	safe/sqlite3.h	5815;"	d
SQLITE_TESTCTRL_EXPLAIN_STMT	safe/sqlite3.c	6384;"	d	file:
SQLITE_TESTCTRL_EXPLAIN_STMT	safe/sqlite3.h	5826;"	d
SQLITE_TESTCTRL_FAULT_INSTALL	safe/sqlite3.c	6374;"	d	file:
SQLITE_TESTCTRL_FAULT_INSTALL	safe/sqlite3.h	5816;"	d
SQLITE_TESTCTRL_FIRST	safe/sqlite3.c	6369;"	d	file:
SQLITE_TESTCTRL_FIRST	safe/sqlite3.h	5811;"	d
SQLITE_TESTCTRL_ISKEYWORD	safe/sqlite3.c	6381;"	d	file:
SQLITE_TESTCTRL_ISKEYWORD	safe/sqlite3.h	5823;"	d
SQLITE_TESTCTRL_LAST	safe/sqlite3.c	6385;"	d	file:
SQLITE_TESTCTRL_LAST	safe/sqlite3.h	5827;"	d
SQLITE_TESTCTRL_LOCALTIME_FAULT	safe/sqlite3.c	6383;"	d	file:
SQLITE_TESTCTRL_LOCALTIME_FAULT	safe/sqlite3.h	5825;"	d
SQLITE_TESTCTRL_OPTIMIZATIONS	safe/sqlite3.c	6380;"	d	file:
SQLITE_TESTCTRL_OPTIMIZATIONS	safe/sqlite3.h	5822;"	d
SQLITE_TESTCTRL_PENDING_BYTE	safe/sqlite3.c	6376;"	d	file:
SQLITE_TESTCTRL_PENDING_BYTE	safe/sqlite3.h	5818;"	d
SQLITE_TESTCTRL_PRNG_RESET	safe/sqlite3.c	6372;"	d	file:
SQLITE_TESTCTRL_PRNG_RESET	safe/sqlite3.h	5814;"	d
SQLITE_TESTCTRL_PRNG_RESTORE	safe/sqlite3.c	6371;"	d	file:
SQLITE_TESTCTRL_PRNG_RESTORE	safe/sqlite3.h	5813;"	d
SQLITE_TESTCTRL_PRNG_SAVE	safe/sqlite3.c	6370;"	d	file:
SQLITE_TESTCTRL_PRNG_SAVE	safe/sqlite3.h	5812;"	d
SQLITE_TESTCTRL_RESERVE	safe/sqlite3.c	6379;"	d	file:
SQLITE_TESTCTRL_RESERVE	safe/sqlite3.h	5821;"	d
SQLITE_TESTCTRL_SCRATCHMALLOC	safe/sqlite3.c	6382;"	d	file:
SQLITE_TESTCTRL_SCRATCHMALLOC	safe/sqlite3.h	5824;"	d
SQLITE_TEXT	safe/sqlite3.c	4080;"	d	file:
SQLITE_TEXT	safe/sqlite3.c	4082;"	d	file:
SQLITE_TEXT	safe/sqlite3.h	3522;"	d
SQLITE_TEXT	safe/sqlite3.h	3524;"	d
SQLITE_THREADSAFE	safe/sqlite3.c	363;"	d	file:
SQLITE_THREADSAFE	safe/sqlite3.c	365;"	d	file:
SQLITE_TOOBIG	safe/sqlite3.c	958;"	d	file:
SQLITE_TOOBIG	safe/sqlite3.h	400;"	d
SQLITE_TRANSACTION	safe/sqlite3.c	2940;"	d	file:
SQLITE_TRANSACTION	safe/sqlite3.h	2382;"	d
SQLITE_TRANSIENT	safe/sqlite3.c	4650;"	d	file:
SQLITE_TRANSIENT	safe/sqlite3.h	4092;"	d
SQLITE_UNIX_THREADS	safe/sqlite3.c	25078;"	d	file:
SQLITE_UPDATE	safe/sqlite3.c	2941;"	d	file:
SQLITE_UPDATE	safe/sqlite3.h	2383;"	d
SQLITE_USE_URI	safe/sqlite3.c	12414;"	d	file:
SQLITE_UTF16	safe/sqlite3.c	4441;"	d	file:
SQLITE_UTF16	safe/sqlite3.h	3883;"	d
SQLITE_UTF16BE	safe/sqlite3.c	4440;"	d	file:
SQLITE_UTF16BE	safe/sqlite3.h	3882;"	d
SQLITE_UTF16LE	safe/sqlite3.c	4439;"	d	file:
SQLITE_UTF16LE	safe/sqlite3.h	3881;"	d
SQLITE_UTF16NATIVE	safe/sqlite3.c	8048;"	d	file:
SQLITE_UTF16NATIVE	safe/sqlite3.c	8052;"	d	file:
SQLITE_UTF16_ALIGNED	safe/sqlite3.c	4443;"	d	file:
SQLITE_UTF16_ALIGNED	safe/sqlite3.h	3885;"	d
SQLITE_UTF8	safe/sqlite3.c	4438;"	d	file:
SQLITE_UTF8	safe/sqlite3.h	3880;"	d
SQLITE_VERSION	safe/sqlite3.c	635;"	d	file:
SQLITE_VERSION	safe/sqlite3.c	668;"	d	file:
SQLITE_VERSION	safe/sqlite3.h	110;"	d
SQLITE_VERSION	safe/sqlite3.h	77;"	d
SQLITE_VERSION_NUMBER	safe/sqlite3.c	638;"	d	file:
SQLITE_VERSION_NUMBER	safe/sqlite3.c	669;"	d	file:
SQLITE_VERSION_NUMBER	safe/sqlite3.h	111;"	d
SQLITE_VERSION_NUMBER	safe/sqlite3.h	80;"	d
SQLITE_VTAB_CONSTRAINT_SUPPORT	safe/sqlite3.c	7508;"	d	file:
SQLITE_VTAB_CONSTRAINT_SUPPORT	safe/sqlite3.h	6950;"	d
SQLITE_VdbeListing	safe/sqlite3.c	9914;"	d	file:
SQLITE_VdbeTrace	safe/sqlite3.c	9904;"	d	file:
SQLITE_W32_MUTEX_INITIALIZER	safe/sqlite3.c	18385;"	d	file:
SQLITE_WIN32_DBG_BUF_SIZE	safe/sqlite3.c	32330;"	d	file:
SQLITE_WIN32_HAS_ANSI	safe/sqlite3.c	32442;"	d	file:
SQLITE_WIN32_HAS_WIDE	safe/sqlite3.c	32446;"	d	file:
SQLITE_WIN32_HEAP_CREATE	safe/sqlite3.c	32354;"	d	file:
SQLITE_WIN32_HEAP_FLAGS	safe/sqlite3.c	32377;"	d	file:
SQLITE_WIN32_HEAP_INIT_SIZE	safe/sqlite3.c	32361;"	d	file:
SQLITE_WIN32_HEAP_MAX_SIZE	safe/sqlite3.c	32369;"	d	file:
SQLITE_WIN32_IOERR_RETRY	safe/sqlite3.c	33669;"	d	file:
SQLITE_WIN32_IOERR_RETRY_DELAY	safe/sqlite3.c	33672;"	d	file:
SQLITE_WSD	safe/sqlite3.c	8155;"	d	file:
SQLITE_WSD	safe/sqlite3.c	8161;"	d	file:
SQLITE_WriteSchema	safe/sqlite3.c	9915;"	d	file:
SQL_CHOMP_SEGDIR	safe/sqlite3.c	126719;"	d	file:
SQL_CONTENT_INSERT	safe/sqlite3.c	126703;"	d	file:
SQL_DELETE_ALL_CONTENT	safe/sqlite3.c	126687;"	d	file:
SQL_DELETE_ALL_DOCSIZE	safe/sqlite3.c	126690;"	d	file:
SQL_DELETE_ALL_SEGDIR	safe/sqlite3.c	126689;"	d	file:
SQL_DELETE_ALL_SEGMENTS	safe/sqlite3.c	126688;"	d	file:
SQL_DELETE_ALL_STAT	safe/sqlite3.c	126691;"	d	file:
SQL_DELETE_ALL_TERMS_SEGDIR	safe/sqlite3.c	126711;"	d	file:
SQL_DELETE_CONTENT	safe/sqlite3.c	126685;"	d	file:
SQL_DELETE_DOCSIZE	safe/sqlite3.c	126704;"	d	file:
SQL_DELETE_SEGDIR_ENTRY	safe/sqlite3.c	126716;"	d	file:
SQL_DELETE_SEGDIR_LEVEL	safe/sqlite3.c	126701;"	d	file:
SQL_DELETE_SEGDIR_RANGE	safe/sqlite3.c	126712;"	d	file:
SQL_DELETE_SEGMENTS_RANGE	safe/sqlite3.c	126702;"	d	file:
SQL_FIND_MERGE_LEVEL	safe/sqlite3.c	126714;"	d	file:
SQL_INSERT_SEGDIR	safe/sqlite3.c	126696;"	d	file:
SQL_INSERT_SEGMENTS	safe/sqlite3.c	126694;"	d	file:
SQL_IS_EMPTY	safe/sqlite3.c	126686;"	d	file:
SQL_MAX_LEAF_NODE_ESTIMATE	safe/sqlite3.c	126715;"	d	file:
SQL_NEXT_SEGMENTS_ID	safe/sqlite3.c	126695;"	d	file:
SQL_NEXT_SEGMENT_INDEX	safe/sqlite3.c	126693;"	d	file:
SQL_REPLACE_DOCSIZE	safe/sqlite3.c	126705;"	d	file:
SQL_REPLACE_STAT	safe/sqlite3.c	126708;"	d	file:
SQL_SEGMENT_IS_APPENDABLE	safe/sqlite3.c	126720;"	d	file:
SQL_SELECT_ALL_LANGID	safe/sqlite3.c	126713;"	d	file:
SQL_SELECT_ALL_PREFIX_LEVEL	safe/sqlite3.c	126710;"	d	file:
SQL_SELECT_CONTENT_BY_ROWID	safe/sqlite3.c	126692;"	d	file:
SQL_SELECT_DOCSIZE	safe/sqlite3.c	126706;"	d	file:
SQL_SELECT_INDEXES	safe/sqlite3.c	126721;"	d	file:
SQL_SELECT_LEVEL	safe/sqlite3.c	126697;"	d	file:
SQL_SELECT_LEVEL_COUNT	safe/sqlite3.c	126699;"	d	file:
SQL_SELECT_LEVEL_RANGE	safe/sqlite3.c	126698;"	d	file:
SQL_SELECT_MXLEVEL	safe/sqlite3.c	126722;"	d	file:
SQL_SELECT_SEGDIR	safe/sqlite3.c	126718;"	d	file:
SQL_SELECT_SEGDIR_MAX_LEVEL	safe/sqlite3.c	126700;"	d	file:
SQL_SELECT_STAT	safe/sqlite3.c	126707;"	d	file:
SQL_SHIFT_SEGDIR_ENTRY	safe/sqlite3.c	126717;"	d	file:
SRC_DROPPED	safe/spider.133.c	150;"	d	file:
SRC_DROPPED	safe/spider.135.c	159;"	d	file:
SRC_DROPPED	safe/spider.200.c	165;"	d	file:
SRC_DROPPED	safe/spider.203.c	178;"	d	file:
SRC_DROPPED	safe/spider.204.c	190;"	d	file:
SRC_DROPPED	safe/spider.210.c	206;"	d	file:
SRC_DROPPED	safe/spider.c	257;"	d	file:
SRC_DROPPED	spider.c	265;"	d	file:
SRC_IP	safe/spider.133.c	147;"	d	file:
SRC_IP	safe/spider.135.c	156;"	d	file:
SRC_IP	safe/spider.200.c	162;"	d	file:
SRC_IP	safe/spider.203.c	175;"	d	file:
SRC_IP	safe/spider.204.c	187;"	d	file:
SRC_IP	safe/spider.210.c	203;"	d	file:
SRC_IP	safe/spider.c	254;"	d	file:
SRC_IP	spider.c	260;"	d	file:
SRC_PLAIN	safe/spider.133.c	149;"	d	file:
SRC_PLAIN	safe/spider.135.c	158;"	d	file:
SRC_PLAIN	safe/spider.200.c	164;"	d	file:
SRC_PLAIN	safe/spider.203.c	177;"	d	file:
SRC_PLAIN	safe/spider.204.c	189;"	d	file:
SRC_PLAIN	safe/spider.210.c	205;"	d	file:
SRC_PLAIN	safe/spider.c	256;"	d	file:
SRC_PLAIN	spider.c	262;"	d	file:
SRC_PUBSUB	spider.c	263;"	d	file:
SRC_PUBSUBS	spider.c	264;"	d	file:
SRC_TLS	safe/spider.133.c	148;"	d	file:
SRC_TLS	safe/spider.135.c	157;"	d	file:
SRC_TLS	safe/spider.200.c	163;"	d	file:
SRC_TLS	safe/spider.203.c	176;"	d	file:
SRC_TLS	safe/spider.204.c	188;"	d	file:
SRC_TLS	safe/spider.210.c	204;"	d	file:
SRC_TLS	safe/spider.c	255;"	d	file:
SRC_TLS	spider.c	261;"	d	file:
SRT_Coroutine	safe/sqlite3.c	11082;"	d	file:
SRT_Discard	safe/sqlite3.c	11072;"	d	file:
SRT_EphemTab	safe/sqlite3.c	11081;"	d	file:
SRT_Except	safe/sqlite3.c	11070;"	d	file:
SRT_Exists	safe/sqlite3.c	11071;"	d	file:
SRT_Mem	safe/sqlite3.c	11078;"	d	file:
SRT_Output	safe/sqlite3.c	11077;"	d	file:
SRT_Set	safe/sqlite3.c	11079;"	d	file:
SRT_Table	safe/sqlite3.c	11080;"	d	file:
SRT_Union	safe/sqlite3.c	11069;"	d	file:
SSL_MAXDEPTH	safe/spider.200.c	248;"	d	file:
SSL_MAXDEPTH	safe/spider.203.c	262;"	d	file:
SSL_MAXDEPTH	safe/spider.204.c	274;"	d	file:
SSL_MAXDEPTH	safe/spider.210.c	296;"	d	file:
SSL_MAXDEPTH	safe/spider.c	353;"	d	file:
SSL_MAXDEPTH	spider.c	371;"	d	file:
STATIC	mtchannel.c	11;"	d	file:
STATIC	mtjson.c	8;"	d	file:
STATIC	mtwamp.c	18;"	d	file:
STATIC	mtwamputil.c	19;"	d	file:
STATIC	mtwebsocket.c	11;"	d	file:
STATIC	safe/mtchannel.c	11;"	d	file:
STATIC	safe/mtjson.c	8;"	d	file:
STATIC	safe/mtwamp.c	15;"	d	file:
STATIC	safe/mtwebsocket.c	11;"	d	file:
STRICMP	safe/sqlite3.c	83135;"	d	file:
STR_FUNCTION	safe/sqlite3.c	10043;"	d	file:
SWAP	safe/sqlite3.c	104185;"	d	file:
SYSCALL	safe/sqlite3.c	32450;"	d	file:
Savepoint	safe/sqlite3.c	/^struct Savepoint {$/;"	s	file:
Savepoint	safe/sqlite3.c	/^typedef struct Savepoint Savepoint;$/;"	t	file:
Schema	safe/sqlite3.c	/^struct Schema {$/;"	s	file:
Schema	safe/sqlite3.c	/^typedef struct Schema Schema;$/;"	t	file:
ScratchFreeslot	safe/sqlite3.c	/^typedef struct ScratchFreeslot {$/;"	s	file:
ScratchFreeslot	safe/sqlite3.c	/^} ScratchFreeslot;$/;"	t	file:
SegmentNode	safe/sqlite3.c	/^struct SegmentNode {$/;"	s	file:
SegmentNode	safe/sqlite3.c	/^typedef struct SegmentNode SegmentNode;$/;"	t	file:
SegmentWriter	safe/sqlite3.c	/^struct SegmentWriter {$/;"	s	file:
SegmentWriter	safe/sqlite3.c	/^typedef struct SegmentWriter SegmentWriter;$/;"	t	file:
Select	safe/sqlite3.c	/^struct Select {$/;"	s	file:
Select	safe/sqlite3.c	/^typedef struct Select Select;$/;"	t	file:
SelectDest	safe/sqlite3.c	/^struct SelectDest {$/;"	s	file:
SelectDest	safe/sqlite3.c	/^typedef struct SelectDest SelectDest;$/;"	t	file:
SendApiList	safe/spider.133.c	/^static void SendApiList(BIO *io)$/;"	f	file:
SendApiList	safe/spider.135.c	/^static void SendApiList(BIO *io)$/;"	f	file:
SendApiList	safe/spider.200.c	/^static void SendApiList(BIO *io)$/;"	f	file:
SendApiList	safe/spider.203.c	/^static void SendApiList(BIO *io)$/;"	f	file:
SendApiList	safe/spider.204.c	/^static void SendApiList(BIO *io)$/;"	f	file:
SendApiList	safe/spider.210.c	/^static void SendApiList(BIO *io)$/;"	f	file:
SendApiList	safe/spider.c	/^static void SendApiList(BIO *io)$/;"	f	file:
SendApiList	spider.c	/^static void SendApiList(BIO *io)$/;"	f	file:
SendError	safe/spider.133.c	/^static int SendError(int fd, int nErr, int nSeverity, const char *szFmt, ...)$/;"	f	file:
SendError	safe/spider.135.c	/^static int SendError(int fd, int nErr, int nSeverity, const char *szFmt, ...)$/;"	f	file:
SendError	safe/spider.200.c	/^static int SendError(int fd, int nErr, int nSeverity, const char *szFmt, ...)$/;"	f	file:
SendError	safe/spider.203.c	/^static int SendError(int fd, int nErr, int nSeverity, const char *szFmt, ...)$/;"	f	file:
SendError	safe/spider.204.c	/^static int SendError(int fd, int nErr, int nSeverity, const char *szFmt, ...)$/;"	f	file:
SendError	safe/spider.210.c	/^static int SendError(int fd, int nErr, int nSeverity, const char *szFmt, ...)$/;"	f	file:
SendError	safe/spider.c	/^static int SendError(int fd, int nErr, int nSeverity, const char *szFmt, ...)$/;"	f	file:
SendError	spider.c	/^static int SendError(int fd, int nErr, int nSeverity, const char *szFmt, ...)$/;"	f	file:
SendHtmlHeader	safe/spider.133.c	/^static void SendHtmlHeader(BIO *io)$/;"	f	file:
SendHtmlHeader	safe/spider.135.c	/^static void SendHtmlHeader(BIO *io)$/;"	f	file:
SendHtmlHeader	safe/spider.200.c	/^static void SendHtmlHeader(BIO *io)$/;"	f	file:
SendHtmlHeader	safe/spider.203.c	/^static void SendHtmlHeader(BIO *io)$/;"	f	file:
SendHtmlHeader	safe/spider.204.c	/^static void SendHtmlHeader(BIO *io)$/;"	f	file:
SendHtmlHeader	safe/spider.210.c	/^static void SendHtmlHeader(BIO *io)$/;"	f	file:
SendHtmlHeader	safe/spider.c	/^static void SendHtmlHeader(BIO *io)$/;"	f	file:
SendHtmlHeader	spider.c	/^static void SendHtmlHeader(BIO *io)$/;"	f	file:
SendHttpContent	safe/spider.200.c	/^static int SendHttpContent(BIO *io, int nCode, const char *szContentType, const char *szContent)$/;"	f	file:
SendHttpContent	safe/spider.203.c	/^static int SendHttpContent(BIO *io, int nCode, const char *szContentType, const char *szContent)$/;"	f	file:
SendHttpContent	safe/spider.204.c	/^static int SendHttpContent(BIO *io, int nCode, const char *szContentType, const char *szContent)$/;"	f	file:
SendHttpContent	safe/spider.210.c	/^static int SendHttpContent(BIO *io, int nCode, const char *szContentType, const char *szContent)$/;"	f	file:
SendHttpContent	safe/spider.c	/^static int SendHttpContent(BIO *io, int nCode, const char *szContentType, const char *szContent)$/;"	f	file:
SendHttpContent	spider.c	/^static int SendHttpContent(BIO *io, int nCode, const char *szContentType, const char *szContent)$/;"	f	file:
SendHttpHeader	safe/spider.133.c	/^static void SendHttpHeader(BIO *io, int nCode, const char *szContentType, const char *szContent)$/;"	f	file:
SendHttpHeader	safe/spider.135.c	/^static void SendHttpHeader(BIO *io, int nCode, const char *szContentType, const char *szContent)$/;"	f	file:
SendHttpHeader	safe/spider.200.c	/^static void SendHttpHeader(BIO *io, int nCode, const char *szContentType, int nContentLength)$/;"	f	file:
SendHttpHeader	safe/spider.203.c	/^static void SendHttpHeader(BIO *io, int nCode, const char *szContentType, int nContentLength)$/;"	f	file:
SendHttpHeader	safe/spider.204.c	/^static void SendHttpHeader(BIO *io, int nCode, const char *szContentType, int nContentLength)$/;"	f	file:
SendHttpHeader	safe/spider.210.c	/^static void SendHttpHeader(BIO *io, int nCode, const char *szContentType, int nContentLength)$/;"	f	file:
SendHttpHeader	safe/spider.c	/^static void SendHttpHeader(BIO *io, int nCode, const char *szContentType, long long nContentLength)$/;"	f	file:
SendHttpHeader	spider.c	/^static void SendHttpHeader(BIO *io, int nCode, const char *szContentType, long long nContentLength)$/;"	f	file:
SendHttpHeaderX	safe/spider.c	/^static void SendHttpHeaderX(BIO *io, int nCode, SSMAP *headerMap)$/;"	f	file:
SendHttpHeaderX	spider.c	/^static void SendHttpHeaderX(BIO *io, int nCode, SSMAP *headerMap)$/;"	f	file:
SendHttpXml	safe/spider.200.c	/^static int SendHttpXml(BIO *io, int nCode, rogxml *rx)$/;"	f	file:
SendXML	safe/spider.133.c	/^static int SendXML(int fd, rogxml *rx, const char *szDescription)$/;"	f	file:
SendXML	safe/spider.135.c	/^static int SendXML(int fd, rogxml *rx, const char *szDescription)$/;"	f	file:
SendXML	safe/spider.200.c	/^static int SendXML(int fd, rogxml *rx, const char *szDescription)$/;"	f	file:
SendXML	safe/spider.203.c	/^static int SendXML(int fd, rogxml *rx, const char *szDescription)$/;"	f	file:
SendXML	safe/spider.204.c	/^static int SendXML(int fd, rogxml *rx, const char *szDescription)$/;"	f	file:
SendXML	safe/spider.210.c	/^static int SendXML(int fd, rogxml *rx, const char *szDescription)$/;"	f	file:
SendXML	safe/spider.c	/^static int SendXML(int fd, rogxml *rx, const char *szDescription)$/;"	f	file:
SendXML	spider.c	/^static int SendXML(int fd, rogxml *rx, const char *szDescription)$/;"	f	file:
ServeRequest	safe/spider.133.c	/^static void ServeRequest(BIO *io)$/;"	f	file:
ServeRequest	safe/spider.135.c	/^static void ServeRequest(BIO *io)$/;"	f	file:
ServeRequest	safe/spider.200.c	/^static void ServeRequest(BIO *io, const char *szOrganisation, const char *szProduct)$/;"	f	file:
ServeRequest	safe/spider.203.c	/^static void ServeRequest(BIO *io, const char *szOrganisation, const char *szProduct)$/;"	f	file:
ServeRequest	safe/spider.204.c	/^static void ServeRequest(BIO *io, const char *szOrganisation, const char *szProduct)$/;"	f	file:
ServeRequest	safe/spider.210.c	/^static void ServeRequest(BIO *io)$/;"	f	file:
ServeRequest	safe/spider.c	/^static void ServeRequest(BIO *io)$/;"	f	file:
ServeRequest	spider.c	/^static void ServeRequest(BIO *io)$/;"	f	file:
SessionCreate	callSpider.php	/^function SessionCreate()$/;"	f
SetBaseDir	safe/spider.204.c	/^int SetBaseDir(const char *szNewBaseDir)$/;"	f
SetBaseDir	safe/spider.210.c	/^void SetBaseDir(const char *szNewBaseDir)$/;"	f
SetBaseDir	safe/spider.c	/^void SetBaseDir(const char *szNewBaseDir)$/;"	f
SetBaseDir	spider.c	/^void SetBaseDir(const char *szNewBaseDir)$/;"	f
SetEnvironment	safe/spider.204.c	/^int SetEnvironment(const char *szEnv)$/;"	f
SetEnvironment	safe/spider.210.c	/^static int SetEnvironment(const char *szEnv)$/;"	f	file:
SetEnvironment	safe/spider.c	/^static int SetEnvironment(const char *szEnv)$/;"	f	file:
SetEnvironment	spider.c	/^static int SetEnvironment(const char *szEnv)$/;"	f	file:
SetError	safe/spider.133.c	/^static int SetError(int nErr, const char *szFmt, ...)$/;"	f	file:
SetError	safe/spider.135.c	/^static int SetError(int nErr, const char *szFmt, ...)$/;"	f	file:
SetError	safe/spider.200.c	/^static int SetError(int nErr, const char *szFmt, ...)$/;"	f	file:
SetError	safe/spider.203.c	/^static int SetError(int nErr, const char *szFmt, ...)$/;"	f	file:
SetError	safe/spider.204.c	/^static int SetError(int nErr, const char *szFmt, ...)$/;"	f	file:
SetError	safe/spider.210.c	/^static int SetError(int nErr, const char *szFmt, ...)$/;"	f	file:
SetError	safe/spider.c	/^static int SetError(int nErr, const char *szFmt, ...)$/;"	f	file:
SetError	spider.c	/^static int SetError(int nErr, const char *szFmt, ...)$/;"	f	file:
SetIds	safe/spider.133.c	/^static void SetIds(const char *szUser)$/;"	f	file:
SetIds	safe/spider.135.c	/^static void SetIds(const char *szUser)$/;"	f	file:
SetIds	safe/spider.200.c	/^static void SetIds(const char *szUser)$/;"	f	file:
SetIds	safe/spider.203.c	/^static void SetIds(const char *szUser)$/;"	f	file:
SetIds	safe/spider.204.c	/^static void SetIds(const char *szUser)$/;"	f	file:
SetIds	safe/spider.210.c	/^static void SetIds(const char *szUser)$/;"	f	file:
SetIds	safe/spider.c	/^static void SetIds(const char *szUser)$/;"	f	file:
SetIds	spider.c	/^static void SetIds(const char *szUser)$/;"	f	file:
SetIncomingHost	safe/spider.133.c	/^static void SetIncomingHost(MIME *mime)$/;"	f	file:
SetIncomingHost	safe/spider.135.c	/^static void SetIncomingHost(MIME *mime)$/;"	f	file:
SetIncomingHost	safe/spider.200.c	/^static void SetIncomingHost(MIME *mime)$/;"	f	file:
SetIncomingHost	safe/spider.203.c	/^static void SetIncomingHost(MIME *mime)$/;"	f	file:
SetIncomingHost	safe/spider.204.c	/^static void SetIncomingHost(MIME *mime)$/;"	f	file:
SetIncomingHost	safe/spider.210.c	/^static void SetIncomingHost(MIME *mime)$/;"	f	file:
SetIncomingHost	safe/spider.c	/^static void SetIncomingHost(MIME *mime)$/;"	f	file:
SetIncomingHost	spider.c	/^static void SetIncomingHost(MIME *mime)$/;"	f	file:
SetOrganisationProduct	safe/spider.210.c	/^void SetOrganisationProduct(const char *szOrganisation, const char *szProduct)$/;"	f
SetOrganisationProduct	safe/spider.c	/^void SetOrganisationProduct(const char *szOrganisation, const char *szProduct)$/;"	f
SetOrganisationProduct	spider.c	/^void SetOrganisationProduct(const char *szOrganisation, const char *szProduct)$/;"	f
ShmRegion	safe/sqlite3.c	/^  struct ShmRegion {$/;"	s	struct:winShmNode	file:
ShowPorts	safe/spider.133.c	/^static void ShowPorts(BIO *io, int nProtocol)$/;"	f	file:
ShowPorts	safe/spider.135.c	/^static void ShowPorts(BIO *io, int nProtocol)$/;"	f	file:
ShowPorts	safe/spider.200.c	/^static void ShowPorts(BIO *io, int nProtocol)$/;"	f	file:
ShowPorts	safe/spider.203.c	/^static void ShowPorts(BIO *io, int nProtocol)$/;"	f	file:
ShowPorts	safe/spider.204.c	/^static void ShowPorts(BIO *io, int nProtocol)$/;"	f	file:
ShowPorts	safe/spider.210.c	/^static void ShowPorts(BIO *io, int nProtocol)$/;"	f	file:
ShowPorts	safe/spider.c	/^static void ShowPorts(BIO *io, int nProtocol)$/;"	f	file:
ShowPorts	spider.c	/^static void ShowPorts(BIO *io, int nProtocol)$/;"	f	file:
SignalName	safe/spider.133.c	/^static const char *SignalName(int n)$/;"	f	file:
SignalName	safe/spider.135.c	/^static const char *SignalName(int n)$/;"	f	file:
SignalName	safe/spider.200.c	/^static const char *SignalName(int n)$/;"	f	file:
SignalName	safe/spider.203.c	/^static const char *SignalName(int n)$/;"	f	file:
SignalName	safe/spider.204.c	/^static const char *SignalName(int n)$/;"	f	file:
SignalName	safe/spider.210.c	/^static const char *SignalName(int n)$/;"	f	file:
SignalName	safe/spider.c	/^static const char *SignalName(int n)$/;"	f	file:
SignalName	spider.c	/^static const char *SignalName(int n)$/;"	f	file:
SimulateDiskfullError	safe/sqlite3.c	23021;"	d	file:
SimulateDiskfullError	safe/sqlite3.c	23035;"	d	file:
SimulateDiskfullError	safe/sqlite3.c	25368;"	d	file:
SimulateDiskfullError	safe/sqlite3.c	25382;"	d	file:
SimulateDiskfullError	safe/sqlite3.c	32224;"	d	file:
SimulateDiskfullError	safe/sqlite3.c	32238;"	d	file:
SimulateIOError	safe/sqlite3.c	23012;"	d	file:
SimulateIOError	safe/sqlite3.c	23034;"	d	file:
SimulateIOError	safe/sqlite3.c	25359;"	d	file:
SimulateIOError	safe/sqlite3.c	25381;"	d	file:
SimulateIOError	safe/sqlite3.c	32215;"	d	file:
SimulateIOError	safe/sqlite3.c	32237;"	d	file:
SimulateIOErrorBenign	safe/sqlite3.c	23011;"	d	file:
SimulateIOErrorBenign	safe/sqlite3.c	23033;"	d	file:
SimulateIOErrorBenign	safe/sqlite3.c	25358;"	d	file:
SimulateIOErrorBenign	safe/sqlite3.c	25380;"	d	file:
SimulateIOErrorBenign	safe/sqlite3.c	32214;"	d	file:
SimulateIOErrorBenign	safe/sqlite3.c	32236;"	d	file:
SizeofArray	safe/sqlite3.c	117665;"	d	file:
SkipSpaces	mtjson.c	/^STATIC char *SkipSpaces(const char *t)$/;"	f
SkipSpaces	safe/mtjson.c	/^STATIC char *SkipSpaces(const char *t)$/;"	f
SkipSpaces	safe/spider.133.c	/^static char *SkipSpaces(const char *t)$/;"	f	file:
SkipSpaces	safe/spider.135.c	/^static char *SkipSpaces(const char *t)$/;"	f	file:
SkipSpaces	safe/spider.200.c	/^static char *SkipSpaces(const char *t)$/;"	f	file:
SkipSpaces	safe/spider.203.c	/^static char *SkipSpaces(const char *t)$/;"	f	file:
SkipSpaces	safe/spider.204.c	/^static char *SkipSpaces(const char *t)$/;"	f	file:
SkipSpaces	safe/spider.210.c	/^static char *SkipSpaces(const char *t)$/;"	f	file:
SkipSpaces	safe/spider.c	/^static char *SkipSpaces(const char *t)$/;"	f	file:
SkipSpaces	spider.c	/^static char *SkipSpaces(const char *t)$/;"	f	file:
SnippetFragment	safe/sqlite3.c	/^struct SnippetFragment {$/;"	s	file:
SnippetFragment	safe/sqlite3.c	/^typedef struct SnippetFragment SnippetFragment;$/;"	t	file:
SnippetIter	safe/sqlite3.c	/^struct SnippetIter {$/;"	s	file:
SnippetIter	safe/sqlite3.c	/^typedef struct SnippetIter SnippetIter;$/;"	t	file:
SnippetPhrase	safe/sqlite3.c	/^struct SnippetPhrase {$/;"	s	file:
SnippetPhrase	safe/sqlite3.c	/^typedef struct SnippetPhrase SnippetPhrase;$/;"	t	file:
SortByDimension	safe/sqlite3.c	/^static void SortByDimension($/;"	f	file:
SortByDistance	safe/sqlite3.c	/^static void SortByDistance($/;"	f	file:
SorterRecord	safe/sqlite3.c	/^struct SorterRecord {$/;"	s	file:
SorterRecord	safe/sqlite3.c	/^typedef struct SorterRecord SorterRecord;$/;"	t	file:
SpiderFunction	safe/spider.133.c	/^static rogxml *SpiderFunction(rogxml *rxRpc, const char *szFunction)$/;"	f	file:
SpiderFunction	safe/spider.135.c	/^static rogxml *SpiderFunction(rogxml *rxRpc, const char *szFunction)$/;"	f	file:
SpiderFunction	safe/spider.200.c	/^static rogxml *SpiderFunction(rogxml *rxRpc, const char *szFunction)$/;"	f	file:
SpiderFunction	safe/spider.203.c	/^static rogxml *SpiderFunction(rogxml *rxRpc, const char *szFunction)$/;"	f	file:
SpiderFunction	safe/spider.204.c	/^static rogxml *SpiderFunction(rogxml *rxRpc, const char *szFunction)$/;"	f	file:
SpiderFunction	safe/spider.210.c	/^static rogxml *SpiderFunction(rogxml *rxRpc, const char *szFunction)$/;"	f	file:
SpiderFunction	safe/spider.c	/^static rogxml *SpiderFunction(rogxml *rxRpc, const char *szFunction)$/;"	f	file:
SpiderFunction	spider.c	/^static rogxml *SpiderFunction(rogxml *rxRpc, const char *szFunction)$/;"	f	file:
SplitEndpoint	mtwamputil.c	/^STATIC void SplitEndpoint(const char *szEndpoint, const char **pszProtocol, const char **pszAddress, int *pnPort, const char **pszURI, int bAllowDefault)$/;"	f
SplitNode	safe/sqlite3.c	/^static int SplitNode($/;"	f	file:
SqlTimeStamp	safe/spider.133.c	/^static const char *SqlTimeStamp(time_t t)$/;"	f	file:
SqlTimeStamp	safe/spider.135.c	/^static const char *SqlTimeStamp(time_t t)$/;"	f	file:
SqlTimeStamp	safe/spider.200.c	/^static const char *SqlTimeStamp(time_t t)$/;"	f	file:
SqlTimeStamp	safe/spider.203.c	/^static const char *SqlTimeStamp(time_t t)$/;"	f	file:
SqlTimeStamp	safe/spider.204.c	/^static const char *SqlTimeStamp(time_t t)$/;"	f	file:
SqlTimeStamp	safe/spider.210.c	/^static const char *SqlTimeStamp(time_t t, int dst)$/;"	f	file:
SqlTimeStamp	safe/spider.c	/^static const char *SqlTimeStamp(time_t t, int dst)$/;"	f	file:
SqlTimeStamp	spider.c	/^static const char *SqlTimeStamp(time_t t, int dst)$/;"	f	file:
Sqlite3Config	safe/sqlite3.c	/^struct Sqlite3Config {$/;"	s	file:
SrcList	safe/sqlite3.c	/^struct SrcList {$/;"	s	file:
SrcList	safe/sqlite3.c	/^typedef struct SrcList SrcList;$/;"	t	file:
SrcList_item	safe/sqlite3.c	/^  struct SrcList_item {$/;"	s	struct:SrcList	file:
StartDaemon	safe/spider.133.c	/^static void StartDaemon(char bRestart)$/;"	f	file:
StartDaemon	safe/spider.135.c	/^static void StartDaemon(char bRestart)$/;"	f	file:
StartDaemon	safe/spider.200.c	/^static void StartDaemon(char bRestart)$/;"	f	file:
StartDaemon	safe/spider.203.c	/^static void StartDaemon(char bRestart)$/;"	f	file:
StartDaemon	safe/spider.204.c	/^static void StartDaemon(char bRestart)$/;"	f	file:
StartDaemon	safe/spider.210.c	/^static void StartDaemon(char bRestart)$/;"	f	file:
StartDaemon	safe/spider.c	/^static void StartDaemon(char bRestart)$/;"	f	file:
StartDaemon	spider.c	/^static void StartDaemon(char bRestart)$/;"	f	file:
Stat3Accum	safe/sqlite3.c	/^struct Stat3Accum {$/;"	s	file:
Stat3Accum	safe/sqlite3.c	/^typedef struct Stat3Accum Stat3Accum;$/;"	t	file:
Stat3Sample	safe/sqlite3.c	/^  struct Stat3Sample {$/;"	s	struct:Stat3Accum	file:
StderrTmp	safe/spider.c	/^static const char *StderrTmp()$/;"	f	file:
StderrTmp	spider.c	/^static const char *StderrTmp()$/;"	f	file:
StopAnyPrevious	safe/spider.133.c	/^static int StopAnyPrevious()$/;"	f	file:
StopAnyPrevious	safe/spider.135.c	/^static int StopAnyPrevious()$/;"	f	file:
StopAnyPrevious	safe/spider.200.c	/^static int StopAnyPrevious()$/;"	f	file:
StopAnyPrevious	safe/spider.203.c	/^static int StopAnyPrevious()$/;"	f	file:
StopAnyPrevious	safe/spider.204.c	/^static int StopAnyPrevious()$/;"	f	file:
StopAnyPrevious	safe/spider.210.c	/^static int StopAnyPrevious()$/;"	f	file:
StopAnyPrevious	safe/spider.c	/^static int StopAnyPrevious()$/;"	f	file:
StopAnyPrevious	spider.c	/^static int StopAnyPrevious()$/;"	f	file:
StrAccum	safe/sqlite3.c	/^struct StrAccum {$/;"	s	file:
StrAccum	safe/sqlite3.c	/^typedef struct StrAccum StrAccum;$/;"	t	file:
StrBuffer	safe/sqlite3.c	/^struct StrBuffer {$/;"	s	file:
StrBuffer	safe/sqlite3.c	/^typedef struct StrBuffer StrBuffer;$/;"	t	file:
Stringify	safe/sqlite3.c	65355;"	d	file:
SubProgram	safe/sqlite3.c	/^struct SubProgram {$/;"	s	file:
SubProgram	safe/sqlite3.c	/^typedef struct SubProgram SubProgram;$/;"	t	file:
SumCtx	safe/sqlite3.c	/^struct SumCtx {$/;"	s	file:
SumCtx	safe/sqlite3.c	/^typedef struct SumCtx SumCtx;$/;"	t	file:
TEMP_MASTER_NAME	safe/sqlite3.c	8112;"	d	file:
TERM_ANDINFO	safe/sqlite3.c	103780;"	d	file:
TERM_CODED	safe/sqlite3.c	103777;"	d	file:
TERM_COPIED	safe/sqlite3.c	103778;"	d	file:
TERM_DYNAMIC	safe/sqlite3.c	103775;"	d	file:
TERM_ORINFO	safe/sqlite3.c	103779;"	d	file:
TERM_OR_OK	safe/sqlite3.c	103781;"	d	file:
TERM_VIRTUAL	safe/sqlite3.c	103776;"	d	file:
TERM_VNULL	safe/sqlite3.c	103783;"	d	file:
TERM_VNULL	safe/sqlite3.c	103785;"	d	file:
TESTBIT	safe/sqlite3.c	36841;"	d	file:
TESTONLY	safe/sqlite3.c	117758;"	d	file:
TESTONLY	safe/sqlite3.c	117760;"	d	file:
TESTONLY	safe/sqlite3.c	491;"	d	file:
TESTONLY	safe/sqlite3.c	493;"	d	file:
TF_Autoincrement	safe/sqlite3.c	10292;"	d	file:
TF_Ephemeral	safe/sqlite3.c	10290;"	d	file:
TF_HasPrimaryKey	safe/sqlite3.c	10291;"	d	file:
TF_Readonly	safe/sqlite3.c	10289;"	d	file:
TF_Virtual	safe/sqlite3.c	10293;"	d	file:
TIMER_ELAPSED	safe/sqlite3.c	22991;"	d	file:
TIMER_ELAPSED	safe/sqlite3.c	22995;"	d	file:
TIMER_ELAPSED	safe/sqlite3.c	25338;"	d	file:
TIMER_ELAPSED	safe/sqlite3.c	25342;"	d	file:
TIMER_ELAPSED	safe/sqlite3.c	32194;"	d	file:
TIMER_ELAPSED	safe/sqlite3.c	32198;"	d	file:
TIMER_END	safe/sqlite3.c	22990;"	d	file:
TIMER_END	safe/sqlite3.c	22994;"	d	file:
TIMER_END	safe/sqlite3.c	25337;"	d	file:
TIMER_END	safe/sqlite3.c	25341;"	d	file:
TIMER_END	safe/sqlite3.c	32193;"	d	file:
TIMER_END	safe/sqlite3.c	32197;"	d	file:
TIMER_START	safe/sqlite3.c	22989;"	d	file:
TIMER_START	safe/sqlite3.c	22993;"	d	file:
TIMER_START	safe/sqlite3.c	25336;"	d	file:
TIMER_START	safe/sqlite3.c	25340;"	d	file:
TIMER_START	safe/sqlite3.c	32192;"	d	file:
TIMER_START	safe/sqlite3.c	32196;"	d	file:
TK_ABORT	safe/sqlite3.c	7747;"	d	file:
TK_ACTION	safe/sqlite3.c	7748;"	d	file:
TK_ADD	safe/sqlite3.c	7859;"	d	file:
TK_AFTER	safe/sqlite3.c	7749;"	d	file:
TK_AGG_COLUMN	safe/sqlite3.c	7873;"	d	file:
TK_AGG_FUNCTION	safe/sqlite3.c	7872;"	d	file:
TK_ALL	safe/sqlite3.c	7832;"	d	file:
TK_ALTER	safe/sqlite3.c	7858;"	d	file:
TK_ANALYZE	safe/sqlite3.c	7750;"	d	file:
TK_AND	safe/sqlite3.c	7788;"	d	file:
TK_ANY	safe/sqlite3.c	7786;"	d	file:
TK_AS	safe/sqlite3.c	7743;"	d	file:
TK_ASC	safe/sqlite3.c	7751;"	d	file:
TK_ATTACH	safe/sqlite3.c	7752;"	d	file:
TK_AUTOINCR	safe/sqlite3.c	7822;"	d	file:
TK_BEFORE	safe/sqlite3.c	7753;"	d	file:
TK_BEGIN	safe/sqlite3.c	7724;"	d	file:
TK_BETWEEN	safe/sqlite3.c	7790;"	d	file:
TK_BITAND	safe/sqlite3.c	7801;"	d	file:
TK_BITNOT	safe/sqlite3.c	7812;"	d	file:
TK_BITOR	safe/sqlite3.c	7802;"	d	file:
TK_BLOB	safe/sqlite3.c	7850;"	d	file:
TK_BY	safe/sqlite3.c	7754;"	d	file:
TK_CASCADE	safe/sqlite3.c	7755;"	d	file:
TK_CASE	safe/sqlite3.c	7853;"	d	file:
TK_CAST	safe/sqlite3.c	7756;"	d	file:
TK_CHECK	safe/sqlite3.c	7820;"	d	file:
TK_COLLATE	safe/sqlite3.c	7811;"	d	file:
TK_COLUMN	safe/sqlite3.c	7871;"	d	file:
TK_COLUMNKW	safe/sqlite3.c	7757;"	d	file:
TK_COMMA	safe/sqlite3.c	7744;"	d	file:
TK_COMMIT	safe/sqlite3.c	7729;"	d	file:
TK_CONCAT	safe/sqlite3.c	7810;"	d	file:
TK_CONFLICT	safe/sqlite3.c	7758;"	d	file:
TK_CONSTRAINT	safe/sqlite3.c	7815;"	d	file:
TK_CONST_FUNC	safe/sqlite3.c	7874;"	d	file:
TK_CREATE	safe/sqlite3.c	7736;"	d	file:
TK_CTIME_KW	safe/sqlite3.c	7785;"	d	file:
TK_DATABASE	safe/sqlite3.c	7759;"	d	file:
TK_DEFAULT	safe/sqlite3.c	7816;"	d	file:
TK_DEFERRABLE	safe/sqlite3.c	7828;"	d	file:
TK_DEFERRED	safe/sqlite3.c	7726;"	d	file:
TK_DELETE	safe/sqlite3.c	7825;"	d	file:
TK_DESC	safe/sqlite3.c	7760;"	d	file:
TK_DETACH	safe/sqlite3.c	7761;"	d	file:
TK_DISTINCT	safe/sqlite3.c	7836;"	d	file:
TK_DOT	safe/sqlite3.c	7837;"	d	file:
TK_DROP	safe/sqlite3.c	7830;"	d	file:
TK_EACH	safe/sqlite3.c	7762;"	d	file:
TK_ELSE	safe/sqlite3.c	7856;"	d	file:
TK_END	safe/sqlite3.c	7730;"	d	file:
TK_END_OF_FILE	safe/sqlite3.c	7866;"	d	file:
TK_EQ	safe/sqlite3.c	7795;"	d	file:
TK_ESCAPE	safe/sqlite3.c	7800;"	d	file:
TK_EXCEPT	safe/sqlite3.c	7833;"	d	file:
TK_EXCLUSIVE	safe/sqlite3.c	7728;"	d	file:
TK_EXISTS	safe/sqlite3.c	7739;"	d	file:
TK_EXPLAIN	safe/sqlite3.c	7721;"	d	file:
TK_FAIL	safe/sqlite3.c	7763;"	d	file:
TK_FLOAT	safe/sqlite3.c	7849;"	d	file:
TK_FOR	safe/sqlite3.c	7764;"	d	file:
TK_FOREIGN	safe/sqlite3.c	7829;"	d	file:
TK_FROM	safe/sqlite3.c	7838;"	d	file:
TK_FUNCTION	safe/sqlite3.c	7870;"	d	file:
TK_GE	safe/sqlite3.c	7799;"	d	file:
TK_GROUP	safe/sqlite3.c	7842;"	d	file:
TK_GT	safe/sqlite3.c	7796;"	d	file:
TK_HAVING	safe/sqlite3.c	7843;"	d	file:
TK_ID	safe/sqlite3.c	7745;"	d	file:
TK_IF	safe/sqlite3.c	7737;"	d	file:
TK_IGNORE	safe/sqlite3.c	7765;"	d	file:
TK_ILLEGAL	safe/sqlite3.c	7867;"	d	file:
TK_IMMEDIATE	safe/sqlite3.c	7727;"	d	file:
TK_IN	safe/sqlite3.c	7791;"	d	file:
TK_INDEX	safe/sqlite3.c	7857;"	d	file:
TK_INDEXED	safe/sqlite3.c	7746;"	d	file:
TK_INITIALLY	safe/sqlite3.c	7766;"	d	file:
TK_INSERT	safe/sqlite3.c	7824;"	d	file:
TK_INSTEAD	safe/sqlite3.c	7767;"	d	file:
TK_INTEGER	safe/sqlite3.c	7848;"	d	file:
TK_INTERSECT	safe/sqlite3.c	7834;"	d	file:
TK_INTO	safe/sqlite3.c	7846;"	d	file:
TK_IS	safe/sqlite3.c	7789;"	d	file:
TK_ISNOT	safe/sqlite3.c	7865;"	d	file:
TK_ISNULL	safe/sqlite3.c	7792;"	d	file:
TK_JOIN	safe/sqlite3.c	7839;"	d	file:
TK_JOIN_KW	safe/sqlite3.c	7814;"	d	file:
TK_KEY	safe/sqlite3.c	7771;"	d	file:
TK_LE	safe/sqlite3.c	7797;"	d	file:
TK_LIKE_KW	safe/sqlite3.c	7768;"	d	file:
TK_LIMIT	safe/sqlite3.c	7844;"	d	file:
TK_LP	safe/sqlite3.c	7741;"	d	file:
TK_LSHIFT	safe/sqlite3.c	7803;"	d	file:
TK_LT	safe/sqlite3.c	7798;"	d	file:
TK_MATCH	safe/sqlite3.c	7769;"	d	file:
TK_MINUS	safe/sqlite3.c	7806;"	d	file:
TK_NE	safe/sqlite3.c	7794;"	d	file:
TK_NO	safe/sqlite3.c	7770;"	d	file:
TK_NOT	safe/sqlite3.c	7738;"	d	file:
TK_NOTNULL	safe/sqlite3.c	7793;"	d	file:
TK_NULL	safe/sqlite3.c	7817;"	d	file:
TK_OF	safe/sqlite3.c	7772;"	d	file:
TK_OFFSET	safe/sqlite3.c	7773;"	d	file:
TK_ON	safe/sqlite3.c	7823;"	d	file:
TK_OR	safe/sqlite3.c	7787;"	d	file:
TK_ORDER	safe/sqlite3.c	7841;"	d	file:
TK_PLAN	safe/sqlite3.c	7723;"	d	file:
TK_PLUS	safe/sqlite3.c	7805;"	d	file:
TK_PRAGMA	safe/sqlite3.c	7774;"	d	file:
TK_PRIMARY	safe/sqlite3.c	7818;"	d	file:
TK_QUERY	safe/sqlite3.c	7722;"	d	file:
TK_RAISE	safe/sqlite3.c	7775;"	d	file:
TK_REFERENCES	safe/sqlite3.c	7821;"	d	file:
TK_REGISTER	safe/sqlite3.c	7851;"	d	file:
TK_REINDEX	safe/sqlite3.c	7783;"	d	file:
TK_RELEASE	safe/sqlite3.c	7733;"	d	file:
TK_REM	safe/sqlite3.c	7809;"	d	file:
TK_RENAME	safe/sqlite3.c	7784;"	d	file:
TK_REPLACE	safe/sqlite3.c	7776;"	d	file:
TK_RESTRICT	safe/sqlite3.c	7777;"	d	file:
TK_ROLLBACK	safe/sqlite3.c	7731;"	d	file:
TK_ROW	safe/sqlite3.c	7778;"	d	file:
TK_RP	safe/sqlite3.c	7742;"	d	file:
TK_RSHIFT	safe/sqlite3.c	7804;"	d	file:
TK_SAVEPOINT	safe/sqlite3.c	7732;"	d	file:
TK_SELECT	safe/sqlite3.c	7835;"	d	file:
TK_SEMI	safe/sqlite3.c	7720;"	d	file:
TK_SET	safe/sqlite3.c	7827;"	d	file:
TK_SLASH	safe/sqlite3.c	7808;"	d	file:
TK_SPACE	safe/sqlite3.c	7868;"	d	file:
TK_STAR	safe/sqlite3.c	7807;"	d	file:
TK_STRING	safe/sqlite3.c	7813;"	d	file:
TK_TABLE	safe/sqlite3.c	7735;"	d	file:
TK_TEMP	safe/sqlite3.c	7740;"	d	file:
TK_THEN	safe/sqlite3.c	7855;"	d	file:
TK_TO	safe/sqlite3.c	7734;"	d	file:
TK_TO_BLOB	safe/sqlite3.c	7861;"	d	file:
TK_TO_INT	safe/sqlite3.c	7863;"	d	file:
TK_TO_NUMERIC	safe/sqlite3.c	7862;"	d	file:
TK_TO_REAL	safe/sqlite3.c	7864;"	d	file:
TK_TO_TEXT	safe/sqlite3.c	7860;"	d	file:
TK_TRANSACTION	safe/sqlite3.c	7725;"	d	file:
TK_TRIGGER	safe/sqlite3.c	7779;"	d	file:
TK_UMINUS	safe/sqlite3.c	7875;"	d	file:
TK_UNCLOSED_STRING	safe/sqlite3.c	7869;"	d	file:
TK_UNION	safe/sqlite3.c	7831;"	d	file:
TK_UNIQUE	safe/sqlite3.c	7819;"	d	file:
TK_UPDATE	safe/sqlite3.c	7826;"	d	file:
TK_UPLUS	safe/sqlite3.c	7876;"	d	file:
TK_USING	safe/sqlite3.c	7840;"	d	file:
TK_VACUUM	safe/sqlite3.c	7780;"	d	file:
TK_VALUES	safe/sqlite3.c	7847;"	d	file:
TK_VARIABLE	safe/sqlite3.c	7852;"	d	file:
TK_VIEW	safe/sqlite3.c	7781;"	d	file:
TK_VIRTUAL	safe/sqlite3.c	7782;"	d	file:
TK_WHEN	safe/sqlite3.c	7854;"	d	file:
TK_WHERE	safe/sqlite3.c	7845;"	d	file:
TOKEN	safe/sqlite3.c	112212;"	d	file:
TRACE	safe/sqlite3.c	50248;"	d	file:
TRACE	safe/sqlite3.c	50250;"	d	file:
TRACE_IDX_INPUTS	safe/sqlite3.c	/^static void TRACE_IDX_INPUTS(sqlite3_index_info *p){$/;"	f	file:
TRACE_IDX_INPUTS	safe/sqlite3.c	105466;"	d	file:
TRACE_IDX_OUTPUTS	safe/sqlite3.c	/^static void TRACE_IDX_OUTPUTS(sqlite3_index_info *p){$/;"	f	file:
TRACE_IDX_OUTPUTS	safe/sqlite3.c	105467;"	d	file:
TRANS_NONE	safe/sqlite3.c	49651;"	d	file:
TRANS_READ	safe/sqlite3.c	49652;"	d	file:
TRANS_WRITE	safe/sqlite3.c	49653;"	d	file:
TRIGGER_AFTER	safe/sqlite3.c	11328;"	d	file:
TRIGGER_BEFORE	safe/sqlite3.c	11327;"	d	file:
TWOPOWER31	safe/sqlite3.c	22282;"	d	file:
TWOPOWER32	safe/sqlite3.c	22281;"	d	file:
TabResult	safe/sqlite3.c	/^typedef struct TabResult {$/;"	s	file:
TabResult	safe/sqlite3.c	/^} TabResult;$/;"	t	file:
Table	safe/sqlite3.c	/^struct Table {$/;"	s	file:
Table	safe/sqlite3.c	/^typedef struct Table Table;$/;"	t	file:
TableFiles	safe/spider.203.c	/^static void TableFiles(BIO *io, const char *szDir)$/;"	f	file:
TableFiles	safe/spider.204.c	/^static void TableFiles(BIO *io, const char *szDir)$/;"	f	file:
TableFiles	safe/spider.210.c	/^static void TableFiles(BIO *io, const char *szDir)$/;"	f	file:
TableFiles	safe/spider.c	/^static void TableFiles(BIO *io, const char *szDir)$/;"	f	file:
TableFiles	spider.c	/^static void TableFiles(BIO *io, const char *szDir)$/;"	f	file:
TableLine	safe/spider.203.c	/^static void TableLine(BIO *io, const char *title, const char *value)$/;"	f	file:
TableLine	safe/spider.204.c	/^static void TableLine(BIO *io, const char *title, const char *value)$/;"	f	file:
TableLine	safe/spider.210.c	/^static void TableLine(BIO *io, const char *title, const char *value, int bBold)$/;"	f	file:
TableLine	safe/spider.c	/^static void TableLine(BIO *io, const char *title, const char *value, int bBold)$/;"	f	file:
TableLine	spider.c	/^static void TableLine(BIO *io, const char *title, const char *value, int bBold)$/;"	f	file:
TableLock	safe/sqlite3.c	/^struct TableLock {$/;"	s	file:
TableLock	safe/sqlite3.c	/^typedef struct TableLock TableLock;$/;"	t	file:
TableMessageLog	safe/spider.133.c	/^static void TableMessageLog(BIO *io, int nMessages, const char *szFilter)$/;"	f	file:
TableMessageLog	safe/spider.135.c	/^static void TableMessageLog(BIO *io, int nMessages, const char *szFilter)$/;"	f	file:
TableMessageLog	safe/spider.200.c	/^static void TableMessageLog(BIO *io, int nMessages, const char *szFilter)$/;"	f	file:
TableMessageLog	safe/spider.203.c	/^void TableMessageLog(BIO *io, int bDeep, const char *szFilter, int fromDay, int fromMonth, int fromYear, int toDay, int toMonth, int toYear)$/;"	f
TableMessageLog	safe/spider.204.c	/^void TableMessageLog(BIO *io, int bDeep, const char *szFilter, int fromDay, int fromMonth, int fromYear, int toDay, int toMonth, int toYear)$/;"	f
TableMessageLog	safe/spider.210.c	/^void TableMessageLog(BIO *io, int bDeep, const char *szFilter, int fromDay, int fromMonth, int fromYear, int toDay, int toMonth, int toYear)$/;"	f
TableMessageLog	safe/spider.c	/^void TableMessageLog(BIO *io, int bDeep, const char *szFilter, int fromDay, int fromMonth, int fromYear, int toDay, int toMonth, int toYear)$/;"	f
TableMessageLog	spider.c	/^void TableMessageLog(BIO *io, int bDeep, const char *szFilter, int fromDay, int fromMonth, int fromYear, int toDay, int toMonth, int toYear)$/;"	f
TableNoteLogs	safe/spider.133.c	/^static void TableNoteLogs(BIO *io, note_t *note, const char *szDir)$/;"	f	file:
TableNoteLogs	safe/spider.135.c	/^static void TableNoteLogs(BIO *io, note_t *note, const char *szDir)$/;"	f	file:
TableNoteLogs	safe/spider.200.c	/^static void TableNoteLogs(BIO *io, note_t *note, const char *szDir)$/;"	f	file:
TableNoteLogs	safe/spider.203.c	/^static void TableNoteLogs(BIO *io, note_t *note, const char *szDir)$/;"	f	file:
TableNoteLogs	safe/spider.204.c	/^static void TableNoteLogs(BIO *io, note_t *note, const char *szDir)$/;"	f	file:
TableNoteLogs	safe/spider.210.c	/^static void TableNoteLogs(BIO *io, note_t *note, const char *szDir)$/;"	f	file:
TableNoteLogs	safe/spider.c	/^static void TableNoteLogs(BIO *io, note_t *note, const char *szDir)$/;"	f	file:
TableNoteLogs	spider.c	/^static void TableNoteLogs(BIO *io, note_t *note, const char *szDir)$/;"	f	file:
TableNoteMessages	safe/spider.133.c	/^static void TableNoteMessages(BIO *io, note_t *note, const char *szDir)$/;"	f	file:
TableNoteMessages	safe/spider.135.c	/^static void TableNoteMessages(BIO *io, note_t *note, const char *szDir)$/;"	f	file:
TableNoteMessages	safe/spider.200.c	/^static void TableNoteMessages(BIO *io, note_t *note, const char *szDir)$/;"	f	file:
TableNotes	safe/spider.133.c	/^static void TableNotes(BIO *io, note_t *note, const char *szDir)$/;"	f	file:
TableNotes	safe/spider.135.c	/^static void TableNotes(BIO *io, note_t *note, const char *szDir)$/;"	f	file:
TableNotes	safe/spider.200.c	/^static void TableNotes(BIO *io, note_t *note, const char *szDir)$/;"	f	file:
TableNotes	safe/spider.203.c	/^static void TableNotes(BIO *io, note_t *note, const char *szDir)$/;"	f	file:
TableNotes	safe/spider.204.c	/^static void TableNotes(BIO *io, note_t *note, const char *szDir)$/;"	f	file:
TableNotes	safe/spider.210.c	/^static void TableNotes(BIO *io, note_t *note, const char *szDir)$/;"	f	file:
TableNotes	safe/spider.c	/^static void TableNotes(BIO *io, note_t *note, const char *szDir)$/;"	f	file:
TableNotes	spider.c	/^static void TableNotes(BIO *io, note_t *note, const char *szDir)$/;"	f	file:
TermOffset	safe/sqlite3.c	/^struct TermOffset {$/;"	s	file:
TermOffset	safe/sqlite3.c	/^typedef struct TermOffset TermOffset;$/;"	t	file:
TermOffsetCtx	safe/sqlite3.c	/^struct TermOffsetCtx {$/;"	s	file:
TermOffsetCtx	safe/sqlite3.c	/^typedef struct TermOffsetCtx TermOffsetCtx;$/;"	t	file:
TermSelect	safe/sqlite3.c	/^struct TermSelect {$/;"	s	file:
TermSelect	safe/sqlite3.c	/^typedef struct TermSelect TermSelect;$/;"	t	file:
TimeNow	mtwamp.c	/^STATIC const char *TimeNow()$/;"	f
TimeStamp	safe/spider.133.c	/^static const char *TimeStamp(time_t t)$/;"	f	file:
TimeStamp	safe/spider.135.c	/^static const char *TimeStamp(time_t t)$/;"	f	file:
TimeStamp	safe/spider.200.c	/^static const char *TimeStamp(time_t t)$/;"	f	file:
TimeStamp	safe/spider.203.c	/^static const char *TimeStamp(time_t t)$/;"	f	file:
TimeStamp	safe/spider.204.c	/^static const char *TimeStamp(time_t t)$/;"	f	file:
TimeStamp	safe/spider.210.c	/^static const char *TimeStamp(time_t t)$/;"	f	file:
TimeStamp	safe/spider.c	/^static const char *TimeStamp(time_t t)$/;"	f	file:
TimeStamp	spider.c	/^static const char *TimeStamp(time_t t)$/;"	f	file:
Token	safe/sqlite3.c	/^struct Token {$/;"	s	file:
Token	safe/sqlite3.c	/^typedef struct Token Token;$/;"	t	file:
TrigEvent	safe/sqlite3.c	/^struct TrigEvent { int a; IdList * b; };$/;"	s	file:
Trigger	safe/sqlite3.c	/^struct Trigger {$/;"	s	file:
Trigger	safe/sqlite3.c	/^typedef struct Trigger Trigger;$/;"	t	file:
TriggerPrg	safe/sqlite3.c	/^struct TriggerPrg {$/;"	s	file:
TriggerPrg	safe/sqlite3.c	/^typedef struct TriggerPrg TriggerPrg;$/;"	t	file:
TriggerStep	safe/sqlite3.c	/^struct TriggerStep {$/;"	s	file:
TriggerStep	safe/sqlite3.c	/^typedef struct TriggerStep TriggerStep;$/;"	t	file:
UINT16_TYPE	safe/sqlite3.c	7978;"	d	file:
UINT16_TYPE	safe/sqlite3.c	7980;"	d	file:
UINT32_TYPE	safe/sqlite3.c	7971;"	d	file:
UINT32_TYPE	safe/sqlite3.c	7973;"	d	file:
UINT8_TYPE	safe/sqlite3.c	7992;"	d	file:
UINT8_TYPE	safe/sqlite3.c	7994;"	d	file:
UNIXFILE_DELETE	safe/sqlite3.c	25183;"	d	file:
UNIXFILE_DIRSYNC	safe/sqlite3.c	25178;"	d	file:
UNIXFILE_DIRSYNC	safe/sqlite3.c	25180;"	d	file:
UNIXFILE_EXCL	safe/sqlite3.c	25174;"	d	file:
UNIXFILE_NOLOCK	safe/sqlite3.c	25185;"	d	file:
UNIXFILE_PERSIST_WAL	safe/sqlite3.c	25176;"	d	file:
UNIXFILE_PSOW	safe/sqlite3.c	25182;"	d	file:
UNIXFILE_RDONLY	safe/sqlite3.c	25175;"	d	file:
UNIXFILE_URI	safe/sqlite3.c	25184;"	d	file:
UNIXVFS	safe/sqlite3.c	31939;"	d	file:
UNIX_SHM_BASE	safe/sqlite3.c	28866;"	d	file:
UNIX_SHM_DMS	safe/sqlite3.c	28867;"	d	file:
UNKNOWN_LOCK	safe/sqlite3.c	39651;"	d	file:
UNPACKED_INCRKEY	safe/sqlite3.c	10423;"	d	file:
UNPACKED_PREFIX_MATCH	safe/sqlite3.c	10424;"	d	file:
UNPACKED_PREFIX_SEARCH	safe/sqlite3.c	10425;"	d	file:
UNUSED_PARAMETER	safe/sqlite3.c	117743;"	d	file:
UNUSED_PARAMETER	safe/sqlite3.c	134240;"	d	file:
UNUSED_PARAMETER	safe/sqlite3.c	8182;"	d	file:
UNUSED_PARAMETER2	safe/sqlite3.c	8183;"	d	file:
UPDATE_MAX_BLOBSIZE	safe/sqlite3.c	65346;"	d	file:
UPDATE_MAX_BLOBSIZE	safe/sqlite3.c	65348;"	d	file:
UninitReadStream	safe/spider.c	/^static void UninitReadStream()$/;"	f	file:
UninitReadStream	spider.c	/^static void UninitReadStream()$/;"	f	file:
UnixUnusedFd	safe/sqlite3.c	/^struct UnixUnusedFd {$/;"	s	file:
UnixUnusedFd	safe/sqlite3.c	/^typedef struct UnixUnusedFd UnixUnusedFd;     \/* An unused file descriptor *\/$/;"	t	file:
UnpackedRecord	safe/sqlite3.c	/^struct UnpackedRecord {$/;"	s	file:
UnpackedRecord	safe/sqlite3.c	/^typedef struct UnpackedRecord UnpackedRecord;$/;"	t	file:
UpdateTableFromFile	safe/spider.200.c	/^int UpdateTableFromFile(S3 *db, const char *table, const char *szFile)$/;"	f
UpdateTableFromFile	safe/spider.203.c	/^int UpdateTableFromFile(S3 *db, const char *table, const char *szFile)$/;"	f
UpdateTableFromFile	safe/spider.204.c	/^int UpdateTableFromFile(S3 *db, const char *table, const char *szFile)$/;"	f
UpdateTableFromFile	safe/spider.210.c	/^int UpdateTableFromFile(S3 *db, const char *table, const char *szFile)$/;"	f
UpdateTableFromFile	safe/spider.c	/^int UpdateTableFromFile(S3 *db, const char *table, const char *szFile)$/;"	f
UpdateTableFromFile	spider.c	/^int UpdateTableFromFile(S3 *db, const char *table, const char *szFile)$/;"	f
UpdateWampApiFile	spider.c	/^void UpdateWampApiFile(S3 *db, const char *filename)$/;"	f
UpdateWampApiTable	spider.c	/^void UpdateWampApiTable()$/;"	f
UpperToLower	safe/sqlite3.c	21372;"	d	file:
UriDecode	safe/spider.133.c	/^static const char *UriDecode(char *str)$/;"	f	file:
UriDecode	safe/spider.135.c	/^static const char *UriDecode(char *str)$/;"	f	file:
UriDecode	safe/spider.200.c	/^static const char *UriDecode(char *str)$/;"	f	file:
UriDecode	safe/spider.203.c	/^static const char *UriDecode(char *str)$/;"	f	file:
UriDecode	safe/spider.204.c	/^static const char *UriDecode(char *str)$/;"	f	file:
UriDecode	safe/spider.210.c	/^static const char *UriDecode(char *str)$/;"	f	file:
UriDecode	safe/spider.c	/^static const char *UriDecode(char *str)$/;"	f	file:
UriDecode	spider.c	/^static const char *UriDecode(char *str)$/;"	f	file:
Usage	safe/spider.133.c	/^static void Usage(int n)$/;"	f	file:
Usage	safe/spider.135.c	/^static void Usage(int n)$/;"	f	file:
Usage	safe/spider.200.c	/^static void Usage(int n)$/;"	f	file:
Usage	safe/spider.203.c	/^static void Usage(int n)$/;"	f	file:
Usage	safe/spider.204.c	/^static void Usage(int n)$/;"	f	file:
Usage	safe/spider.210.c	/^static void Usage(int n)$/;"	f	file:
Usage	safe/spider.c	/^static void Usage(int n)$/;"	f	file:
Usage	spider.c	/^static void Usage(int n)$/;"	f	file:
UsageDaily	safe/spider.203.c	/^void UsageDaily()$/;"	f
UsageDaily	safe/spider.204.c	/^void UsageDaily()$/;"	f
UsageDaily	safe/spider.210.c	/^void UsageDaily()$/;"	f
UsageDaily	safe/spider.c	/^void UsageDaily()$/;"	f
UsageDaily	spider.c	/^void UsageDaily()$/;"	f
UsageDatabase	safe/spider.203.c	/^S3 *UsageDatabase()$/;"	f
UsageDatabase	safe/spider.204.c	/^S3 *UsageDatabase()$/;"	f
Utf82Codepoint	mtjson.c	/^STATIC long Utf82Codepoint(const char **ptext)$/;"	f
VARIANT_GUTTMAN_LINEAR_SPLIT	safe/sqlite3.c	134198;"	d	file:
VARIANT_GUTTMAN_QUADRATIC_SPLIT	safe/sqlite3.c	134197;"	d	file:
VARIANT_GUTTMAN_SPLIT	safe/sqlite3.c	134201;"	d	file:
VARIANT_RSTARTREE_CHOOSESUBTREE	safe/sqlite3.c	134191;"	d	file:
VARIANT_RSTARTREE_REINSERT	safe/sqlite3.c	134192;"	d	file:
VARIANT_RSTARTREE_SPLIT	safe/sqlite3.c	134199;"	d	file:
VDBE_MAGIC_DEAD	safe/sqlite3.c	13285;"	d	file:
VDBE_MAGIC_HALT	safe/sqlite3.c	13284;"	d	file:
VDBE_MAGIC_INIT	safe/sqlite3.c	13282;"	d	file:
VDBE_MAGIC_RUN	safe/sqlite3.c	13283;"	d	file:
VERSION	safe/spider.133.c	34;"	d	file:
VERSION	safe/spider.135.c	34;"	d	file:
VERSION	safe/spider.200.c	35;"	d	file:
VERSION	safe/spider.203.c	38;"	d	file:
VERSION	safe/spider.204.c	39;"	d	file:
VERSION	safe/spider.210.c	45;"	d	file:
VERSION	safe/spider.c	64;"	d	file:
VERSION	spider.c	64;"	d	file:
VTable	safe/sqlite3.c	/^struct VTable {$/;"	s	file:
VTable	safe/sqlite3.c	/^typedef struct VTable VTable;$/;"	t	file:
VVA_ONLY	safe/sqlite3.c	505;"	d	file:
VVA_ONLY	safe/sqlite3.c	507;"	d	file:
ValueList	safe/sqlite3.c	/^struct ValueList {$/;"	s	file:
Vdbe	safe/sqlite3.c	/^struct Vdbe {$/;"	s	file:
Vdbe	safe/sqlite3.c	/^typedef struct Vdbe Vdbe;$/;"	t	file:
VdbeComment	safe/sqlite3.c	8899;"	d	file:
VdbeComment	safe/sqlite3.c	8903;"	d	file:
VdbeCursor	safe/sqlite3.c	/^struct VdbeCursor {$/;"	s	file:
VdbeCursor	safe/sqlite3.c	/^typedef struct VdbeCursor VdbeCursor;$/;"	t	file:
VdbeFrame	safe/sqlite3.c	/^struct VdbeFrame {$/;"	s	file:
VdbeFrame	safe/sqlite3.c	/^typedef struct VdbeFrame VdbeFrame;$/;"	t	file:
VdbeFrameMem	safe/sqlite3.c	13060;"	d	file:
VdbeFunc	safe/sqlite3.c	/^struct VdbeFunc {$/;"	s	file:
VdbeFunc	safe/sqlite3.c	/^typedef struct VdbeFunc VdbeFunc;$/;"	t	file:
VdbeMemRelease	safe/sqlite3.c	13336;"	d	file:
VdbeNoopComment	safe/sqlite3.c	8901;"	d	file:
VdbeNoopComment	safe/sqlite3.c	8904;"	d	file:
VdbeOp	safe/sqlite3.c	/^struct VdbeOp {$/;"	s	file:
VdbeOp	safe/sqlite3.c	/^typedef struct VdbeOp VdbeOp;$/;"	t	file:
VdbeOpIter	safe/sqlite3.c	/^struct VdbeOpIter {$/;"	s	file:
VdbeOpIter	safe/sqlite3.c	/^typedef struct VdbeOpIter VdbeOpIter;$/;"	t	file:
VdbeOpList	safe/sqlite3.c	/^struct VdbeOpList {$/;"	s	file:
VdbeOpList	safe/sqlite3.c	/^typedef struct VdbeOpList VdbeOpList;$/;"	t	file:
VdbeSorter	safe/sqlite3.c	/^struct VdbeSorter {$/;"	s	file:
VdbeSorter	safe/sqlite3.c	/^typedef struct VdbeSorter VdbeSorter;$/;"	t	file:
VdbeSorterIter	safe/sqlite3.c	/^struct VdbeSorterIter {$/;"	s	file:
VdbeSorterIter	safe/sqlite3.c	/^typedef struct VdbeSorterIter VdbeSorterIter;$/;"	t	file:
VersionCompare	safe/spider.c	/^static int VersionCompare(const char *a, const char *b)$/;"	f	file:
VersionCompare	spider.c	/^static int VersionCompare(const char *a, const char *b)$/;"	f	file:
VtabCtx	safe/sqlite3.c	/^struct VtabCtx {$/;"	s	file:
VtabCtx	safe/sqlite3.c	/^typedef struct VtabCtx VtabCtx;$/;"	t	file:
WALINDEX_HDR_SIZE	safe/sqlite3.c	46558;"	d	file:
WALINDEX_LOCK_OFFSET	safe/sqlite3.c	46556;"	d	file:
WALINDEX_LOCK_RESERVED	safe/sqlite3.c	46557;"	d	file:
WALINDEX_MAX_VERSION	safe/sqlite3.c	46451;"	d	file:
WALINDEX_PGSZ	safe/sqlite3.c	46685;"	d	file:
WALTRACE	safe/sqlite3.c	46432;"	d	file:
WALTRACE	safe/sqlite3.c	46434;"	d	file:
WAL_ALL_BUT_WRITE	safe/sqlite3.c	46458;"	d	file:
WAL_CKPT_LOCK	safe/sqlite3.c	46459;"	d	file:
WAL_EXCLUSIVE_MODE	safe/sqlite3.c	46622;"	d	file:
WAL_FRAME_HDRSIZE	safe/sqlite3.c	46561;"	d	file:
WAL_HDRSIZE	safe/sqlite3.c	46565;"	d	file:
WAL_HEAPMEMORY_MODE	safe/sqlite3.c	46623;"	d	file:
WAL_MAGIC	safe/sqlite3.c	46576;"	d	file:
WAL_MAX_VERSION	safe/sqlite3.c	46450;"	d	file:
WAL_NORMAL_MODE	safe/sqlite3.c	46621;"	d	file:
WAL_NREADER	safe/sqlite3.c	46462;"	d	file:
WAL_RDONLY	safe/sqlite3.c	46629;"	d	file:
WAL_RDWR	safe/sqlite3.c	46628;"	d	file:
WAL_READ_LOCK	safe/sqlite3.c	46461;"	d	file:
WAL_RECOVER_LOCK	safe/sqlite3.c	46460;"	d	file:
WAL_RETRY	safe/sqlite3.c	48201;"	d	file:
WAL_SAVEPOINT_NDATA	safe/sqlite3.c	39177;"	d	file:
WAL_SHM_RDONLY	safe/sqlite3.c	46630;"	d	file:
WAL_SYNC_TRANSACTIONS	safe/sqlite3.c	39153;"	d	file:
WAL_WRITE_LOCK	safe/sqlite3.c	46457;"	d	file:
WAMP	mtwamp.h	/^typedef struct WAMP {$/;"	s
WAMP	mtwamp.h	/^} WAMP;$/;"	t
WAMP	safe/mtwamp.c	/^typedef struct WAMP {$/;"	s	file:
WAMP	safe/mtwamp.c	/^} WAMP;$/;"	t	file:
WAMP	safe/mtwamp.h	/^typedef struct WAMP {$/;"	s
WAMP	safe/mtwamp.h	/^} WAMP;$/;"	t
WAMPCB_Data	mtwamp.h	/^typedef void (*WAMPCB_Data)(struct WAMP *wamp, JSON *json);$/;"	t
WAMPCB_DeleteCallback	mtwamp.h	/^typedef void (*WAMPCB_DeleteCallback)(struct WAMP *wamp);$/;"	t
WAMPCB_Handler	mtwamp.h	/^typedef int (*WAMPCB_Handler)(struct WAMP *wamp, int type, JSON *json);$/;"	t
WAMPCB_Invokee	mtwamp.h	/^typedef void (*WAMPCB_Invokee)(struct WAMP *wamp, long long requestId, const char *procedure, JSON *list, JSON *dict);$/;"	t
WAMPCB_Invokee	safe/mtwamp.c	/^typedef void (*WAMPCB_Invokee)(WAMP *wamp, long long requestId, const char *procedure, JSON *list, JSON *dict);$/;"	t	file:
WAMPCB_Invokee	safe/mtwamp.h	/^typedef void (*WAMPCB_Invokee)(WAMP *wamp, long long requestId, const char *procedure, JSON *list, JSON *dict);$/;"	t
WAMPCB_NoCallee	mtwamp.h	/^typedef int (*WAMPCB_NoCallee)(const char *name);$/;"	t
WAMPCB_NoCallee	safe/mtwamp.c	/^typedef int (*WAMPCB_NoCallee)(const char *name);$/;"	t	file:
WAMPCB_NoCallee	safe/mtwamp.h	/^typedef int (*WAMPCB_NoCallee)(const char *name);$/;"	t
WAMPPREFIX	spider.c	203;"	d	file:
WAMPREALM	mtwamp.c	/^typedef struct WAMPREALM {$/;"	s	file:
WAMPREALM	mtwamp.c	/^} WAMPREALM;$/;"	t	file:
WAMPREALM	safe/mtwamp.c	/^typedef struct WAMPREALM {$/;"	s	file:
WAMPREALM	safe/mtwamp.c	/^} WAMPREALM;$/;"	t	file:
WAMPREALM	safe/mtwamp.h	/^typedef struct WAMPREALM {$/;"	s
WAMPREALM	safe/mtwamp.h	/^} WAMPREALM;$/;"	t
WAMPSESSION	mtwamp.c	/^typedef struct WAMPSESSION {$/;"	s	file:
WAMPSESSION	mtwamp.c	/^} WAMPSESSION;$/;"	t	file:
WAMPSESSION	safe/mtwamp.c	/^typedef struct WAMPSESSION {$/;"	s	file:
WAMPSESSION	safe/mtwamp.c	/^} WAMPSESSION;$/;"	t	file:
WAMPSESSION	safe/mtwamp.h	/^typedef struct WAMPSESSION {$/;"	s
WAMPSESSION	safe/mtwamp.h	/^} WAMPSESSION;$/;"	t
WAMP_ABORT	mtwamp.c	67;"	d	file:
WAMP_ABORT	mtwamp.h	44;"	d
WAMP_ABORT	safe/mtwamp.c	52;"	d	file:
WAMP_ABORT	safe/mtwamp.h	34;"	d
WAMP_CALL	mtwamp.c	81;"	d	file:
WAMP_CALL	mtwamp.h	58;"	d
WAMP_CALL	safe/mtwamp.c	66;"	d	file:
WAMP_CALL	safe/mtwamp.h	48;"	d
WAMP_CALLTYPE_COUNT	mtwamp.c	108;"	d	file:
WAMP_CALLTYPE_EXACT	mtwamp.c	104;"	d	file:
WAMP_CALLTYPE_PREFIX	mtwamp.c	105;"	d	file:
WAMP_CALLTYPE_WILDCARD	mtwamp.c	106;"	d	file:
WAMP_CONN_CODE	mtwamp.c	23;"	d	file:
WAMP_CONN_RAWSOCKET	mtwamp.c	22;"	d	file:
WAMP_CONN_WEBSOCKET	mtwamp.c	21;"	d	file:
WAMP_ERROR	mtwamp.c	70;"	d	file:
WAMP_ERROR	mtwamp.h	47;"	d
WAMP_ERROR	safe/mtwamp.c	55;"	d	file:
WAMP_ERROR	safe/mtwamp.h	37;"	d
WAMP_EVENT	mtwamp.c	79;"	d	file:
WAMP_EVENT	mtwamp.h	56;"	d
WAMP_EVENT	safe/mtwamp.c	64;"	d	file:
WAMP_EVENT	safe/mtwamp.h	46;"	d
WAMP_EXACT	mtwamp.c	61;"	d	file:
WAMP_EXACT	mtwamp.h	38;"	d
WAMP_GOODBYE	mtwamp.c	68;"	d	file:
WAMP_GOODBYE	mtwamp.h	45;"	d
WAMP_GOODBYE	safe/mtwamp.c	53;"	d	file:
WAMP_GOODBYE	safe/mtwamp.h	35;"	d
WAMP_HELLO	mtwamp.c	65;"	d	file:
WAMP_HELLO	mtwamp.h	42;"	d
WAMP_HELLO	safe/mtwamp.c	50;"	d	file:
WAMP_HELLO	safe/mtwamp.h	32;"	d
WAMP_INVOCATION	mtwamp.c	88;"	d	file:
WAMP_INVOCATION	mtwamp.h	65;"	d
WAMP_INVOCATION	safe/mtwamp.c	73;"	d	file:
WAMP_INVOCATION	safe/mtwamp.h	55;"	d
WAMP_INVOKE_COUNT	mtwamp.c	101;"	d	file:
WAMP_INVOKE_FIRST	mtwamp.c	98;"	d	file:
WAMP_INVOKE_LAST	mtwamp.c	99;"	d	file:
WAMP_INVOKE_RANDOM	mtwamp.c	97;"	d	file:
WAMP_INVOKE_ROUNDROBIN	mtwamp.c	96;"	d	file:
WAMP_INVOKE_SINGLE	mtwamp.c	95;"	d	file:
WAMP_MTPOST	spider.c	6800;"	d	file:
WAMP_PREFIX	mtwamp.c	62;"	d	file:
WAMP_PREFIX	mtwamp.h	39;"	d
WAMP_PUBLISH	mtwamp.c	72;"	d	file:
WAMP_PUBLISH	mtwamp.h	49;"	d
WAMP_PUBLISH	safe/mtwamp.c	57;"	d	file:
WAMP_PUBLISH	safe/mtwamp.h	39;"	d
WAMP_PUBLISHED	mtwamp.c	73;"	d	file:
WAMP_PUBLISHED	mtwamp.h	50;"	d
WAMP_PUBLISHED	safe/mtwamp.c	58;"	d	file:
WAMP_PUBLISHED	safe/mtwamp.h	40;"	d
WAMP_REGISTER	mtwamp.c	84;"	d	file:
WAMP_REGISTER	mtwamp.h	61;"	d
WAMP_REGISTER	safe/mtwamp.c	69;"	d	file:
WAMP_REGISTER	safe/mtwamp.h	51;"	d
WAMP_REGISTERED	mtwamp.c	85;"	d	file:
WAMP_REGISTERED	mtwamp.h	62;"	d
WAMP_REGISTERED	safe/mtwamp.c	70;"	d	file:
WAMP_REGISTERED	safe/mtwamp.h	52;"	d
WAMP_RESULT	mtwamp.c	82;"	d	file:
WAMP_RESULT	mtwamp.h	59;"	d
WAMP_RESULT	safe/mtwamp.c	67;"	d	file:
WAMP_RESULT	safe/mtwamp.h	49;"	d
WAMP_SUBSCRIBE	mtwamp.c	75;"	d	file:
WAMP_SUBSCRIBE	mtwamp.h	52;"	d
WAMP_SUBSCRIBE	safe/mtwamp.c	60;"	d	file:
WAMP_SUBSCRIBE	safe/mtwamp.h	42;"	d
WAMP_SUBSCRIBED	mtwamp.c	76;"	d	file:
WAMP_SUBSCRIBED	mtwamp.h	53;"	d
WAMP_SUBSCRIBED	safe/mtwamp.c	61;"	d	file:
WAMP_SUBSCRIBED	safe/mtwamp.h	43;"	d
WAMP_UNREGISTER	mtwamp.c	86;"	d	file:
WAMP_UNREGISTER	mtwamp.h	63;"	d
WAMP_UNREGISTER	safe/mtwamp.c	71;"	d	file:
WAMP_UNREGISTER	safe/mtwamp.h	53;"	d
WAMP_UNREGISTERED	mtwamp.c	87;"	d	file:
WAMP_UNREGISTERED	mtwamp.h	64;"	d
WAMP_UNREGISTERED	safe/mtwamp.c	72;"	d	file:
WAMP_UNREGISTERED	safe/mtwamp.h	54;"	d
WAMP_UNSUBSCRIBE	mtwamp.c	77;"	d	file:
WAMP_UNSUBSCRIBE	mtwamp.h	54;"	d
WAMP_UNSUBSCRIBE	safe/mtwamp.c	62;"	d	file:
WAMP_UNSUBSCRIBE	safe/mtwamp.h	44;"	d
WAMP_UNSUBSCRIBED	mtwamp.c	78;"	d	file:
WAMP_UNSUBSCRIBED	mtwamp.h	55;"	d
WAMP_UNSUBSCRIBED	safe/mtwamp.c	63;"	d	file:
WAMP_UNSUBSCRIBED	safe/mtwamp.h	45;"	d
WAMP_WELCOME	mtwamp.c	66;"	d	file:
WAMP_WELCOME	mtwamp.h	43;"	d
WAMP_WELCOME	safe/mtwamp.c	51;"	d	file:
WAMP_WELCOME	safe/mtwamp.h	33;"	d
WAMP_WILDCARD	mtwamp.c	63;"	d	file:
WAMP_WILDCARD	mtwamp.h	40;"	d
WAMP_YIELD	mtwamp.c	89;"	d	file:
WAMP_YIELD	mtwamp.h	66;"	d
WAMP_YIELD	safe/mtwamp.c	74;"	d	file:
WAMP_YIELD	safe/mtwamp.h	56;"	d
WHERETRACE	safe/sqlite3.c	103690;"	d	file:
WHERETRACE	safe/sqlite3.c	103692;"	d	file:
WHERE_AND_ONLY	safe/sqlite3.c	10942;"	d	file:
WHERE_BOTH_LIMIT	safe/sqlite3.c	103919;"	d	file:
WHERE_BTM_LIMIT	safe/sqlite3.c	103918;"	d	file:
WHERE_COLUMN_EQ	safe/sqlite3.c	103910;"	d	file:
WHERE_COLUMN_IN	safe/sqlite3.c	103912;"	d	file:
WHERE_COLUMN_NULL	safe/sqlite3.c	103913;"	d	file:
WHERE_COLUMN_RANGE	safe/sqlite3.c	103911;"	d	file:
WHERE_DISTINCT	safe/sqlite3.c	103927;"	d	file:
WHERE_DISTINCT_ORDERED	safe/sqlite3.c	10969;"	d	file:
WHERE_DISTINCT_UNIQUE	safe/sqlite3.c	10968;"	d	file:
WHERE_DUPLICATES_OK	safe/sqlite3.c	10938;"	d	file:
WHERE_FORCE_TABLE	safe/sqlite3.c	10940;"	d	file:
WHERE_IDX_ONLY	safe/sqlite3.c	103920;"	d	file:
WHERE_INDEXED	safe/sqlite3.c	103914;"	d	file:
WHERE_IN_ABLE	safe/sqlite3.c	103916;"	d	file:
WHERE_MULTI_OR	safe/sqlite3.c	103925;"	d	file:
WHERE_NOT_FULLSCAN	safe/sqlite3.c	103915;"	d	file:
WHERE_OMIT_OPEN_CLOSE	safe/sqlite3.c	10939;"	d	file:
WHERE_ONEPASS_DESIRED	safe/sqlite3.c	10937;"	d	file:
WHERE_ONETABLE_ONLY	safe/sqlite3.c	10941;"	d	file:
WHERE_ORDERBY	safe/sqlite3.c	103921;"	d	file:
WHERE_ORDERBY_MAX	safe/sqlite3.c	10936;"	d	file:
WHERE_ORDERBY_MIN	safe/sqlite3.c	10935;"	d	file:
WHERE_ORDERBY_NORMAL	safe/sqlite3.c	10934;"	d	file:
WHERE_REVERSE	safe/sqlite3.c	103922;"	d	file:
WHERE_ROWID_EQ	safe/sqlite3.c	103908;"	d	file:
WHERE_ROWID_RANGE	safe/sqlite3.c	103909;"	d	file:
WHERE_TEMP_INDEX	safe/sqlite3.c	103926;"	d	file:
WHERE_TOP_LIMIT	safe/sqlite3.c	103917;"	d	file:
WHERE_UNIQUE	safe/sqlite3.c	103923;"	d	file:
WHERE_VIRTUALTABLE	safe/sqlite3.c	103924;"	d	file:
WINCE_DELETION_ATTEMPTS	safe/sqlite3.c	34164;"	d	file:
WINFILE_PERSIST_WAL	safe/sqlite3.c	32323;"	d	file:
WINFILE_PSOW	safe/sqlite3.c	32324;"	d	file:
WINMEM_MAGIC	safe/sqlite3.c	32394;"	d	file:
WIN_SHM_BASE	safe/sqlite3.c	34987;"	d	file:
WIN_SHM_DMS	safe/sqlite3.c	34988;"	d	file:
WO_ALL	safe/sqlite3.c	103892;"	d	file:
WO_AND	safe/sqlite3.c	103889;"	d	file:
WO_EQ	safe/sqlite3.c	103881;"	d	file:
WO_GE	safe/sqlite3.c	103885;"	d	file:
WO_GT	safe/sqlite3.c	103884;"	d	file:
WO_IN	safe/sqlite3.c	103880;"	d	file:
WO_ISNULL	safe/sqlite3.c	103887;"	d	file:
WO_LE	safe/sqlite3.c	103883;"	d	file:
WO_LT	safe/sqlite3.c	103882;"	d	file:
WO_MATCH	safe/sqlite3.c	103886;"	d	file:
WO_NOOP	safe/sqlite3.c	103890;"	d	file:
WO_OR	safe/sqlite3.c	103888;"	d	file:
WO_SINGLE	safe/sqlite3.c	103893;"	d	file:
WRC_Abort	safe/sqlite3.c	11489;"	d	file:
WRC_Continue	safe/sqlite3.c	11487;"	d	file:
WRC_Prune	safe/sqlite3.c	11488;"	d	file:
WRITE_LOCK	safe/sqlite3.c	49606;"	d	file:
WRITE_UTF16BE	safe/sqlite3.c	20693;"	d	file:
WRITE_UTF16LE	safe/sqlite3.c	20681;"	d	file:
WRITE_UTF8	safe/sqlite3.c	133416;"	d	file:
WRITE_UTF8	safe/sqlite3.c	20661;"	d	file:
WS	mtwebsocket.c	/^typedef struct WS {$/;"	s	file:
WS	mtwebsocket.c	/^} WS;$/;"	t	file:
WS	mtwebsocket.h	/^typedef struct WS {$/;"	s
WS	mtwebsocket.h	/^} WS;$/;"	t
WS	safe/mtwebsocket.h	/^typedef struct WS {$/;"	s
WS	safe/mtwebsocket.h	/^} WS;$/;"	t
WSCB_Closed	mtwebsocket.c	/^typedef int (*WSCB_Closed)(struct WS *channel);$/;"	t	file:
WSCB_Closed	mtwebsocket.h	/^typedef int (*WSCB_Closed)(struct WS *channel);$/;"	t
WSCB_DeleteCallback	mtwebsocket.c	/^typedef void (*WSCB_DeleteCallback)(struct WS *channel);$/;"	t	file:
WSCB_DeleteCallback	mtwebsocket.h	/^typedef void (*WSCB_DeleteCallback)(struct WS *channel);$/;"	t
WSCB_Receiver	mtwebsocket.c	/^typedef int (*WSCB_Receiver)(struct WS *channel, int len, const char *text);$/;"	t	file:
WSCB_Receiver	mtwebsocket.h	/^typedef int (*WSCB_Receiver)(struct WS *channel, int len, const char *text);$/;"	t
WSCB_Receiver	safe/mtwebsocket.h	/^typedef int (*WSCB_Receiver)(struct WS *channel, int len, const char *text);$/;"	t
WSL	safe/mtwebsocket.h	/^typedef struct WSL {$/;"	s
WSL	safe/mtwebsocket.h	/^} WSL;$/;"	t
WS_CLOSE	safe/mtwebsocket.c	34;"	d	file:
WS_CLOSE	safe/mtwebsocket.h	13;"	d
WS_DIRTY	safe/mtwebsocket.c	33;"	d	file:
WS_DIRTY	safe/mtwebsocket.h	12;"	d
WS_IN	safe/mtwebsocket.c	31;"	d	file:
WS_IN	safe/mtwebsocket.h	10;"	d
WS_OUT	safe/mtwebsocket.c	32;"	d	file:
WS_OUT	safe/mtwebsocket.h	11;"	d
Wal	safe/sqlite3.c	/^struct Wal {$/;"	s	file:
Wal	safe/sqlite3.c	/^typedef struct Wal Wal;$/;"	t	file:
WalCkptInfo	safe/sqlite3.c	/^struct WalCkptInfo {$/;"	s	file:
WalCkptInfo	safe/sqlite3.c	/^typedef struct WalCkptInfo WalCkptInfo;$/;"	t	file:
WalIndexHdr	safe/sqlite3.c	/^struct WalIndexHdr {$/;"	s	file:
WalIndexHdr	safe/sqlite3.c	/^typedef struct WalIndexHdr WalIndexHdr;$/;"	t	file:
WalIterator	safe/sqlite3.c	/^struct WalIterator {$/;"	s	file:
WalIterator	safe/sqlite3.c	/^typedef struct WalIterator WalIterator;$/;"	t	file:
WalSegment	safe/sqlite3.c	/^  struct WalSegment {$/;"	s	struct:WalIterator	file:
WalWriter	safe/sqlite3.c	/^typedef struct WalWriter {$/;"	s	file:
WalWriter	safe/sqlite3.c	/^} WalWriter;$/;"	t	file:
Walker	safe/sqlite3.c	/^struct Walker {$/;"	s	file:
Walker	safe/sqlite3.c	/^typedef struct Walker Walker;$/;"	t	file:
WampFunction	spider.c	/^static rogxml *WampFunction(rogxml *rxRpc, const char *function, const char *entry)$/;"	f	file:
WampMap	spider.c	/^static SSMAP *WampMap()$/;"	f	file:
WantKeepAlive	safe/spider.c	/^int WantKeepAlive(SSMAP *header)$/;"	f
WantKeepAlive	spider.c	/^int WantKeepAlive(SSMAP *header)$/;"	f
WhereAndInfo	safe/sqlite3.c	/^struct WhereAndInfo {$/;"	s	file:
WhereAndInfo	safe/sqlite3.c	/^typedef struct WhereAndInfo WhereAndInfo;$/;"	t	file:
WhereClause	safe/sqlite3.c	/^struct WhereClause {$/;"	s	file:
WhereClause	safe/sqlite3.c	/^typedef struct WhereClause WhereClause;$/;"	t	file:
WhereCost	safe/sqlite3.c	/^struct WhereCost {$/;"	s	file:
WhereCost	safe/sqlite3.c	/^typedef struct WhereCost WhereCost;$/;"	t	file:
WhereInfo	safe/sqlite3.c	/^struct WhereInfo {$/;"	s	file:
WhereInfo	safe/sqlite3.c	/^typedef struct WhereInfo WhereInfo;$/;"	t	file:
WhereLevel	safe/sqlite3.c	/^struct WhereLevel {$/;"	s	file:
WhereLevel	safe/sqlite3.c	/^typedef struct WhereLevel WhereLevel;$/;"	t	file:
WhereMaskSet	safe/sqlite3.c	/^struct WhereMaskSet {$/;"	s	file:
WhereMaskSet	safe/sqlite3.c	/^typedef struct WhereMaskSet WhereMaskSet;$/;"	t	file:
WhereOrInfo	safe/sqlite3.c	/^struct WhereOrInfo {$/;"	s	file:
WhereOrInfo	safe/sqlite3.c	/^typedef struct WhereOrInfo WhereOrInfo;$/;"	t	file:
WherePlan	safe/sqlite3.c	/^struct WherePlan {$/;"	s	file:
WherePlan	safe/sqlite3.c	/^typedef struct WherePlan WherePlan;$/;"	t	file:
WhereTerm	safe/sqlite3.c	/^struct WhereTerm {$/;"	s	file:
WhereTerm	safe/sqlite3.c	/^typedef struct WhereTerm WhereTerm;$/;"	t	file:
WriteMaps	safe/spider.203.c	/^static void WriteMaps()$/;"	f	file:
WriteMaps	safe/spider.204.c	/^static void WriteMaps()$/;"	f	file:
WriteMaps	safe/spider.210.c	/^static void WriteMaps()$/;"	f	file:
WriteMaps	safe/spider.c	/^static void WriteMaps()$/;"	f	file:
WriteMaps	spider.c	/^static void WriteMaps()$/;"	f	file:
WriteMessageLogs	safe/spider.c	/^void WriteMessageLogs()$/;"	f
WriteMessageLogs	spider.c	/^void WriteMessageLogs()$/;"	f
WriteNoteLog	safe/spider.c	/^static void WriteNoteLog(HLIST *h, const char *filename)$/;"	f	file:
WriteNoteLog	spider.c	/^static void WriteNoteLog(HLIST *h, const char *filename)$/;"	f	file:
WriteNoteLogs	safe/spider.c	/^static void WriteNoteLogs()$/;"	f	file:
WriteNoteLogs	spider.c	/^static void WriteNoteLogs()$/;"	f	file:
XML_MIME_TYPE	safe/spider.133.c	126;"	d	file:
XML_MIME_TYPE	safe/spider.135.c	135;"	d	file:
XML_MIME_TYPE	safe/spider.200.c	141;"	d	file:
XML_MIME_TYPE	safe/spider.203.c	152;"	d	file:
XML_MIME_TYPE	safe/spider.204.c	153;"	d	file:
XML_MIME_TYPE	safe/spider.210.c	162;"	d	file:
XML_MIME_TYPE	safe/spider.c	213;"	d	file:
XML_MIME_TYPE	spider.c	217;"	d	file:
Y	safe/sqlite3.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
YYACTIONTYPE	safe/sqlite3.c	109129;"	d	file:
YYCODETYPE	safe/sqlite3.c	109127;"	d	file:
YYFALLBACK	safe/sqlite3.c	109159;"	d	file:
YYMINORTYPE	safe/sqlite3.c	/^} YYMINORTYPE;$/;"	t	file:
YYNOCODE	safe/sqlite3.c	109128;"	d	file:
YYNOERRORRECOVERY	safe/sqlite3.c	108956;"	d	file:
YYNRULE	safe/sqlite3.c	109158;"	d	file:
YYNSTATE	safe/sqlite3.c	109157;"	d	file:
YYSTACKDEPTH	safe/sqlite3.c	109151;"	d	file:
YYWILDCARD	safe/sqlite3.c	109130;"	d	file:
YY_ACCEPT_ACTION	safe/sqlite3.c	109161;"	d	file:
YY_ACTTAB_COUNT	safe/sqlite3.c	109228;"	d	file:
YY_ERROR_ACTION	safe/sqlite3.c	109162;"	d	file:
YY_NO_ACTION	safe/sqlite3.c	109160;"	d	file:
YY_REDUCE_COUNT	safe/sqlite3.c	109596;"	d	file:
YY_REDUCE_MAX	safe/sqlite3.c	109598;"	d	file:
YY_REDUCE_MIN	safe/sqlite3.c	109597;"	d	file:
YY_REDUCE_USE_DFLT	safe/sqlite3.c	109595;"	d	file:
YY_SHIFT_COUNT	safe/sqlite3.c	109548;"	d	file:
YY_SHIFT_MAX	safe/sqlite3.c	109550;"	d	file:
YY_SHIFT_MIN	safe/sqlite3.c	109549;"	d	file:
YY_SHIFT_USE_DFLT	safe/sqlite3.c	109547;"	d	file:
_BTREE_H_	safe/sqlite3.c	8255;"	d	file:
_FILE_OFFSET_BITS	safe/sqlite3.c	25028;"	d	file:
_FILE_OFFSET_BITS	safe/sqlite3.c	69;"	d	file:
_FTS3_HASH_H_	safe/sqlite3.c	117544;"	d	file:
_FTS3_TOKENIZER_H_	safe/sqlite3.c	117382;"	d	file:
_FTSINT_H	safe/sqlite3.c	117338;"	d	file:
_GNU_SOURCE	safe/sqlite3.c	307;"	d	file:
_HWTIME_H_	safe/sqlite3.c	22914;"	d	file:
_HWTIME_H_	safe/sqlite3.c	25261;"	d	file:
_HWTIME_H_	safe/sqlite3.c	32117;"	d	file:
_HWTIME_H_	safe/sqlite3.c	65702;"	d	file:
_LARGEFILE64_SOURCE	safe/spider.c	129;"	d	file:
_LARGEFILE64_SOURCE	spider.c	129;"	d	file:
_LARGEFILE_SOURCE	safe/sqlite3.c	25030;"	d	file:
_LARGEFILE_SOURCE	safe/sqlite3.c	71;"	d	file:
_LARGE_FILE	safe/sqlite3.c	25026;"	d	file:
_LARGE_FILE	safe/sqlite3.c	67;"	d	file:
_OS_COMMON_H_	safe/sqlite3.c	22865;"	d	file:
_OS_COMMON_H_	safe/sqlite3.c	25212;"	d	file:
_OS_COMMON_H_	safe/sqlite3.c	32068;"	d	file:
_PAGER_H_	safe/sqlite3.c	8930;"	d	file:
_SHM_RDLCK	safe/sqlite3.c	23822;"	d	file:
_SHM_RDLCK	safe/sqlite3.c	34994;"	d	file:
_SHM_UNLCK	safe/sqlite3.c	23821;"	d	file:
_SHM_UNLCK	safe/sqlite3.c	34993;"	d	file:
_SHM_WRLCK	safe/sqlite3.c	23823;"	d	file:
_SHM_WRLCK	safe/sqlite3.c	34995;"	d	file:
_SHM_WRLCK_WAIT	safe/sqlite3.c	23824;"	d	file:
_SQLITE3EXT_H_	safe/sqlite3.c	92038;"	d	file:
_SQLITE3RTREE_H_	safe/sqlite3.c	7568;"	d	file:
_SQLITE3RTREE_H_	safe/sqlite3.h	7010;"	d
_SQLITE3_H_	safe/sqlite3.c	592;"	d	file:
_SQLITE3_H_	safe/sqlite3.h	34;"	d
_SQLITEINT_H_	safe/sqlite3.c	45;"	d	file:
_SQLITE_HASH_H_	safe/sqlite3.c	7634;"	d	file:
_SQLITE_OS_C_	safe/sqlite3.c	14785;"	d	file:
_SQLITE_OS_C_	safe/sqlite3.c	14786;"	d	file:
_SQLITE_OS_H_	safe/sqlite3.c	9289;"	d	file:
_SQLITE_VDBE_H_	safe/sqlite3.c	8502;"	d	file:
_VDBEINT_H_	safe/sqlite3.c	12944;"	d	file:
_WAL_H_	safe/sqlite3.c	39147;"	d	file:
_XOPEN_SOURCE	safe/sqlite3.c	436;"	d	file:
__MTCHANNEL_H	mtchannel.h	2;"	d
__MTCHANNEL_H	safe/mtchannel.h	2;"	d
__MTJSON_H	mtjson.h	2;"	d
__MTJSON_H	safe/mtjson.h	2;"	d
__MTWAMPUTIL_H	mtwamputil.h	2;"	d
__MTWAMP_H	mtwamp.h	2;"	d
__MTWAMP_H	safe/mtwamp.h	2;"	d
__MTWEBSOCKET_H	mtwebsocket.h	2;"	d
__MTWEBSOCKET_H	safe/mtwebsocket.h	2;"	d
__declspec	safe/sqlite3.c	/^  __declspec(naked) __inline sqlite_uint64 __cdecl sqlite3Hwtime(void){$/;"	f
_bNoteInhibit	safe/spider.133.c	/^static char _bNoteInhibit = 0;$/;"	v	file:
_bNoteInhibit	safe/spider.135.c	/^static char _bNoteInhibit = 0;$/;"	v	file:
_bNoteInhibit	safe/spider.200.c	/^static char _bNoteInhibit = 0;$/;"	v	file:
_bNoteInhibit	safe/spider.203.c	/^static char _bNoteInhibit = 0;$/;"	v	file:
_bNoteInhibit	safe/spider.204.c	/^static char _bNoteInhibit = 0;$/;"	v	file:
_bNoteInhibit	safe/spider.210.c	/^static char _bNoteInhibit = 0;$/;"	v	file:
_bPackXML	safe/spider.133.c	/^static int _bPackXML = 0;					\/\/ 1 to pack XML sent to application$/;"	v	file:
_bPackXML	safe/spider.135.c	/^static int _bPackXML = 0;					\/\/ 1 to pack XML sent to application$/;"	v	file:
_bPackXML	safe/spider.200.c	/^static int _bPackXML = 0;					\/\/ 1 to pack XML sent to application$/;"	v	file:
_bPackXML	safe/spider.203.c	/^static int _bPackXML = 0;					\/\/ 1 to pack XML sent to application$/;"	v	file:
_bPackXML	safe/spider.204.c	/^static int _bPackXML = 0;					\/\/ 1 to pack XML sent to application$/;"	v	file:
_bPackXML	safe/spider.210.c	/^static int _bPackXML = 0;					\/\/ 1 to pack XML sent to application$/;"	v	file:
_bPackXML	safe/spider.c	/^static int _bPackXML = 0;					\/\/ 1 to pack XML sent to application$/;"	v	file:
_bPackXML	spider.c	/^static int _bPackXML = 0;					\/\/ 1 to pack XML sent to application$/;"	v	file:
_contract_DirTime	safe/spider.210.c	/^time_t _contract_DirTime = 0;				\/\/ Date time of \/usr\/mt\/spider\/etc\/contracts$/;"	v
_contract_DirTime	safe/spider.c	/^time_t _contract_DirTime = 0;				\/\/ Date time of \/usr\/mt\/spider\/etc\/contracts$/;"	v
_contract_DirTime	spider.c	/^time_t _contract_DirTime = 0;				\/\/ Date time of \/usr\/mt\/spider\/etc\/contracts$/;"	v
_contract_Errors	safe/spider.210.c	/^int _contract_Errors = 0;$/;"	v
_contract_Errors	safe/spider.c	/^int _contract_Errors = 0;$/;"	v
_contract_Errors	spider.c	/^int _contract_Errors = 0;$/;"	v
_contract_Filename	safe/spider.210.c	/^const char *_contract_Filename[CONTRACT_INCLUDE];$/;"	v
_contract_Filename	safe/spider.c	/^const char *_contract_Filename[CONTRACT_INCLUDE];$/;"	v
_contract_Filename	spider.c	/^const char *_contract_Filename[CONTRACT_INCLUDE];$/;"	v
_contract_Lineno	safe/spider.210.c	/^int _contract_Lineno[CONTRACT_INCLUDE];$/;"	v
_contract_Lineno	safe/spider.c	/^int _contract_Lineno[CONTRACT_INCLUDE];$/;"	v
_contract_Lineno	spider.c	/^int _contract_Lineno[CONTRACT_INCLUDE];$/;"	v
_contract_fp	safe/spider.210.c	/^FILE *_contract_fp[CONTRACT_INCLUDE];$/;"	v
_contract_fp	safe/spider.c	/^FILE *_contract_fp[CONTRACT_INCLUDE];$/;"	v
_contract_fp	spider.c	/^FILE *_contract_fp[CONTRACT_INCLUDE];$/;"	v
_contract_stackpos	safe/spider.210.c	/^int _contract_stackpos = 0;$/;"	v
_contract_stackpos	safe/spider.c	/^int _contract_stackpos = 0;$/;"	v
_contract_stackpos	spider.c	/^int _contract_stackpos = 0;$/;"	v
_envp	safe/spider.c	/^static const char **_envp = NULL;$/;"	v	file:
_envp	spider.c	/^static const char **_envp = NULL;$/;"	v	file:
_file_map	safe/spider.203.c	/^SSMAP *_file_map = NULL;$/;"	v
_file_map	safe/spider.204.c	/^SSMAP *_file_map = NULL;$/;"	v
_file_map	safe/spider.210.c	/^SSMAP *_file_map = NULL;$/;"	v
_file_map	safe/spider.c	/^SSMAP *_file_map = NULL;$/;"	v
_file_map	spider.c	/^SSMAP *_file_map = NULL;$/;"	v
_fts3ht	safe/sqlite3.c	/^  struct _fts3ht {        \/* the hash table *\/$/;"	s	struct:Fts3Hash	file:
_ht	safe/sqlite3.c	/^  struct _ht {              \/* the hash table *\/$/;"	s	struct:Hash	file:
_id	safe/spider.133.c	/^static const char _id[] = "@(#)SPIDER version " VERSION " compiled " __DATE__ " at " __TIME__;$/;"	v	file:
_id	safe/spider.135.c	/^static const char _id[] = "@(#)SPIDER version " VERSION " compiled " __DATE__ " at " __TIME__;$/;"	v	file:
_id	safe/spider.200.c	/^static const char _id[] = "@(#)SPIDER version " VERSION " compiled " __DATE__ " at " __TIME__;$/;"	v	file:
_id	safe/spider.203.c	/^static const char _id[] = "@(#)SPIDER version " VERSION " (" OS ") compiled " __DATE__ " at " __TIME__;$/;"	v	file:
_id	safe/spider.204.c	/^static const char _id[] = "@(#)SPIDER version " VERSION " (" OS ") compiled " __DATE__ " at " __TIME__;$/;"	v	file:
_id	safe/spider.210.c	/^static const char _id[] = "@(#)SPIDER version " VERSION " (" OS ") compiled " __DATE__ " at " __TIME__;$/;"	v	file:
_id	safe/spider.c	/^static const char _id[] = "@(#)SPIDER version " VERSION " (" OS ") compiled " __DATE__ " at " __TIME__;$/;"	v	file:
_id	spider.c	/^static const char _id[] = "@(#)SPIDER version " VERSION " (" OS ") compiled " __DATE__ " at " __TIME__;$/;"	v	file:
_info_map	safe/spider.203.c	/^SSMAP *_info_map = NULL;$/;"	v
_info_map	safe/spider.204.c	/^SSMAP *_info_map = NULL;$/;"	v
_info_map	safe/spider.210.c	/^SSMAP *_info_map = NULL;$/;"	v
_info_map	safe/spider.c	/^SSMAP *_info_map = NULL;$/;"	v
_info_map	spider.c	/^SSMAP *_info_map = NULL;$/;"	v
_nAlarmNumber	safe/spider.133.c	/^static int _nAlarmNumber = 0;						\/\/ Alarm number - 0 disables returning long jump when timer triggers$/;"	v	file:
_nAlarmNumber	safe/spider.135.c	/^static int _nAlarmNumber = 0;						\/\/ Alarm number - 0 disables returning long jump when timer triggers$/;"	v	file:
_nAlarmNumber	safe/spider.200.c	/^static int _nAlarmNumber = 0;						\/\/ Alarm number - 0 disables returning long jump when timer triggers$/;"	v	file:
_nAlarmNumber	safe/spider.203.c	/^static int _nAlarmNumber = 0;						\/\/ Alarm number - 0 disables returning long jump when timer triggers$/;"	v	file:
_nAlarmNumber	safe/spider.204.c	/^static int _nAlarmNumber = 0;						\/\/ Alarm number - 0 disables returning long jump when timer triggers$/;"	v	file:
_nAlarmNumber	safe/spider.210.c	/^static int _nAlarmNumber = 0;						\/\/ Alarm number - 0 disables returning long jump when timer triggers$/;"	v	file:
_nAlarmNumber	safe/spider.c	/^static int _nAlarmNumber = 0;						\/\/ Alarm number - 0 disables returning long jump when timer triggers$/;"	v	file:
_nAlarmNumber	spider.c	/^static int _nAlarmNumber = 0;						\/\/ Alarm number - 0 disables returning long jump when timer triggers$/;"	v	file:
_nDroppedCount	safe/spider.133.c	/^static int _nDroppedCount = 0;					\/\/ Number of dropped files picked up$/;"	v	file:
_nDroppedCount	safe/spider.135.c	/^static int _nDroppedCount = 0;					\/\/ Number of dropped files picked up$/;"	v	file:
_nDroppedCount	safe/spider.200.c	/^static int _nDroppedCount = 0;					\/\/ Number of dropped files picked up$/;"	v	file:
_nDroppedCount	safe/spider.203.c	/^static int _nDroppedCount = 0;					\/\/ Number of dropped files picked up$/;"	v	file:
_nDroppedCount	safe/spider.204.c	/^static int _nDroppedCount = 0;					\/\/ Number of dropped files picked up$/;"	v	file:
_nDroppedCount	safe/spider.210.c	/^static int _nDroppedCount = 0;					\/\/ Number of dropped files picked up$/;"	v	file:
_nDroppedCount	safe/spider.c	/^static int _nDroppedCount = 0;					\/\/ Number of dropped files picked up$/;"	v	file:
_nDroppedCount	spider.c	/^static int _nDroppedCount = 0;					\/\/ Number of dropped files picked up$/;"	v	file:
_nError	safe/spider.133.c	/^int _nError=0;$/;"	v
_nError	safe/spider.135.c	/^int _nError=0;$/;"	v
_nError	safe/spider.200.c	/^int _nError=0;$/;"	v
_nError	safe/spider.203.c	/^int _nError=0;$/;"	v
_nError	safe/spider.204.c	/^int _nError=0;$/;"	v
_nError	safe/spider.210.c	/^int _nError=0;$/;"	v
_nError	safe/spider.c	/^int _nError=0;$/;"	v
_nError	spider.c	/^static int _nError=0;$/;"	v	file:
_nHttpStatusCode	safe/spider.133.c	/^int _nHttpStatusCode = 0;$/;"	v
_nHttpStatusCode	safe/spider.135.c	/^int _nHttpStatusCode = 0;$/;"	v
_nHttpStatusCode	safe/spider.200.c	/^int _nHttpStatusCode = 0;$/;"	v
_nHttpStatusCode	safe/spider.203.c	/^int _nHttpStatusCode = 0;$/;"	v
_nHttpStatusCode	safe/spider.204.c	/^int _nHttpStatusCode = 0;$/;"	v
_nHttpStatusCode	safe/spider.210.c	/^int _nHttpStatusCode = 0;$/;"	v
_nHttpStatusCode	safe/spider.c	/^int _nHttpStatusCode = 0;$/;"	v
_nHttpStatusCode	spider.c	/^int _nHttpStatusCode = 0;$/;"	v
_nIncomingPort	safe/spider.133.c	/^static int _nIncomingPort = 0;					\/\/ Port on which we accepted the message$/;"	v	file:
_nIncomingPort	safe/spider.135.c	/^static int _nIncomingPort = 0;					\/\/ Port on which we accepted the message$/;"	v	file:
_nIncomingPort	safe/spider.200.c	/^static int _nIncomingPort = 0;					\/\/ Port on which we accepted the message$/;"	v	file:
_nIncomingPort	safe/spider.203.c	/^static int _nIncomingPort = 0;					\/\/ Port on which we accepted the message$/;"	v	file:
_nIncomingPort	safe/spider.204.c	/^static int _nIncomingPort = 0;					\/\/ Port on which we accepted the message$/;"	v	file:
_nIncomingPort	safe/spider.210.c	/^static int _nIncomingPort = 0;					\/\/ Port on which we accepted the message$/;"	v	file:
_nIncomingPort	safe/spider.c	/^static int _nIncomingPort = 0;					\/\/ Port on which we accepted the message$/;"	v	file:
_nIncomingPort	spider.c	/^static int _nIncomingPort = 0;					\/\/ Port on which we accepted the message$/;"	v	file:
_nIncomingProtocol	safe/spider.133.c	/^static int _nIncomingProtocol = 0;				\/\/ Protocol used to connect$/;"	v	file:
_nIncomingProtocol	safe/spider.135.c	/^static int _nIncomingProtocol = 0;				\/\/ Protocol used to connect$/;"	v	file:
_nIncomingProtocol	safe/spider.200.c	/^static int _nIncomingProtocol = 0;				\/\/ Protocol used to connect$/;"	v	file:
_nIncomingProtocol	safe/spider.203.c	/^static int _nIncomingProtocol = 0;				\/\/ Protocol used to connect$/;"	v	file:
_nIncomingProtocol	safe/spider.204.c	/^static int _nIncomingProtocol = 0;				\/\/ Protocol used to connect$/;"	v	file:
_nIncomingProtocol	safe/spider.210.c	/^static int _nIncomingProtocol = 0;				\/\/ Protocol used to connect$/;"	v	file:
_nIncomingProtocol	safe/spider.c	/^static int _nIncomingProtocol = 0;				\/\/ Protocol used to connect$/;"	v	file:
_nIncomingProtocol	spider.c	/^static int _nIncomingProtocol = 0;				\/\/ Protocol used to connect$/;"	v	file:
_nSenderPort	safe/spider.133.c	/^static int _nSenderPort = 0;					\/\/ Port from which incoming message came$/;"	v	file:
_nSenderPort	safe/spider.135.c	/^static int _nSenderPort = 0;					\/\/ Port from which incoming message came$/;"	v	file:
_nSenderPort	safe/spider.200.c	/^static int _nSenderPort = 0;					\/\/ Port from which incoming message came$/;"	v	file:
_nSenderPort	safe/spider.203.c	/^static int _nSenderPort = 0;					\/\/ Port from which incoming message came$/;"	v	file:
_nSenderPort	safe/spider.204.c	/^static int _nSenderPort = 0;					\/\/ Port from which incoming message came$/;"	v	file:
_nSenderPort	safe/spider.210.c	/^static int _nSenderPort = 0;					\/\/ Port from which incoming message came$/;"	v	file:
_nSenderPort	safe/spider.c	/^static int _nSenderPort = 0;					\/\/ Port from which incoming message came$/;"	v	file:
_nSenderPort	spider.c	/^static int _nSenderPort = 0;					\/\/ Port from which incoming message came$/;"	v	file:
_nStartTime	safe/spider.133.c	/^static time_t _nStartTime;				\/\/ Time server started$/;"	v	file:
_nStartTime	safe/spider.135.c	/^static time_t _nStartTime;				\/\/ Time server started$/;"	v	file:
_nStartTime	safe/spider.200.c	/^static time_t _nStartTime;				\/\/ Time server started$/;"	v	file:
_nStartTime	safe/spider.203.c	/^static time_t _nStartTime;				\/\/ Time server started$/;"	v	file:
_nStartTime	safe/spider.204.c	/^static time_t _nStartTime;				\/\/ Time server started$/;"	v	file:
_nStartTime	safe/spider.210.c	/^static time_t _nStartTime;				\/\/ Time server started$/;"	v	file:
_nStartTime	safe/spider.c	/^static time_t _nStartTime;				\/\/ Time server started$/;"	v	file:
_nStartTime	spider.c	/^static time_t _nStartTime;				\/\/ Time server started$/;"	v	file:
_nTotalConnections	safe/spider.133.c	/^static int _nTotalConnections = 0;				\/\/ Total connections accepted$/;"	v	file:
_nTotalConnections	safe/spider.135.c	/^static int _nTotalConnections = 0;				\/\/ Total connections accepted$/;"	v	file:
_nTotalConnections	safe/spider.200.c	/^static int _nTotalConnections = 0;				\/\/ Total connections accepted$/;"	v	file:
_nTotalConnections	safe/spider.203.c	/^static int _nTotalConnections = 0;				\/\/ Total connections accepted$/;"	v	file:
_nTotalConnections	safe/spider.204.c	/^static int _nTotalConnections = 0;				\/\/ Total connections accepted$/;"	v	file:
_nTotalConnections	safe/spider.210.c	/^static int _nTotalConnections = 0;				\/\/ Total connections accepted$/;"	v	file:
_nTotalConnections	safe/spider.c	/^static int _nTotalConnections = 0;				\/\/ Total connections accepted$/;"	v	file:
_nTotalConnections	spider.c	/^static int _nTotalConnections = 0;				\/\/ Total connections accepted$/;"	v	file:
_s3_Service	safe/spider.c	/^S3 *_s3_Service = NULL;$/;"	v
_s3_Usage	safe/spider.203.c	/^S3 *_s3_Usage = NULL;$/;"	v
_s3_Usage	safe/spider.204.c	/^S3 *_s3_Usage = NULL;$/;"	v
_s3_Usage	safe/spider.210.c	/^S3 *_s3_Usage = NULL;$/;"	v
_s3_Usage	safe/spider.c	/^S3 *_s3_Usage = NULL;$/;"	v
_s3_Usage	spider.c	/^S3 *_s3_Usage = NULL;$/;"	v
_sqliteZone_	safe/sqlite3.c	/^static malloc_zone_t* _sqliteZone_;$/;"	v	file:
_szCtxError	safe/spider.133.c	/^static char *_szCtxError = NULL;$/;"	v	file:
_szCtxError	safe/spider.135.c	/^static char *_szCtxError = NULL;$/;"	v	file:
_szCtxError	safe/spider.200.c	/^static char *_szCtxError = NULL;$/;"	v	file:
_szCtxError	safe/spider.203.c	/^static char *_szCtxError = NULL;$/;"	v	file:
_szCtxError	safe/spider.204.c	/^static char *_szCtxError = NULL;$/;"	v	file:
_szCtxError	safe/spider.210.c	/^static char *_szCtxError = NULL;$/;"	v	file:
_szCtxError	safe/spider.c	/^static char *_szCtxError = NULL;$/;"	v	file:
_szCtxError	spider.c	/^static char *_szCtxError = NULL;$/;"	v	file:
_szDir	safe/spider.133.c	/^static char *_szDir = NULL;$/;"	v	file:
_szDir	safe/spider.135.c	/^static char *_szDir = NULL;$/;"	v	file:
_szDir	safe/spider.200.c	/^static char *_szDir = NULL;$/;"	v	file:
_szError	safe/spider.133.c	/^const char *_szError = NULL;$/;"	v
_szError	safe/spider.135.c	/^const char *_szError = NULL;$/;"	v
_szError	safe/spider.200.c	/^const char *_szError = NULL;$/;"	v
_szError	safe/spider.203.c	/^const char *_szError = NULL;$/;"	v
_szError	safe/spider.204.c	/^const char *_szError = NULL;$/;"	v
_szError	safe/spider.210.c	/^const char *_szError = NULL;$/;"	v
_szError	safe/spider.c	/^const char *_szError = NULL;$/;"	v
_szError	spider.c	/^static const char *_szError = NULL;$/;"	v	file:
_szHttpStatusText	safe/spider.133.c	/^const char *_szHttpStatusText = NULL;$/;"	v
_szHttpStatusText	safe/spider.135.c	/^const char *_szHttpStatusText = NULL;$/;"	v
_szHttpStatusText	safe/spider.200.c	/^const char *_szHttpStatusText = NULL;$/;"	v
_szHttpStatusText	safe/spider.203.c	/^const char *_szHttpStatusText = NULL;$/;"	v
_szHttpStatusText	safe/spider.204.c	/^const char *_szHttpStatusText = NULL;$/;"	v
_szHttpStatusText	safe/spider.210.c	/^const char *_szHttpStatusText = NULL;$/;"	v
_szHttpStatusText	safe/spider.c	/^const char *_szHttpStatusText = NULL;$/;"	v
_szHttpStatusText	spider.c	/^const char *_szHttpStatusText = NULL;$/;"	v
_szIncomingHost	safe/spider.133.c	/^static const char *_szIncomingHost = NULL;		\/\/ The host named in incoming HTTP header$/;"	v	file:
_szIncomingHost	safe/spider.135.c	/^static const char *_szIncomingHost = NULL;		\/\/ The host named in incoming HTTP header$/;"	v	file:
_szIncomingHost	safe/spider.200.c	/^static const char *_szIncomingHost = NULL;		\/\/ The host named in incoming HTTP header$/;"	v	file:
_szIncomingHost	safe/spider.203.c	/^static const char *_szIncomingHost = NULL;		\/\/ The host named in incoming HTTP header$/;"	v	file:
_szIncomingHost	safe/spider.204.c	/^static const char *_szIncomingHost = NULL;		\/\/ The host named in incoming HTTP header$/;"	v	file:
_szIncomingHost	safe/spider.210.c	/^static const char *_szIncomingHost = NULL;		\/\/ The host named in incoming HTTP header$/;"	v	file:
_szIncomingHost	safe/spider.c	/^static const char *_szIncomingHost = NULL;		\/\/ The host named in incoming HTTP header$/;"	v	file:
_szIncomingHost	spider.c	/^static const char *_szIncomingHost = NULL;		\/\/ The host named in incoming HTTP header$/;"	v	file:
_szIncomingIp	safe/spider.133.c	/^static const char *_szIncomingIp = NULL;		\/\/ The IP address on which we accepted the connection$/;"	v	file:
_szIncomingIp	safe/spider.135.c	/^static const char *_szIncomingIp = NULL;		\/\/ The IP address on which we accepted the connection$/;"	v	file:
_szIncomingIp	safe/spider.200.c	/^static const char *_szIncomingIp = NULL;		\/\/ The IP address on which we accepted the connection$/;"	v	file:
_szIncomingIp	safe/spider.203.c	/^static const char *_szIncomingIp = NULL;		\/\/ The IP address on which we accepted the connection$/;"	v	file:
_szIncomingIp	safe/spider.204.c	/^static const char *_szIncomingIp = NULL;		\/\/ The IP address on which we accepted the connection$/;"	v	file:
_szIncomingIp	safe/spider.210.c	/^static const char *_szIncomingIp = NULL;		\/\/ The IP address on which we accepted the connection$/;"	v	file:
_szIncomingIp	safe/spider.c	/^static const char *_szIncomingIp = NULL;		\/\/ The IP address on which we accepted the connection$/;"	v	file:
_szIncomingIp	spider.c	/^static const char *_szIncomingIp = NULL;		\/\/ The IP address on which we accepted the connection$/;"	v	file:
_szPassword	safe/spider.133.c	/^static const char *_szPassword;$/;"	v	file:
_szPassword	safe/spider.135.c	/^static const char *_szPassword;$/;"	v	file:
_szPassword	safe/spider.200.c	/^static const char *_szPassword = NULL;$/;"	v	file:
_szPassword	safe/spider.203.c	/^static const char *_szPassword = NULL;$/;"	v	file:
_szPassword	safe/spider.204.c	/^static const char *_szPassword = NULL;$/;"	v	file:
_szPassword	safe/spider.210.c	/^static const char *_szPassword = NULL;$/;"	v	file:
_szPassword	safe/spider.c	/^static const char *_szPassword = NULL;$/;"	v	file:
_szPassword	spider.c	/^static const char *_szPassword = NULL;$/;"	v	file:
_szSenderIp	safe/spider.133.c	/^static const char *_szSenderIp = NULL;			\/\/ IP of the remote incoming connection$/;"	v	file:
_szSenderIp	safe/spider.135.c	/^static const char *_szSenderIp = NULL;			\/\/ IP of the remote incoming connection$/;"	v	file:
_szSenderIp	safe/spider.200.c	/^static const char *_szSenderIp = NULL;			\/\/ IP of the remote incoming connection$/;"	v	file:
_szSenderIp	safe/spider.203.c	/^static const char *_szSenderIp = NULL;			\/\/ IP of the remote incoming connection$/;"	v	file:
_szSenderIp	safe/spider.204.c	/^static const char *_szSenderIp = NULL;			\/\/ IP of the remote incoming connection$/;"	v	file:
_szSenderIp	safe/spider.210.c	/^static const char *_szSenderIp = NULL;			\/\/ IP of the remote incoming connection$/;"	v	file:
_szSenderIp	safe/spider.c	/^static const char *_szSenderIp = NULL;			\/\/ IP of the remote incoming connection$/;"	v	file:
_szSenderIp	spider.c	/^static const char *_szSenderIp = NULL;			\/\/ IP of the remote incoming connection$/;"	v	file:
_tChildStart	safe/spider.133.c	/^static time_t _tChildStart=0;						\/\/ Child start time for summary$/;"	v	file:
_tChildStart	safe/spider.135.c	/^static time_t _tChildStart=0;						\/\/ Child start time for summary$/;"	v	file:
_tChildStart	safe/spider.200.c	/^static time_t _tChildStart=0;						\/\/ Child start time for summary$/;"	v	file:
_tChildStart	safe/spider.203.c	/^static time_t _tChildStart=0;						\/\/ Child start time for summary$/;"	v	file:
_tChildStart	safe/spider.204.c	/^static time_t _tChildStart=0;						\/\/ Child start time for summary$/;"	v	file:
_tChildStart	safe/spider.210.c	/^static time_t _tChildStart=0;						\/\/ Child start time for summary$/;"	v	file:
_tChildStart	safe/spider.c	/^static time_t _tChildStart=0;						\/\/ Child start time for summary$/;"	v	file:
_tChildStart	spider.c	/^static time_t _tChildStart=0;						\/\/ Child start time for summary$/;"	v	file:
a	safe/sqlite3.c	/^  FuncDef *a[23];       \/* Hash table for functions *\/$/;"	m	struct:FuncDefHash	file:
a	safe/sqlite3.c	/^  WhereLevel a[1];               \/* Information about each nest loop in WHERE *\/$/;"	m	struct:WhereInfo	file:
a	safe/sqlite3.c	/^  WhereTerm *a;            \/* Each a[] describes a term of the WHERE cluase *\/$/;"	m	struct:WhereClause	file:
a	safe/sqlite3.c	/^  char *a;                        \/* Pointer to allocation *\/$/;"	m	struct:Blob	file:
a	safe/sqlite3.c	/^  } *a;                     \/* An array of samples *\/$/;"	m	struct:Stat3Accum	file:
a	safe/sqlite3.c	/^  } *a;                  \/* Alloc a power of two greater or equal to nExpr *\/$/;"	m	struct:ExprList	file:
a	safe/sqlite3.c	/^  } *a;$/;"	m	struct:IdList	file:
a	safe/sqlite3.c	/^  } a[1];             \/* One entry for each identifier on the list *\/$/;"	m	struct:SrcList	file:
a	safe/sqlite3.c	/^struct TrigEvent { int a; IdList * b; };$/;"	m	struct:TrigEvent	file:
aAction	safe/sqlite3.c	/^  u8 aAction[2];          \/* ON DELETE and ON UPDATE actions, respectively *\/$/;"	m	struct:FKey	file:
aAlias	safe/sqlite3.c	/^  int *aAlias;              \/* Register used to hold aliased result *\/$/;"	m	struct:Parse	file:
aAll	safe/sqlite3.c	/^  char *aAll;                    \/* Array containing doclist (or NULL) *\/$/;"	m	struct:Fts3Doclist	file:
aAlloc	safe/sqlite3.c	/^  u8 *aAlloc;                     \/* Allocated space *\/$/;"	m	struct:VdbeSorterIter	file:
aBitmap	safe/sqlite3.c	/^    BITVEC_TELEM aBitmap[BITVEC_NELEM];    \/* Bitmap representation *\/$/;"	m	union:Bitvec::<anonymous>	file:
aBuffer	safe/sqlite3.c	/^  char *aBuffer;                  \/* Buffer to merge doclists in *\/$/;"	m	struct:Fts3MultiSegReader	file:
aCellIdx	safe/sqlite3.c	/^  u8 *aCellIdx;        \/* The cell index area *\/$/;"	m	struct:MemPage	file:
aChar	safe/sqlite3.c	/^  UChar *aChar;               \/* Copy of input using utf-16 encoding *\/$/;"	m	struct:IcuCursor	file:
aCksum	safe/sqlite3.c	/^  u32 aCksum[2];                  \/* Checksum over all prior fields *\/$/;"	m	struct:WalIndexHdr	file:
aCol	safe/sqlite3.c	/^  Column *aCol;        \/* Information about each column *\/$/;"	m	struct:Table	file:
aCol	safe/sqlite3.c	/^  } *aCol;$/;"	m	struct:AggInfo	file:
aCol	safe/sqlite3.c	/^  } aCol[1];        \/* One entry for each of nCol column s *\/$/;"	m	struct:FKey	file:
aColCache	safe/sqlite3.c	/^  } aColCache[SQLITE_N_COLCACHE];  \/* One for each column cache entry *\/$/;"	m	struct:Parse	file:
aColName	safe/sqlite3.c	/^  Mem *aColName;          \/* Column names to return *\/$/;"	m	struct:Vdbe	file:
aColl	safe/sqlite3.c	/^  CollSeq *aColl[1];  \/* Collating sequence for each term of the key *\/$/;"	m	struct:KeyInfo	file:
aCollSeq	safe/sqlite3.c	/^  Hash aCollSeq;                \/* All collating sequences *\/$/;"	m	struct:sqlite3	file:
aColmask	safe/sqlite3.c	/^  u32 aColmask[2];        \/* Masks of old.*, new.* columns accessed *\/$/;"	m	struct:TriggerPrg	file:
aConstraint	safe/sqlite3.c	/^  RtreeConstraint *aConstraint;     \/* Search constraints. *\/$/;"	m	struct:RtreeCursor	file:
aConstraint	safe/sqlite3.c	/^  } *aConstraint;            \/* Table of WHERE clause constraints *\/$/;"	m	struct:sqlite3_index_info	file:
aConstraint	safe/sqlite3.h	/^  } *aConstraint;            \/* Table of WHERE clause constraints *\/$/;"	m	struct:sqlite3_index_info
aConstraintUsage	safe/sqlite3.c	/^  } *aConstraintUsage;$/;"	m	struct:sqlite3_index_info	file:
aConstraintUsage	safe/sqlite3.h	/^  } *aConstraintUsage;$/;"	m	struct:sqlite3_index_info
aCoord	safe/sqlite3.c	/^  RtreeCoord aCoord[RTREE_MAX_DIMENSIONS*2];$/;"	m	struct:RtreeCell	file:
aCounter	safe/sqlite3.c	/^  int aCounter[3];        \/* Counters used by sqlite3_stmt_status() *\/$/;"	m	struct:Vdbe	file:
aCtrl	safe/sqlite3.c	/^  u8 *aCtrl;$/;"	m	struct:Mem5Global	file:
aData	safe/sqlite3.c	/^  char *aData;                    \/* Node data *\/$/;"	m	struct:SegmentNode	file:
aData	safe/sqlite3.c	/^  char *aData;                    \/* Pointer to block from malloc() *\/$/;"	m	struct:SegmentWriter	file:
aData	safe/sqlite3.c	/^  char *aData;$/;"	m	struct:PendingList	file:
aData	safe/sqlite3.c	/^  u8 *aData;           \/* Pointer to disk image of the page data *\/$/;"	m	struct:MemPage	file:
aDataEnd	safe/sqlite3.c	/^  u8 *aDataEnd;        \/* One byte past the end of usable data *\/$/;"	m	struct:MemPage	file:
aDb	safe/sqlite3.c	/^  Db *aDb;                      \/* All backends *\/$/;"	m	struct:sqlite3	file:
aDbStatic	safe/sqlite3.c	/^  Db aDbStatic[2];              \/* Static space for the 2 default backends *\/$/;"	m	struct:sqlite3	file:
aDigits	safe/sqlite3.c	/^static const char aDigits[] = "0123456789ABCDEF0123456789abcdef";$/;"	v	file:
aDoclist	safe/sqlite3.c	/^  char *aDoclist;                 \/* List of docids for full-text queries *\/$/;"	m	struct:Fts3Cursor	file:
aDoclist	safe/sqlite3.c	/^  char *aDoclist;                 \/* Pointer to doclist buffer *\/$/;"	m	struct:Fts3MultiSegReader	file:
aDoclist	safe/sqlite3.c	/^  char *aDoclist;                 \/* Pointer to doclist of current entry *\/$/;"	m	struct:Fts3SegReader	file:
aDoclist	safe/sqlite3.c	/^  const char *aDoclist;           \/* Pointer to doclist *\/$/;"	m	struct:NodeReader	file:
aEntry	safe/sqlite3.c	/^  struct RowSetEntry aEntry[ROWSET_ENTRY_PER_CHUNK]; \/* Allocated entries *\/$/;"	m	struct:RowSetChunk	file:
aExt	safe/sqlite3.c	/^  void (**aExt)(void);   \/* Pointers to the extension init functions *\/$/;"	m	struct:sqlite3AutoExtList	file:
aExtension	safe/sqlite3.c	/^  void **aExtension;            \/* Array of shared library handles *\/$/;"	m	struct:sqlite3	file:
aFrameCksum	safe/sqlite3.c	/^  u32 aFrameCksum[2];             \/* Checksum of last frame in log *\/$/;"	m	struct:WalIndexHdr	file:
aFunc	safe/sqlite3.c	/^  FuncDefHash aFunc;            \/* Hash table of connection functions *\/$/;"	m	struct:sqlite3	file:
aFunc	safe/sqlite3.c	/^  } *aFunc;$/;"	m	struct:AggInfo	file:
aHardLimit	safe/sqlite3.c	/^static const int aHardLimit[] = {$/;"	v	file:
aHash	safe/sqlite3.c	/^    u32 aHash[BITVEC_NINT];      \/* Hash table representation *\/$/;"	m	union:Bitvec::<anonymous>	file:
aHash	safe/sqlite3.c	/^  RtreeNode *aHash[HASHSIZE]; \/* Hash table of in-memory nodes. *\/ $/;"	m	struct:Rtree	file:
aInLoop	safe/sqlite3.c	/^      } *aInLoop;           \/* Information about each nested IN operator *\/$/;"	m	struct:WhereLevel::<anonymous>::<anonymous>	file:
aIndent	safe/sqlite3.c	/^  u16 aIndent[100];  \/* Levels of indentation *\/$/;"	m	struct:Explain	file:
aIndex	safe/sqlite3.c	/^    ht_slot *aIndex;              \/* i0, i1, i2... such that aPgno[iN] ascend *\/$/;"	m	struct:WalIterator::WalSegment	file:
aIndex	safe/sqlite3.c	/^  } *aIndex;$/;"	m	struct:Fts3Table	file:
aInput	safe/sqlite3.c	/^  const unsigned char *aInput;    \/* Input text being tokenized *\/$/;"	m	struct:unicode_cursor	file:
aIter	safe/sqlite3.c	/^  VdbeSorterIter *aIter;          \/* Array of iterators to merge *\/$/;"	m	struct:VdbeSorter	file:
aJournalMagic	safe/sqlite3.c	/^static const unsigned char aJournalMagic[] = {$/;"	v	file:
aKey	safe/sqlite3.c	/^  u8 *aKey;                       \/* Pointer to current key *\/$/;"	m	struct:VdbeSorterIter	file:
aLabel	safe/sqlite3.c	/^  int *aLabel;            \/* Space to hold the labels *\/$/;"	m	struct:Vdbe	file:
aLimit	safe/sqlite3.c	/^  int aLimit[SQLITE_N_LIMIT];   \/* Limits *\/$/;"	m	struct:sqlite3	file:
aMI	safe/sqlite3.c	/^  u32 *aMI;$/;"	m	struct:Fts3Expr	file:
aMatchinfo	safe/sqlite3.c	/^  u32 *aMatchinfo;                \/* Information about most recent match *\/$/;"	m	struct:Fts3Cursor	file:
aMatchinfo	safe/sqlite3.c	/^  u32 *aMatchinfo;                \/* Pre-allocated buffer *\/$/;"	m	struct:MatchInfo	file:
aMem	safe/sqlite3.c	/^  Mem *aMem;              \/* Array of memory cells for parent frame *\/$/;"	m	struct:VdbeFrame	file:
aMem	safe/sqlite3.c	/^  Mem *aMem;              \/* The memory locations *\/$/;"	m	struct:Vdbe	file:
aMem	safe/sqlite3.c	/^  Mem *aMem;          \/* Values *\/$/;"	m	struct:UnpackedRecord	file:
aModule	safe/sqlite3.c	/^  Hash aModule;                 \/* populated by sqlite3_create_module() *\/$/;"	m	struct:sqlite3	file:
aNode	safe/sqlite3.c	/^  char *aNode;                    \/* Pointer to node data (or NULL) *\/$/;"	m	struct:Fts3SegReader	file:
aNode	safe/sqlite3.c	/^  const char *aNode;$/;"	m	struct:NodeReader	file:
aNodeWriter	safe/sqlite3.c	/^  NodeWriter aNodeWriter[FTS_MAX_APPENDABLE_HEIGHT];$/;"	m	struct:IncrmergeWriter	file:
aOffset	safe/sqlite3.c	/^  int *aOffset;               \/* Offsets of each character in utf-8 input *\/$/;"	m	struct:IcuCursor	file:
aOffset	safe/sqlite3.c	/^  u32 *aOffset;         \/* Cached offsets to the start of each columns data *\/$/;"	m	struct:VdbeCursor	file:
aOnceFlag	safe/sqlite3.c	/^  u8 *aOnceFlag;          \/* Array of OP_Once flags for parent frame *\/$/;"	m	struct:VdbeFrame	file:
aOnceFlag	safe/sqlite3.c	/^  u8 *aOnceFlag;          \/* Flags for OP_Once *\/$/;"	m	struct:Vdbe	file:
aOp	safe/sqlite3.c	/^  Op *aOp;                \/* Program instructions for parent frame *\/$/;"	m	struct:VdbeFrame	file:
aOp	safe/sqlite3.c	/^  Op *aOp;                \/* Space to hold the virtual machine's program *\/$/;"	m	struct:Vdbe	file:
aOp	safe/sqlite3.c	/^  VdbeOp *aOp;                  \/* Array of opcodes for sub-program *\/$/;"	m	struct:SubProgram	file:
aOrderBy	safe/sqlite3.c	/^  } *aOrderBy;               \/* The ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	file:
aOrderBy	safe/sqlite3.h	/^  } *aOrderBy;               \/* The ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info
aOverflow	safe/sqlite3.c	/^  Pgno *aOverflow;          \/* Cache of overflow page locations *\/$/;"	m	struct:BtCursor	file:
aPadding	safe/sqlite3.c	/^  char aPadding[32];$/;"	m	struct:unixFile	file:
aParam	safe/sqlite3.c	/^  RtreeDValue aParam[1];$/;"	m	struct:RtreeMatchArg	file:
aParam	safe/sqlite3.c	/^  double *aParam;                 \/* Parameters passed to SQL geom function *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
aParam	safe/sqlite3.h	/^  double *aParam;                 \/* Parameters passed to SQL geom function *\/$/;"	m	struct:sqlite3_rtree_geometry
aPgRef	safe/sqlite3.c	/^  u8 *aPgRef;       \/* 1 bit per page in the db (see above) *\/$/;"	m	struct:IntegrityCk	file:
aPgno	safe/sqlite3.c	/^    u32 *aPgno;                   \/* Array of page numbers. *\/$/;"	m	struct:WalIterator::WalSegment	file:
aPhrase	safe/sqlite3.c	/^  SnippetPhrase *aPhrase;         \/* Array of size nPhrase *\/$/;"	m	struct:SnippetIter	file:
aPid	safe/spider.133.c	/^static childinfo_t *aPid = NULL;$/;"	v	file:
aPid	safe/spider.135.c	/^static childinfo_t *aPid = NULL;$/;"	v	file:
aPid	safe/spider.200.c	/^static childinfo_t *aPid = NULL;$/;"	v	file:
aPid	safe/spider.203.c	/^static childinfo_t *aPid = NULL;$/;"	v	file:
aPid	safe/spider.204.c	/^static childinfo_t *aPid = NULL;$/;"	v	file:
aPid	safe/spider.210.c	/^static childinfo_t *aPid = NULL;$/;"	v	file:
aPid	safe/spider.c	/^static childinfo_t *aPid = NULL;$/;"	v	file:
aPid	spider.c	/^static childinfo_t *aPid = NULL;$/;"	v	file:
aPool	safe/sqlite3.c	/^  Mem3Block *aPool;$/;"	m	struct:Mem3Global	file:
aPrefix	safe/sqlite3.c	/^static const char aPrefix[] = "-x0\\000X0";$/;"	v	file:
aReadMark	safe/sqlite3.c	/^  u32 aReadMark[WAL_NREADER];     \/* Reader marks *\/$/;"	m	struct:WalCkptInfo	file:
aRegion	safe/sqlite3.c	/^  } *aRegion;$/;"	m	struct:winShmNode	file:
aRow	safe/sqlite3.c	/^  u8 *aRow;             \/* Data for the current row, if all on one page *\/$/;"	m	struct:VdbeCursor	file:
aSalt	safe/sqlite3.c	/^  u32 aSalt[2];                   \/* Two salt values copied from WAL header *\/$/;"	m	struct:WalIndexHdr	file:
aSample	safe/sqlite3.c	/^  IndexSample *aSample;    \/* Samples of the left-most key *\/$/;"	m	struct:Index	file:
aSavepoint	safe/sqlite3.c	/^  PagerSavepoint *aSavepoint; \/* Array of active savepoints *\/$/;"	m	struct:Pager	file:
aSegment	safe/sqlite3.c	/^  } aSegment[1];                  \/* One for every 32KB page in the wal-index *\/$/;"	m	struct:WalIterator	file:
aSemName	safe/sqlite3.c	/^  char aSemName[MAX_PATHNAME+2];  \/* Name of that semaphore *\/$/;"	m	struct:unixInodeInfo	file:
aSortOrder	safe/sqlite3.c	/^  u8 *aSortOrder;     \/* Sort order for each column.  May be NULL *\/$/;"	m	struct:KeyInfo	file:
aSortOrder	safe/sqlite3.c	/^  u8 *aSortOrder;  \/* Array of size Index.nColumn. True==DESC, False==ASC *\/$/;"	m	struct:Index	file:
aStat	safe/sqlite3.c	/^  int aStat[3];               \/* Total cache hits, misses and writes *\/$/;"	m	struct:Pager	file:
aStat	safe/sqlite3.c	/^  } *aStat;$/;"	m	struct:Fts3auxCursor	file:
aStatic	safe/sqlite3.c	/^  WhereTerm aStatic[1];    \/* Initial static space for a[] *\/$/;"	m	struct:WhereClause	file:
aStatic	safe/sqlite3.c	/^  WhereTerm aStatic[8];    \/* Initial static space for a[] *\/$/;"	m	struct:WhereClause	file:
aStmt	safe/sqlite3.c	/^  sqlite3_stmt *aStmt[37];$/;"	m	struct:Fts3Table	file:
aSyscall	safe/sqlite3.c	/^} aSyscall[] = {$/;"	v	file:
aTableLock	safe/sqlite3.c	/^  TableLock *aTableLock; \/* Required table locks for shared-cache mode *\/$/;"	m	struct:Parse	file:
aTempReg	safe/sqlite3.c	/^  int aTempReg[8];     \/* Holding area for temporary registers *\/$/;"	m	struct:Parse	file:
aTerm	safe/sqlite3.c	/^  TermOffset *aTerm;$/;"	m	struct:TermOffsetCtx	file:
aToken	safe/sqlite3.c	/^  Fts3PhraseToken aToken[1]; \/* One entry for each token in the phrase *\/$/;"	m	struct:Fts3Phrase	file:
aTree	safe/sqlite3.c	/^  int *aTree;                     \/* Current state of incremental merge *\/$/;"	m	struct:VdbeSorter	file:
aType	safe/sqlite3.c	/^  u32 *aType;           \/* Type values for all entries in the record *\/$/;"	m	struct:VdbeCursor	file:
aVTrans	safe/sqlite3.c	/^  VTable **aVTrans;             \/* Virtual tables with open transactions *\/$/;"	m	struct:sqlite3	file:
aVar	safe/sqlite3.c	/^  Mem *aVar;              \/* Values for the OP_Variable opcode. *\/$/;"	m	struct:Vdbe	file:
aWalData	safe/sqlite3.c	/^  u32 aWalData[WAL_SAVEPOINT_NDATA];        \/* WAL savepoint context *\/$/;"	m	struct:PagerSavepoint	file:
aaOutput	safe/sqlite3.c	/^  char *aaOutput[16];             \/* Malloc'd output buffers *\/$/;"	m	struct:TermSelect	file:
absFunc	safe/sqlite3.c	/^static void absFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
accessPayload	safe/sqlite3.c	/^static int accessPayload($/;"	f	file:
actionName	safe/sqlite3.c	/^static const char *actionName(u8 action){$/;"	f	file:
activeCallMap	mtwamp.c	/^STATIC IDMAP *activeCallMap = NULL;							\/\/ Active calls - points to wamp_invokee_t$/;"	v
activeVdbeCnt	safe/sqlite3.c	/^  int activeVdbeCnt;            \/* Number of VDBEs currently executing *\/$/;"	m	struct:sqlite3	file:
addAggInfoColumn	safe/sqlite3.c	/^static int addAggInfoColumn(sqlite3 *db, AggInfo *pInfo){$/;"	f	file:
addAggInfoFunc	safe/sqlite3.c	/^static int addAggInfoFunc(sqlite3 *db, AggInfo *pInfo){$/;"	f	file:
addArgumentToVtab	safe/sqlite3.c	/^static void addArgumentToVtab(Parse *pParse){$/;"	f	file:
addColOffset	safe/sqlite3.c	/^  int addColOffset;    \/* Offset in CREATE TABLE stmt to add a new column *\/$/;"	m	struct:Table	file:
addModuleArgument	safe/sqlite3.c	/^static void addModuleArgument(sqlite3 *db, Table *pTable, char *zArg){$/;"	f	file:
addToBlockedList	safe/sqlite3.c	/^static void addToBlockedList(sqlite3 *db){$/;"	f	file:
addToSavepointBitvecs	safe/sqlite3.c	/^static int addToSavepointBitvecs(Pager *pPager, Pgno pgno){$/;"	f	file:
addToVTrans	safe/sqlite3.c	/^static void addToVTrans(sqlite3 *db, VTable *pVTab){$/;"	f	file:
addWhereTerm	safe/sqlite3.c	/^static void addWhereTerm($/;"	f	file:
addrBrk	safe/sqlite3.c	/^  int addrBrk;          \/* Jump here to break out of the loop *\/$/;"	m	struct:WhereLevel	file:
addrCont	safe/sqlite3.c	/^  int addrCont;         \/* Jump here to continue with the next loop cycle *\/$/;"	m	struct:WhereLevel	file:
addrFillSub	safe/sqlite3.c	/^    int addrFillSub;  \/* Address of subroutine to manifest a subquery *\/$/;"	m	struct:SrcList::SrcList_item	file:
addrFirst	safe/sqlite3.c	/^  int addrFirst;        \/* First instruction of interior of the loop *\/$/;"	m	struct:WhereLevel	file:
addrInTop	safe/sqlite3.c	/^        int addrInTop;         \/* Top of the IN loop *\/$/;"	m	struct:WhereLevel::<anonymous>::<anonymous>::InLoop	file:
addrNxt	safe/sqlite3.c	/^  int addrNxt;          \/* Jump here to start the next IN combination *\/$/;"	m	struct:WhereLevel	file:
addrOpenEphm	safe/sqlite3.c	/^  int addrOpenEphm[3];   \/* OP_OpenEphem opcodes related to this select *\/$/;"	m	struct:Select	file:
adjustStats	safe/sqlite3.c	/^static void adjustStats(int iSize, int increment){$/;"	f	file:
adl_Version	safe/spider.133.c	/^const char *adl_Version(rogxml *rxAdl)$/;"	f
adl_Version	safe/spider.135.c	/^const char *adl_Version(rogxml *rxAdl)$/;"	f
adl_Version	safe/spider.200.c	/^const char *adl_Version(rogxml *rxAdl)$/;"	f
adl_Version	safe/spider.203.c	/^const char *adl_Version(rogxml *rxAdl)$/;"	f
adl_Version	safe/spider.204.c	/^const char *adl_Version(rogxml *rxAdl)$/;"	f
adl_Version	safe/spider.210.c	/^const char *adl_Version(rogxml *rxAdl)$/;"	f
adl_Version	safe/spider.c	/^const char *adl_Version(rogxml *rxAdl)$/;"	f
adl_Version	spider.c	/^const char *adl_Version(rogxml *rxAdl)$/;"	f
affinity	safe/sqlite3.c	/^  char affinity;         \/* MakeRecord with this affinity for SRT_Set *\/$/;"	m	struct:Select	file:
affinity	safe/sqlite3.c	/^  char affinity;         \/* The affinity of the column or 0 if not a column *\/$/;"	m	struct:Expr	file:
affinity	safe/sqlite3.c	/^  char affinity;   \/* One of the SQLITE_AFF_... values *\/$/;"	m	struct:Column	file:
affinity	safe/sqlite3.c	/^  u8 affinity;      \/* Affinity used when eDest==SRT_Set *\/$/;"	m	struct:SelectDest	file:
afpCheckReservedLock	safe/sqlite3.c	/^static int afpCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
afpClose	safe/sqlite3.c	/^static int afpClose(sqlite3_file *id) {$/;"	f	file:
afpLock	safe/sqlite3.c	/^static int afpLock(sqlite3_file *id, int eFileLock){$/;"	f	file:
afpLockingContext	safe/sqlite3.c	/^struct afpLockingContext {$/;"	s	file:
afpLockingContext	safe/sqlite3.c	/^typedef struct afpLockingContext afpLockingContext;$/;"	t	file:
afpSetLock	safe/sqlite3.c	/^static int afpSetLock($/;"	f	file:
afpUnlock	safe/sqlite3.c	/^static int afpUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
afpfsByteRangeLock2FSCTL	safe/sqlite3.c	27647;"	d	file:
agent_DealWithWebsocket	spider.c	/^static int agent_DealWithWebsocket(BIO *io, const char *szURI, MIME *header)$/;"	f	file:
agent_OnClientChannelError	spider.c	/^static int agent_OnClientChannelError(CHAN *channel)$/;"	f	file:
aggregate_context	safe/sqlite3.c	/^  void * (*aggregate_context)(sqlite3_context*,int nBytes);$/;"	m	struct:sqlite3_api_routines	file:
aggregate_count	safe/sqlite3.c	/^  int  (*aggregate_count)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
ai	safe/sqlite3.c	/^    int *ai;               \/* Used when p4type is P4_INTARRAY *\/$/;"	m	union:VdbeOp::<anonymous>	file:
aiColumn	safe/sqlite3.c	/^  int *aiColumn;   \/* Which columns are used by this index.  1st is 0 *\/$/;"	m	struct:Index	file:
aiException	safe/sqlite3.c	/^  int *aiException;$/;"	m	struct:unicode_tokenizer	file:
aiFreelist	safe/sqlite3.c	/^  int aiFreelist[LOGMAX+1];$/;"	m	struct:Mem5Global	file:
aiHash	safe/sqlite3.c	/^  u32 aiHash[N_HASH];        \/* For sizes MX_SMALL+1 and larger *\/$/;"	m	struct:Mem3Global	file:
aiIdx	safe/sqlite3.c	/^  u16 aiIdx[BTCURSOR_MAX_DEPTH];        \/* Current index in apPage[i] *\/$/;"	m	struct:BtCursor	file:
aiOvfl	safe/sqlite3.c	/^  u16 aiOvfl[5];       \/* Insert the i-th overflow cell before the aiOvfl-th$/;"	m	struct:MemPage	file:
aiRowEst	safe/sqlite3.c	/^  tRowcnt *aiRowEst; \/* Result of ANALYZE: Est. rows selected by each column *\/$/;"	m	struct:Index	file:
aiSmall	safe/sqlite3.c	/^  u32 aiSmall[MX_SMALL-1];   \/* For sizes 2 through MX_SMALL, inclusive *\/$/;"	m	struct:Mem3Global	file:
alarmArg	safe/sqlite3.c	/^  void *alarmArg;$/;"	m	struct:Mem0Global	file:
alarmBusy	safe/sqlite3.c	/^  int alarmBusy;$/;"	m	struct:Mem3Global	file:
alarmCallback	safe/sqlite3.c	/^  void (*alarmCallback)(void*, sqlite3_int64,int);$/;"	m	struct:Mem0Global	file:
alarmThreshold	safe/sqlite3.c	/^  sqlite3_int64 alarmThreshold;$/;"	m	struct:Mem0Global	file:
allChannels	mtchannel.c	/^STATIC SPMAP *allChannels = NULL;			\/\/ All channels by name$/;"	v
allJson	mtjson.c	/^static JSON *allJson = NULL;					\/\/ Head of a linked list of all JSON structures$/;"	v	file:
allSpaces	safe/sqlite3.c	/^static int allSpaces(const char *z, int n){$/;"	f	file:
allSubscriptions	mtwamp.c	/^	IDMAP *allSubscriptions;					\/\/ All subscriptions by subscription ID$/;"	m	struct:WAMPREALM	file:
allWampChannels	safe/mtwamp.c	/^STATIC SPMAP *allWampChannels = NULL;						\/\/ All active channels$/;"	v
allWamps	mtwamp.c	/^STATIC SPMAP *allWamps = NULL;								\/\/ All active wamps by name$/;"	v
allWebsockets	mtwebsocket.c	/^STATIC SPMAP *allWebsockets = NULL;		\/\/ Map of all websockets by name$/;"	v
allocSpace	safe/sqlite3.c	/^static void *allocSpace($/;"	f	file:
allocateBtreePage	safe/sqlite3.c	/^static int allocateBtreePage($/;"	f	file:
allocateCursor	safe/sqlite3.c	/^static VdbeCursor *allocateCursor($/;"	f	file:
allocateIndexInfo	safe/sqlite3.c	/^static sqlite3_index_info *allocateIndexInfo($/;"	f	file:
allocateSpace	safe/sqlite3.c	/^static int allocateSpace(MemPage *pPage, int nByte, int *pIdx){$/;"	f	file:
allocateTempSpace	safe/sqlite3.c	/^static void allocateTempSpace(BtShared *pBt){$/;"	f	file:
allow_Allowed	safe/spider.133.c	/^static const char *allow_Allowed(const char *szIp)$/;"	f	file:
allow_Allowed	safe/spider.135.c	/^static const char *allow_Allowed(const char *szIp)$/;"	f	file:
allow_Allowed	safe/spider.200.c	/^static const char *allow_Allowed(const char *szIp)$/;"	f	file:
allow_Allowed	safe/spider.203.c	/^static const char *allow_Allowed(const char *szIp)$/;"	f	file:
allow_Allowed	safe/spider.204.c	/^static const char *allow_Allowed(const char *szIp)$/;"	f	file:
allow_Allowed	safe/spider.210.c	/^static const char *allow_Allowed(const char *szIp)$/;"	f	file:
allow_Allowed	safe/spider.c	/^static const char *allow_Allowed(const char *szIp)$/;"	f	file:
allow_Allowed	spider.c	/^static const char *allow_Allowed(const char *szIp)$/;"	f	file:
allow_Init	safe/spider.133.c	/^static void allow_Init()$/;"	f	file:
allow_Init	safe/spider.135.c	/^static void allow_Init()$/;"	f	file:
allow_Init	safe/spider.200.c	/^static void allow_Init()$/;"	f	file:
allow_Init	safe/spider.203.c	/^static void allow_Init()$/;"	f	file:
allow_Init	safe/spider.204.c	/^static void allow_Init()$/;"	f	file:
allow_Init	safe/spider.210.c	/^static void allow_Init()$/;"	f	file:
allow_Init	safe/spider.c	/^static void allow_Init()$/;"	f	file:
allow_Init	spider.c	/^static void allow_Init()$/;"	f	file:
allow_descr	safe/spider.133.c	/^static char **allow_descr = NULL;$/;"	v	file:
allow_descr	safe/spider.135.c	/^static char **allow_descr = NULL;$/;"	v	file:
allow_descr	safe/spider.200.c	/^static char **allow_descr = NULL;$/;"	v	file:
allow_descr	safe/spider.203.c	/^static char **allow_descr = NULL;$/;"	v	file:
allow_descr	safe/spider.204.c	/^static char **allow_descr = NULL;$/;"	v	file:
allow_descr	safe/spider.210.c	/^static char **allow_descr = NULL;$/;"	v	file:
allow_descr	safe/spider.c	/^static char **allow_descr = NULL;$/;"	v	file:
allow_descr	spider.c	/^static char **allow_descr = NULL;$/;"	v	file:
allow_ip	safe/spider.133.c	/^static char **allow_ip = NULL;$/;"	v	file:
allow_ip	safe/spider.135.c	/^static char **allow_ip = NULL;$/;"	v	file:
allow_ip	safe/spider.200.c	/^static char **allow_ip = NULL;$/;"	v	file:
allow_ip	safe/spider.203.c	/^static char **allow_ip = NULL;$/;"	v	file:
allow_ip	safe/spider.204.c	/^static char **allow_ip = NULL;$/;"	v	file:
allow_ip	safe/spider.210.c	/^static char **allow_ip = NULL;$/;"	v	file:
allow_ip	safe/spider.c	/^static char **allow_ip = NULL;$/;"	v	file:
allow_ip	spider.c	/^static char **allow_ip = NULL;$/;"	v	file:
allow_n	safe/spider.133.c	/^static int allow_n = 0;$/;"	v	file:
allow_n	safe/spider.135.c	/^static int allow_n = 0;$/;"	v	file:
allow_n	safe/spider.200.c	/^static int allow_n = 0;$/;"	v	file:
allow_n	safe/spider.203.c	/^static int allow_n = 0;$/;"	v	file:
allow_n	safe/spider.204.c	/^static int allow_n = 0;$/;"	v	file:
allow_n	safe/spider.210.c	/^static int allow_n = 0;$/;"	v	file:
allow_n	safe/spider.c	/^static int allow_n = 0;$/;"	v	file:
allow_n	spider.c	/^static int allow_n = 0;$/;"	v	file:
allowedOp	safe/sqlite3.c	/^static int allowedOp(int op){$/;"	f	file:
anOutput	safe/sqlite3.c	/^  int anOutput[16];               \/* Size each output buffer in bytes *\/$/;"	m	struct:TermSelect	file:
anStat	safe/sqlite3.c	/^  int anStat[3];          \/* 0: hits.  1: size misses.  2: full misses *\/$/;"	m	struct:Lookaside	file:
analysisInfo	safe/sqlite3.c	/^struct analysisInfo {$/;"	s	file:
analysisInfo	safe/sqlite3.c	/^typedef struct analysisInfo analysisInfo;$/;"	t	file:
analysisLoader	safe/sqlite3.c	/^static int analysisLoader(void *pData, int argc, char **argv, char **NotUsed){$/;"	f	file:
analyzeAggregate	safe/sqlite3.c	/^static int analyzeAggregate(Walker *pWalker, Expr *pExpr){$/;"	f	file:
analyzeAggregatesInSelect	safe/sqlite3.c	/^static int analyzeAggregatesInSelect(Walker *pWalker, Select *pSelect){$/;"	f	file:
analyzeDatabase	safe/sqlite3.c	/^static void analyzeDatabase(Parse *pParse, int iDb){$/;"	f	file:
analyzeOneTable	safe/sqlite3.c	/^static void analyzeOneTable($/;"	f	file:
analyzeTable	safe/sqlite3.c	/^static void analyzeTable(Parse *pParse, Table *pTab, Index *pOnlyIdx){$/;"	f	file:
apArg	safe/sqlite3.c	/^  Mem **apArg;            \/* Arguments to currently executing user function *\/$/;"	m	struct:Vdbe	file:
apAux	safe/sqlite3.c	/^  } apAux[1];                   \/* One slot for each function argument *\/$/;"	m	struct:VdbeFunc	file:
apCsr	safe/sqlite3.c	/^  VdbeCursor **apCsr;     \/* Array of Vdbe cursors for parent frame *\/$/;"	m	struct:VdbeFrame	file:
apCsr	safe/sqlite3.c	/^  VdbeCursor **apCsr;     \/* One element of this array for each open cursor *\/$/;"	m	struct:Vdbe	file:
apHash	safe/sqlite3.c	/^  PgHdr1 **apHash;                    \/* Hash table for fast lookup by key *\/$/;"	m	struct:PCache1	file:
apOvfl	safe/sqlite3.c	/^  u8 *apOvfl[5];       \/* Pointers to the body of overflow cells *\/$/;"	m	struct:MemPage	file:
apPage	safe/sqlite3.c	/^  MemPage *apPage[BTCURSOR_MAX_DEPTH];  \/* Pages from root to current page *\/$/;"	m	struct:BtCursor	file:
apRegion	safe/sqlite3.c	/^  char **apRegion;           \/* Array of mapped shared-memory regions *\/$/;"	m	struct:unixShmNode	file:
apRegion	safe/sqlite3.c	/^  void **apRegion;           \/* Array of pointers to shared-memory regions *\/$/;"	m	struct:os2ShmNode	file:
apSegment	safe/sqlite3.c	/^  Fts3SegReader **apSegment;      \/* Array of Fts3SegReader objects *\/$/;"	m	struct:Fts3MultiSegReader	file:
apSub	safe/sqlite3.c	/^    Bitvec *apSub[BITVEC_NPTR];  \/* Recursive representation *\/$/;"	m	union:Bitvec::<anonymous>	file:
apSub	safe/sqlite3.c	/^  SubProgram **apSub;        \/* Array of subprograms *\/$/;"	m	struct:VdbeOpIter	file:
apTrigger	safe/sqlite3.c	/^  Trigger *apTrigger[2];  \/* Triggers for aAction[] actions *\/$/;"	m	struct:FKey	file:
apVtabLock	safe/sqlite3.c	/^  Table **apVtabLock;       \/* Pointer to virtual tables needing locking *\/$/;"	m	struct:Parse	file:
apWiData	safe/sqlite3.c	/^  volatile u32 **apWiData;   \/* Pointer to wal-index content in memory *\/$/;"	m	struct:Wal	file:
api_Adl	safe/spider.133.c	/^rogxml *api_Adl(const char *api)$/;"	f
api_Adl	safe/spider.135.c	/^rogxml *api_Adl(const char *api)$/;"	f
api_Adl	safe/spider.200.c	/^rogxml *api_Adl(const char *api)$/;"	f
api_Adl	safe/spider.203.c	/^rogxml *api_Adl(const char *api)$/;"	f
api_Adl	safe/spider.204.c	/^rogxml *api_Adl(const char *api)$/;"	f
api_Adl	safe/spider.210.c	/^rogxml *api_Adl(const char *api)$/;"	f
api_Adl	safe/spider.c	/^rogxml *api_Adl(const char *api)$/;"	f
api_Adl	spider.c	/^rogxml *api_Adl(const char *api)$/;"	f
api_Binary	safe/spider.133.c	/^const char *api_Binary(const char *szApi)$/;"	f
api_Binary	safe/spider.135.c	/^const char *api_Binary(const char *szApi)$/;"	f
api_Binary	safe/spider.200.c	/^const char *api_Binary(const char *szApi)$/;"	f
api_Binary	safe/spider.203.c	/^const char *api_Binary(const char *szApi)$/;"	f
api_Binary	safe/spider.204.c	/^const char *api_Binary(const char *szApi)$/;"	f
api_Binary	safe/spider.210.c	/^const char *api_Binary(const char *szApi)$/;"	f
api_Binary	safe/spider.c	/^const char *api_Binary(const char *szApi)$/;"	f
api_Binary	spider.c	/^const char *api_Binary(const char *szApi)$/;"	f
api_Refresh	safe/spider.133.c	/^int api_Refresh(const char *szApi, const char *szBinary, const char **pVersion, rogxml **pAdl)$/;"	f
api_Refresh	safe/spider.135.c	/^int api_Refresh(const char *szApi, const char *szBinary, const char **pVersion, rogxml **pAdl)$/;"	f
api_Refresh	safe/spider.200.c	/^int api_Refresh(const char *szApi, const char *szBinary, const char **pVersion, rogxml **pAdl)$/;"	f
api_Refresh	safe/spider.203.c	/^int api_Refresh(const char *szApi, const char *szBinary, const char **pVersion, rogxml **pAdl)$/;"	f
api_Refresh	safe/spider.204.c	/^int api_Refresh(const char *szApi, const char *szBinary, const char **pVersion, rogxml **pAdl)$/;"	f
api_Refresh	safe/spider.210.c	/^int api_Refresh(const char *szApi, const char *szBinary, const char **pVersion, rogxml **pAdl)$/;"	f
api_Refresh	safe/spider.c	/^int api_Refresh(const char *szApi, const char *szBinary, const char **pVersion, rogxml **pAdl)$/;"	f
api_Refresh	spider.c	/^int api_Refresh(const char *szApi, const char *szBinary, const char **pVersion, rogxml **pAdl)$/;"	f
api_Version	safe/spider.133.c	/^const char *api_Version(const char *api)$/;"	f
api_Version	safe/spider.135.c	/^const char *api_Version(const char *api)$/;"	f
api_Version	safe/spider.200.c	/^const char *api_Version(const char *api)$/;"	f
api_Version	safe/spider.203.c	/^const char *api_Version(const char *api)$/;"	f
api_Version	safe/spider.204.c	/^const char *api_Version(const char *api)$/;"	f
api_Version	safe/spider.210.c	/^const char *api_Version(const char *api)$/;"	f
api_Version	safe/spider.c	/^const char *api_Version(const char *api)$/;"	f
api_Version	spider.c	/^const char *api_Version(const char *api)$/;"	f
api_stderr	safe/spider.c	/^static const char *api_stderr			= "stderr.txt";		\/\/ What the stderr from an API will end up being called$/;"	v	file:
api_stderr	spider.c	/^static const char *api_stderr			= "stderr.txt";		\/\/ What the stderr from an API will end up being called$/;"	v	file:
apis	safe/spider.210.c	/^	SPMAP *apis;						\/\/ The APIs that are covered by this contract$/;"	m	struct:contract_t	file:
apis	safe/spider.c	/^	SPMAP *apis;						\/\/ The APIs that are covered by this contract$/;"	m	struct:contract_t	file:
apis	spider.c	/^	SPMAP *apis;						\/\/ The APIs that are covered by this contract$/;"	m	struct:contract_t	file:
applyAffinity	safe/sqlite3.c	/^static void applyAffinity($/;"	f	file:
applyNumericAffinity	safe/sqlite3.c	/^static void applyNumericAffinity(Mem *pRec){$/;"	f	file:
approx	safe/sqlite3.c	/^  u8 approx;        \/* True if non-integer value was input to the sum *\/$/;"	m	struct:SumCtx	file:
argv0	safe/spider.133.c	/^static const char *argv0 = NULL;			\/\/ The location of our executable$/;"	v	file:
argv0	safe/spider.135.c	/^static const char *argv0 = NULL;			\/\/ The location of our executable$/;"	v	file:
argv0	safe/spider.200.c	/^static const char *argv0 = NULL;			\/\/ The location of our executable$/;"	v	file:
argv0	safe/spider.203.c	/^static const char *argv0 = NULL;			\/\/ The location of our executable$/;"	v	file:
argv0	safe/spider.204.c	/^static const char *argv0 = NULL;			\/\/ The location of our executable$/;"	v	file:
argv0	safe/spider.210.c	/^static const char *argv0 = NULL;			\/\/ The location of our executable$/;"	v	file:
argv0	safe/spider.c	/^static const char *argv0 = NULL;			\/\/ The location of our executable$/;"	v	file:
argv0	spider.c	/^static const char *argv0 = NULL;			\/\/ The location of our executable$/;"	v	file:
argvIndex	safe/sqlite3.c	/^    int argvIndex;           \/* if >0, constraint is part of argv to xFilter *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:
argvIndex	safe/sqlite3.h	/^    int argvIndex;           \/* if >0, constraint is part of argv to xFilter *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage
array	mtjson.h	/^		} array;$/;"	m	union:JSON::<anonymous>
array	safe/mtjson.h	/^		} array;$/;"	m	union:JSON::<anonymous>
assemblePage	safe/sqlite3.c	/^static void assemblePage($/;"	f	file:
assertCellInfo	safe/sqlite3.c	/^  static void assertCellInfo(BtCursor *pCur){$/;"	f	file:
assertCellInfo	safe/sqlite3.c	53852;"	d	file:
assertMutexHeld	safe/sqlite3.c	116727;"	d	file:
assertParentIndex	safe/sqlite3.c	54426;"	d	file:
assertTruncateConstraint	safe/sqlite3.c	/^static void assertTruncateConstraint(Pager *pPager){$/;"	f	file:
assertTruncateConstraint	safe/sqlite3.c	42965;"	d	file:
assertTruncateConstraintCb	safe/sqlite3.c	/^static void assertTruncateConstraintCb(PgHdr *pPg){$/;"	f	file:
assert_pager_state	safe/sqlite3.c	/^static int assert_pager_state(Pager *p){$/;"	f	file:
atFirst	safe/sqlite3.c	/^  Bool atFirst;         \/* True if pointing to first entry *\/$/;"	m	struct:VdbeCursor	file:
atLast	safe/sqlite3.c	/^  u8 atLast;                \/* Cursor pointing to the last entry *\/$/;"	m	struct:BtCursor	file:
attachBackupObject	safe/sqlite3.c	/^static void attachBackupObject(sqlite3_backup *p){$/;"	f	file:
attachFunc	safe/sqlite3.c	/^static void attachFunc($/;"	f	file:
autoCommit	safe/sqlite3.c	/^  u8 autoCommit;                \/* The auto-commit flag. *\/$/;"	m	struct:sqlite3	file:
autoIncBegin	safe/sqlite3.c	/^static int autoIncBegin($/;"	f	file:
autoIncBegin	safe/sqlite3.c	90314;"	d	file:
autoIncStep	safe/sqlite3.c	/^static void autoIncStep(Parse *pParse, int memId, int regRowid){$/;"	f	file:
autoIncStep	safe/sqlite3.c	90315;"	d	file:
autoIndex	safe/sqlite3.c	/^  u8 autoIndex;    \/* True if is automatically created (ex: by UNIQUE) *\/$/;"	m	struct:Index	file:
autoVacuum	safe/sqlite3.c	/^  u8 autoVacuum;        \/* True if auto-vacuum is enabled *\/$/;"	m	struct:BtShared	file:
autoVacuumCommit	safe/sqlite3.c	/^static int autoVacuumCommit(BtShared *pBt){$/;"	f	file:
autolockIoFinder	safe/sqlite3.c	/^  *(*const autolockIoFinder)(const char*,unixFile*) = autolockIoFinderImpl;$/;"	v	file:
autolockIoFinderImpl	safe/sqlite3.c	/^static const sqlite3_io_methods *autolockIoFinderImpl($/;"	f	file:
avgEq	safe/sqlite3.c	/^  tRowcnt avgEq;           \/* Average nEq value for key values not in aSample *\/$/;"	m	struct:Index	file:
avgFinalize	safe/sqlite3.c	/^static void avgFinalize(sqlite3_context *context){$/;"	f	file:
azCol	safe/sqlite3.c	/^  const char **azCol;                 \/* Array of column names for fts3 table *\/$/;"	m	struct:ParseContext	file:
azColl	safe/sqlite3.c	/^  char **azColl;   \/* Array of collation sequence names for index *\/$/;"	m	struct:Index	file:
azColumn	safe/sqlite3.c	/^  char **azColumn;                \/* column names.  malloced *\/$/;"	m	struct:Fts3Table	file:
azCompileOpt	safe/sqlite3.c	/^static const char * const azCompileOpt[] = {$/;"	v	file:
azFileLock	safe/sqlite3.c	/^static const char *azFileLock(int eFileLock){$/;"	f	file:
azModuleArg	safe/sqlite3.c	/^  char **azModuleArg;  \/* Text of all module args. [0] is module name *\/$/;"	m	struct:Table	file:
azResult	safe/sqlite3.c	/^  char **azResult;   \/* Accumulated output *\/$/;"	m	struct:TabResult	file:
azVar	safe/sqlite3.c	/^  char **azVar;             \/* Pointers to names of parameters *\/$/;"	m	struct:Parse	file:
azVar	safe/sqlite3.c	/^  char **azVar;           \/* Name of variables *\/$/;"	m	struct:Vdbe	file:
b	safe/sqlite3.c	/^struct TrigEvent { int a; IdList * b; };$/;"	m	struct:TrigEvent	file:
bAutoincrmerge	safe/sqlite3.c	/^  u8 bAutoincrmerge;              \/* True if automerge=1 *\/$/;"	m	struct:Fts3Table	file:
bConstraint	safe/sqlite3.c	/^  u8 bConstraint;           \/* True if constraints are supported *\/$/;"	m	struct:VTable	file:
bCoreMutex	safe/sqlite3.c	/^  int bCoreMutex;                   \/* True to enable core mutexing *\/$/;"	m	struct:Sqlite3Config	file:
bDeferred	safe/sqlite3.c	/^  u8 bDeferred;              \/* True if this expression is entirely deferred *\/$/;"	m	struct:Fts3Expr	file:
bDesc	safe/sqlite3.c	/^  u8 bDesc;                       \/* True to sort in descending order *\/$/;"	m	struct:Fts3Cursor	file:
bDescIdx	safe/sqlite3.c	/^  u8 bDescIdx;                    \/* True if doclists are in reverse order *\/$/;"	m	struct:Fts3Table	file:
bDestLocked	safe/sqlite3.c	/^  int bDestLocked;         \/* True once a write-transaction is open on pDest *\/$/;"	m	struct:sqlite3_backup	file:
bEnabled	safe/spider.133.c	/^	int bEnabled;							\/\/ Only use if enabled$/;"	m	struct:NetworkPort_t	file:
bEnabled	safe/spider.135.c	/^	int bEnabled;							\/\/ Only use if enabled$/;"	m	struct:NetworkPort_t	file:
bEnabled	safe/spider.200.c	/^	int bEnabled;							\/\/ Only use if enabled$/;"	m	struct:NetworkPort_t	file:
bEnabled	safe/spider.203.c	/^	int bEnabled;							\/\/ Only use if enabled$/;"	m	struct:NetworkPort_t	file:
bEnabled	safe/spider.204.c	/^	int bEnabled;							\/\/ Only use if enabled$/;"	m	struct:NetworkPort_t	file:
bEnabled	safe/spider.210.c	/^	int bEnabled;							\/\/ Only use if enabled$/;"	m	struct:NetworkPort_t	file:
bEnabled	safe/spider.c	/^	int bEnabled;							\/\/ Only use if enabled$/;"	m	struct:NetworkPort_t	file:
bEnabled	safe/sqlite3.c	/^  u8 bEnabled;            \/* False to disable new lookaside allocations *\/$/;"	m	struct:Lookaside	file:
bEnabled	spider.c	/^	int bEnabled;							\/\/ Only use if enabled$/;"	m	struct:NetworkPort_t	file:
bEof	safe/sqlite3.c	/^  u8 bEof;                   \/* True this expression is at EOF already *\/$/;"	m	struct:Fts3Expr	file:
bExclusive	safe/sqlite3.c	/^  BOOL bExclusive;    \/* Indicates an exclusive lock has been obtained *\/$/;"	m	struct:winceLock	file:
bFirst	safe/sqlite3.c	/^  int bFirst;                     \/* True if token must appear at position 0 *\/$/;"	m	struct:Fts3PhraseToken	file:
bFreeList	safe/sqlite3.c	/^  int bFreeList;                 \/* True if pList should be sqlite3_free()d *\/$/;"	m	struct:Fts3Doclist	file:
bFts4	safe/sqlite3.c	/^  int bFts4;                          \/* True to allow FTS4-only syntax *\/$/;"	m	struct:ParseContext	file:
bFts4	safe/sqlite3.c	/^  u8 bFts4;                       \/* True for FTS4, false for FTS3 *\/$/;"	m	struct:Fts3Table	file:
bFullMutex	safe/sqlite3.c	/^  int bFullMutex;                   \/* True to enable full mutexing *\/$/;"	m	struct:Sqlite3Config	file:
bHandlingSessions	safe/spider.133.c	/^static int bHandlingSessions = 0;					\/\/ We handle session IDs$/;"	v	file:
bHandlingSessions	safe/spider.135.c	/^static int bHandlingSessions = 0;					\/\/ We handle session IDs$/;"	v	file:
bHandlingSessions	safe/spider.200.c	/^static int bHandlingSessions = 0;					\/\/ We handle session IDs$/;"	v	file:
bHandlingSessions	safe/spider.203.c	/^static int bHandlingSessions = 0;					\/\/ We handle session IDs$/;"	v	file:
bHandlingSessions	safe/spider.204.c	/^static int bHandlingSessions = 0;					\/\/ We handle session IDs$/;"	v	file:
bHandlingSessions	safe/spider.210.c	/^static int bHandlingSessions = 0;					\/\/ We handle session IDs$/;"	v	file:
bHandlingSessions	safe/spider.c	/^static int bHandlingSessions = 0;					\/\/ We handle session IDs$/;"	v	file:
bHandlingSessions	spider.c	/^static int bHandlingSessions = 0;					\/\/ We handle session IDs$/;"	v	file:
bHasDocsize	safe/sqlite3.c	/^  u8 bHasDocsize;                 \/* True if %_docsize table exists *\/$/;"	m	struct:Fts3Table	file:
bHasStat	safe/sqlite3.c	/^  u8 bHasStat;                    \/* True if %_stat table exists *\/$/;"	m	struct:Fts3Table	file:
bIgnoreSavepoint	safe/sqlite3.c	/^  u8 bIgnoreSavepoint;            \/* True to ignore xSavepoint invocations *\/$/;"	m	struct:Fts3Table	file:
bIncr	safe/sqlite3.c	/^  int bIncr;                 \/* True if doclist is loaded incrementally *\/$/;"	m	struct:Fts3Phrase	file:
bIsDaemon	safe/spider.133.c	/^static char bIsDaemon = 1;						\/\/ 1 if Daemon, 0 otherwise$/;"	v	file:
bIsDaemon	safe/spider.135.c	/^static char bIsDaemon = 1;						\/\/ 1 if Daemon, 0 otherwise$/;"	v	file:
bIsDaemon	safe/spider.200.c	/^static char bIsDaemon = 1;						\/\/ 1 if Daemon, 0 otherwise$/;"	v	file:
bIsDaemon	safe/spider.203.c	/^static char bIsDaemon = 1;						\/\/ 1 if Daemon, 0 otherwise$/;"	v	file:
bIsDaemon	safe/spider.204.c	/^static char bIsDaemon = 1;						\/\/ 1 if Daemon, 0 otherwise$/;"	v	file:
bIsDaemon	safe/spider.210.c	/^static char bIsDaemon = 1;						\/\/ 1 if Daemon, 0 otherwise$/;"	v	file:
bIsDaemon	safe/spider.c	/^static char bIsDaemon = 1;						\/\/ 1 if Daemon, 0 otherwise$/;"	v	file:
bIsDaemon	spider.c	/^static char bIsDaemon = 1;						\/\/ 1 if Daemon, 0 otherwise$/;"	v	file:
bIsPubsub	spider.c	/^static char bIsPubsub = 0;						\/\/ 1 if Pubsub, 0 otherwise$/;"	v	file:
bLocaltimeFault	safe/sqlite3.c	/^  int bLocaltimeFault;              \/* True to fail localtime() calls *\/$/;"	m	struct:Sqlite3Config	file:
bLookup	safe/sqlite3.c	/^  int bLookup;                    \/* True if a lookup of a single entry. *\/$/;"	m	struct:Fts3MultiSegReader	file:
bLookup	safe/sqlite3.c	/^  u8 bLookup;                     \/* True for a lookup only *\/$/;"	m	struct:Fts3SegReader	file:
bMalloced	safe/sqlite3.c	/^  u8 bMalloced;           \/* True if pStart obtained from sqlite3_malloc() *\/$/;"	m	struct:Lookaside	file:
bMemstat	safe/sqlite3.c	/^  int bMemstat;                     \/* True to enable memory status *\/$/;"	m	struct:Sqlite3Config	file:
bNot	safe/sqlite3.c	/^  int bNot;         \/* True if the NOT keyword is present *\/$/;"	m	struct:LikeOp	file:
bOpenUri	safe/sqlite3.c	/^  int bOpenUri;                     \/* True to interpret filenames as URIs *\/$/;"	m	struct:Sqlite3Config	file:
bOwned	safe/sqlite3.c	/^  BOOL bOwned;  \/* Do we own the heap (i.e. destroy it on shutdown)? *\/$/;"	m	struct:winMemData	file:
bPending	safe/sqlite3.c	/^  BOOL bPending;      \/* Indicates a pending lock has been obtained *\/$/;"	m	struct:winceLock	file:
bProcessLock	safe/sqlite3.c	/^  unsigned char bProcessLock;     \/* An exclusive process lock is held *\/$/;"	m	struct:unixInodeInfo	file:
bPurgeable	safe/sqlite3.c	/^  int bPurgeable;                     \/* True if cache is purgeable *\/$/;"	m	struct:PCache1	file:
bPurgeable	safe/sqlite3.c	/^  int bPurgeable;                     \/* True if pages are on backing store *\/$/;"	m	struct:PCache	file:
bRemoveDiacritic	safe/sqlite3.c	/^  int bRemoveDiacritic;$/;"	m	struct:unicode_tokenizer	file:
bReserved	safe/sqlite3.c	/^  BOOL bReserved;     \/* Indicates a reserved lock has been obtained *\/$/;"	m	struct:winceLock	file:
bRestart	safe/sqlite3.c	/^  int bRestart;$/;"	m	struct:Fts3MultiSegReader	file:
bStart	safe/sqlite3.c	/^  u8 bStart;                 \/* True if iDocid is valid *\/$/;"	m	struct:Fts3Expr	file:
bUnderPressure	safe/sqlite3.c	/^  int bUnderPressure;            \/* True if low on PAGECACHE memory *\/$/;"	m	struct:PCacheGlobal	file:
bUnordered	safe/sqlite3.c	/^  u8 bUnordered;   \/* Use this index for == or IN queries only *\/$/;"	m	struct:Index	file:
bVerbose	safe/spider.133.c	/^static char bVerbose = 0;							\/\/ Quiet unless told otherwise (used with -s and -S)$/;"	v	file:
bVerbose	safe/spider.135.c	/^static char bVerbose = 0;							\/\/ Quiet unless told otherwise (used with -s and -S)$/;"	v	file:
bVerbose	safe/spider.200.c	/^static char bVerbose = 0;							\/\/ Quiet unless told otherwise (used with -s and -S)$/;"	v	file:
bVerbose	safe/spider.203.c	/^static char bVerbose = 0;							\/\/ Quiet unless told otherwise (used with -s and -S)$/;"	v	file:
bVerbose	safe/spider.204.c	/^static char bVerbose = 0;						\/\/ Quiet unless told otherwise (used with -s and -S)$/;"	v	file:
bVerbose	safe/spider.210.c	/^static char bVerbose = 0;						\/\/ Quiet unless told otherwise (used with -s and -S)$/;"	v	file:
bVerbose	safe/spider.c	/^static char bVerbose = 0;						\/\/ Quiet unless told otherwise (used with -s and -S)$/;"	v	file:
bVerbose	spider.c	/^static char bVerbose = 0;						\/\/ Quiet unless told otherwise (used with -s and -S)$/;"	v	file:
backtrace	safe/sqlite3.c	15594;"	d	file:
backtrace_symbols_fd	safe/sqlite3.c	15595;"	d	file:
backupOnePage	safe/sqlite3.c	/^static int backupOnePage(sqlite3_backup *p, Pgno iSrcPg, const u8 *zSrcData){$/;"	f	file:
backupTruncateFile	safe/sqlite3.c	/^static int backupTruncateFile(sqlite3_file *pFile, i64 iSize){$/;"	f	file:
backup_finish	safe/sqlite3.c	/^  int (*backup_finish)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:
backup_init	safe/sqlite3.c	/^  sqlite3_backup *(*backup_init)(sqlite3*,const char*,sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
backup_pagecount	safe/sqlite3.c	/^  int (*backup_pagecount)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:
backup_remaining	safe/sqlite3.c	/^  int (*backup_remaining)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:
backup_step	safe/sqlite3.c	/^  int (*backup_step)(sqlite3_backup*,int);$/;"	m	struct:sqlite3_api_routines	file:
balance	safe/sqlite3.c	/^static int balance(BtCursor *pCur){$/;"	f	file:
balance_deeper	safe/sqlite3.c	/^static int balance_deeper(MemPage *pRoot, MemPage **ppChild){$/;"	f	file:
balance_nonroot	safe/sqlite3.c	/^static int balance_nonroot($/;"	f	file:
balance_quick	safe/sqlite3.c	/^static int balance_quick(MemPage *pParent, MemPage *pPage, u8 *pSpace){$/;"	f	file:
base	safe/sqlite3.c	/^  etByte base;             \/* The base for radix conversion *\/$/;"	m	struct:et_info	file:
base	safe/sqlite3.c	/^  sqlite3_tokenizer base;      \/* Base class *\/$/;"	m	struct:porter_tokenizer	file:
base	safe/sqlite3.c	/^  sqlite3_tokenizer base;$/;"	m	struct:IcuTokenizer	file:
base	safe/sqlite3.c	/^  sqlite3_tokenizer base;$/;"	m	struct:simple_tokenizer	file:
base	safe/sqlite3.c	/^  sqlite3_tokenizer base;$/;"	m	struct:unicode_tokenizer	file:
base	safe/sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:IcuCursor	file:
base	safe/sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:porter_tokenizer_cursor	file:
base	safe/sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:simple_tokenizer_cursor	file:
base	safe/sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:unicode_cursor	file:
base	safe/sqlite3.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3Table	file:
base	safe/sqlite3.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3auxTable	file:
base	safe/sqlite3.c	/^  sqlite3_vtab base;$/;"	m	struct:Rtree	file:
base	safe/sqlite3.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3Cursor	file:
base	safe/sqlite3.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3auxCursor	file:
base	safe/sqlite3.c	/^  sqlite3_vtab_cursor base;$/;"	m	struct:RtreeCursor	file:
bdc	safe/spider.210.c	/^	int		bdc;$/;"	m	struct:limits_t	file:
bdc	safe/spider.c	/^	int		bdc;$/;"	m	struct:limits_t	file:
bdc	spider.c	/^	int		bdc;$/;"	m	struct:limits_t	file:
bdt	safe/spider.210.c	/^	int		bdt;$/;"	m	struct:limits_t	file:
bdt	safe/spider.c	/^	int		bdt;$/;"	m	struct:limits_t	file:
bdt	spider.c	/^	int		bdt;$/;"	m	struct:limits_t	file:
bestAutomaticIndex	safe/sqlite3.c	/^static void bestAutomaticIndex($/;"	f	file:
bestAutomaticIndex	safe/sqlite3.c	105664;"	d	file:
bestBtreeIndex	safe/sqlite3.c	/^static void bestBtreeIndex($/;"	f	file:
bestIndex	safe/sqlite3.c	/^static void bestIndex($/;"	f	file:
bestOrClauseIndex	safe/sqlite3.c	/^static void bestOrClauseIndex($/;"	f	file:
bestVirtualIndex	safe/sqlite3.c	/^static void bestVirtualIndex($/;"	f	file:
bhc	safe/spider.210.c	/^	int		bhc;$/;"	m	struct:limits_t	file:
bhc	safe/spider.c	/^	int		bhc;$/;"	m	struct:limits_t	file:
bhc	spider.c	/^	int		bhc;$/;"	m	struct:limits_t	file:
bht	safe/spider.210.c	/^	int		bht;$/;"	m	struct:limits_t	file:
bht	safe/spider.c	/^	int		bht;$/;"	m	struct:limits_t	file:
bht	spider.c	/^	int		bht;$/;"	m	struct:limits_t	file:
bigEndCksum	safe/sqlite3.c	/^  u8 bigEndCksum;                 \/* True if checksums in WAL are big-endian *\/$/;"	m	struct:WalIndexHdr	file:
binCollFunc	safe/sqlite3.c	/^static int binCollFunc($/;"	f	file:
binaryCompareP5	safe/sqlite3.c	/^static u8 binaryCompareP5(Expr *pExpr1, Expr *pExpr2, int jumpIfNull){$/;"	f	file:
binaryToUnaryIfNull	safe/sqlite3.c	/^  static void binaryToUnaryIfNull(Parse *pParse, Expr *pY, Expr *pA, int op){$/;"	f	file:
binary_Adl	safe/spider.133.c	/^rogxml *binary_Adl(const char *binary)$/;"	f
binary_Adl	safe/spider.135.c	/^rogxml *binary_Adl(const char *binary)$/;"	f
binary_Adl	safe/spider.200.c	/^rogxml *binary_Adl(const char *binary)$/;"	f
binary_Adl	safe/spider.203.c	/^rogxml *binary_Adl(const char *binary)$/;"	f
binary_Adl	safe/spider.204.c	/^rogxml *binary_Adl(const char *binary)$/;"	f
binary_Adl	safe/spider.210.c	/^rogxml *binary_Adl(const char *binary)$/;"	f
binary_Adl	safe/spider.c	/^rogxml *binary_Adl(const char *binary)$/;"	f
binary_Adl	spider.c	/^rogxml *binary_Adl(const char *binary)$/;"	f
binary_Version	safe/spider.133.c	/^const char *binary_Version(const char *szBinary)$/;"	f
binary_Version	safe/spider.135.c	/^const char *binary_Version(const char *szBinary)$/;"	f
binary_Version	safe/spider.200.c	/^const char *binary_Version(const char *szBinary)$/;"	f
binary_Version	safe/spider.203.c	/^const char *binary_Version(const char *szBinary)$/;"	f
binary_Version	safe/spider.204.c	/^const char *binary_Version(const char *szBinary)$/;"	f
binary_Version	safe/spider.210.c	/^const char *binary_Version(const char *szBinary)$/;"	f
binary_Version	safe/spider.c	/^const char *binary_Version(const char *szBinary)$/;"	f
binary_Version	spider.c	/^const char *binary_Version(const char *szBinary)$/;"	f
bindText	safe/sqlite3.c	/^static int bindText($/;"	f	file:
bind_blob	safe/sqlite3.c	/^  int  (*bind_blob)(sqlite3_stmt*,int,const void*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
bind_double	safe/sqlite3.c	/^  int  (*bind_double)(sqlite3_stmt*,int,double);$/;"	m	struct:sqlite3_api_routines	file:
bind_int	safe/sqlite3.c	/^  int  (*bind_int)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
bind_int64	safe/sqlite3.c	/^  int  (*bind_int64)(sqlite3_stmt*,int,sqlite_int64);$/;"	m	struct:sqlite3_api_routines	file:
bind_null	safe/sqlite3.c	/^  int  (*bind_null)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
bind_parameter_count	safe/sqlite3.c	/^  int  (*bind_parameter_count)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
bind_parameter_index	safe/sqlite3.c	/^  int  (*bind_parameter_index)(sqlite3_stmt*,const char*zName);$/;"	m	struct:sqlite3_api_routines	file:
bind_parameter_name	safe/sqlite3.c	/^  const char * (*bind_parameter_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
bind_text	safe/sqlite3.c	/^  int  (*bind_text)(sqlite3_stmt*,int,const char*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
bind_text16	safe/sqlite3.c	/^  int  (*bind_text16)(sqlite3_stmt*,int,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
bind_value	safe/sqlite3.c	/^  int  (*bind_value)(sqlite3_stmt*,int,const sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
bind_zeroblob	safe/sqlite3.c	/^  int (*bind_zeroblob)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
bio	mtchannel.h	/^	BIO *bio;						\/\/ bio structure (NULL if we're using a plain fd)$/;"	m	struct:CHAN
bio_err	safe/spider.133.c	/^static BIO *bio_err = NULL;$/;"	v	file:
bio_err	safe/spider.135.c	/^static BIO *bio_err = NULL;$/;"	v	file:
bio_err	safe/spider.200.c	/^static BIO *bio_err = NULL;$/;"	v	file:
bio_err	safe/spider.203.c	/^static BIO *bio_err = NULL;$/;"	v	file:
bio_err	safe/spider.204.c	/^static BIO *bio_err = NULL;$/;"	v	file:
bio_err	safe/spider.210.c	/^static BIO *bio_err = NULL;$/;"	v	file:
bio_err	safe/spider.c	/^static BIO *bio_err = NULL;$/;"	v	file:
bio_err	spider.c	/^static BIO *bio_err = NULL;$/;"	v	file:
blobGrowBuffer	safe/sqlite3.c	/^static void blobGrowBuffer(Blob *pBlob, int nMin, int *pRc){$/;"	f	file:
blobReadWrite	safe/sqlite3.c	/^static int blobReadWrite($/;"	f	file:
blobSeekToRow	safe/sqlite3.c	/^static int blobSeekToRow(Incrblob *p, sqlite3_int64 iRow, char **pzErr){$/;"	f	file:
blob_bytes	safe/sqlite3.c	/^  int (*blob_bytes)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines	file:
blob_close	safe/sqlite3.c	/^  int (*blob_close)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines	file:
blob_open	safe/sqlite3.c	/^  int (*blob_open)(sqlite3*,const char*,const char*,const char*,sqlite3_int64,$/;"	m	struct:sqlite3_api_routines	file:
blob_read	safe/sqlite3.c	/^  int (*blob_read)(sqlite3_blob*,void*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
blob_reopen	safe/sqlite3.c	/^  int (*blob_reopen)(sqlite3_blob*,sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	file:
blob_write	safe/sqlite3.c	/^  int (*blob_write)(sqlite3_blob*,const void*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
block	safe/sqlite3.c	/^  Blob block;                     \/* Current block image *\/$/;"	m	struct:NodeWriter	file:
bool	bin2c.c	56;"	d	file:
btreeClearHasContent	safe/sqlite3.c	/^static void btreeClearHasContent(BtShared *pBt){$/;"	f	file:
btreeCreateTable	safe/sqlite3.c	/^static int btreeCreateTable(Btree *p, int *piTable, int createTabFlags){$/;"	f	file:
btreeCursor	safe/sqlite3.c	/^static int btreeCursor($/;"	f	file:
btreeDropTable	safe/sqlite3.c	/^static int btreeDropTable(Btree *p, Pgno iTable, int *piMoved){$/;"	f	file:
btreeEndTransaction	safe/sqlite3.c	/^static void btreeEndTransaction(Btree *p){$/;"	f	file:
btreeGetHasContent	safe/sqlite3.c	/^static int btreeGetHasContent(BtShared *pBt, Pgno pgno){$/;"	f	file:
btreeGetPage	safe/sqlite3.c	/^static int btreeGetPage($/;"	f	file:
btreeInitPage	safe/sqlite3.c	/^static int btreeInitPage(MemPage *pPage){$/;"	f	file:
btreeIntegrity	safe/sqlite3.c	49897;"	d	file:
btreeInvokeBusyHandler	safe/sqlite3.c	/^static int btreeInvokeBusyHandler(void *pArg){$/;"	f	file:
btreeMask	safe/sqlite3.c	/^  yDbMask btreeMask;      \/* Bitmask of db->aDb[] entries referenced *\/$/;"	m	struct:Vdbe	file:
btreeMoveto	safe/sqlite3.c	/^static int btreeMoveto($/;"	f	file:
btreePageFromDbPage	safe/sqlite3.c	/^static MemPage *btreePageFromDbPage(DbPage *pDbPage, Pgno pgno, BtShared *pBt){$/;"	f	file:
btreePageLookup	safe/sqlite3.c	/^static MemPage *btreePageLookup(BtShared *pBt, Pgno pgno){$/;"	f	file:
btreePagecount	safe/sqlite3.c	/^static Pgno btreePagecount(BtShared *pBt){$/;"	f	file:
btreeParseCell	safe/sqlite3.c	/^static void btreeParseCell($/;"	f	file:
btreeParseCellPtr	safe/sqlite3.c	/^static void btreeParseCellPtr($/;"	f	file:
btreeRestoreCursorPosition	safe/sqlite3.c	/^static int btreeRestoreCursorPosition(BtCursor *pCur){$/;"	f	file:
btreeSetHasContent	safe/sqlite3.c	/^static int btreeSetHasContent(BtShared *pBt, Pgno pgno){$/;"	f	file:
btsFlags	safe/sqlite3.c	/^  u16 btsFlags;         \/* Boolean parameters.  See BTS_* macros below *\/$/;"	m	struct:BtShared	file:
busy	safe/sqlite3.c	/^    u8 busy;                    \/* TRUE if currently initializing *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
busyHandler	safe/sqlite3.c	/^  BusyHandler busyHandler;      \/* Busy callback *\/$/;"	m	struct:sqlite3	file:
busyTimeout	safe/sqlite3.c	/^  int busyTimeout;              \/* Busy handler timeout, in msec *\/$/;"	m	struct:sqlite3	file:
busy_handler	safe/sqlite3.c	/^  int  (*busy_handler)(sqlite3*,int(*)(void*,int),void*);$/;"	m	struct:sqlite3_api_routines	file:
busy_timeout	safe/sqlite3.c	/^  int  (*busy_timeout)(sqlite3*,int ms);$/;"	m	struct:sqlite3_api_routines	file:
bytesPerLine	bin2c.c	45;"	d	file:
cType	safe/sqlite3.c	/^static const char cType[] = {$/;"	v	file:
cacheCtr	safe/sqlite3.c	/^  u32 cacheCtr;           \/* VdbeCursor row cache generation counter *\/$/;"	m	struct:Vdbe	file:
cacheEntryClear	safe/sqlite3.c	/^static void cacheEntryClear(Parse *pParse, struct yColCache *p){$/;"	f	file:
cacheStatus	safe/sqlite3.c	/^  u32 cacheStatus;      \/* Cache is valid if this matches Vdbe.cacheCtr *\/$/;"	m	struct:VdbeCursor	file:
cache_size	safe/sqlite3.c	/^  int cache_size;      \/* Number of pages to use in the cache *\/$/;"	m	struct:Schema	file:
cachedRowid	safe/sqlite3.c	/^  sqlite3_int64 cachedRowid; \/* Next rowid cache.  0 means not valid *\/$/;"	m	struct:BtCursor	file:
callCollNeeded	safe/sqlite3.c	/^static void callCollNeeded(sqlite3 *db, int enc, const char *zName){$/;"	f	file:
callFinaliser	safe/sqlite3.c	/^static void callFinaliser(sqlite3 *db, int offset){$/;"	f	file:
callMap	safe/mtwamp.c	/^STATIC IDMAP *callMap = NULL;								\/\/ Calls (wamp_call_t) that have been invoked but not yet yielded$/;"	v
calleeMapExact	mtwamp.c	/^	SPMAP *calleeMapExact;						\/\/ Map of known callees with exact call$/;"	m	struct:WAMPREALM	file:
calleeMapExact	safe/mtwamp.c	/^	SPMAP *calleeMapExact;						\/\/ Map of known callees with exact call$/;"	m	struct:WAMPREALM	file:
calleeMapExact	safe/mtwamp.h	/^	SPMAP *calleeMapExact;						\/\/ Map of known callees with exact call$/;"	m	struct:WAMPREALM
calleeMapPrefix	mtwamp.c	/^	SPMAP *calleeMapPrefix;						\/\/ Map of known callees	with prefix call$/;"	m	struct:WAMPREALM	file:
calleeMapPrefix	safe/mtwamp.c	/^	SPMAP *calleeMapPrefix;						\/\/ Map of known callees	with prefix call$/;"	m	struct:WAMPREALM	file:
calleeMapPrefix	safe/mtwamp.h	/^	SPMAP *calleeMapPrefix;						\/\/ Map of known callees	with prefix call$/;"	m	struct:WAMPREALM
calleeMapWildcard	mtwamp.c	/^	SPMAP *calleeMapWildcard;					\/\/ Map of known callees with wildcard call$/;"	m	struct:WAMPREALM	file:
calleeMapWildcard	safe/mtwamp.c	/^	SPMAP *calleeMapWildcard;					\/\/ Map of known callees with wildcard call$/;"	m	struct:WAMPREALM	file:
calleeMapWildcard	safe/mtwamp.h	/^	SPMAP *calleeMapWildcard;					\/\/ Map of known callees with wildcard call$/;"	m	struct:WAMPREALM
calleeRequestId	mtwamp.c	/^	long long calleeRequestId;$/;"	m	struct:wamp_call_t	file:
calleeWampName	mtwamp.c	/^	const char *calleeWampName;								\/\/ The name of the calling wamp$/;"	m	struct:wamp_call_t	file:
callerRequestId	mtwamp.c	/^	long long callerRequestId;$/;"	m	struct:wamp_call_t	file:
callerRequestId	safe/mtwamp.c	/^	long long callerRequestId;$/;"	m	struct:wamp_call_t	file:
callerWampName	mtwamp.c	/^	const char *callerWampName;								\/\/ The name of the calling wamp$/;"	m	struct:wamp_call_t	file:
callerWampName	safe/mtwamp.c	/^	const char *callerWampName;								\/\/ The name of the calling wamp$/;"	m	struct:wamp_call_t	file:
cantClose	bin2c.c	/^const char* cantClose = "Can't close file '%s'";$/;"	v
cantDetermine	bin2c.c	/^const char* cantDetermine = "Can't determine the file size of '%s'";$/;"	v
cantMalloc	bin2c.c	/^const char* cantMalloc = "Can't allocate memory for '%s'";$/;"	v
cantOpen	bin2c.c	/^const char* cantOpen = "Can't open file '%s'";$/;"	v
cantRead	bin2c.c	/^const char* cantRead = "Can't read from file %s";$/;"	v
cantRemove	bin2c.c	/^const char* cantRemove = "Can't remove file '%s'";$/;"	v
cantSeek	bin2c.c	/^const char* cantSeek = "Can't seek in the file '%s'";$/;"	v
cantWrite	bin2c.c	/^const char* cantWrite = "Can't write to file '%s'";$/;"	v
cb_Password	safe/spider.133.c	/^static int cb_Password(char *buf,int num, int rwflag,void *userdata)$/;"	f	file:
cb_Password	safe/spider.135.c	/^static int cb_Password(char *buf,int num, int rwflag,void *userdata)$/;"	f	file:
cb_Password	safe/spider.200.c	/^static int cb_Password(char *buf,int num, int rwflag,void *userdata)$/;"	f	file:
cb_Password	safe/spider.203.c	/^static int cb_Password(char *buf,int num, int rwflag,void *userdata)$/;"	f	file:
cb_Password	safe/spider.204.c	/^static int cb_Password(char *buf,int num, int rwflag,void *userdata)$/;"	f	file:
cb_Password	safe/spider.210.c	/^static int cb_Password(char *buf,int num, int rwflag,void *userdata)$/;"	f	file:
cb_Password	safe/spider.c	/^static int cb_Password(char *buf,int num, int rwflag,void *userdata)$/;"	f	file:
cb_Password	spider.c	/^static int cb_Password(char *buf,int num, int rwflag,void *userdata)$/;"	f	file:
cb_binary	mtwebsocket.c	/^	WSCB_Receiver cb_binary;		\/\/ Callback Handler for BINARY messages (opcode = 2)$/;"	m	struct:WS	file:
cb_binary	mtwebsocket.h	/^	WSCB_Receiver cb_binary;		\/\/ Callback Handler for BINARY messages (opcode = 2)$/;"	m	struct:WS
cb_binary	safe/mtwebsocket.h	/^	WSCB_Receiver cb_binary;		\/\/ Callback Handler for BINARY messages (opcode = 2)$/;"	m	struct:WSL
cb_closed	mtchannel.h	/^	CHANCB_Receiver cb_closed;		\/\/ Called when a channel is closed, just before it's deleted$/;"	m	struct:CHAN
cb_closed	mtwebsocket.c	/^	WSCB_Closed cb_closed;			\/\/ Called just prior to deleting this websocket$/;"	m	struct:WS	file:
cb_closed	mtwebsocket.h	/^	WSCB_Closed cb_closed;			\/\/ Called just prior to deleting this websocket$/;"	m	struct:WS
cb_error	mtchannel.h	/^	CHANCB_Receiver cb_error;		\/\/ Called when there is an error on the channel$/;"	m	struct:CHAN
cb_idler	mtchannel.h	/^	CHANCB_Idler cb_idler;			\/\/ Function to call while idling$/;"	m	struct:CHANPOOL
cb_invokee	mtwamp.c	/^	WAMPCB_Invokee cb_invokee;$/;"	m	struct:wamp_invokee_t	file:
cb_ondelete	mtchannel.h	/^	CHANCB_DeleteCallback cb_ondelete;	\/\/ Called just before we destruct the channel (allows info clearup etc.)$/;"	m	struct:CHAN
cb_ondelete	mtwamp.h	/^	WAMPCB_DeleteCallback cb_ondelete;		\/\/ Called just before object deleted$/;"	m	struct:WAMP
cb_ondelete	mtwebsocket.c	/^	WSCB_DeleteCallback cb_ondelete;	\/\/ Called just before we destruct the websocket$/;"	m	struct:WS	file:
cb_ondelete	mtwebsocket.h	/^	WSCB_DeleteCallback cb_ondelete;	\/\/ Called just before we destruct the websocket$/;"	m	struct:WS
cb_receiver	mtchannel.h	/^	CHANCB_Receiver cb_receiver;	\/\/ Callback Handler for incoming data$/;"	m	struct:CHAN
cb_receiver	safe/mtchannel.h	/^	CHANCB_Receiver cb_receiver;	\/\/ Callback Handler for incoming data$/;"	m	struct:CHAN
cb_utf8	mtwebsocket.c	/^	WSCB_Receiver cb_utf8;			\/\/ Callback Handler for UTF8 messages (opcode = 1)$/;"	m	struct:WS	file:
cb_utf8	mtwebsocket.h	/^	WSCB_Receiver cb_utf8;			\/\/ Callback Handler for UTF8 messages (opcode = 1)$/;"	m	struct:WS
cb_utf8	safe/mtwebsocket.h	/^	WSCB_Receiver cb_utf8;			\/\/ Callback Handler for UTF8 messages (opcode = 1)$/;"	m	struct:WSL
cbac_AllowedVersion	safe/spider.200.c	/^int cbac_AllowedVersion(const char *cbacId, const char *szVersion)$/;"	f
cbac_AllowedVersion	safe/spider.203.c	/^int cbac_AllowedVersion(const char *cbacId, const char *szVersion)$/;"	f
cbac_AllowedVersion	safe/spider.204.c	/^int cbac_AllowedVersion(const char *cbacId, const char *szVersion)$/;"	f
cbac_AllowedVersion	safe/spider.210.c	/^int cbac_AllowedVersion(const char *szOrganisationProduct, const char *szVersion)$/;"	f
cbac_AllowedVersion	safe/spider.c	/^int cbac_AllowedVersion(const char *szOrganisationProduct, const char *szVersion)$/;"	f
cbac_AllowedVersion	spider.c	/^int cbac_AllowedVersion(const char *szOrganisationProduct, const char *szVersion)$/;"	f
cbac_CanRunApi	safe/spider.200.c	/^int cbac_CanRunApi(const char *cbacId, const char *szApi)$/;"	f
cbac_CanRunApi	safe/spider.203.c	/^int cbac_CanRunApi(const char *cbacId, const char *szApi)$/;"	f
cbac_CanRunApi	safe/spider.204.c	/^int cbac_CanRunApi(const char *cbacId, const char *szApi)$/;"	f
cbac_CanRunApi	safe/spider.210.c	/^const char *cbac_CanRunApi(const char *szOrganisationProduct, const char *szApi, int bCheckLimits)$/;"	f
cbac_CanRunApi	safe/spider.c	/^const char *cbac_CanRunApi(const char *szOrganisationProduct, const char *szApi)$/;"	f
cbac_CanRunApi	spider.c	/^const char *cbac_CanRunApi(const char *szOrganisationProduct, const char *szApi)$/;"	f
cbac_CanSeeApi	safe/spider.c	/^int cbac_CanSeeApi(const char *szOrganisationProduct, const char *szApi)$/;"	f
cbac_CanSeeApi	spider.c	/^int cbac_CanSeeApi(const char *szOrganisationProduct, const char *szApi)$/;"	f
cbac_GetId	safe/spider.200.c	/^const char *cbac_GetId(const char *organisation, const char *product)$/;"	f
cbac_GetId	safe/spider.203.c	/^const char *cbac_GetId(const char *organisation, const char *product)$/;"	f
cbac_GetId	safe/spider.204.c	/^const char *cbac_GetId(const char *organisation, const char *product)$/;"	f
cbac_GetId	safe/spider.210.c	/^const char *cbac_GetId(const char *szOrganisationProduct)$/;"	f
cbac_GetId	safe/spider.c	/^const char *cbac_GetId(const char *szOrganisationProduct)$/;"	f
cbac_GetId	spider.c	/^const char *cbac_GetId(const char *szOrganisationProduct)$/;"	f
cdateFunc	safe/sqlite3.c	/^static void cdateFunc($/;"	f	file:
cellArea	safe/sqlite3.c	/^static RtreeDValue cellArea(Rtree *pRtree, RtreeCell *p){$/;"	f	file:
cellContains	safe/sqlite3.c	/^static int cellContains(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){$/;"	f	file:
cellGrowth	safe/sqlite3.c	/^static RtreeDValue cellGrowth(Rtree *pRtree, RtreeCell *p, RtreeCell *pCell){$/;"	f	file:
cellMargin	safe/sqlite3.c	/^static RtreeDValue cellMargin(Rtree *pRtree, RtreeCell *p){$/;"	f	file:
cellOffset	safe/sqlite3.c	/^  u16 cellOffset;      \/* Index in aData of first cell pointer *\/$/;"	m	struct:MemPage	file:
cellOverlap	safe/sqlite3.c	/^static RtreeDValue cellOverlap($/;"	f	file:
cellOverlapEnlargement	safe/sqlite3.c	/^static RtreeDValue cellOverlapEnlargement($/;"	f	file:
cellSize	safe/sqlite3.c	/^static u16 cellSize(MemPage *pPage, int iCell){$/;"	f	file:
cellSizePtr	safe/sqlite3.c	/^static u16 cellSizePtr(MemPage *pPage, u8 *pCell){$/;"	f	file:
cellUnion	safe/sqlite3.c	/^static void cellUnion(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){$/;"	f	file:
chain	safe/sqlite3.c	/^    Fts3HashElem *chain;     \/* Pointer to first entry with this hash *\/$/;"	m	struct:Fts3Hash::_fts3ht	file:
chain	safe/sqlite3.c	/^    HashElem *chain;           \/* Pointer to first entry with this hash *\/$/;"	m	struct:Hash::_ht	file:
chan_Bio	mtchannel.c	/^API BIO* chan_Bio(CHAN *chan)				{ return chan ? chan->bio : NULL; }$/;"	f
chan_ByName	mtchannel.c	/^API CHAN *chan_ByName(const char *name)$/;"	f
chan_CloseOnEmpty	mtchannel.c	/^API void chan_CloseOnEmpty(CHAN *chan)$/;"	f
chan_DataOut	mtchannel.c	/^STATIC int chan_DataOut(CHAN *chan, int front, int heap, int len, const char *data)$/;"	f
chan_Delete	mtchannel.c	/^API void chan_Delete(CHAN *chan)$/;"	f
chan_Delete	safe/mtchannel.c	/^API void chan_Delete(CHAN *c)$/;"	f
chan_EventLoop	mtchannel.c	/^API int chan_EventLoop(CHANPOOL *cp)$/;"	f
chan_EventLoop	safe/mtchannel.c	/^API int chan_EventLoop(CHANPOOL *cp)$/;"	f
chan_Fd	mtchannel.c	/^API int chan_Fd(CHAN *chan)					{ return chan ? chan->fd : -1; }$/;"	f
chan_FindByFd	mtchannel.c	/^API CHAN *chan_FindByFd(CHANPOOL *cp, int fd)$/;"	f
chan_FindByFd	safe/mtchannel.c	/^API CHAN *chan_FindByFd(CHANPOOL *cp, int fd)$/;"	f
chan_IncomingQueue	mtchannel.c	85;"	d	file:
chan_IncomingQueue	mtchannel.h	46;"	d
chan_Info	mtchannel.c	/^API void* chan_Info(CHAN *chan)				{ return chan ? chan->info : NULL; }$/;"	f
chan_Inq	mtchannel.c	/^API HLIST* chan_Inq(CHAN *chan)				{ return chan ? chan->inq : NULL; }$/;"	f
chan_Name	mtchannel.c	/^API const char *chan_Name(CHAN *chan)		{ return chan ? chan->name : NULL; }$/;"	f
chan_New	mtchannel.c	/^STATIC CHAN *chan_New(CHANPOOL *cp, int fd, BIO *bio, CHANCB_Pseudo fn, int flags)$/;"	f
chan_New	safe/mtchannel.c	/^API CHAN *chan_New(CHANPOOL *cp, int fd, BIO *io, int flags)$/;"	f
chan_NewBio	mtchannel.c	/^API CHAN *chan_NewBio(CHANPOOL *cp, BIO *bio, int flags)$/;"	f
chan_NewFd	mtchannel.c	/^API CHAN *chan_NewFd(CHANPOOL *cp, int fd, int flags)$/;"	f
chan_NewPseudo	mtchannel.c	/^API CHAN *chan_NewPseudo(CHANPOOL *cp, CHANCB_Pseudo fn, int flags)$/;"	f
chan_OnDelete	mtchannel.c	/^API CHANCB_DeleteCallback chan_OnDelete(CHAN *chan, CHANCB_DeleteCallback cb)$/;"	f
chan_Outq	mtchannel.c	/^API HLIST* chan_Outq(CHAN *chan)			{ return chan ? chan->outq : NULL; }$/;"	f
chan_Pool	mtchannel.c	/^API CHANPOOL* chan_Pool(CHAN *chan)			{ return chan ? chan->pool : NULL; }$/;"	f
chan_PoolAdd	mtchannel.c	/^API void chan_PoolAdd(CHANPOOL *cp, CHAN *c)$/;"	f
chan_PoolAdd	safe/mtchannel.c	/^API void chan_PoolAdd(CHANPOOL *cp, CHAN *c)$/;"	f
chan_PoolDeleteAllChannels	mtchannel.c	/^API void chan_PoolDeleteAllChannels(CHANPOOL *cp)$/;"	f
chan_PoolNew	mtchannel.c	/^API CHANPOOL *chan_PoolNew()$/;"	f
chan_PoolNew	safe/mtchannel.c	/^API CHANPOOL * chan_PoolNew()$/;"	f
chan_PoolRegisterIdler	mtchannel.c	/^API void chan_PoolRegisterIdler(CHANPOOL *pool, int period, CHANCB_Idler idler)$/;"	f
chan_RegisterClosed	mtchannel.c	/^API void chan_RegisterClosed(CHAN *chan, CHANCB_Receiver cb)$/;"	f
chan_RegisterError	mtchannel.c	/^API void chan_RegisterError(CHAN *chan, CHANCB_Receiver cb)$/;"	f
chan_RegisterReceiver	mtchannel.c	/^API void chan_RegisterReceiver(CHAN *chan, CHANCB_Receiver cb, int minBytes)$/;"	f
chan_RegisterReceiver	safe/mtchannel.c	/^API void chan_RegisterReceiver(CHAN *channel, CHANCB_Receiver cb)$/;"	f
chan_RemoveFromPool	mtchannel.c	/^API int chan_RemoveFromPool(CHAN *c)$/;"	f
chan_RemoveFromPool	safe/mtchannel.c	/^API int chan_RemoveFromPool(CHAN *c)$/;"	f
chan_SetInfo	mtchannel.c	/^API CHAN *chan_SetInfo(CHAN *chan, void *info)$/;"	f
chan_Write	mtchannel.c	/^API int chan_Write(CHAN *chan, int len, const char *data)$/;"	f
chan_Write	safe/mtchannel.c	/^API int chan_Write(CHAN *channel, int len, const char *data)$/;"	f
chan_WriteFront	mtchannel.c	/^API int chan_WriteFront(CHAN *chan, int len, const char *data)$/;"	f
chan_WriteFrontHeap	mtchannel.c	/^API int chan_WriteFrontHeap(CHAN *chan, int len, const char *data)$/;"	f
chan_WriteHeap	mtchannel.c	/^API int chan_WriteHeap(CHAN *chan, int len, const char *data)$/;"	f
chan_WriteHeap	safe/mtchannel.c	/^API int chan_WriteHeap(CHAN *channel, int len, const char *data)$/;"	f
changeCntOn	safe/sqlite3.c	/^  u8 changeCntOn;         \/* True to update the change-counter *\/$/;"	m	struct:Vdbe	file:
changeCountDone	safe/sqlite3.c	/^  u8 changeCountDone;         \/* Set after incrementing the change-counter *\/$/;"	m	struct:Pager	file:
changeTempStorage	safe/sqlite3.c	/^static int changeTempStorage(Parse *pParse, const char *zStorageType){$/;"	f	file:
changes	safe/sqlite3.c	/^  int  (*changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
changes	safe/sqlite3.c	/^static void changes($/;"	f	file:
channel	mtwebsocket.c	/^	CHAN *channel;					\/\/ Channel used for comms$/;"	m	struct:WS	file:
channel	mtwebsocket.h	/^	CHAN *channel;					\/\/ Channel used for comms$/;"	m	struct:WS
channel	safe/mtwamp.c	/^	WS *channel;					\/\/ The websocket channel this WAMP lives on$/;"	m	struct:WAMP	file:
channel	safe/mtwamp.h	/^	WS *channel;					\/\/ The websocket channel this WAMP lives on$/;"	m	struct:WAMP
charMap	safe/sqlite3.c	112440;"	d	file:
charMap	safe/sqlite3.c	112443;"	d	file:
charset	safe/sqlite3.c	/^  etByte charset;          \/* Offset into aDigits[] of the digits string *\/$/;"	m	struct:et_info	file:
check	bin2c.c	/^static void check(bool condition, const char *format, ...)$/;"	f	file:
checkActiveVdbeCnt	safe/sqlite3.c	/^static void checkActiveVdbeCnt(sqlite3 *db){$/;"	f	file:
checkActiveVdbeCnt	safe/sqlite3.c	62397;"	d	file:
checkAppendMsg	safe/sqlite3.c	/^static void checkAppendMsg($/;"	f	file:
checkColumnOverlap	safe/sqlite3.c	/^static int checkColumnOverlap(IdList *pIdList, ExprList *pEList){$/;"	f	file:
checkForMultiColumnSelectError	safe/sqlite3.c	/^static int checkForMultiColumnSelectError($/;"	f	file:
checkList	safe/sqlite3.c	/^static void checkList($/;"	f	file:
checkListProperties	safe/sqlite3.c	/^static void checkListProperties(sqlite3 *db){$/;"	f	file:
checkListProperties	safe/sqlite3.c	116772;"	d	file:
checkPage	safe/sqlite3.c	/^static void checkPage(PgHdr *pPg){$/;"	f	file:
checkPtrmap	safe/sqlite3.c	/^static void checkPtrmap($/;"	f	file:
checkRef	safe/sqlite3.c	/^static int checkRef(IntegrityCk *pCheck, Pgno iPage, char *zContext){$/;"	f	file:
checkSavepointCount	safe/sqlite3.c	/^static int checkSavepointCount(sqlite3 *db){$/;"	f	file:
checkSchema	safe/sqlite3.c	/^  u8 checkSchema;      \/* Causes schema cookie check after an error *\/$/;"	m	struct:Parse	file:
checkTreePage	safe/sqlite3.c	/^static int checkTreePage($/;"	f	file:
childPid	spider.c	/^	int childPid;$/;"	m	struct:invoke_info	file:
childPtrSize	safe/sqlite3.c	/^  u8 childPtrSize;     \/* 0 if leaf==1.  4 if leaf==0 *\/$/;"	m	struct:MemPage	file:
child_Add	safe/spider.133.c	/^static int child_Add(int pid, const char *szIp, const char *szId)$/;"	f	file:
child_Add	safe/spider.135.c	/^static int child_Add(int pid, const char *szIp, const char *szId)$/;"	f	file:
child_Add	safe/spider.200.c	/^static int child_Add(int pid, const char *szIp, const char *szId)$/;"	f	file:
child_Add	safe/spider.203.c	/^static int child_Add(int pid, const char *szIp, const char *szId)$/;"	f	file:
child_Add	safe/spider.204.c	/^static int child_Add(int pid, const char *szIp, const char *szId)$/;"	f	file:
child_Add	safe/spider.210.c	/^static int child_Add(int pid, const char *szIp, const char *szId)$/;"	f	file:
child_Add	safe/spider.c	/^static int child_Add(int pid, const char *szIp, const char *szId)$/;"	f	file:
child_Add	spider.c	/^static int child_Add(int pid, const char *szIp, const char *szId)$/;"	f	file:
child_Find	safe/spider.133.c	/^static int child_Find(int pid)$/;"	f	file:
child_Find	safe/spider.135.c	/^static int child_Find(int pid)$/;"	f	file:
child_Find	safe/spider.200.c	/^static int child_Find(int pid)$/;"	f	file:
child_Find	safe/spider.203.c	/^static int child_Find(int pid)$/;"	f	file:
child_Find	safe/spider.204.c	/^static int child_Find(int pid)$/;"	f	file:
child_Find	safe/spider.210.c	/^static int child_Find(int pid)$/;"	f	file:
child_Find	safe/spider.c	/^static int child_Find(int pid)$/;"	f	file:
child_Find	spider.c	/^static int child_Find(int pid)$/;"	f	file:
child_FindAdd	safe/spider.133.c	/^static int child_FindAdd(int pid)$/;"	f	file:
child_FindAdd	safe/spider.135.c	/^static int child_FindAdd(int pid)$/;"	f	file:
child_FindAdd	safe/spider.200.c	/^static int child_FindAdd(int pid)$/;"	f	file:
child_FindAdd	safe/spider.203.c	/^static int child_FindAdd(int pid)$/;"	f	file:
child_FindAdd	safe/spider.204.c	/^static int child_FindAdd(int pid)$/;"	f	file:
child_FindAdd	safe/spider.210.c	/^static int child_FindAdd(int pid)$/;"	f	file:
child_FindAdd	safe/spider.c	/^static int child_FindAdd(int pid)$/;"	f	file:
child_FindAdd	spider.c	/^static int child_FindAdd(int pid)$/;"	f	file:
child_Forget	safe/spider.133.c	/^static int child_Forget(int pid)$/;"	f	file:
child_Forget	safe/spider.135.c	/^static int child_Forget(int pid)$/;"	f	file:
child_Forget	safe/spider.200.c	/^static int child_Forget(int pid)$/;"	f	file:
child_Forget	safe/spider.203.c	/^static int child_Forget(int pid)$/;"	f	file:
child_Forget	safe/spider.204.c	/^static int child_Forget(int pid)$/;"	f	file:
child_Forget	safe/spider.210.c	/^static int child_Forget(int pid)$/;"	f	file:
child_Forget	safe/spider.c	/^static int child_Forget(int pid)$/;"	f	file:
child_Forget	spider.c	/^static int child_Forget(int pid)$/;"	f	file:
childinfo_t	safe/spider.133.c	/^typedef struct childinfo_t {$/;"	s	file:
childinfo_t	safe/spider.133.c	/^} childinfo_t;$/;"	t	file:
childinfo_t	safe/spider.135.c	/^typedef struct childinfo_t {$/;"	s	file:
childinfo_t	safe/spider.135.c	/^} childinfo_t;$/;"	t	file:
childinfo_t	safe/spider.200.c	/^typedef struct childinfo_t {$/;"	s	file:
childinfo_t	safe/spider.200.c	/^} childinfo_t;$/;"	t	file:
childinfo_t	safe/spider.203.c	/^typedef struct childinfo_t {$/;"	s	file:
childinfo_t	safe/spider.203.c	/^} childinfo_t;$/;"	t	file:
childinfo_t	safe/spider.204.c	/^typedef struct childinfo_t {$/;"	s	file:
childinfo_t	safe/spider.204.c	/^} childinfo_t;$/;"	t	file:
childinfo_t	safe/spider.210.c	/^typedef struct childinfo_t {$/;"	s	file:
childinfo_t	safe/spider.210.c	/^} childinfo_t;$/;"	t	file:
childinfo_t	safe/spider.c	/^typedef struct childinfo_t {$/;"	s	file:
childinfo_t	safe/spider.c	/^} childinfo_t;$/;"	t	file:
childinfo_t	spider.c	/^typedef struct childinfo_t {$/;"	s	file:
childinfo_t	spider.c	/^} childinfo_t;$/;"	t	file:
ckBase	safe/sqlite3.c	/^  int ckBase;          \/* Base register of data during check constraints *\/$/;"	m	struct:Parse	file:
ckptLock	safe/sqlite3.c	/^  u8 ckptLock;               \/* True if holding a checkpoint lock *\/$/;"	m	struct:Wal	file:
ckptSyncFlags	safe/sqlite3.c	/^  u8 ckptSyncFlags;           \/* SYNC_NORMAL or SYNC_FULL for checkpoint *\/$/;"	m	struct:Pager	file:
cksumInit	safe/sqlite3.c	/^  u32 cksumInit;              \/* Quasi-random value added to every checksum *\/$/;"	m	struct:Pager	file:
clearAllSharedCacheTableLocks	safe/sqlite3.c	/^static void clearAllSharedCacheTableLocks(Btree *p){$/;"	f	file:
clearAllSharedCacheTableLocks	safe/sqlite3.c	50308;"	d	file:
clearCell	safe/sqlite3.c	/^static int clearCell(MemPage *pPage, unsigned char *pCell){$/;"	f	file:
clearDatabasePage	safe/sqlite3.c	/^static int clearDatabasePage($/;"	f	file:
clearSelect	safe/sqlite3.c	/^static void clearSelect(sqlite3 *db, Select *p){$/;"	f	file:
clearYMD_HMS_TZ	safe/sqlite3.c	/^static void clearYMD_HMS_TZ(DateTime *p){$/;"	f	file:
clear_bindings	safe/sqlite3.c	/^  int (*clear_bindings)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
close	safe/sqlite3.c	/^  int  (*close)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
closeAllCursors	safe/sqlite3.c	/^static void closeAllCursors(Vdbe *p){$/;"	f	file:
closePendingFds	safe/sqlite3.c	/^static void closePendingFds(unixFile *pFile){$/;"	f	file:
closeUnixFile	safe/sqlite3.c	/^static int closeUnixFile(sqlite3_file *id){$/;"	f	file:
cmp_str	safe/spider.133.c	/^static int cmp_str(const void *a, const void *b)$/;"	f	file:
cmp_str	safe/spider.135.c	/^static int cmp_str(const void *a, const void *b)$/;"	f	file:
cmp_str	safe/spider.200.c	/^static int cmp_str(const void *a, const void *b)$/;"	f	file:
cmp_str	safe/spider.203.c	/^static int cmp_str(const void *a, const void *b)$/;"	f	file:
cmp_str	safe/spider.204.c	/^static int cmp_str(const void *a, const void *b)$/;"	f	file:
cmp_str	safe/spider.210.c	/^static int cmp_str(const void *a, const void *b)$/;"	f	file:
cmp_str	safe/spider.c	/^static int cmp_str(const void *a, const void *b)$/;"	f	file:
cmp_str	spider.c	/^static int cmp_str(const void *a, const void *b)$/;"	f	file:
cmp_strr	safe/spider.133.c	/^static int cmp_strr(const void *a, const void *b)$/;"	f	file:
cmp_strr	safe/spider.135.c	/^static int cmp_strr(const void *a, const void *b)$/;"	f	file:
cmp_strr	safe/spider.200.c	/^static int cmp_strr(const void *a, const void *b)$/;"	f	file:
cnt	safe/sqlite3.c	/^  i64 cnt;          \/* Number of elements summed *\/$/;"	m	struct:SumCtx	file:
cnt	safe/sqlite3.c	/^  int cnt;                 \/* Number of times this instruction was executed *\/$/;"	m	struct:VdbeOp	file:
cnt	safe/sqlite3.c	/^  int cnt;    \/* Number of entries without a matching leave *\/$/;"	m	struct:sqlite3_debug_mutex	file:
code	mtwamp.c	/^	int code;$/;"	m	struct:wamp_code_t	file:
code	safe/mtwamp.c	/^	int code;$/;"	m	struct:wamp_code_t	file:
codeAllEqualityTerms	safe/sqlite3.c	/^static int codeAllEqualityTerms($/;"	f	file:
codeApplyAffinity	safe/sqlite3.c	/^static void codeApplyAffinity(Parse *pParse, int base, int n, char *zAff){$/;"	f	file:
codeAttach	safe/sqlite3.c	/^static void codeAttach($/;"	f	file:
codeCompare	safe/sqlite3.c	/^static int codeCompare($/;"	f	file:
codeDistinct	safe/sqlite3.c	/^static void codeDistinct($/;"	f	file:
codeEqualityTerm	safe/sqlite3.c	/^static int codeEqualityTerm($/;"	f	file:
codeInteger	safe/sqlite3.c	/^static void codeInteger(Parse *pParse, Expr *pExpr, int negFlag, int iMem){$/;"	f	file:
codeOffset	safe/sqlite3.c	/^static void codeOffset($/;"	f	file:
codeOneLoopStart	safe/sqlite3.c	/^static Bitmask codeOneLoopStart($/;"	f	file:
codeReal	safe/sqlite3.c	/^static void codeReal(Vdbe *v, const char *z, int negateFlag, int iMem){$/;"	f	file:
codeRowTrigger	safe/sqlite3.c	/^static TriggerPrg *codeRowTrigger($/;"	f	file:
codeTableLocks	safe/sqlite3.c	/^static void codeTableLocks(Parse *pParse){$/;"	f	file:
codeTableLocks	safe/sqlite3.c	82299;"	d	file:
codeTriggerProgram	safe/sqlite3.c	/^static int codeTriggerProgram($/;"	f	file:
colNamesSet	safe/sqlite3.c	/^  u8 colNamesSet;      \/* TRUE after OP_ColumnName has been issued to pVdbe *\/$/;"	m	struct:Parse	file:
colUsed	safe/sqlite3.c	/^    Bitmask colUsed;  \/* Bit N (1<<N) set if column N of pTab is used *\/$/;"	m	struct:SrcList::SrcList_item	file:
collationMatch	safe/sqlite3.c	/^static int collationMatch(const char *zColl, Index *pIndex){$/;"	f	file:
collation_needed	safe/sqlite3.c	/^  int  (*collation_needed)(sqlite3*,void*,void(*)(void*,sqlite3*,$/;"	m	struct:sqlite3_api_routines	file:
collation_needed16	safe/sqlite3.c	/^  int  (*collation_needed16)(sqlite3*,void*,void(*)(void*,sqlite3*,$/;"	m	struct:sqlite3_api_routines	file:
columnIndex	safe/sqlite3.c	/^static int columnIndex(Table *pTab, const char *zCol){$/;"	f	file:
columnMallocFailure	safe/sqlite3.c	/^static void columnMallocFailure(sqlite3_stmt *pStmt)$/;"	f	file:
columnMem	safe/sqlite3.c	/^static Mem *columnMem(sqlite3_stmt *pStmt, int i){$/;"	f	file:
columnName	safe/sqlite3.c	/^static const void *columnName($/;"	f	file:
columnType	safe/sqlite3.c	/^static const char *columnType($/;"	f	file:
column_blob	safe/sqlite3.c	/^  const void * (*column_blob)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_bytes	safe/sqlite3.c	/^  int  (*column_bytes)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_bytes16	safe/sqlite3.c	/^  int  (*column_bytes16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_count	safe/sqlite3.c	/^  int  (*column_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
column_database_name	safe/sqlite3.c	/^  const char * (*column_database_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_database_name16	safe/sqlite3.c	/^  const void * (*column_database_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_decltype	safe/sqlite3.c	/^  const char * (*column_decltype)(sqlite3_stmt*,int i);$/;"	m	struct:sqlite3_api_routines	file:
column_decltype16	safe/sqlite3.c	/^  const void * (*column_decltype16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_double	safe/sqlite3.c	/^  double  (*column_double)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_int	safe/sqlite3.c	/^  int  (*column_int)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_int64	safe/sqlite3.c	/^  sqlite_int64  (*column_int64)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_name	safe/sqlite3.c	/^  const char * (*column_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_name16	safe/sqlite3.c	/^  const void * (*column_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_origin_name	safe/sqlite3.c	/^  const char * (*column_origin_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_origin_name16	safe/sqlite3.c	/^  const void * (*column_origin_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_table_name	safe/sqlite3.c	/^  const char * (*column_table_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_table_name16	safe/sqlite3.c	/^  const void * (*column_table_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_text	safe/sqlite3.c	/^  const unsigned char * (*column_text)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_text16	safe/sqlite3.c	/^  const void * (*column_text16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_type	safe/sqlite3.c	/^  int  (*column_type)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_value	safe/sqlite3.c	/^  sqlite3_value* (*column_value)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
commandLineHelp	bin2c.c	/^const char *commandLineHelp = $/;"	v
commit_hook	safe/sqlite3.c	/^  void * (*commit_hook)(sqlite3*,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:
compare2pow63	safe/sqlite3.c	/^static int compare2pow63(const char *zNum, int incr){$/;"	f	file:
compareInfo	safe/sqlite3.c	/^struct compareInfo {$/;"	s	file:
comparisonAffinity	safe/sqlite3.c	/^static char comparisonAffinity(Expr *pExpr){$/;"	f	file:
compileoption_get	safe/sqlite3.c	/^  const char *(*compileoption_get)(int);$/;"	m	struct:sqlite3_api_routines	file:
compileoption_used	safe/sqlite3.c	/^  int (*compileoption_used)(const char*);$/;"	m	struct:sqlite3_api_routines	file:
compileoptiongetFunc	safe/sqlite3.c	/^static void compileoptiongetFunc($/;"	f	file:
compileoptionusedFunc	safe/sqlite3.c	/^static void compileoptionusedFunc($/;"	f	file:
complete	safe/sqlite3.c	/^  int  (*complete)(const char*sql);$/;"	m	struct:sqlite3_api_routines	file:
complete16	safe/sqlite3.c	/^  int  (*complete16)(const void*sql);$/;"	m	struct:sqlite3_api_routines	file:
computeHMS	safe/sqlite3.c	/^static void computeHMS(DateTime *p){$/;"	f	file:
computeJD	safe/sqlite3.c	/^static void computeJD(DateTime *p){$/;"	f	file:
computeLimitRegisters	safe/sqlite3.c	/^static void computeLimitRegisters(Parse *pParse, Select *p, int iBreak){$/;"	f	file:
computeYMD	safe/sqlite3.c	/^static void computeYMD(DateTime *p){$/;"	f	file:
computeYMD_HMS	safe/sqlite3.c	/^static void computeYMD_HMS(DateTime *p){$/;"	f	file:
conchFile	safe/sqlite3.c	/^  unixFile *conchFile;         \/* Open conch file *\/$/;"	m	struct:proxyLockingContext	file:
conchFilePath	safe/sqlite3.c	/^  char *conchFilePath;         \/* Name of the conch file *\/$/;"	m	struct:proxyLockingContext	file:
conchHeld	safe/sqlite3.c	/^  int conchHeld;               \/* 1 if the conch is held, -1 if lockless *\/$/;"	m	struct:proxyLockingContext	file:
config_FileGetString	safe/spider.133.c	/^static const char *config_FileGetString(const char *szFilename, const char *szName)$/;"	f	file:
config_FileGetString	safe/spider.135.c	/^static const char *config_FileGetString(const char *szFilename, const char *szName)$/;"	f	file:
config_FileGetString	safe/spider.200.c	/^static const char *config_FileGetString(const char *szFilename, const char *szName)$/;"	f	file:
config_FileGetString	safe/spider.203.c	/^static const char *config_FileGetString(const char *szFilename, const char *szName)$/;"	f	file:
config_FileGetString	safe/spider.204.c	/^static const char *config_FileGetString(const char *szFilename, const char *szName)$/;"	f	file:
config_FileGetString	safe/spider.210.c	/^static const char *config_FileGetString(const char *szFilename, const char *szName)$/;"	f	file:
config_FileGetString	safe/spider.c	/^static const char *config_FileGetString(const char *szFilename, const char *szName)$/;"	f	file:
config_FileGetString	spider.c	/^static const char *config_FileGetString(const char *szFilename, const char *szName)$/;"	f	file:
config_FileGetStrings	spider.c	/^static const char *config_FileGetStrings(const char *szFilename, const char *szName, int multiple)$/;"	f	file:
config_FileSetRaw	safe/spider.133.c	/^static int config_FileSetRaw(const char *szFilename, const char *szName, const char *szNewEntry)$/;"	f	file:
config_FileSetRaw	safe/spider.135.c	/^static int config_FileSetRaw(const char *szFilename, const char *szName, const char *szNewEntry)$/;"	f	file:
config_FileSetRaw	safe/spider.200.c	/^static int config_FileSetRaw(const char *szFilename, const char *szName, const char *szNewEntry)$/;"	f	file:
config_FileSetRaw	safe/spider.203.c	/^static int config_FileSetRaw(const char *szFilename, const char *szName, const char *szNewEntry)$/;"	f	file:
config_FileSetRaw	safe/spider.204.c	/^static int config_FileSetRaw(const char *szFilename, const char *szName, const char *szNewEntry)$/;"	f	file:
config_FileSetRaw	safe/spider.210.c	/^static int config_FileSetRaw(const char *szFilename, const char *szName, const char *szNewEntry)$/;"	f	file:
config_FileSetRaw	safe/spider.c	/^static int config_FileSetRaw(const char *szFilename, const char *szName, const char *szNewEntry)$/;"	f	file:
config_FileSetRaw	spider.c	/^static int config_FileSetRaw(const char *szFilename, const char *szName, const char *szNewEntry)$/;"	f	file:
config_GetBool	safe/spider.133.c	/^static int config_GetBool(const char *szName, int nDef, const char *szComment)$/;"	f	file:
config_GetBool	safe/spider.135.c	/^static int config_GetBool(const char *szName, int nDef, const char *szComment)$/;"	f	file:
config_GetBool	safe/spider.200.c	/^static int config_GetBool(const char *szName, int nDef, const char *szComment)$/;"	f	file:
config_GetBool	safe/spider.203.c	/^static int config_GetBool(const char *szName, int nDef, const char *szComment)$/;"	f	file:
config_GetBool	safe/spider.204.c	/^static int config_GetBool(const char *szName, int nDef, const char *szComment)$/;"	f	file:
config_GetBool	safe/spider.210.c	/^static int config_GetBool(const char *szName, int nDef, const char *szComment)$/;"	f	file:
config_GetBool	safe/spider.c	/^static int config_GetBool(const char *szName, int nDef, const char *szComment)$/;"	f	file:
config_GetBool	spider.c	/^static int config_GetBool(const char *szName, int nDef, const char *szComment)$/;"	f	file:
config_GetDir	safe/spider.133.c	/^static const char *config_GetDir(const char *szName, const char *szDef, const char *szComment)$/;"	f	file:
config_GetDir	safe/spider.135.c	/^static const char *config_GetDir(const char *szName, const char *szDef, const char *szComment)$/;"	f	file:
config_GetDir	safe/spider.200.c	/^static const char *config_GetDir(const char *szName, const char *szDef, const char *szComment)$/;"	f	file:
config_GetDir	safe/spider.203.c	/^static const char *config_GetDir(const char *szName, const char *szDef, const char *szComment)$/;"	f	file:
config_GetDir	safe/spider.204.c	/^static const char *config_GetDir(const char *szName, const char *szDef, const char *szComment)$/;"	f	file:
config_GetFile	safe/spider.133.c	/^static const char *config_GetFile(const char *szName, const char *szDef, const char *szComment)$/;"	f	file:
config_GetFile	safe/spider.135.c	/^static const char *config_GetFile(const char *szName, const char *szDef, const char *szComment)$/;"	f	file:
config_GetFile	safe/spider.200.c	/^static const char *config_GetFile(const char *szName, const char *szDef, const char *szComment)$/;"	f	file:
config_GetFile	safe/spider.203.c	/^static const char *config_GetFile(const char *szName, const char *szDef, const char *szComment)$/;"	f	file:
config_GetFile	safe/spider.204.c	/^static const char *config_GetFile(const char *szName, const char *szDef, const char *szComment)$/;"	f	file:
config_GetFile	safe/spider.210.c	/^static const char *config_GetFile(const char *szName, const char *szDef, const char *szComment)$/;"	f	file:
config_GetFile	safe/spider.c	/^static const char *config_GetFile(const char *szName, const char *szDef, const char *szComment)$/;"	f	file:
config_GetFile	spider.c	/^static const char *config_GetFile(const char *szName, const char *szDef, const char *szComment)$/;"	f	file:
config_GetSetInt	safe/spider.133.c	/^static int config_GetSetInt(const char *szName, int nDef, const char *szComment)$/;"	f	file:
config_GetSetInt	safe/spider.135.c	/^static int config_GetSetInt(const char *szName, int nDef, const char *szComment)$/;"	f	file:
config_GetSetInt	safe/spider.200.c	/^static int config_GetSetInt(const char *szName, int nDef, const char *szComment)$/;"	f	file:
config_GetSetInt	safe/spider.203.c	/^static int config_GetSetInt(const char *szName, int nDef, const char *szComment)$/;"	f	file:
config_GetSetInt	safe/spider.204.c	/^static int config_GetSetInt(const char *szName, int nDef, const char *szComment)$/;"	f	file:
config_GetSetInt	safe/spider.210.c	/^static int config_GetSetInt(const char *szName, int nDef, const char *szComment)$/;"	f	file:
config_GetSetInt	safe/spider.c	/^static int config_GetSetInt(const char *szName, int nDef, const char *szComment)$/;"	f	file:
config_GetSetInt	spider.c	/^static int config_GetSetInt(const char *szName, int nDef, const char *szComment)$/;"	f	file:
config_GetSetString	safe/spider.133.c	/^static const char *config_GetSetString(const char *szName, const char *szDef, const char *szComment)$/;"	f	file:
config_GetSetString	safe/spider.135.c	/^static const char *config_GetSetString(const char *szName, const char *szDef, const char *szComment)$/;"	f	file:
config_GetSetString	safe/spider.200.c	/^static const char *config_GetSetString(const char *szName, const char *szDef, const char *szComment)$/;"	f	file:
config_GetSetString	safe/spider.203.c	/^static const char *config_GetSetString(const char *szName, const char *szDef, const char *szComment)$/;"	f	file:
config_GetSetString	safe/spider.204.c	/^static const char *config_GetSetString(const char *szName, const char *szDef, const char *szComment)$/;"	f	file:
config_GetSetString	safe/spider.210.c	/^static const char *config_GetSetString(const char *szName, const char *szDef, const char *szComment)$/;"	f	file:
config_GetSetString	safe/spider.c	/^static const char *config_GetSetString(const char *szName, const char *szDef, const char *szComment)$/;"	f	file:
config_GetSetString	spider.c	/^static const char *config_GetSetString(const char *szName, const char *szDef, const char *szComment)$/;"	f	file:
config_GetString	safe/spider.133.c	/^static const char *config_GetString(const char *szName)$/;"	f	file:
config_GetString	safe/spider.135.c	/^static const char *config_GetString(const char *szName)$/;"	f	file:
config_GetString	safe/spider.200.c	/^static const char *config_GetString(const char *szName)$/;"	f	file:
config_GetString	safe/spider.203.c	/^static const char *config_GetString(const char *szName)$/;"	f	file:
config_GetString	safe/spider.204.c	/^static const char *config_GetString(const char *szName)$/;"	f	file:
config_GetString	safe/spider.210.c	/^static const char *config_GetString(const char *szName)$/;"	f	file:
config_GetString	safe/spider.c	/^static const char *config_GetString(const char *szName)$/;"	f	file:
config_GetString	spider.c	/^static const char *config_GetString(const char *szName)$/;"	f	file:
config_SetBool	safe/spider.c	/^static int config_SetBool(const char *szName, int bState, const char *szComment)$/;"	f	file:
config_SetBool	spider.c	/^static int config_SetBool(const char *szName, int bState, const char *szComment)$/;"	f	file:
config_SetString	safe/spider.133.c	/^static int config_SetString(const char *szName, const char *szValue, int bQuote, const char *szComment)$/;"	f	file:
config_SetString	safe/spider.135.c	/^static int config_SetString(const char *szName, const char *szValue, int bQuote, const char *szComment)$/;"	f	file:
config_SetString	safe/spider.200.c	/^static int config_SetString(const char *szName, const char *szValue, int bQuote, const char *szComment)$/;"	f	file:
config_SetString	safe/spider.203.c	/^static int config_SetString(const char *szName, const char *szValue, int bQuote, const char *szComment)$/;"	f	file:
config_SetString	safe/spider.204.c	/^static int config_SetString(const char *szName, const char *szValue, int bQuote, const char *szComment)$/;"	f	file:
config_SetString	safe/spider.210.c	/^static int config_SetString(const char *szName, const char *szValue, int bQuote, const char *szComment)$/;"	f	file:
config_SetString	safe/spider.c	/^static int config_SetString(const char *szName, const char *szValue, int bQuote, const char *szComment)$/;"	f	file:
config_SetString	spider.c	/^static int config_SetString(const char *szName, const char *szValue, int bQuote, const char *szComment)$/;"	f	file:
connection	mtwamp.h	/^	} connection;$/;"	m	struct:WAMP
connectionType	mtwamp.h	/^	int connectionType;				\/\/ 1 = websocket, 2 = rawsocket, 3 = code (not currently implemented)$/;"	m	struct:WAMP
constraintName	safe/sqlite3.c	/^  Token constraintName;\/* Name of the constraint currently being parsed *\/$/;"	m	struct:Parse	file:
constructAutomaticIndex	safe/sqlite3.c	/^static void constructAutomaticIndex($/;"	f	file:
contextMalloc	safe/sqlite3.c	/^static void *contextMalloc(sqlite3_context *context, i64 nByte){$/;"	f	file:
context_db_handle	safe/sqlite3.c	/^  sqlite3 *(*context_db_handle)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
contract_Delete	safe/spider.210.c	/^void contract_Delete(contract_t *c)$/;"	f
contract_Delete	safe/spider.c	/^void contract_Delete(contract_t *c)$/;"	f
contract_Delete	spider.c	/^void contract_Delete(contract_t *c)$/;"	f
contract_Dump	safe/spider.210.c	/^void contract_Dump(const char *name, contract_t *c)$/;"	f
contract_Dump	safe/spider.c	/^void contract_Dump(const char *name, contract_t *c)$/;"	f
contract_Dump	spider.c	/^void contract_Dump(const char *name, contract_t *c)$/;"	f
contract_DumpAll	safe/spider.210.c	/^void contract_DumpAll()$/;"	f
contract_DumpAll	safe/spider.c	/^void contract_DumpAll()$/;"	f
contract_DumpAll	spider.c	/^void contract_DumpAll()$/;"	f
contract_Files	safe/spider.210.c	/^const char **contract_Files()$/;"	f
contract_Files	safe/spider.c	/^const char **contract_Files()$/;"	f
contract_Files	spider.c	/^const char **contract_Files()$/;"	f
contract_Find	safe/spider.210.c	/^contract_t *contract_Find(const char *szOrganisationProduct)$/;"	f
contract_Find	safe/spider.c	/^contract_t *contract_Find(const char *szOrganisationProduct)$/;"	f
contract_Find	spider.c	/^contract_t *contract_Find(const char *szOrganisationProduct)$/;"	f
contract_Line	safe/spider.210.c	/^char *contract_Line()$/;"	f
contract_Line	safe/spider.c	/^char *contract_Line()$/;"	f
contract_Line	spider.c	/^char *contract_Line()$/;"	f
contract_New	safe/spider.210.c	/^contract_t *contract_New()$/;"	f
contract_New	safe/spider.c	/^contract_t *contract_New()$/;"	f
contract_New	spider.c	/^contract_t *contract_New()$/;"	f
contract_Read	safe/spider.210.c	/^contract_t *contract_Read(const char *szFilename)$/;"	f
contract_Read	safe/spider.c	/^contract_t *contract_Read(const char *szFilename)$/;"	f
contract_Read	spider.c	/^contract_t *contract_Read(const char *szFilename)$/;"	f
contract_ReadAll	safe/spider.210.c	/^void contract_ReadAll(int bForce)$/;"	f
contract_ReadAll	safe/spider.c	/^void contract_ReadAll(int bForce)$/;"	f
contract_ReadAll	spider.c	/^void contract_ReadAll(int bForce)$/;"	f
contract_Remove	safe/spider.210.c	/^void contract_Remove(const char *szOrganisationProduct)$/;"	f
contract_Remove	safe/spider.c	/^void contract_Remove(const char *szOrganisationProduct)$/;"	f
contract_Remove	spider.c	/^void contract_Remove(const char *szOrganisationProduct)$/;"	f
contract_RemoveAll	safe/spider.210.c	/^void contract_RemoveAll()$/;"	f
contract_RemoveAll	safe/spider.c	/^void contract_RemoveAll()$/;"	f
contract_RemoveAll	spider.c	/^void contract_RemoveAll()$/;"	f
contract_Warn	safe/spider.210.c	/^int contract_Warn(const char *fmt, ...)$/;"	f
contract_Warn	safe/spider.c	/^int contract_Warn(const char *fmt, ...)$/;"	f
contract_Warn	spider.c	/^int contract_Warn(const char *fmt, ...)$/;"	f
contract_t	safe/spider.210.c	/^typedef struct contract_t {$/;"	s	file:
contract_t	safe/spider.210.c	/^} contract_t;$/;"	t	file:
contract_t	safe/spider.c	/^typedef struct contract_t {$/;"	s	file:
contract_t	safe/spider.c	/^} contract_t;$/;"	t	file:
contract_t	spider.c	/^typedef struct contract_t {$/;"	s	file:
contract_t	spider.c	/^} contract_t;$/;"	t	file:
contracts	safe/spider.210.c	/^SIMAP *contracts = NULL;				\/\/ Points to 'contract_t's, indexed on organisation:product$/;"	v
contracts	safe/spider.c	/^SPMAP *contracts = NULL;				\/\/ Points to 'contract_t's, indexed on organisation:product$/;"	v
contracts	spider.c	/^SPMAP *contracts = NULL;				\/\/ Points to 'contract_t's, indexed on organisation:product$/;"	v
convertCpPathToUtf8	safe/sqlite3.c	/^char *convertCpPathToUtf8( const char *in ){$/;"	f
convertUtf8Filename	safe/sqlite3.c	/^static void *convertUtf8Filename(const char *zFilename){$/;"	f	file:
convertUtf8PathToCp	safe/sqlite3.c	/^static char *convertUtf8PathToCp( const char *in ){$/;"	f	file:
cookieGoto	safe/sqlite3.c	/^  int cookieGoto;      \/* Address of OP_Goto to cookie verifier subroutine *\/$/;"	m	struct:Parse	file:
cookieMask	safe/sqlite3.c	/^  yDbMask cookieMask;  \/* Bitmask of schema verified databases *\/$/;"	m	struct:Parse	file:
cookieValue	safe/sqlite3.c	/^  int cookieValue[SQLITE_MAX_ATTACHED+2];  \/* Values of cookies to verify *\/$/;"	m	struct:Parse	file:
copyKey	safe/sqlite3.c	/^  char copyKey;           \/* True if copy of key made on insert *\/$/;"	m	struct:Fts3Hash	file:
copyNodeContent	safe/sqlite3.c	/^static void copyNodeContent(MemPage *pFrom, MemPage *pTo, int *pRC){$/;"	f	file:
copyPayload	safe/sqlite3.c	/^static int copyPayload($/;"	f	file:
copy_stemmer	safe/sqlite3.c	/^static void copy_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){$/;"	f	file:
corruptSchema	safe/sqlite3.c	/^static void corruptSchema($/;"	f	file:
count	mtjson.h	/^			int count;$/;"	m	struct:JSON::<anonymous>::<anonymous>
count	safe/mtjson.h	/^			int count;$/;"	m	struct:JSON::<anonymous>::<anonymous>
count	safe/sqlite3.c	/^    int count;                 \/* Number of entries with this hash *\/$/;"	m	struct:Hash::_ht	file:
count	safe/sqlite3.c	/^    int count;               \/* Number of entries with this hash *\/$/;"	m	struct:Fts3Hash::_fts3ht	file:
count	safe/sqlite3.c	/^  int count;              \/* Number of entries in this table *\/$/;"	m	struct:Fts3Hash	file:
count	safe/sqlite3.c	/^  unsigned int count;       \/* Number of entries in this table *\/$/;"	m	struct:Hash	file:
countFinalize	safe/sqlite3.c	/^static void countFinalize(sqlite3_context *context){$/;"	f	file:
countStep	safe/sqlite3.c	/^static void countStep(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
countWriteCursors	safe/sqlite3.c	/^static int countWriteCursors(BtShared *pBt){$/;"	f	file:
covered	safe/sqlite3.c	/^  u64 covered;                    \/* Mask of query phrases covered *\/$/;"	m	struct:SnippetFragment	file:
createCollation	safe/sqlite3.c	/^static int createCollation($/;"	f	file:
createFile	safe/sqlite3.c	/^static int createFile(JournalFile *p){$/;"	f	file:
createMacro	bin2c.c	/^bool createMacro = false;   \/* Should we create a define instead of a const? *\/$/;"	v
createMask	safe/sqlite3.c	/^static void createMask(WhereMaskSet *pMaskSet, int iCursor){$/;"	f	file:
createModule	safe/sqlite3.c	/^static int createModule($/;"	f	file:
createTableStmt	safe/sqlite3.c	/^static char *createTableStmt(sqlite3 *db, Table *p){$/;"	f	file:
create_collation	safe/sqlite3.c	/^  int  (*create_collation)(sqlite3*,const char*,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_collation16	safe/sqlite3.c	/^  int  (*create_collation16)(sqlite3*,const void*,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_collation_v2	safe/sqlite3.c	/^  int (*create_collation_v2)(sqlite3*,const char*,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_function	safe/sqlite3.c	/^  int  (*create_function)(sqlite3*,const char*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_function16	safe/sqlite3.c	/^  int  (*create_function16)(sqlite3*,const void*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_function_v2	safe/sqlite3.c	/^  int (*create_function_v2)(sqlite3*,const char*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_module	safe/sqlite3.c	/^  int (*create_module)(sqlite3*,const char*,const sqlite3_module*,void*);$/;"	m	struct:sqlite3_api_routines	file:
create_module_v2	safe/sqlite3.c	/^  int (*create_module_v2)(sqlite3*,const char*,const sqlite3_module*,void*,$/;"	m	struct:sqlite3_api_routines	file:
csr	safe/sqlite3.c	/^  Fts3MultiSegReader csr;        \/* Must be right after "base" *\/$/;"	m	struct:Fts3auxCursor	file:
ctimeFunc	safe/sqlite3.c	/^static void ctimeFunc($/;"	f	file:
ctimestampFunc	safe/sqlite3.c	/^static void ctimestampFunc($/;"	f	file:
ctrlFlags	safe/sqlite3.c	/^  u8 ctrlFlags;           \/* Flags.  See WINFILE_* below *\/$/;"	m	struct:winFile	file:
ctrlFlags	safe/sqlite3.c	/^  unsigned short int ctrlFlags;       \/* Behavioral bits.  UNIXFILE_* flags *\/$/;"	m	struct:unixFile	file:
ctx_Delete	safe/spider.133.c	/^static void ctx_Delete(SSL_CTX *ctx)$/;"	f	file:
ctx_Delete	safe/spider.135.c	/^static void ctx_Delete(SSL_CTX *ctx)$/;"	f	file:
ctx_Delete	safe/spider.200.c	/^static void ctx_Delete(SSL_CTX *ctx)$/;"	f	file:
ctx_Delete	safe/spider.203.c	/^static void ctx_Delete(SSL_CTX *ctx)$/;"	f	file:
ctx_Delete	safe/spider.204.c	/^static void ctx_Delete(SSL_CTX *ctx)$/;"	f	file:
ctx_Delete	safe/spider.210.c	/^static void ctx_Delete(SSL_CTX *ctx)$/;"	f	file:
ctx_Delete	safe/spider.c	/^static void ctx_Delete(SSL_CTX *ctx)$/;"	f	file:
ctx_Delete	spider.c	/^static void ctx_Delete(SSL_CTX *ctx)$/;"	f	file:
ctx_Error	safe/spider.133.c	/^static const char *ctx_Error()$/;"	f	file:
ctx_Error	safe/spider.135.c	/^static const char *ctx_Error()$/;"	f	file:
ctx_Error	safe/spider.200.c	/^static const char *ctx_Error()$/;"	f	file:
ctx_Error	safe/spider.203.c	/^static const char *ctx_Error()$/;"	f	file:
ctx_Error	safe/spider.204.c	/^static const char *ctx_Error()$/;"	f	file:
ctx_Error	safe/spider.210.c	/^static const char *ctx_Error()$/;"	f	file:
ctx_Error	safe/spider.c	/^static const char *ctx_Error()$/;"	f	file:
ctx_Error	spider.c	/^static const char *ctx_Error()$/;"	f	file:
ctx_New	safe/spider.133.c	/^static SSL_CTX *ctx_New(const char *szConfigDir, const char *szPassword)$/;"	f	file:
ctx_New	safe/spider.135.c	/^static SSL_CTX *ctx_New(const char *szConfigDir, const char *szPassword)$/;"	f	file:
ctx_New	safe/spider.200.c	/^SSL_CTX *ctx_New(const char *szConfigDir, const char *szPrefix, const char *szPassword)$/;"	f
ctx_New	safe/spider.203.c	/^SSL_CTX *ctx_New(const char *szConfigDir, const char *szPrefix, const char *szPassword)$/;"	f
ctx_New	safe/spider.204.c	/^SSL_CTX *ctx_New(const char *szConfigDir, const char *szPrefix, const char *szPassword)$/;"	f
ctx_New	safe/spider.210.c	/^SSL_CTX *ctx_New(const char *szConfigDir, const char *szPrefix, const char *szPassword)$/;"	f
ctx_New	safe/spider.c	/^SSL_CTX *ctx_New(const char *szConfigDir, const char *szPrefix, const char *szPassword)$/;"	f
ctx_New	spider.c	/^static SSL_CTX *ctx_New(const char *szConfigDir, const char *szPrefix, const char *szPassword)$/;"	f	file:
currentCount	safe/sqlite3.c	/^  u32 currentCount;   \/* Current number of distinct checkouts *\/$/;"	m	struct:Mem5Global	file:
currentOut	safe/sqlite3.c	/^  u32 currentOut;     \/* Current checkout, including internal fragmentation *\/$/;"	m	struct:Mem5Global	file:
currentTimeFunc	safe/sqlite3.c	/^static void currentTimeFunc($/;"	f	file:
cursorHoldsMutex	safe/sqlite3.c	/^static int cursorHoldsMutex(BtCursor *p){$/;"	f	file:
cycles	safe/sqlite3.c	/^  u64 cycles;              \/* Total time spent executing this instruction *\/$/;"	m	struct:VdbeOp	file:
daemon_channel_pool	spider.c	/^CHANPOOL *daemon_channel_pool = NULL;			\/\/ Channel list used in daemon event loop()$/;"	v
data	mtjson.h	/^	} data;$/;"	m	struct:JSON
data	safe/mtjson.h	/^	} data;$/;"	m	struct:JSON
data	safe/sqlite3.c	/^  void *data;                  \/* Data associated with this element *\/$/;"	m	struct:HashElem	file:
data	safe/sqlite3.c	/^  void *data;                \/* Data associated with this element *\/$/;"	m	struct:Fts3HashElem	file:
data_count	safe/sqlite3.c	/^  int  (*data_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
dateFunc	safe/sqlite3.c	/^static void dateFunc($/;"	f	file:
datetimeFunc	safe/sqlite3.c	/^static void datetimeFunc($/;"	f	file:
db	safe/sqlite3.c	/^  sqlite3 *db;                    \/* The database connection *\/$/;"	m	struct:Fts3Table	file:
db	safe/sqlite3.c	/^  sqlite3 *db;                   \/* The database connection *\/$/;"	m	struct:RowSet	file:
db	safe/sqlite3.c	/^  sqlite3 *db;                \/* Host database connection *\/$/;"	m	struct:Rtree	file:
db	safe/sqlite3.c	/^  sqlite3 *db;              \/* Database connection associated with this table *\/$/;"	m	struct:VTable	file:
db	safe/sqlite3.c	/^  sqlite3 *db;            \/* The associated database *\/$/;"	m	struct:Incrblob	file:
db	safe/sqlite3.c	/^  sqlite3 *db;            \/* The database connection that owns this statement *\/$/;"	m	struct:Vdbe	file:
db	safe/sqlite3.c	/^  sqlite3 *db;          \/* Database connection currently using this Btree *\/$/;"	m	struct:BtShared	file:
db	safe/sqlite3.c	/^  sqlite3 *db;         \/* Optional database for lookaside.  Can be NULL *\/$/;"	m	struct:StrAccum	file:
db	safe/sqlite3.c	/^  sqlite3 *db;         \/* The main database structure *\/$/;"	m	struct:Parse	file:
db	safe/sqlite3.c	/^  sqlite3 *db;        \/* The associated database connection *\/$/;"	m	struct:Mem	file:
db	safe/sqlite3.c	/^  sqlite3 *db;        \/* The database being initialized *\/$/;"	m	struct:	file:
db	safe/sqlite3.c	/^  sqlite3 *db;        \/* The database connection *\/$/;"	m	struct:KeyInfo	file:
db	safe/sqlite3.c	/^  sqlite3 *db;       \/* The database connection holding this btree *\/$/;"	m	struct:Btree	file:
db	safe/sqlite3.c	/^  sqlite3 *db;$/;"	m	struct:analysisInfo	file:
dbAccess	safe/spider.200.c	/^S3 *dbAccess = NULL;$/;"	v
dbAccess	safe/spider.203.c	/^S3 *dbAccess = NULL;$/;"	v
dbAccess	safe/spider.204.c	/^S3 *dbAccess = NULL;$/;"	v
dbAccess	safe/spider.210.c	/^S3 *dbAccess = NULL;$/;"	v
dbAccess	safe/spider.c	/^S3 *dbAccess = NULL;$/;"	v
dbAccess	spider.c	/^S3 *dbAccess = NULL;$/;"	v
dbFileSize	safe/sqlite3.c	/^  Pgno dbFileSize;            \/* Number of pages in the database file *\/$/;"	m	struct:Pager	file:
dbFileVers	safe/sqlite3.c	/^  char dbFileVers[16];        \/* Changes whenever database file changes *\/$/;"	m	struct:Pager	file:
dbHintSize	safe/sqlite3.c	/^  Pgno dbHintSize;            \/* Value passed to FCNTL_SIZE_HINT call *\/$/;"	m	struct:Pager	file:
dbOrigSize	safe/sqlite3.c	/^  Pgno dbOrigSize;            \/* dbSize before the current transaction *\/$/;"	m	struct:Pager	file:
dbPath	safe/sqlite3.c	/^  char *dbPath;                \/* Name of the open file *\/$/;"	m	struct:proxyLockingContext	file:
dbPath	safe/sqlite3.c	/^  const char *dbPath;             \/* Name of the open file *\/$/;"	m	struct:afpLockingContext	file:
dbSize	safe/sqlite3.c	/^  Pgno dbSize;                \/* Number of pages in the database *\/$/;"	m	struct:Pager	file:
dbUpdate	safe/sqlite3.c	/^  unsigned char dbUpdate;        \/* True if any part of database file changed *\/$/;"	m	struct:unixFile	file:
db_config	safe/sqlite3.c	/^  int (*db_config)(sqlite3*,int,...);$/;"	m	struct:sqlite3_api_routines	file:
db_handle	safe/sqlite3.c	/^  sqlite3 * (*db_handle)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
db_mutex	safe/sqlite3.c	/^  sqlite3_mutex *(*db_mutex)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
db_status	safe/sqlite3.c	/^  int (*db_status)(sqlite3*,int,int*,int*,int);$/;"	m	struct:sqlite3_api_routines	file:
debugMutexAlloc	safe/sqlite3.c	/^static sqlite3_mutex *debugMutexAlloc(int id){$/;"	f	file:
debugMutexEnd	safe/sqlite3.c	/^static int debugMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
debugMutexEnter	safe/sqlite3.c	/^static void debugMutexEnter(sqlite3_mutex *pX){$/;"	f	file:
debugMutexFree	safe/sqlite3.c	/^static void debugMutexFree(sqlite3_mutex *pX){$/;"	f	file:
debugMutexHeld	safe/sqlite3.c	/^static int debugMutexHeld(sqlite3_mutex *pX){$/;"	f	file:
debugMutexInit	safe/sqlite3.c	/^static int debugMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
debugMutexLeave	safe/sqlite3.c	/^static void debugMutexLeave(sqlite3_mutex *pX){$/;"	f	file:
debugMutexNotheld	safe/sqlite3.c	/^static int debugMutexNotheld(sqlite3_mutex *pX){$/;"	f	file:
debugMutexTry	safe/sqlite3.c	/^static int debugMutexTry(sqlite3_mutex *pX){$/;"	f	file:
declareVtab	safe/sqlite3.c	/^  u8 declareVtab;           \/* True if inside sqlite3_declare_vtab() *\/$/;"	m	struct:Parse	file:
declare_vtab	safe/sqlite3.c	/^  int (*declare_vtab)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
decodeFlags	safe/sqlite3.c	/^static int decodeFlags(MemPage *pPage, int flagByte){$/;"	f	file:
deferredMoveto	safe/sqlite3.c	/^  Bool deferredMoveto;  \/* A call to sqlite3BtreeMoveto() is needed *\/$/;"	m	struct:VdbeCursor	file:
defragmentPage	safe/sqlite3.c	/^static int defragmentPage(MemPage *pPage){$/;"	f	file:
deleteCell	safe/sqlite3.c	/^static int deleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell, int iHeight){$/;"	f	file:
deleting	mtchannel.h	/^	char deleting;					\/\/ 1 if we are currently physically deleting this object$/;"	m	struct:CHAN
deleting	mtwamp.h	/^	char deleting;							\/\/ 1 while actually deleting$/;"	m	struct:WAMP
deleting	mtwebsocket.c	/^	char deleting;					\/\/ 1 if we are currently physically deleting this object$/;"	m	struct:WS	file:
deleting	mtwebsocket.h	/^	char deleting;					\/\/ 1 if we are currently physically deleting this object$/;"	m	struct:WS
delim	safe/sqlite3.c	/^  char delim[128];             \/* flag ASCII delimiters *\/$/;"	m	struct:simple_tokenizer	file:
desc	safe/sqlite3.c	/^     unsigned char desc;       \/* True for DESC.  False for ASC. *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	file:
desc	safe/sqlite3.h	/^     unsigned char desc;       \/* True for DESC.  False for ASC. *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby
descendToCell	safe/sqlite3.c	/^static int descendToCell($/;"	f	file:
deserializeGeometry	safe/sqlite3.c	/^static int deserializeGeometry(sqlite3_value *pValue, RtreeConstraint *pCons){$/;"	f	file:
destroyRootPage	safe/sqlite3.c	/^static void destroyRootPage(Parse *pParse, int iTable, int iDb){$/;"	f	file:
destroyTable	safe/sqlite3.c	/^static void destroyTable(Parse *pParse, Table *pTab){$/;"	f	file:
detachFunc	safe/sqlite3.c	/^static void detachFunc($/;"	f	file:
dev	safe/sqlite3.c	/^  dev_t dev;                  \/* Device number *\/$/;"	m	struct:unixFileId	file:
dfltLockMode	safe/sqlite3.c	/^  u8 dfltLockMode;              \/* Default locking-mode for attached dbs *\/$/;"	m	struct:sqlite3	file:
directMode	safe/sqlite3.c	/^  u8 directMode;          \/* Direct rendering mode means take data directly$/;"	m	struct:AggInfo	file:
disableTerm	safe/sqlite3.c	/^static void disableTerm(WhereLevel *pLevel, WhereTerm *pTerm){$/;"	f	file:
disableTriggers	safe/sqlite3.c	/^  u8 disableTriggers;  \/* True to disable triggers *\/$/;"	m	struct:Parse	file:
disable_simulated_io_errors	safe/sqlite3.c	/^void disable_simulated_io_errors(void){$/;"	f
disable_simulated_io_errors	safe/sqlite3.c	42848;"	d	file:
disable_simulated_io_errors	safe/sqlite3.c	9094;"	d	file:
disallow	safe/sqlite3.c	/^  int disallow; \/* Do not allow memory allocation *\/$/;"	m	struct:	file:
disconnectAllVtab	safe/sqlite3.c	/^static void disconnectAllVtab(sqlite3 *db){$/;"	f	file:
displayP4	safe/sqlite3.c	/^static char *displayP4(Op *pOp, char *zTemp, int nTemp){$/;"	f	file:
doNotSpill	safe/sqlite3.c	/^  u8 doNotSpill;              \/* Do not spill the cache when non-zero *\/$/;"	m	struct:Pager	file:
doNotSyncSpill	safe/sqlite3.c	/^  u8 doNotSyncSpill;          \/* Do not do a spill that requires jrnl sync *\/$/;"	m	struct:Pager	file:
doSqlite3Free	safe/sqlite3.c	/^static void doSqlite3Free(void *p){$/;"	f	file:
doWalCallbacks	safe/sqlite3.c	/^static int doWalCallbacks(sqlite3 *db){$/;"	f	file:
doclist	safe/sqlite3.c	/^  Fts3Doclist doclist;$/;"	m	struct:Fts3Phrase	file:
done	safe/sqlite3.c	/^    u8 done;               \/* A flag to indicate when processing is finished *\/$/;"	m	struct:ExprList::ExprList_item	file:
dotlockCheckReservedLock	safe/sqlite3.c	/^static int dotlockCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
dotlockClose	safe/sqlite3.c	/^static int dotlockClose(sqlite3_file *id) {$/;"	f	file:
dotlockLock	safe/sqlite3.c	/^static int dotlockLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
dotlockUnlock	safe/sqlite3.c	/^static int dotlockUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
double	safe/sqlite3.c	7546;"	d	file:
double	safe/sqlite3.c	7891;"	d	file:
double	safe/sqlite3.c	821;"	d	file:
double	safe/sqlite3.h	263;"	d
double	safe/sqlite3.h	6988;"	d
doubleConsonant	safe/sqlite3.c	/^static int doubleConsonant(const char *z){$/;"	f	file:
doubleToInt64	safe/sqlite3.c	/^static i64 doubleToInt64(double r){$/;"	f	file:
downgradeAllSharedCacheTableLocks	safe/sqlite3.c	/^static void downgradeAllSharedCacheTableLocks(Btree *p){$/;"	f	file:
downgradeAllSharedCacheTableLocks	safe/sqlite3.c	50309;"	d	file:
dropCell	safe/sqlite3.c	/^static void dropCell(MemPage *pPage, int idx, int sz, int *pRC){$/;"	f	file:
dup8bytes	safe/sqlite3.c	/^static char *dup8bytes(Vdbe *v, const char *in){$/;"	f	file:
dupedExprNodeSize	safe/sqlite3.c	/^static int dupedExprNodeSize(Expr *p, int flags){$/;"	f	file:
dupedExprSize	safe/sqlite3.c	/^static int dupedExprSize(Expr *p, int flags){$/;"	f	file:
dupedExprStructSize	safe/sqlite3.c	/^static int dupedExprStructSize(Expr *p, int flags){$/;"	f	file:
eCoordType	safe/sqlite3.c	/^  int eCoordType;$/;"	m	struct:Rtree	file:
eDest	safe/sqlite3.c	/^  u8 eDest;         \/* How to dispose of the results *\/$/;"	m	struct:SelectDest	file:
eDistinct	safe/sqlite3.c	/^  u8 eDistinct;$/;"	m	struct:WhereInfo	file:
eEvalmode	safe/sqlite3.c	/^  int eEvalmode;                  \/* An FTS3_EVAL_XX constant *\/$/;"	m	struct:Fts3Cursor	file:
eFileLock	safe/sqlite3.c	/^  unsigned char eFileLock;            \/* The type of lock held on this fd *\/$/;"	m	struct:unixFile	file:
eFileLock	safe/sqlite3.c	/^  unsigned char eFileLock;        \/* One of SHARED_LOCK, RESERVED_LOCK etc. *\/$/;"	m	struct:unixInodeInfo	file:
eLock	safe/sqlite3.c	/^  u8 eLock;                   \/* Current lock held on database file *\/$/;"	m	struct:Pager	file:
eLock	safe/sqlite3.c	/^  u8 eLock;             \/* READ_LOCK or WRITE_LOCK *\/$/;"	m	struct:BtLock	file:
eOperator	safe/sqlite3.c	/^  Token eOperator;  \/* "like" or "glob" or "regexp" *\/$/;"	m	struct:LikeOp	file:
eOperator	safe/sqlite3.c	/^  u16 eOperator;          \/* A WO_xx value describing <op> *\/$/;"	m	struct:WhereTerm	file:
eOrconf	safe/sqlite3.c	/^  u8 eOrconf;          \/* Default ON CONFLICT policy for trigger steps *\/$/;"	m	struct:Parse	file:
eSearch	safe/sqlite3.c	/^  i16 eSearch;                    \/* Search strategy (see below) *\/$/;"	m	struct:Fts3Cursor	file:
eState	safe/sqlite3.c	/^  u8 eState;                  \/* Pager state (OPEN, READER, WRITER_LOCKED..) *\/$/;"	m	struct:Pager	file:
eState	safe/sqlite3.c	/^  u8 eState;                \/* One of the CURSOR_XXX constants (see below) *\/$/;"	m	struct:BtCursor	file:
eTriggerOp	safe/sqlite3.c	/^  u8 eTriggerOp;       \/* TK_UPDATE, TK_INSERT or TK_DELETE *\/$/;"	m	struct:Parse	file:
eType	safe/sqlite3.c	/^  int eType;                 \/* One of the FTSQUERY_XXX values defined below *\/$/;"	m	struct:Fts3Expr	file:
eType	safe/sqlite3.c	/^  u8 eType;                           \/* Allocation type code *\/$/;"	m	struct:MemBlockHdr	file:
eType	safe/sqlite3.c	/^  u8 eType;         \/* SQLITE_NULL, SQLITE_INTEGER ... etc. *\/$/;"	m	struct:IndexSample	file:
ebcdicToAscii	safe/sqlite3.c	/^const unsigned char ebcdicToAscii[] = {$/;"	v
enable_shared_cache	safe/sqlite3.c	/^  int  (*enable_shared_cache)(int);$/;"	m	struct:sqlite3_api_routines	file:
enable_simulated_io_errors	safe/sqlite3.c	/^void enable_simulated_io_errors(void){$/;"	f
enable_simulated_io_errors	safe/sqlite3.c	42849;"	d	file:
enable_simulated_io_errors	safe/sqlite3.c	9095;"	d	file:
enc	safe/sqlite3.c	/^  u8  enc;            \/* SQLITE_UTF8, SQLITE_UTF16BE, SQLITE_UTF16LE *\/$/;"	m	struct:Mem	file:
enc	safe/sqlite3.c	/^  u8 enc;               \/* Text encoding handled by xCmp() *\/$/;"	m	struct:CollSeq	file:
enc	safe/sqlite3.c	/^  u8 enc;              \/* Text encoding used by this database *\/$/;"	m	struct:Schema	file:
enc	safe/sqlite3.c	/^  u8 enc;             \/* Text encoding - one of the SQLITE_UTF* values *\/$/;"	m	struct:KeyInfo	file:
endpoint	safe/sqlite3.c	/^  FilePoint endpoint;             \/* Pointer to the end of the file *\/$/;"	m	struct:MemJournal	file:
endsWithNL	safe/sqlite3.c	/^static int endsWithNL(Explain *p){$/;"	f	file:
enterMutex	safe/sqlite3.c	/^static void enterMutex(void){$/;"	f	file:
errCode	safe/sqlite3.c	/^  int errCode;                  \/* Most recent error code (SQLITE_*) *\/$/;"	m	struct:sqlite3	file:
errCode	safe/sqlite3.c	/^  int errCode;                \/* One of several kinds of errors *\/$/;"	m	struct:Pager	file:
errMask	safe/sqlite3.c	/^  int errMask;                  \/* & result codes with this before returning *\/$/;"	m	struct:sqlite3	file:
errMsg	safe/sqlite3.c	/^  StrAccum errMsg;  \/* Accumulate the error message text here *\/$/;"	m	struct:IntegrityCk	file:
errcode	safe/sqlite3.c	/^  int  (*errcode)(sqlite3*db);$/;"	m	struct:sqlite3_api_routines	file:
errlogFunc	safe/sqlite3.c	/^static void errlogFunc($/;"	f	file:
errmsg	safe/sqlite3.c	/^  const char * (*errmsg)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
errmsg16	safe/sqlite3.c	/^  const void * (*errmsg16)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
errorAction	safe/sqlite3.c	/^  u8 errorAction;         \/* Recovery action to do in case of an error *\/$/;"	m	struct:Vdbe	file:
estLog	safe/sqlite3.c	/^static double estLog(double N){$/;"	f	file:
estimatedCost	safe/sqlite3.c	/^  double estimatedCost;      \/* Estimated cost of using this index *\/$/;"	m	struct:sqlite3_index_info	file:
estimatedCost	safe/sqlite3.h	/^  double estimatedCost;      \/* Estimated cost of using this index *\/$/;"	m	struct:sqlite3_index_info
etBUFSIZE	safe/sqlite3.c	19636;"	d	file:
etByte	safe/sqlite3.c	/^typedef unsigned char etByte;$/;"	t	file:
etCHARX	safe/sqlite3.c	19508;"	d	file:
etDYNSTRING	safe/sqlite3.c	19506;"	d	file:
etEXP	safe/sqlite3.c	19502;"	d	file:
etFLOAT	safe/sqlite3.c	19501;"	d	file:
etGENERIC	safe/sqlite3.c	19503;"	d	file:
etINVALID	safe/sqlite3.c	19519;"	d	file:
etORDINAL	safe/sqlite3.c	19517;"	d	file:
etPERCENT	safe/sqlite3.c	19507;"	d	file:
etPOINTER	safe/sqlite3.c	19515;"	d	file:
etRADIX	safe/sqlite3.c	19500;"	d	file:
etSIZE	safe/sqlite3.c	19504;"	d	file:
etSQLESCAPE	safe/sqlite3.c	19510;"	d	file:
etSQLESCAPE2	safe/sqlite3.c	19511;"	d	file:
etSQLESCAPE3	safe/sqlite3.c	19516;"	d	file:
etSRCLIST	safe/sqlite3.c	19514;"	d	file:
etSTRING	safe/sqlite3.c	19505;"	d	file:
etTOKEN	safe/sqlite3.c	19513;"	d	file:
et_getdigit	safe/sqlite3.c	/^static char et_getdigit(LONGDOUBLE_TYPE *val, int *cnt){$/;"	f	file:
et_info	safe/sqlite3.c	/^typedef struct et_info {   \/* Information about each format field *\/$/;"	s	file:
et_info	safe/sqlite3.c	/^} et_info;$/;"	t	file:
evalConstExpr	safe/sqlite3.c	/^static int evalConstExpr(Walker *pWalker, Expr *pExpr){$/;"	f	file:
exclMask	safe/sqlite3.c	/^  u16 exclMask;              \/* Mask of exclusive locks held *\/$/;"	m	struct:unixShm	file:
exclMask	safe/sqlite3.c	/^  u16 exclMask;              \/* Mask of exclusive locks held *\/$/;"	m	struct:winShm	file:
exclMask	safe/sqlite3.c	/^  u32 exclMask;              \/* Mask of exclusive locks held *\/$/;"	m	struct:os2ShmLink	file:
exclMask	safe/sqlite3.c	/^  u8 exclMask;               \/* Mask of exclusive locks held *\/$/;"	m	struct:unixShmNode	file:
exclusiveMode	safe/sqlite3.c	/^  u8 exclusiveMode;           \/* Boolean. True if locking_mode==EXCLUSIVE *\/$/;"	m	struct:Pager	file:
exclusiveMode	safe/sqlite3.c	/^  u8 exclusiveMode;          \/* Non-zero if connection is in exclusive mode *\/$/;"	m	struct:Wal	file:
exec	safe/sqlite3.c	/^  int  (*exec)(sqlite3*,const char*,sqlite3_callback,void*,char**);$/;"	m	struct:sqlite3_api_routines	file:
execExecSql	safe/sqlite3.c	/^static int execExecSql(sqlite3 *db, char **pzErrMsg, const char *zSql){$/;"	f	file:
execSql	safe/sqlite3.c	/^static int execSql(sqlite3 *db, char **pzErrMsg, const char *zSql){$/;"	f	file:
expensive_assert	safe/sqlite3.c	36990;"	d	file:
expensive_assert	safe/sqlite3.c	36992;"	d	file:
expired	safe/sqlite3.c	/^  int  (*expired)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
expired	safe/sqlite3.c	/^  u8 expired;             \/* True if the VM needs to be recompiled *\/$/;"	m	struct:Vdbe	file:
explain	safe/sqlite3.c	/^  u8 explain;               \/* True if the EXPLAIN flag is found on the query *\/$/;"	m	struct:Parse	file:
explain	safe/sqlite3.c	/^  u8 explain;             \/* True if EXPLAIN present on SQL command *\/$/;"	m	struct:Vdbe	file:
explainAppendTerm	safe/sqlite3.c	/^static void explainAppendTerm($/;"	f	file:
explainComposite	safe/sqlite3.c	/^static void explainComposite($/;"	f	file:
explainComposite	safe/sqlite3.c	96459;"	d	file:
explainIndexRange	safe/sqlite3.c	/^static char *explainIndexRange(sqlite3 *db, WhereLevel *pLevel, Table *pTab){$/;"	f	file:
explainOneScan	safe/sqlite3.c	/^static void explainOneScan($/;"	f	file:
explainOneScan	safe/sqlite3.c	107472;"	d	file:
explainOneSelect	safe/sqlite3.c	/^static void explainOneSelect(Vdbe *pVdbe, Select *p){$/;"	f	file:
explainSetInteger	safe/sqlite3.c	96417;"	d	file:
explainSetInteger	safe/sqlite3.c	96422;"	d	file:
explainSimpleCount	safe/sqlite3.c	/^static void explainSimpleCount($/;"	f	file:
explainSimpleCount	safe/sqlite3.c	99297;"	d	file:
explainTempTable	safe/sqlite3.c	/^static void explainTempTable(Parse *pParse, const char *zUsage){$/;"	f	file:
explainTempTable	safe/sqlite3.c	96421;"	d	file:
expmask	safe/sqlite3.c	/^  u32 expmask;            \/* Binding to these vars invalidates VM *\/$/;"	m	struct:Vdbe	file:
exprAlwaysFalse	safe/sqlite3.c	/^static int exprAlwaysFalse(Expr *p){$/;"	f	file:
exprAnalyze	safe/sqlite3.c	/^static void exprAnalyze($/;"	f	file:
exprAnalyzeAll	safe/sqlite3.c	/^static void exprAnalyzeAll($/;"	f	file:
exprAnalyzeOrTerm	safe/sqlite3.c	/^static void exprAnalyzeOrTerm($/;"	f	file:
exprCodeBetween	safe/sqlite3.c	/^static void exprCodeBetween($/;"	f	file:
exprCommute	safe/sqlite3.c	/^static void exprCommute(Parse *pParse, Expr *pExpr){$/;"	f	file:
exprDup	safe/sqlite3.c	/^static Expr *exprDup(sqlite3 *db, Expr *p, int flags, u8 **pzBuffer){$/;"	f	file:
exprIsConst	safe/sqlite3.c	/^static int exprIsConst(Expr *p, int initFlag){$/;"	f	file:
exprListTableUsage	safe/sqlite3.c	/^static Bitmask exprListTableUsage(WhereMaskSet *pMaskSet, ExprList *pList){$/;"	f	file:
exprNodeIsConstant	safe/sqlite3.c	/^static int exprNodeIsConstant(Walker *pWalker, Expr *pExpr){$/;"	f	file:
exprSelectTableUsage	safe/sqlite3.c	/^static Bitmask exprSelectTableUsage(WhereMaskSet *pMaskSet, Select *pS){$/;"	f	file:
exprSetHeight	safe/sqlite3.c	/^static void exprSetHeight(Expr *p){$/;"	f	file:
exprSetHeight	safe/sqlite3.c	75658;"	d	file:
exprStructSize	safe/sqlite3.c	/^static int exprStructSize(Expr *p){$/;"	f	file:
exprTableUsage	safe/sqlite3.c	/^static Bitmask exprTableUsage(WhereMaskSet *pMaskSet, Expr *p){$/;"	f	file:
exprToString	safe/sqlite3.c	/^static char *exprToString(Fts3Expr *pExpr, char *zBuf){$/;"	f	file:
exprUsesOtherSrc	safe/sqlite3.c	/^static int exprUsesOtherSrc(Walker *pWalker, Expr *pExpr){$/;"	f	file:
exprWalkNoop	safe/sqlite3.c	/^static int exprWalkNoop(Walker *NotUsed, Expr *NotUsed2){$/;"	f	file:
extended_errcode	safe/sqlite3.c	/^  int (*extended_errcode)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
extended_result_codes	safe/sqlite3.c	/^  int (*extended_result_codes)(sqlite3*,int);$/;"	m	struct:sqlite3_api_routines	file:
f	safe/sqlite3.c	/^  RtreeValue f;$/;"	m	union:RtreeCoord	file:
false	bin2c.c	57;"	d	file:
fcntlSizeHint	safe/sqlite3.c	/^static int fcntlSizeHint(unixFile *pFile, i64 nByte){$/;"	f	file:
fd	mtchannel.h	/^	int fd;							\/\/ File descriptor (valid even if bio is non-NULL)$/;"	m	struct:CHAN
fd	safe/mtchannel.h	/^	int fd;							\/\/ File descriptor (valid even if io is non-NULL)$/;"	m	struct:CHAN
fd	safe/mtwebsocket.h	/^	int fd;							\/\/ File descriptor (valid even if io is non-NULL)$/;"	m	struct:WS
fd	safe/sqlite3.c	/^  int fd;                           \/* file desc to assoc this lock with *\/$/;"	m	struct:ByteRangeLockPB2	file:
fd	safe/sqlite3.c	/^  int fd;                   \/* File descriptor to close *\/$/;"	m	struct:UnixUnusedFd	file:
fd	safe/sqlite3.c	/^  sqlite3_file *fd;           \/* File descriptor for database *\/$/;"	m	struct:Pager	file:
fdatasync	safe/sqlite3.c	28344;"	d	file:
fetchPayload	safe/sqlite3.c	/^static const unsigned char *fetchPayload($/;"	f	file:
fileId	safe/sqlite3.c	/^  struct unixFileId fileId;       \/* The lookup key *\/$/;"	m	struct:unixInodeInfo	file:
fileNameToSymbol	bin2c.c	/^static char *fileNameToSymbol(const char *fileName)$/;"	f	file:
file_Rollover	safe/spider.210.c	/^static void file_Rollover(const char *szFilename, unsigned int limit)$/;"	f	file:
file_Rollover	safe/spider.c	/^static void file_Rollover(const char *szFilename, unsigned int limit)$/;"	f	file:
file_Rollover	spider.c	/^static void file_Rollover(const char *szFilename, unsigned int limit)$/;"	f	file:
file_control	safe/sqlite3.c	/^  int (*file_control)(sqlite3*,const char*,int,void*);$/;"	m	struct:sqlite3_api_routines	file:
file_format	safe/sqlite3.c	/^  u8 file_format;      \/* Schema format version for this file *\/$/;"	m	struct:Schema	file:
fillInCell	safe/sqlite3.c	/^static int fillInCell($/;"	f	file:
fillInUnixFile	safe/sqlite3.c	/^static int fillInUnixFile($/;"	f	file:
filter	safe/sqlite3.c	/^  Fts3SegFilter filter;$/;"	m	struct:Fts3auxCursor	file:
finalize	safe/sqlite3.c	/^  int  (*finalize)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
finalizeAggFunctions	safe/sqlite3.c	/^static void finalizeAggFunctions(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
findBtree	safe/sqlite3.c	/^static Btree *findBtree(sqlite3 *pErrorDb, sqlite3 *pDb, const char *zDb){$/;"	f	file:
findCell	safe/sqlite3.c	51077;"	d	file:
findCellv2	safe/sqlite3.c	51079;"	d	file:
findCollSeqEntry	safe/sqlite3.c	/^static CollSeq *findCollSeqEntry($/;"	f	file:
findCreateFileMode	safe/sqlite3.c	/^static int findCreateFileMode($/;"	f	file:
findElementGivenHash	safe/sqlite3.c	/^static HashElem *findElementGivenHash($/;"	f	file:
findIndexCol	safe/sqlite3.c	/^static int findIndexCol($/;"	f	file:
findInodeInfo	safe/sqlite3.c	/^static int findInodeInfo($/;"	f	file:
findLeafNode	safe/sqlite3.c	/^static int findLeafNode(Rtree *pRtree, i64 iRowid, RtreeNode **ppLeaf){$/;"	f	file:
findNextHostParameter	safe/sqlite3.c	/^static int findNextHostParameter(const char *zSql, int *pnToken){$/;"	f	file:
findOverflowCell	safe/sqlite3.c	/^static u8 *findOverflowCell(MemPage *pPage, int iCell){$/;"	f	file:
findReusableFd	safe/sqlite3.c	/^static UnixUnusedFd *findReusableFd(const char *zPath, int flags){$/;"	f	file:
findTerm	safe/sqlite3.c	/^static WhereTerm *findTerm($/;"	f	file:
finder_type	safe/sqlite3.c	/^typedef const sqlite3_io_methods *(*finder_type)(const char*,unixFile*);$/;"	t	file:
first	safe/sqlite3.c	/^  Fts3HashElem *first;    \/* The first element of the array *\/$/;"	m	struct:Fts3Hash	file:
first	safe/sqlite3.c	/^  HashElem *first;          \/* The first element of the array *\/$/;"	m	struct:Hash	file:
fixBoundingBox	safe/sqlite3.c	/^static int fixBoundingBox(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
fixLeafParent	safe/sqlite3.c	/^static int fixLeafParent(Rtree *pRtree, RtreeNode *pLeaf){$/;"	f	file:
fkActionTrigger	safe/sqlite3.c	/^static Trigger *fkActionTrigger($/;"	f	file:
fkLookupParent	safe/sqlite3.c	/^static void fkLookupParent($/;"	f	file:
fkScanChildren	safe/sqlite3.c	/^static void fkScanChildren($/;"	f	file:
fkTriggerDelete	safe/sqlite3.c	/^static void fkTriggerDelete(sqlite3 *dbMem, Trigger *p){$/;"	f	file:
fkeyHash	safe/sqlite3.c	/^  Hash fkeyHash;       \/* All foreign keys by referenced table name *\/$/;"	m	struct:Schema	file:
flagPragma	safe/sqlite3.c	/^static int flagPragma(Parse *pParse, const char *zLeft, const char *zRight){$/;"	f	file:
flags	mtchannel.h	/^	int flags;						\/\/ Bit mask of CHAN_*$/;"	m	struct:CHAN
flags	safe/mtchannel.h	/^	int flags;						\/\/ Bit mask of CHAN_*$/;"	m	struct:CHAN
flags	safe/mtwebsocket.h	/^	int flags;						\/\/ Bit mask of WS_*$/;"	m	struct:WS
flags	safe/sqlite3.c	/^  etByte flags;            \/* One or more of FLAG_ constants below *\/$/;"	m	struct:et_info	file:
flags	safe/sqlite3.c	/^  int flags;                      \/* xOpen flags *\/$/;"	m	struct:JournalFile	file:
flags	safe/sqlite3.c	/^  int flags;                    \/* Miscellaneous flags. See below *\/$/;"	m	struct:sqlite3	file:
flags	safe/sqlite3.c	/^  int flags;                \/* Flags provided to os2Open() *\/$/;"	m	struct:os2File	file:
flags	safe/sqlite3.c	/^  int flags;                \/* Flags this file descriptor was opened with *\/$/;"	m	struct:UnixUnusedFd	file:
flags	safe/sqlite3.c	/^  int flags;              \/* Copy of "flags" passed to sqlite3_blob_open() *\/$/;"	m	struct:Incrblob	file:
flags	safe/sqlite3.c	/^  int flags;$/;"	m	struct:Fts3SegFilter	file:
flags	safe/sqlite3.c	/^  u16 flags;                     \/* PGHDR flags defined below *\/$/;"	m	struct:PgHdr	file:
flags	safe/sqlite3.c	/^  u16 flags;             \/* Various flags.  EP_* See below *\/$/;"	m	struct:Expr	file:
flags	safe/sqlite3.c	/^  u16 flags;           \/* Flags associated with this schema *\/$/;"	m	struct:Schema	file:
flags	safe/sqlite3.c	/^  u16 flags;          \/* Some combination of MEM_Null, MEM_Str, MEM_Dyn, etc. *\/$/;"	m	struct:Mem	file:
flags	safe/sqlite3.c	/^  u8 flags;            \/* Some combination of SQLITE_FUNC_* *\/$/;"	m	struct:FuncDef	file:
flags	safe/sqlite3.c	/^  u8 flags;           \/* Boolean settings.  UNPACKED_... below *\/$/;"	m	struct:UnpackedRecord	file:
flags2	safe/sqlite3.c	/^  u8 flags2;             \/* Second set of flags.  EP2_... *\/$/;"	m	struct:Expr	file:
flattenSubquery	safe/sqlite3.c	/^static int flattenSubquery($/;"	f	file:
float	safe/sqlite3.c	7892;"	d	file:
floatSwap	safe/sqlite3.c	/^static u64 floatSwap(u64 in){$/;"	f	file:
flockCheckReservedLock	safe/sqlite3.c	/^static int flockCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
flockClose	safe/sqlite3.c	/^static int flockClose(sqlite3_file *id) {$/;"	f	file:
flockLock	safe/sqlite3.c	/^static int flockLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
flockUnlock	safe/sqlite3.c	/^static int flockUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
flow_api_call	safe/spider.c	/^static const char *flow_api_call		= "flow_api-call.txt";$/;"	v	file:
flow_api_call	spider.c	/^static const char *flow_api_call		= "flow_api-call.txt";$/;"	v	file:
flow_api_spider	safe/spider.c	/^static const char *flow_api_spider		= "flow_api-spider.txt";$/;"	v	file:
flow_api_spider	spider.c	/^static const char *flow_api_spider		= "flow_api-spider.txt";$/;"	v	file:
flow_client_spider	safe/spider.c	/^static const char *flow_client_spider	= "flow_client-spider.txt";$/;"	v	file:
flow_client_spider	spider.c	/^static const char *flow_client_spider	= "flow_client-spider.txt";$/;"	v	file:
flow_spider_api	safe/spider.c	/^static const char *flow_spider_api		= "flow_spider-api.txt";$/;"	v	file:
flow_spider_api	spider.c	/^static const char *flow_spider_api		= "flow_spider-api.txt";$/;"	v	file:
flow_spider_client	safe/spider.c	/^static const char *flow_spider_client	= "flow_spider-client.txt";$/;"	v	file:
flow_spider_client	spider.c	/^static const char *flow_spider_client	= "flow_spider-client.txt";$/;"	v	file:
fmtinfo	safe/sqlite3.c	/^static const et_info fmtinfo[] = {$/;"	v	file:
fmttype	safe/sqlite3.c	/^  char fmttype;            \/* The format field code letter *\/$/;"	m	struct:et_info	file:
fn	mtchannel.h	/^	CHANCB_Pseudo fn;				\/\/ Function for communication$/;"	m	struct:CHAN
fn	mtwamp.h	/^		WAMPCB_Data fn;				\/\/ Call back routine for code-based WAMPS$/;"	m	union:WAMP::<anonymous>
forwardSubscriptions	mtwamp.c	/^	const char *forwardSubscriptions;			\/\/ WAMP to which to forward subscriptions or NULL not to forward$/;"	m	struct:WAMPREALM	file:
fpDebugReadStream	safe/spider.133.c	/^FILE *fpDebugReadStream = NULL;			\/\/ Debug output if wanted$/;"	v
fpDebugReadStream	safe/spider.135.c	/^FILE *fpDebugReadStream = NULL;			\/\/ Debug output if wanted$/;"	v
fpDebugReadStream	safe/spider.200.c	/^FILE *fpDebugReadStream = NULL;			\/\/ Debug output if wanted$/;"	v
fpDebugReadStream	safe/spider.203.c	/^FILE *fpDebugReadStream = NULL;			\/\/ Debug output if wanted$/;"	v
fpDebugReadStream	safe/spider.204.c	/^FILE *fpDebugReadStream = NULL;			\/\/ Debug output if wanted$/;"	v
fpDebugReadStream	safe/spider.210.c	/^FILE *fpDebugReadStream = NULL;			\/\/ Debug output if wanted$/;"	v
fpDebugReadStream	safe/spider.c	/^static FILE *fpDebugReadStream = NULL;	\/\/ Debug output if opened ok$/;"	v	file:
fpDebugReadStream	spider.c	/^static FILE *fpDebugReadStream = NULL;	\/\/ Debug output if opened ok$/;"	v	file:
free	safe/sqlite3.c	/^  void  (*free)(void*);$/;"	m	struct:sqlite3_api_routines	file:
freeCursorConstraints	safe/sqlite3.c	/^static void freeCursorConstraints(RtreeCursor *pCsr){$/;"	f	file:
freeEphemeralFunction	safe/sqlite3.c	/^static void freeEphemeralFunction(sqlite3 *db, FuncDef *pDef){$/;"	f	file:
freeIndex	safe/sqlite3.c	/^static void freeIndex(sqlite3 *db, Index *p){$/;"	f	file:
freeP4	safe/sqlite3.c	/^static void freeP4(sqlite3 *db, int p4type, void *p4){$/;"	f	file:
freePage	safe/sqlite3.c	/^static void freePage(MemPage *pPage, int *pRC){$/;"	f	file:
freePage2	safe/sqlite3.c	/^static int freePage2(BtShared *pBt, MemPage *pMemPage, Pgno iPage){$/;"	f	file:
freeSpace	safe/sqlite3.c	/^static int freeSpace(MemPage *pPage, int start, int size){$/;"	f	file:
freeTempSpace	safe/sqlite3.c	/^static void freeTempSpace(BtShared *pBt){$/;"	f	file:
freeUconvObjects	safe/sqlite3.c	/^static void freeUconvObjects( void ){$/;"	f	file:
free_table	safe/sqlite3.c	/^  void  (*free_table)(char**result);$/;"	m	struct:sqlite3_api_routines	file:
fromChildChan	spider.c	/^	CHAN *fromChildChan;$/;"	m	struct:invoke_info	file:
fsFlags	safe/sqlite3.c	/^  unsigned fsFlags;                   \/* cached details from statfs() *\/$/;"	m	struct:unixFile	file:
fts3AllocateSegdirIdx	safe/sqlite3.c	/^static int fts3AllocateSegdirIdx($/;"	f	file:
fts3AppendToNode	safe/sqlite3.c	/^static int fts3AppendToNode($/;"	f	file:
fts3Appendf	safe/sqlite3.c	/^static void fts3Appendf($/;"	f	file:
fts3BeginMethod	safe/sqlite3.c	/^static int fts3BeginMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3BestIndexMethod	safe/sqlite3.c	/^static int fts3BestIndexMethod(sqlite3_vtab *pVTab, sqlite3_index_info *pInfo){$/;"	f	file:
fts3BestSnippet	safe/sqlite3.c	/^static int fts3BestSnippet($/;"	f	file:
fts3BinCompare	safe/sqlite3.c	/^static int fts3BinCompare(const void *pKey1, int n1, const void *pKey2, int n2){$/;"	f	file:
fts3BinHash	safe/sqlite3.c	/^static int fts3BinHash(const void *pKey, int nKey){$/;"	f	file:
fts3ChecksumEntry	safe/sqlite3.c	/^static u64 fts3ChecksumEntry($/;"	f	file:
fts3ChecksumIndex	safe/sqlite3.c	/^static u64 fts3ChecksumIndex($/;"	f	file:
fts3CloseMethod	safe/sqlite3.c	/^static int fts3CloseMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3ColumnFilter	safe/sqlite3.c	/^static void fts3ColumnFilter($/;"	f	file:
fts3ColumnMethod	safe/sqlite3.c	/^static int fts3ColumnMethod($/;"	f	file:
fts3ColumnlistCopy	safe/sqlite3.c	/^static void fts3ColumnlistCopy(char **pp, char **ppPoslist){$/;"	f	file:
fts3ColumnlistCount	safe/sqlite3.c	/^static int fts3ColumnlistCount(char **ppCollist){$/;"	f	file:
fts3CommitMethod	safe/sqlite3.c	/^static int fts3CommitMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3CompareElemByTerm	safe/sqlite3.c	/^static int fts3CompareElemByTerm(const void *lhs, const void *rhs){$/;"	f	file:
fts3ConnectMethod	safe/sqlite3.c	/^static int fts3ConnectMethod($/;"	f	file:
fts3ContentColumns	safe/sqlite3.c	/^static int fts3ContentColumns($/;"	f	file:
fts3CreateMethod	safe/sqlite3.c	/^static int fts3CreateMethod($/;"	f	file:
fts3CreateTables	safe/sqlite3.c	/^static int fts3CreateTables(Fts3Table *p){$/;"	f	file:
fts3CursorSeek	safe/sqlite3.c	/^static int fts3CursorSeek(sqlite3_context *pContext, Fts3Cursor *pCsr){$/;"	f	file:
fts3CursorSeekStmt	safe/sqlite3.c	/^static int fts3CursorSeekStmt(Fts3Cursor *pCsr, sqlite3_stmt **ppStmt){$/;"	f	file:
fts3DatabasePageSize	safe/sqlite3.c	/^static void fts3DatabasePageSize(int *pRc, Fts3Table *p){$/;"	f	file:
fts3DbExec	safe/sqlite3.c	/^static void fts3DbExec($/;"	f	file:
fts3DeclareVtab	safe/sqlite3.c	/^static void fts3DeclareVtab(int *pRc, Fts3Table *p){$/;"	f	file:
fts3DecodeIntArray	safe/sqlite3.c	/^static void fts3DecodeIntArray($/;"	f	file:
fts3DeleteAll	safe/sqlite3.c	/^static int fts3DeleteAll(Fts3Table *p, int bContent){$/;"	f	file:
fts3DeleteByRowid	safe/sqlite3.c	/^static int fts3DeleteByRowid($/;"	f	file:
fts3DeleteSegdir	safe/sqlite3.c	/^static int fts3DeleteSegdir($/;"	f	file:
fts3DeleteSegment	safe/sqlite3.c	/^static int fts3DeleteSegment($/;"	f	file:
fts3DeleteTerms	safe/sqlite3.c	/^static void fts3DeleteTerms( $/;"	f	file:
fts3DestroyMethod	safe/sqlite3.c	/^static int fts3DestroyMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3DisconnectMethod	safe/sqlite3.c	/^static int fts3DisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3DoAutoincrmerge	safe/sqlite3.c	/^static int fts3DoAutoincrmerge($/;"	f	file:
fts3DoIncrmerge	safe/sqlite3.c	/^static int fts3DoIncrmerge($/;"	f	file:
fts3DoIntegrityCheck	safe/sqlite3.c	/^static int fts3DoIntegrityCheck($/;"	f	file:
fts3DoOptimize	safe/sqlite3.c	/^static int fts3DoOptimize(Fts3Table *p, int bReturnDone){$/;"	f	file:
fts3DoRebuild	safe/sqlite3.c	/^static int fts3DoRebuild(Fts3Table *p){$/;"	f	file:
fts3DoclistCountDocids	safe/sqlite3.c	/^static int fts3DoclistCountDocids(char *aList, int nList){$/;"	f	file:
fts3DoclistOrMerge	safe/sqlite3.c	/^static int fts3DoclistOrMerge($/;"	f	file:
fts3DoclistPhraseMerge	safe/sqlite3.c	/^static void fts3DoclistPhraseMerge($/;"	f	file:
fts3EncodeIntArray	safe/sqlite3.c	/^static void fts3EncodeIntArray($/;"	f	file:
fts3EofMethod	safe/sqlite3.c	/^static int fts3EofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3EvalAllocateReaders	safe/sqlite3.c	/^static void fts3EvalAllocateReaders($/;"	f	file:
fts3EvalAverageDocsize	safe/sqlite3.c	/^static int fts3EvalAverageDocsize(Fts3Cursor *pCsr, int *pnPage){$/;"	f	file:
fts3EvalDeferredPhrase	safe/sqlite3.c	/^static int fts3EvalDeferredPhrase(Fts3Cursor *pCsr, Fts3Phrase *pPhrase){$/;"	f	file:
fts3EvalGatherStats	safe/sqlite3.c	/^static int fts3EvalGatherStats($/;"	f	file:
fts3EvalInvalidatePoslist	safe/sqlite3.c	/^static void fts3EvalInvalidatePoslist(Fts3Phrase *pPhrase){$/;"	f	file:
fts3EvalNearTest	safe/sqlite3.c	/^static int fts3EvalNearTest(Fts3Expr *pExpr, int *pRc){$/;"	f	file:
fts3EvalNearTrim	safe/sqlite3.c	/^static int fts3EvalNearTrim($/;"	f	file:
fts3EvalNext	safe/sqlite3.c	/^static int fts3EvalNext(Fts3Cursor *pCsr){$/;"	f	file:
fts3EvalNextRow	safe/sqlite3.c	/^static void fts3EvalNextRow($/;"	f	file:
fts3EvalPhraseLoad	safe/sqlite3.c	/^static int fts3EvalPhraseLoad($/;"	f	file:
fts3EvalPhraseMergeToken	safe/sqlite3.c	/^static void fts3EvalPhraseMergeToken($/;"	f	file:
fts3EvalPhraseNext	safe/sqlite3.c	/^static int fts3EvalPhraseNext($/;"	f	file:
fts3EvalPhraseStart	safe/sqlite3.c	/^static int fts3EvalPhraseStart(Fts3Cursor *pCsr, int bOptOk, Fts3Phrase *p){$/;"	f	file:
fts3EvalRestart	safe/sqlite3.c	/^static void fts3EvalRestart($/;"	f	file:
fts3EvalSelectDeferred	safe/sqlite3.c	/^static int fts3EvalSelectDeferred($/;"	f	file:
fts3EvalStart	safe/sqlite3.c	/^static int fts3EvalStart(Fts3Cursor *pCsr){$/;"	f	file:
fts3EvalStartReaders	safe/sqlite3.c	/^static void fts3EvalStartReaders($/;"	f	file:
fts3EvalTestDeferredAndNear	safe/sqlite3.c	/^static int fts3EvalTestDeferredAndNear(Fts3Cursor *pCsr, int *pRc){$/;"	f	file:
fts3EvalTestExpr	safe/sqlite3.c	/^static int fts3EvalTestExpr($/;"	f	file:
fts3EvalTokenCosts	safe/sqlite3.c	/^static void fts3EvalTokenCosts($/;"	f	file:
fts3EvalUpdateCounts	safe/sqlite3.c	/^static void fts3EvalUpdateCounts(Fts3Expr *pExpr){$/;"	f	file:
fts3ExprGlobalHitsCb	safe/sqlite3.c	/^static int fts3ExprGlobalHitsCb($/;"	f	file:
fts3ExprIterate	safe/sqlite3.c	/^static int fts3ExprIterate($/;"	f	file:
fts3ExprIterate2	safe/sqlite3.c	/^static int fts3ExprIterate2($/;"	f	file:
fts3ExprLoadDoclists	safe/sqlite3.c	/^static int fts3ExprLoadDoclists($/;"	f	file:
fts3ExprLoadDoclistsCb	safe/sqlite3.c	/^static int fts3ExprLoadDoclistsCb(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprLocalHitsCb	safe/sqlite3.c	/^static int fts3ExprLocalHitsCb($/;"	f	file:
fts3ExprParse	safe/sqlite3.c	/^static int fts3ExprParse($/;"	f	file:
fts3ExprPhraseCount	safe/sqlite3.c	/^static int fts3ExprPhraseCount(Fts3Expr *pExpr){$/;"	f	file:
fts3ExprPhraseCountCb	safe/sqlite3.c	/^static int fts3ExprPhraseCountCb(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprTermOffsetInit	safe/sqlite3.c	/^static int fts3ExprTermOffsetInit(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprTest	safe/sqlite3.c	/^static void fts3ExprTest($/;"	f	file:
fts3FilterMethod	safe/sqlite3.c	/^static int fts3FilterMethod($/;"	f	file:
fts3FindElementByHash	safe/sqlite3.c	/^static Fts3HashElem *fts3FindElementByHash($/;"	f	file:
fts3FindFunctionMethod	safe/sqlite3.c	/^static int fts3FindFunctionMethod($/;"	f	file:
fts3FunctionArg	safe/sqlite3.c	/^static int fts3FunctionArg($/;"	f	file:
fts3GetDeltaPosition	safe/sqlite3.c	/^static void fts3GetDeltaPosition(char **pp, int *piPos){$/;"	f	file:
fts3GetDeltaVarint	safe/sqlite3.c	/^static void fts3GetDeltaVarint(char **pp, sqlite3_int64 *pVal){$/;"	f	file:
fts3GetDeltaVarint3	safe/sqlite3.c	/^static void fts3GetDeltaVarint3($/;"	f	file:
fts3GetMatchinfo	safe/sqlite3.c	/^static int fts3GetMatchinfo($/;"	f	file:
fts3GetReverseVarint	safe/sqlite3.c	/^static void fts3GetReverseVarint($/;"	f	file:
fts3Getint	safe/sqlite3.c	/^static int fts3Getint(const char **pz){$/;"	f	file:
fts3GobbleInt	safe/sqlite3.c	/^static int fts3GobbleInt(const char **pp, int *pnOut){$/;"	f	file:
fts3HashClear	safe/sqlite3.c	117612;"	d	file:
fts3HashCount	safe/sqlite3.c	117636;"	d	file:
fts3HashData	safe/sqlite3.c	117629;"	d	file:
fts3HashFind	safe/sqlite3.c	117611;"	d	file:
fts3HashFindElem	safe/sqlite3.c	117613;"	d	file:
fts3HashFirst	safe/sqlite3.c	117627;"	d	file:
fts3HashFree	safe/sqlite3.c	/^static void fts3HashFree(void *p){$/;"	f	file:
fts3HashInit	safe/sqlite3.c	117609;"	d	file:
fts3HashInsert	safe/sqlite3.c	117610;"	d	file:
fts3HashInsertElement	safe/sqlite3.c	/^static void fts3HashInsertElement($/;"	f	file:
fts3HashKey	safe/sqlite3.c	117630;"	d	file:
fts3HashKeysize	safe/sqlite3.c	117631;"	d	file:
fts3HashMalloc	safe/sqlite3.c	/^static void *fts3HashMalloc(int n){$/;"	f	file:
fts3HashNext	safe/sqlite3.c	117628;"	d	file:
fts3IncrmergeAppend	safe/sqlite3.c	/^static int fts3IncrmergeAppend($/;"	f	file:
fts3IncrmergeChomp	safe/sqlite3.c	/^static int fts3IncrmergeChomp($/;"	f	file:
fts3IncrmergeCsr	safe/sqlite3.c	/^static int fts3IncrmergeCsr($/;"	f	file:
fts3IncrmergeHintLoad	safe/sqlite3.c	/^static int fts3IncrmergeHintLoad(Fts3Table *p, Blob *pHint){$/;"	f	file:
fts3IncrmergeHintPop	safe/sqlite3.c	/^static int fts3IncrmergeHintPop(Blob *pHint, i64 *piAbsLevel, int *pnInput){$/;"	f	file:
fts3IncrmergeHintPush	safe/sqlite3.c	/^static void fts3IncrmergeHintPush($/;"	f	file:
fts3IncrmergeHintStore	safe/sqlite3.c	/^static int fts3IncrmergeHintStore(Fts3Table *p, Blob *pHint){$/;"	f	file:
fts3IncrmergeLoad	safe/sqlite3.c	/^static int fts3IncrmergeLoad($/;"	f	file:
fts3IncrmergeOutputIdx	safe/sqlite3.c	/^static int fts3IncrmergeOutputIdx( $/;"	f	file:
fts3IncrmergePush	safe/sqlite3.c	/^static int fts3IncrmergePush($/;"	f	file:
fts3IncrmergeRelease	safe/sqlite3.c	/^static void fts3IncrmergeRelease($/;"	f	file:
fts3IncrmergeWriter	safe/sqlite3.c	/^static int fts3IncrmergeWriter( $/;"	f	file:
fts3InitVtab	safe/sqlite3.c	/^static int fts3InitVtab($/;"	f	file:
fts3InsertData	safe/sqlite3.c	/^static int fts3InsertData($/;"	f	file:
fts3InsertDocsize	safe/sqlite3.c	/^static void fts3InsertDocsize($/;"	f	file:
fts3InsertTerms	safe/sqlite3.c	/^static int fts3InsertTerms($/;"	f	file:
fts3IntegrityCheck	safe/sqlite3.c	/^static int fts3IntegrityCheck(Fts3Table *p, int *pbOk){$/;"	f	file:
fts3IsAppendable	safe/sqlite3.c	/^static int fts3IsAppendable(Fts3Table *p, sqlite3_int64 iEnd, int *pbRes){$/;"	f	file:
fts3IsEmpty	safe/sqlite3.c	/^static int fts3IsEmpty(Fts3Table *p, sqlite3_value *pRowid, int *pisEmpty){$/;"	f	file:
fts3IsSpecialColumn	safe/sqlite3.c	/^static int fts3IsSpecialColumn($/;"	f	file:
fts3LcsIteratorAdvance	safe/sqlite3.c	/^static int fts3LcsIteratorAdvance(LcsIterator *pIter){$/;"	f	file:
fts3LogMerge	safe/sqlite3.c	/^static void fts3LogMerge(int nMerge, sqlite3_int64 iAbsLevel){$/;"	f	file:
fts3LogMerge	safe/sqlite3.c	126541;"	d	file:
fts3MallocZero	safe/sqlite3.c	/^static void *fts3MallocZero(int nByte){$/;"	f	file:
fts3MatchinfoCheck	safe/sqlite3.c	/^static int fts3MatchinfoCheck($/;"	f	file:
fts3MatchinfoFunc	safe/sqlite3.c	/^static void fts3MatchinfoFunc($/;"	f	file:
fts3MatchinfoLcs	safe/sqlite3.c	/^static int fts3MatchinfoLcs(Fts3Cursor *pCsr, MatchInfo *pInfo){$/;"	f	file:
fts3MatchinfoLcsCb	safe/sqlite3.c	/^static int fts3MatchinfoLcsCb($/;"	f	file:
fts3MatchinfoSelectDoctotal	safe/sqlite3.c	/^static int fts3MatchinfoSelectDoctotal($/;"	f	file:
fts3MatchinfoSize	safe/sqlite3.c	/^static int fts3MatchinfoSize(MatchInfo *pInfo, char cArg){$/;"	f	file:
fts3MatchinfoValues	safe/sqlite3.c	/^static int fts3MatchinfoValues($/;"	f	file:
fts3Module	safe/sqlite3.c	/^static const sqlite3_module fts3Module = {$/;"	v	file:
fts3MsrBufferData	safe/sqlite3.c	/^static int fts3MsrBufferData($/;"	f	file:
fts3NextMethod	safe/sqlite3.c	/^static int fts3NextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3NodeAddTerm	safe/sqlite3.c	/^static int fts3NodeAddTerm($/;"	f	file:
fts3NodeFree	safe/sqlite3.c	/^static void fts3NodeFree(SegmentNode *pTree){$/;"	f	file:
fts3NodeWrite	safe/sqlite3.c	/^static int fts3NodeWrite($/;"	f	file:
fts3OffsetsFunc	safe/sqlite3.c	/^static void fts3OffsetsFunc($/;"	f	file:
fts3OpenMethod	safe/sqlite3.c	/^static int fts3OpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){$/;"	f	file:
fts3OptimizeFunc	safe/sqlite3.c	/^static void fts3OptimizeFunc($/;"	f	file:
fts3PendingListAppend	safe/sqlite3.c	/^static int fts3PendingListAppend($/;"	f	file:
fts3PendingListAppendVarint	safe/sqlite3.c	/^static int fts3PendingListAppendVarint($/;"	f	file:
fts3PendingListDelete	safe/sqlite3.c	/^static void fts3PendingListDelete(PendingList *pList){$/;"	f	file:
fts3PendingTermsAdd	safe/sqlite3.c	/^static int fts3PendingTermsAdd($/;"	f	file:
fts3PendingTermsAddOne	safe/sqlite3.c	/^static int fts3PendingTermsAddOne($/;"	f	file:
fts3PendingTermsDocid	safe/sqlite3.c	/^static int fts3PendingTermsDocid($/;"	f	file:
fts3PoslistCopy	safe/sqlite3.c	/^static void fts3PoslistCopy(char **pp, char **ppPoslist){$/;"	f	file:
fts3PoslistMerge	safe/sqlite3.c	/^static void fts3PoslistMerge($/;"	f	file:
fts3PoslistNearMerge	safe/sqlite3.c	/^static int fts3PoslistNearMerge($/;"	f	file:
fts3PoslistPhraseMerge	safe/sqlite3.c	/^static int fts3PoslistPhraseMerge($/;"	f	file:
fts3PrefixCompress	safe/sqlite3.c	/^static int fts3PrefixCompress($/;"	f	file:
fts3PrefixParameter	safe/sqlite3.c	/^static int fts3PrefixParameter($/;"	f	file:
fts3PutColNumber	safe/sqlite3.c	/^static int fts3PutColNumber(char **pp, int iCol){$/;"	f	file:
fts3PutDeltaVarint	safe/sqlite3.c	/^static void fts3PutDeltaVarint($/;"	f	file:
fts3PutDeltaVarint3	safe/sqlite3.c	/^static void fts3PutDeltaVarint3($/;"	f	file:
fts3QuoteId	safe/sqlite3.c	/^static char *fts3QuoteId(char const *zInput){$/;"	f	file:
fts3ReadExprList	safe/sqlite3.c	/^static char *fts3ReadExprList(Fts3Table *p, const char *zFunc, int *pRc){$/;"	f	file:
fts3ReadNextPos	safe/sqlite3.c	/^static void fts3ReadNextPos($/;"	f	file:
fts3ReallocOrFree	safe/sqlite3.c	/^static void *fts3ReallocOrFree(void *pOrig, int nNew){$/;"	f	file:
fts3Rehash	safe/sqlite3.c	/^static int fts3Rehash(Fts3Hash *pH, int new_size){$/;"	f	file:
fts3ReleaseMethod	safe/sqlite3.c	/^static int fts3ReleaseMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts3RemoveElementByHash	safe/sqlite3.c	/^static void fts3RemoveElementByHash($/;"	f	file:
fts3RemoveSegdirEntry	safe/sqlite3.c	/^static int fts3RemoveSegdirEntry($/;"	f	file:
fts3RenameMethod	safe/sqlite3.c	/^static int fts3RenameMethod($/;"	f	file:
fts3RepackSegdirLevel	safe/sqlite3.c	/^static int fts3RepackSegdirLevel($/;"	f	file:
fts3ReversePoslist	safe/sqlite3.c	/^static void fts3ReversePoslist(char *pStart, char **ppPoslist){$/;"	f	file:
fts3RollbackMethod	safe/sqlite3.c	/^static int fts3RollbackMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3RollbackToMethod	safe/sqlite3.c	/^static int fts3RollbackToMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts3RowidMethod	safe/sqlite3.c	/^static int fts3RowidMethod(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){$/;"	f	file:
fts3SavepointMethod	safe/sqlite3.c	/^static int fts3SavepointMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts3ScanInteriorNode	safe/sqlite3.c	/^static int fts3ScanInteriorNode($/;"	f	file:
fts3SegReaderCmp	safe/sqlite3.c	/^static int fts3SegReaderCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:
fts3SegReaderCursor	safe/sqlite3.c	/^static int fts3SegReaderCursor($/;"	f	file:
fts3SegReaderCursorAddZero	safe/sqlite3.c	/^static int fts3SegReaderCursorAddZero($/;"	f	file:
fts3SegReaderCursorAppend	safe/sqlite3.c	/^static int fts3SegReaderCursorAppend($/;"	f	file:
fts3SegReaderCursorFree	safe/sqlite3.c	/^static void fts3SegReaderCursorFree(Fts3MultiSegReader *pSegcsr){$/;"	f	file:
fts3SegReaderDoclistCmp	safe/sqlite3.c	/^static int fts3SegReaderDoclistCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:
fts3SegReaderDoclistCmpRev	safe/sqlite3.c	/^static int fts3SegReaderDoclistCmpRev(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:
fts3SegReaderFirstDocid	safe/sqlite3.c	/^static int fts3SegReaderFirstDocid(Fts3Table *pTab, Fts3SegReader *pReader){$/;"	f	file:
fts3SegReaderIncrRead	safe/sqlite3.c	/^static int fts3SegReaderIncrRead(Fts3SegReader *pReader){$/;"	f	file:
fts3SegReaderIsPending	safe/sqlite3.c	126626;"	d	file:
fts3SegReaderIsRootOnly	safe/sqlite3.c	126627;"	d	file:
fts3SegReaderNext	safe/sqlite3.c	/^static int fts3SegReaderNext($/;"	f	file:
fts3SegReaderNextDocid	safe/sqlite3.c	/^static int fts3SegReaderNextDocid($/;"	f	file:
fts3SegReaderRequire	safe/sqlite3.c	/^static int fts3SegReaderRequire(Fts3SegReader *pReader, char *pFrom, int nByte){$/;"	f	file:
fts3SegReaderSetEof	safe/sqlite3.c	/^static void fts3SegReaderSetEof(Fts3SegReader *pSeg){$/;"	f	file:
fts3SegReaderSort	safe/sqlite3.c	/^static void fts3SegReaderSort($/;"	f	file:
fts3SegReaderStart	safe/sqlite3.c	/^static int fts3SegReaderStart($/;"	f	file:
fts3SegReaderTermCmp	safe/sqlite3.c	/^static int fts3SegReaderTermCmp($/;"	f	file:
fts3SegWriterAdd	safe/sqlite3.c	/^static int fts3SegWriterAdd($/;"	f	file:
fts3SegWriterFlush	safe/sqlite3.c	/^static int fts3SegWriterFlush($/;"	f	file:
fts3SegWriterFree	safe/sqlite3.c	/^static void fts3SegWriterFree(SegmentWriter *pWriter){$/;"	f	file:
fts3SegmentMaxLevel	safe/sqlite3.c	/^static int fts3SegmentMaxLevel($/;"	f	file:
fts3SegmentMerge	safe/sqlite3.c	/^static int fts3SegmentMerge($/;"	f	file:
fts3SelectDocsize	safe/sqlite3.c	/^static int fts3SelectDocsize($/;"	f	file:
fts3SelectLeaf	safe/sqlite3.c	/^static int fts3SelectLeaf($/;"	f	file:
fts3SnippetAdvance	safe/sqlite3.c	/^static void fts3SnippetAdvance(char **ppIter, int *piIter, int iNext){$/;"	f	file:
fts3SnippetDetails	safe/sqlite3.c	/^static void fts3SnippetDetails($/;"	f	file:
fts3SnippetFindPositions	safe/sqlite3.c	/^static int fts3SnippetFindPositions(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3SnippetFunc	safe/sqlite3.c	/^static void fts3SnippetFunc($/;"	f	file:
fts3SnippetNextCandidate	safe/sqlite3.c	/^static int fts3SnippetNextCandidate(SnippetIter *pIter){$/;"	f	file:
fts3SnippetShift	safe/sqlite3.c	/^static int fts3SnippetShift($/;"	f	file:
fts3SnippetText	safe/sqlite3.c	/^static int fts3SnippetText($/;"	f	file:
fts3SpecialInsert	safe/sqlite3.c	/^static int fts3SpecialInsert(Fts3Table *p, sqlite3_value *pVal){$/;"	f	file:
fts3SqlExec	safe/sqlite3.c	/^static void fts3SqlExec($/;"	f	file:
fts3SqlStmt	safe/sqlite3.c	/^static int fts3SqlStmt($/;"	f	file:
fts3StartNode	safe/sqlite3.c	/^static void fts3StartNode(Blob *pNode, int iHeight, sqlite3_int64 iChild){$/;"	f	file:
fts3StrCompare	safe/sqlite3.c	/^static int fts3StrCompare(const void *pKey1, int n1, const void *pKey2, int n2){$/;"	f	file:
fts3StrHash	safe/sqlite3.c	/^static int fts3StrHash(const void *pKey, int nKey){$/;"	f	file:
fts3StringAppend	safe/sqlite3.c	/^static int fts3StringAppend($/;"	f	file:
fts3SyncMethod	safe/sqlite3.c	/^static int fts3SyncMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3TermCmp	safe/sqlite3.c	/^static int fts3TermCmp($/;"	f	file:
fts3TermSegReaderCursor	safe/sqlite3.c	/^static int fts3TermSegReaderCursor($/;"	f	file:
fts3TermSelect	safe/sqlite3.c	/^static int fts3TermSelect($/;"	f	file:
fts3TermSelectFinishMerge	safe/sqlite3.c	/^static int fts3TermSelectFinishMerge(Fts3Table *p, TermSelect *pTS){$/;"	f	file:
fts3TermSelectMerge	safe/sqlite3.c	/^static int fts3TermSelectMerge($/;"	f	file:
fts3TreeFinishNode	safe/sqlite3.c	/^static int fts3TreeFinishNode($/;"	f	file:
fts3TruncateNode	safe/sqlite3.c	/^static int fts3TruncateNode($/;"	f	file:
fts3TruncateSegment	safe/sqlite3.c	/^static int fts3TruncateSegment($/;"	f	file:
fts3UpdateDocTotals	safe/sqlite3.c	/^static void fts3UpdateDocTotals($/;"	f	file:
fts3UpdateMethod	safe/sqlite3.c	/^static int fts3UpdateMethod($/;"	f	file:
fts3WriteExprList	safe/sqlite3.c	/^static char *fts3WriteExprList(Fts3Table *p, const char *zFunc, int *pRc){$/;"	f	file:
fts3WriteSegdir	safe/sqlite3.c	/^static int fts3WriteSegdir($/;"	f	file:
fts3WriteSegment	safe/sqlite3.c	/^static int fts3WriteSegment($/;"	f	file:
fts3_isalnum	safe/sqlite3.c	/^static int fts3_isalnum(int x){$/;"	f	file:
fts3auxBestIndexMethod	safe/sqlite3.c	/^static int fts3auxBestIndexMethod($/;"	f	file:
fts3auxCloseMethod	safe/sqlite3.c	/^static int fts3auxCloseMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3auxColumnMethod	safe/sqlite3.c	/^static int fts3auxColumnMethod($/;"	f	file:
fts3auxConnectMethod	safe/sqlite3.c	/^static int fts3auxConnectMethod($/;"	f	file:
fts3auxDisconnectMethod	safe/sqlite3.c	/^static int fts3auxDisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3auxEofMethod	safe/sqlite3.c	/^static int fts3auxEofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3auxFilterMethod	safe/sqlite3.c	/^static int fts3auxFilterMethod($/;"	f	file:
fts3auxGrowStatArray	safe/sqlite3.c	/^static int fts3auxGrowStatArray(Fts3auxCursor *pCsr, int nSize){$/;"	f	file:
fts3auxNextMethod	safe/sqlite3.c	/^static int fts3auxNextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3auxOpenMethod	safe/sqlite3.c	/^static int fts3auxOpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){$/;"	f	file:
fts3auxRowidMethod	safe/sqlite3.c	/^static int fts3auxRowidMethod($/;"	f	file:
fts3isspace	safe/sqlite3.c	/^static int fts3isspace(char c){$/;"	f	file:
ftsCompareFunction	safe/sqlite3.c	/^static int (*ftsCompareFunction(int keyClass))(const void*,int,const void*,int){$/;"	f	file:
ftsHashFunction	safe/sqlite3.c	/^static int (*ftsHashFunction(int keyClass))(const void*,int){$/;"	f	file:
fullSync	safe/sqlite3.c	/^  u8 fullSync;                \/* Do extra syncs of the journal for robustness *\/$/;"	m	struct:Pager	file:
full_fsync	safe/sqlite3.c	/^static int full_fsync(int fd, int fullSync, int dataOnly){$/;"	f	file:
functionDestroy	safe/sqlite3.c	/^static void functionDestroy(sqlite3 *db, FuncDef *p){$/;"	f	file:
functionSearch	safe/sqlite3.c	/^static FuncDef *functionSearch($/;"	f	file:
fwdEventMap	mtwamp.c	/^	SSMAP *fwdEventMap;							\/\/ Records who wants to know about events$/;"	m	struct:WAMPREALM	file:
fwdPublishMap	mtwamp.c	/^	SSMAP *fwdPublishMap;						\/\/ Records who has published$/;"	m	struct:WAMPREALM	file:
fwdSubscriptionMap	mtwamp.c	/^	SSMAP *fwdSubscriptionMap;					\/\/ Records who is subscribing to messages$/;"	m	struct:WAMPREALM	file:
fwdUnsubscriptionMap	mtwamp.c	/^	SSMAP *fwdUnsubscriptionMap;				\/\/ Records who is unsubscribing to messages$/;"	m	struct:WAMPREALM	file:
g_ClientBio	spider.c	/^static BIO *g_ClientBio = NULL;					\/\/ When an agent, this is our client BIO$/;"	v	file:
g_Host	safe/spider.c	/^const char *g_Host = NULL;$/;"	v
g_Host	spider.c	/^const char *g_Host = NULL;$/;"	v
g_Organisation	safe/spider.210.c	/^static const char *g_Organisation = NULL;			\/\/ The organisation that is calling us$/;"	v	file:
g_Organisation	safe/spider.c	/^static const char *g_Organisation = NULL;			\/\/ The organisation that is calling us$/;"	v	file:
g_Organisation	spider.c	/^static const char *g_Organisation = NULL;			\/\/ The organisation that is calling us$/;"	v	file:
g_OrganisationProduct	safe/spider.210.c	/^static const char *g_OrganisationProduct = NULL;	\/\/ organisation:product$/;"	v	file:
g_OrganisationProduct	safe/spider.c	/^static const char *g_OrganisationProduct = NULL;	\/\/ organisation:product$/;"	v	file:
g_OrganisationProduct	spider.c	/^static const char *g_OrganisationProduct = NULL;	\/\/ organisation:product$/;"	v	file:
g_Product	safe/spider.210.c	/^static const char *g_Product = NULL;				\/\/ The product that is calling us$/;"	v	file:
g_Product	safe/spider.c	/^static const char *g_Product = NULL;				\/\/ The product that is calling us$/;"	v	file:
g_Product	spider.c	/^static const char *g_Product = NULL;				\/\/ The product that is calling us$/;"	v	file:
g_PubsubWamp	spider.c	/^WAMP *g_PubsubWamp = NULL;$/;"	v
g_cbacId	safe/spider.210.c	/^static const char *g_cbacId = NULL;					\/\/ Globally accessible copy of cbacId of current caller$/;"	v	file:
g_cbacId	safe/spider.c	/^static const char *g_cbacId = NULL;					\/\/ Globally accessible copy of cbacId of current caller$/;"	v	file:
g_cbacId	spider.c	/^static const char *g_cbacId = NULL;					\/\/ Globally accessible copy of cbacId of current caller$/;"	v	file:
g_ctx	safe/spider.200.c	/^SSL_CTX *g_ctx = NULL;$/;"	v
g_ctx	safe/spider.203.c	/^SSL_CTX *g_ctx = NULL;$/;"	v
g_ctx	safe/spider.204.c	/^SSL_CTX *g_ctx = NULL;$/;"	v
g_ctx	safe/spider.210.c	/^SSL_CTX *g_ctx = NULL;$/;"	v
g_ctx	safe/spider.c	/^SSL_CTX *g_ctx = NULL;$/;"	v
g_ctx	spider.c	/^static SSL_CTX *g_ctx = NULL;$/;"	v	file:
g_elapsed	safe/sqlite3.c	/^static sqlite_uint64 g_elapsed;$/;"	v	file:
g_io	safe/spider.133.c	/^static BIO *g_io = NULL;$/;"	v	file:
g_io	safe/spider.135.c	/^static BIO *g_io = NULL;$/;"	v	file:
g_io	safe/spider.200.c	/^static BIO *g_io = NULL;$/;"	v	file:
g_io	safe/spider.203.c	/^static BIO *g_io = NULL;$/;"	v	file:
g_io	safe/spider.204.c	/^static BIO *g_io = NULL;$/;"	v	file:
g_io	safe/spider.210.c	/^static BIO *g_io = NULL;$/;"	v	file:
g_io	safe/spider.c	/^static BIO *g_io = NULL;$/;"	v	file:
g_isSecure	safe/spider.c	/^static char g_isSecure = 0;					\/\/ 1 if we have a secure (HTTPS) connectino$/;"	v	file:
g_isSecure	spider.c	/^static char g_isSecure = 0;					\/\/ 1 if we have a secure (HTTPS) connectino$/;"	v	file:
g_isUtility	safe/spider.c	/^static char g_isUtility = 0;				\/\/ 1 if we are a utility call (e.g. "spider install")$/;"	v	file:
g_isUtility	spider.c	/^static char g_isUtility = 0;				\/\/ 1 if we are a utility call (e.g. "spider install")$/;"	v	file:
g_sock	safe/spider.200.c	/^int g_sock = -1;                            \/\/ Global things relating to the current SSL connection$/;"	v
g_sock	safe/spider.203.c	/^int g_sock = -1;                            \/\/ Global things relating to the current SSL connection$/;"	v
g_sock	safe/spider.204.c	/^int g_sock = -1;                            \/\/ Global things relating to the current SSL connection$/;"	v
g_sock	safe/spider.210.c	/^int g_sock = -1;                            \/\/ Global things relating to the current SSL connection$/;"	v
g_sock	safe/spider.c	/^int g_sock = -1;                            \/\/ Global things relating to the current SSL connection$/;"	v
g_sock	spider.c	/^static int g_sock = -1;                            \/\/ Global things relating to the current SSL connection$/;"	v	file:
g_ssl	safe/spider.200.c	/^SSL *g_ssl = NULL;$/;"	v
g_ssl	safe/spider.203.c	/^SSL *g_ssl = NULL;$/;"	v
g_ssl	safe/spider.204.c	/^SSL *g_ssl = NULL;$/;"	v
g_ssl	safe/spider.210.c	/^SSL *g_ssl = NULL;$/;"	v
g_ssl	safe/spider.c	/^SSL *g_ssl = NULL;$/;"	v
g_ssl	spider.c	/^static SSL *g_ssl = NULL;$/;"	v	file:
g_ssl_cn	safe/spider.200.c	/^const char *g_ssl_cn = NULL;                \/\/ The Cn of the SSL peer$/;"	v
g_ssl_cn	safe/spider.203.c	/^const char *g_ssl_cn = NULL;                \/\/ The Cn of the SSL peer$/;"	v
g_ssl_cn	safe/spider.204.c	/^const char *g_ssl_cn = NULL;                \/\/ The Cn of the SSL peer$/;"	v
g_ssl_cn	safe/spider.210.c	/^const char *g_ssl_cn = NULL;                \/\/ The Cn of the SSL peer$/;"	v
g_ssl_cn	safe/spider.c	/^const char *g_ssl_cn = NULL;                \/\/ The Cn of the SSL peer$/;"	v
g_ssl_cn	spider.c	/^const char *g_ssl_cn = NULL;                \/\/ The Cn of the SSL peer$/;"	v
g_ssl_subject	safe/spider.200.c	/^const char *g_ssl_subject[SSL_MAXDEPTH];$/;"	v
g_ssl_subject	safe/spider.203.c	/^const char *g_ssl_subject[SSL_MAXDEPTH];$/;"	v
g_ssl_subject	safe/spider.204.c	/^const char *g_ssl_subject[SSL_MAXDEPTH];$/;"	v
g_ssl_subject	safe/spider.210.c	/^const char *g_ssl_subject[SSL_MAXDEPTH];$/;"	v
g_ssl_subject	safe/spider.c	/^const char *g_ssl_subject[SSL_MAXDEPTH];$/;"	v
g_ssl_subject	spider.c	/^const char *g_ssl_subject[SSL_MAXDEPTH];$/;"	v
g_start	safe/sqlite3.c	/^static sqlite_uint64 g_start;$/;"	v	file:
g_szRpcError	safe/spider.200.c	/^static const char *g_szRpcError = NULL;				\/\/ Error returned from RPC call$/;"	v	file:
g_szRpcError	safe/spider.203.c	/^static const char *g_szRpcError = NULL;				\/\/ Error returned from RPC call$/;"	v	file:
g_szRpcError	safe/spider.204.c	/^static const char *g_szRpcError = NULL;				\/\/ Error returned from RPC call$/;"	v	file:
g_szRpcError	safe/spider.210.c	/^static const char *g_szRpcError = NULL;				\/\/ Error returned from RPC call$/;"	v	file:
g_szRpcError	safe/spider.c	/^static const char *g_szRpcError = NULL;				\/\/ Error returned from RPC call$/;"	v	file:
g_szRpcError	spider.c	/^static const char *g_szRpcError = NULL;				\/\/ Error returned from RPC call$/;"	v	file:
generateColumnNames	safe/sqlite3.c	/^static void generateColumnNames($/;"	f	file:
generateColumnTypes	safe/sqlite3.c	/^static void generateColumnTypes($/;"	f	file:
generateOutputSubroutine	safe/sqlite3.c	/^static int generateOutputSubroutine($/;"	f	file:
generateSortTail	safe/sqlite3.c	/^static void generateSortTail($/;"	f	file:
geomCallback	safe/sqlite3.c	/^static void geomCallback(sqlite3_context *ctx, int nArg, sqlite3_value **aArg){$/;"	f	file:
get2byte	safe/sqlite3.c	49941;"	d	file:
get2byteNotZero	safe/sqlite3.c	50262;"	d	file:
get4byte	safe/sqlite3.c	49943;"	d	file:
getAbsoluteLevel	safe/sqlite3.c	/^static sqlite3_int64 getAbsoluteLevel($/;"	f	file:
getAndInitPage	safe/sqlite3.c	/^static int getAndInitPage($/;"	f	file:
getAutoVacuum	safe/sqlite3.c	/^static int getAutoVacuum(const char *z){$/;"	f	file:
getCN	safe/spider.200.c	/^const char *getCN(X509 *cert)$/;"	f
getCN	safe/spider.203.c	/^const char *getCN(X509 *cert)$/;"	f
getCN	safe/spider.204.c	/^const char *getCN(X509 *cert)$/;"	f
getCN	safe/spider.210.c	/^const char *getCN(X509 *cert)$/;"	f
getCN	safe/spider.c	/^const char *getCN(X509 *cert)$/;"	f
getCN	spider.c	/^const char *getCN(X509 *cert)$/;"	f
getCellInfo	safe/sqlite3.c	/^  static void getCellInfo(BtCursor *pCur){$/;"	f	file:
getCellInfo	safe/sqlite3.c	53867;"	d	file:
getDigits	safe/sqlite3.c	/^static int getDigits(const char *zDate, ...){$/;"	f	file:
getIntFromStmt	safe/sqlite3.c	/^static int getIntFromStmt(sqlite3 *db, const char *zSql, int *piVal){$/;"	f	file:
getLastErrorMsg	safe/sqlite3.c	/^static int getLastErrorMsg(DWORD lastErrno, int nBuf, char *zBuf){$/;"	f	file:
getLockingMode	safe/sqlite3.c	/^static int getLockingMode(const char *z){$/;"	f	file:
getMask	safe/sqlite3.c	/^static Bitmask getMask(WhereMaskSet *pMaskSet, int iCursor){$/;"	f	file:
getNextNode	safe/sqlite3.c	/^static int getNextNode($/;"	f	file:
getNextString	safe/sqlite3.c	/^static int getNextString($/;"	f	file:
getNextToken	safe/sqlite3.c	/^static int getNextToken($/;"	f	file:
getNodeSize	safe/sqlite3.c	/^static int getNodeSize($/;"	f	file:
getOverflowPage	safe/sqlite3.c	/^static int getOverflowPage($/;"	f	file:
getPageReferenced	safe/sqlite3.c	/^static int getPageReferenced(IntegrityCk *pCheck, Pgno iPg){$/;"	f	file:
getReadLock	safe/sqlite3.c	/^static int getReadLock( os2File *pFile ){$/;"	f	file:
getReadLock	safe/sqlite3.c	/^static int getReadLock(winFile *pFile){$/;"	f	file:
getRowTrigger	safe/sqlite3.c	/^static TriggerPrg *getRowTrigger($/;"	f	file:
getSafetyLevel	safe/sqlite3.c	/^static u8 getSafetyLevel(const char *z, int omitFull, int dflt){$/;"	f	file:
getTempStore	safe/sqlite3.c	/^static int getTempStore(const char *z){$/;"	f	file:
getTempname	safe/sqlite3.c	/^static int getTempname(int nBuf, char *zBuf ){$/;"	f	file:
getTempname	safe/sqlite3.c	/^static int getTempname(int nBuf, char *zBuf){$/;"	f	file:
getVarint	safe/sqlite3.c	11951;"	d	file:
getVarint32	safe/sqlite3.c	11949;"	d	file:
get_autocommit	safe/sqlite3.c	/^  int  (*get_autocommit)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
get_auxdata	safe/sqlite3.c	/^  void * (*get_auxdata)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
get_dh1024	safe/spider.133.c	/^static DH *get_dh1024()$/;"	f	file:
get_dh1024	safe/spider.135.c	/^static DH *get_dh1024()$/;"	f	file:
get_dh1024	safe/spider.200.c	/^static DH *get_dh1024()$/;"	f	file:
get_dh1024	safe/spider.203.c	/^static DH *get_dh1024()$/;"	f	file:
get_dh1024	safe/spider.204.c	/^static DH *get_dh1024()$/;"	f	file:
get_dh1024	safe/spider.210.c	/^static DH *get_dh1024()$/;"	f	file:
get_dh1024	safe/spider.c	/^static DH *get_dh1024()$/;"	f	file:
get_dh1024	spider.c	/^static DH *get_dh1024()$/;"	f	file:
get_table	safe/sqlite3.c	/^  int  (*get_table)(sqlite3*,const char*,char***,int*,int*,char**);$/;"	m	struct:sqlite3_api_routines	file:
getiochar	safe/spider.133.c	/^static int getiochar()$/;"	f	file:
getiochar	safe/spider.135.c	/^static int getiochar()$/;"	f	file:
getiochar	safe/spider.200.c	/^static int getiochar()$/;"	f	file:
getiochar	safe/spider.203.c	/^static int getiochar()$/;"	f	file:
getiochar	safe/spider.204.c	/^static int getiochar()$/;"	f	file:
getiochar	safe/spider.210.c	/^static int getiochar()$/;"	f	file:
getiochar	safe/spider.c	/^static int getiochar()$/;"	f	file:
getiochar	spider.c	/^static int getiochar()$/;"	f	file:
globInfo	safe/sqlite3.c	/^static const struct compareInfo globInfo = { '*', '?', '[', 0 };$/;"	v	file:
global_recover	safe/sqlite3.c	/^  int  (*global_recover)(void);$/;"	m	struct:sqlite3_api_routines	file:
groupConcatFinalize	safe/sqlite3.c	/^static void groupConcatFinalize(sqlite3_context *context){$/;"	f	file:
groupConcatStep	safe/sqlite3.c	/^static void groupConcatStep($/;"	f	file:
growOpArray	safe/sqlite3.c	/^static int growOpArray(Vdbe *p){$/;"	f	file:
growVTrans	safe/sqlite3.c	/^static int growVTrans(sqlite3 *db){$/;"	f	file:
grp	safe/sqlite3.c	/^  PGroup grp;                    \/* The global PGroup for mode (2) *\/$/;"	m	struct:PCacheGlobal	file:
h	safe/sqlite3.c	/^  HANDLE h;               \/* Handle for accessing the file *\/$/;"	m	struct:winFile	file:
h	safe/sqlite3.c	/^  HFILE h;                  \/* Handle for accessing the file *\/$/;"	m	struct:os2File	file:
h	safe/sqlite3.c	/^  int h, m;          \/* Hour and minutes *\/$/;"	m	struct:DateTime	file:
h	safe/sqlite3.c	/^  int h;                              \/* The file descriptor *\/$/;"	m	struct:unixFile	file:
h	safe/sqlite3.c	/^  int h;                     \/* Open file descriptor *\/$/;"	m	struct:unixShmNode	file:
hFile	safe/sqlite3.c	/^  winFile hFile;             \/* File handle from winOpen *\/$/;"	m	struct:winShmNode	file:
hHeap	safe/sqlite3.c	/^  HANDLE hHeap; \/* The handle to our heap. *\/$/;"	m	struct:winMemData	file:
hLockFile	safe/sqlite3.c	/^  HFILE hLockFile;           \/* File used for inter-process memory locking *\/$/;"	m	struct:os2ShmNode	file:
hMap	safe/sqlite3.c	/^    HANDLE hMap;             \/* File handle from CreateFileMapping *\/$/;"	m	struct:winShmNode::ShmRegion	file:
hMutex	safe/sqlite3.c	/^  HANDLE hMutex;          \/* Mutex used to control access to shared lock *\/  $/;"	m	struct:winFile	file:
hPackBuf	safe/spider.133.c	/^HBUF *hPackBuf = NULL;$/;"	v
hPackBuf	safe/spider.135.c	/^HBUF *hPackBuf = NULL;$/;"	v
hPackBuf	safe/spider.200.c	/^HBUF *hPackBuf = NULL;$/;"	v
hPackBuf	safe/spider.203.c	/^HBUF *hPackBuf = NULL;$/;"	v
hPackBuf	safe/spider.204.c	/^HBUF *hPackBuf = NULL;$/;"	v
hPackBuf	safe/spider.210.c	/^HBUF *hPackBuf = NULL;$/;"	v
hPackBuf	safe/spider.c	/^HBUF *hPackBuf = NULL;$/;"	v
hPackBuf	spider.c	/^HBUF *hPackBuf = NULL;$/;"	v
hPending	safe/sqlite3.c	/^    Fts3Hash hPending;            \/* Pending terms table for this index *\/$/;"	m	struct:Fts3Table::Fts3Index	file:
hShared	safe/sqlite3.c	/^  HANDLE hShared;         \/* Shared memory segment used for locking *\/$/;"	m	struct:winFile	file:
hUnpackBuf	safe/spider.133.c	/^HBUF *hUnpackBuf = NULL;$/;"	v
hUnpackBuf	safe/spider.135.c	/^HBUF *hUnpackBuf = NULL;$/;"	v
hUnpackBuf	safe/spider.200.c	/^HBUF *hUnpackBuf = NULL;$/;"	v
hUnpackBuf	safe/spider.203.c	/^HBUF *hUnpackBuf = NULL;$/;"	v
hUnpackBuf	safe/spider.204.c	/^HBUF *hUnpackBuf = NULL;$/;"	v
hUnpackBuf	safe/spider.210.c	/^HBUF *hUnpackBuf = NULL;$/;"	v
hUnpackBuf	safe/spider.c	/^HBUF *hUnpackBuf = NULL;$/;"	v
hUnpackBuf	spider.c	/^HBUF *hUnpackBuf = NULL;$/;"	v
handleUnknownOption	bin2c.c	/^static void handleUnknownOption(const char *s)$/;"	f	file:
handlers	mtwamp.h	/^	IDMAP *handlers;$/;"	m	struct:WAMP
hasData	safe/sqlite3.c	/^  u8 hasData;          \/* True if this page stores data *\/$/;"	m	struct:MemPage	file:
hasHotJournal	safe/sqlite3.c	/^static int hasHotJournal(Pager *pPager, int *pExists){$/;"	f	file:
hasMutex	safe/sqlite3.c	/^  u8 hasMutex;               \/* True if holding the unixShmNode mutex *\/$/;"	m	struct:unixShm	file:
hasMutex	safe/sqlite3.c	/^  u8 hasMutex;               \/* True if holding the winShmNode mutex *\/$/;"	m	struct:winShm	file:
hasReadConflicts	safe/sqlite3.c	/^static int hasReadConflicts(Btree *pBtree, Pgno iRoot){$/;"	f	file:
hasReadConflicts	safe/sqlite3.c	50311;"	d	file:
hasSharedCacheTableLock	safe/sqlite3.c	/^static int hasSharedCacheTableLock($/;"	f	file:
hasSharedCacheTableLock	safe/sqlite3.c	50310;"	d	file:
hasVowel	safe/sqlite3.c	/^static int hasVowel(const char *z){$/;"	f	file:
hashDestroy	safe/sqlite3.c	/^static void hashDestroy(void *p){$/;"	f	file:
hdr	safe/sqlite3.c	/^    } hdr;$/;"	m	union:Mem3Block::<anonymous>	file:
hdr	safe/sqlite3.c	/^  WalIndexHdr hdr;           \/* Wal-index header for current transaction *\/$/;"	m	struct:Wal	file:
hdrOffset	safe/sqlite3.c	/^  u8 hdrOffset;        \/* 100 for page 1.  0 otherwise *\/$/;"	m	struct:MemPage	file:
header	bin2c.c	/^static void header(const char *format, ...)$/;"	f	file:
headerFile	bin2c.c	/^FILE *headerFile;           \/* Current header file *\/$/;"	v
headerFileName	bin2c.c	/^const char *headerFileName; \/* Current header file name *\/$/;"	v
headerSymbol	bin2c.c	/^char *headerSymbol;         \/* Symbol for multiple inclusion protection *\/$/;"	v
headers	mtwamputil.c	/^	SSMAP *headers;$/;"	m	struct:inward_connection_t	file:
heightOfExpr	safe/sqlite3.c	/^static void heightOfExpr(Expr *p, int *pnHeight){$/;"	f	file:
heightOfExprList	safe/sqlite3.c	/^static void heightOfExprList(ExprList *p, int *pnHeight){$/;"	f	file:
heightOfSelect	safe/sqlite3.c	/^static void heightOfSelect(Select *p, int *pnHeight){$/;"	f	file:
hexFunc	safe/sqlite3.c	/^static void hexFunc($/;"	f	file:
hexdigits	safe/sqlite3.c	/^static const char hexdigits[] = {$/;"	v	file:
highestPriority	mtwamp.c	/^	int highestPriority;									\/\/ Highest priority of any invokees$/;"	m	struct:wamp_callee_t	file:
hl_Files	safe/spider.c	/^SPMAP *hl_Files = NULL;					\/\/ List of miscellaneous files to write$/;"	v
hl_Files	spider.c	/^SPMAP *hl_Files = NULL;					\/\/ List of miscellaneous files to write$/;"	v
hl_NoteLog	safe/spider.c	/^HLIST *hl_NoteLog = NULL;$/;"	v
hl_NoteLog	spider.c	/^HLIST *hl_NoteLog = NULL;$/;"	v
hl_Stdout	safe/spider.c	/^HLIST *hl_Stdout = NULL;$/;"	v
hl_Stdout	spider.c	/^HLIST *hl_Stdout = NULL;$/;"	v
hlmask	safe/sqlite3.c	/^  u64 hlmask;                     \/* Mask of snippet terms to highlight *\/$/;"	m	struct:SnippetFragment	file:
ht	safe/sqlite3.c	/^  } *ht;$/;"	m	struct:Fts3Hash	file:
ht	safe/sqlite3.c	/^  } *ht;$/;"	m	struct:Hash	file:
ht_slot	safe/sqlite3.c	/^typedef u16 ht_slot;$/;"	t	file:
htsize	safe/sqlite3.c	/^  int htsize;             \/* Number of buckets in the hash table *\/$/;"	m	struct:Fts3Hash	file:
htsize	safe/sqlite3.c	/^  unsigned int htsize;      \/* Number of buckets in the hash table *\/$/;"	m	struct:Hash	file:
http_GetLastStatusCode	safe/spider.133.c	/^int http_GetLastStatusCode()				{ return _nHttpStatusCode; }$/;"	f
http_GetLastStatusCode	safe/spider.135.c	/^int http_GetLastStatusCode()				{ return _nHttpStatusCode; }$/;"	f
http_GetLastStatusCode	safe/spider.200.c	/^int http_GetLastStatusCode()				{ return _nHttpStatusCode; }$/;"	f
http_GetLastStatusCode	safe/spider.203.c	/^int http_GetLastStatusCode()				{ return _nHttpStatusCode; }$/;"	f
http_GetLastStatusCode	safe/spider.204.c	/^int http_GetLastStatusCode()				{ return _nHttpStatusCode; }$/;"	f
http_GetLastStatusCode	safe/spider.210.c	/^int http_GetLastStatusCode()				{ return _nHttpStatusCode; }$/;"	f
http_GetLastStatusCode	safe/spider.c	/^int http_GetLastStatusCode()				{ return _nHttpStatusCode; }$/;"	f
http_GetLastStatusCode	spider.c	/^int http_GetLastStatusCode()				{ return _nHttpStatusCode; }$/;"	f
http_GetLastStatusText	safe/spider.133.c	/^const char *http_GetLastStatusText()		{ return _szHttpStatusText; }$/;"	f
http_GetLastStatusText	safe/spider.135.c	/^const char *http_GetLastStatusText()		{ return _szHttpStatusText; }$/;"	f
http_GetLastStatusText	safe/spider.200.c	/^const char *http_GetLastStatusText()		{ return _szHttpStatusText; }$/;"	f
http_GetLastStatusText	safe/spider.203.c	/^const char *http_GetLastStatusText()		{ return _szHttpStatusText; }$/;"	f
http_GetLastStatusText	safe/spider.204.c	/^const char *http_GetLastStatusText()		{ return _szHttpStatusText; }$/;"	f
http_GetLastStatusText	safe/spider.210.c	/^const char *http_GetLastStatusText()		{ return _szHttpStatusText; }$/;"	f
http_GetLastStatusText	safe/spider.c	/^const char *http_GetLastStatusText()		{ return _szHttpStatusText; }$/;"	f
http_GetLastStatusText	spider.c	/^const char *http_GetLastStatusText()		{ return _szHttpStatusText; }$/;"	f
i	safe/sqlite3.c	/^    i64 i;              \/* Integer value used when MEM_Int is set in flags *\/$/;"	m	union:Mem::<anonymous>	file:
i	safe/sqlite3.c	/^    i64 i;          \/* Value if eType is SQLITE_INTEGER *\/$/;"	m	union:IndexSample::<anonymous>	file:
i	safe/sqlite3.c	/^    int i;                                     \/* Integer value *\/$/;"	m	union:Walker::<anonymous>	file:
i	safe/sqlite3.c	/^    int i;                 \/* Integer value if p4type==P4_INT32 *\/$/;"	m	union:VdbeOp::<anonymous>	file:
i	safe/sqlite3.c	/^  int i;$/;"	m	union:RtreeCoord	file:
i	safe/sqlite3.c	/^  unsigned char i, j;            \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
i16	safe/sqlite3.c	/^typedef INT16_TYPE i16;            \/* 2-byte signed integer *\/$/;"	t	file:
i16	safe/sqlite3.c	/^typedef short int i16;            \/* 2-byte (or larger) signed integer *\/$/;"	t	file:
i64	safe/sqlite3.c	/^typedef sqlite3_int64 i64;        \/* 8-byte signed integer *\/$/;"	t	file:
i64	safe/sqlite3.c	/^typedef sqlite3_int64 i64;$/;"	t	file:
i64	safe/sqlite3.c	/^typedef sqlite_int64 i64;          \/* 8-byte signed integer *\/$/;"	t	file:
i8	safe/sqlite3.c	/^typedef INT8_TYPE i8;              \/* 1-byte signed integer *\/$/;"	t	file:
iAbsLevel	safe/sqlite3.c	/^  sqlite3_int64 iAbsLevel;        \/* Absolute level of input segments *\/$/;"	m	struct:IncrmergeWriter	file:
iAddr	safe/sqlite3.c	/^  int iAddr;                 \/* Address of next instruction to return *\/$/;"	m	struct:VdbeOpIter	file:
iAgg	safe/sqlite3.c	/^  i16 iAgg;              \/* Which entry in pAggInfo->aCol[] or ->aFunc[] *\/$/;"	m	struct:Expr	file:
iAlias	safe/sqlite3.c	/^    u16 iAlias;            \/* Index into Parse.aAlias[] for zName *\/$/;"	m	struct:ExprList::ExprList_item	file:
iBatch	safe/sqlite3.c	/^  u8 iBatch;                     \/* Current insert batch *\/$/;"	m	struct:RowSet	file:
iBlock	safe/sqlite3.c	/^  sqlite3_int64 iBlock;           \/* Current block id *\/$/;"	m	struct:NodeWriter	file:
iBreak	safe/sqlite3.c	/^  int iBreak;                    \/* Jump here to break out of the loop *\/$/;"	m	struct:WhereInfo	file:
iCacheCnt	safe/sqlite3.c	/^  int iCacheCnt;       \/* Counter used to generate aColCache[].lru values *\/$/;"	m	struct:Parse	file:
iCacheLevel	safe/sqlite3.c	/^  int iCacheLevel;     \/* ColCache valid when aColCache[].iLevel<=iCacheLevel *\/$/;"	m	struct:Parse	file:
iCallback	safe/sqlite3.c	/^  u32 iCallback;             \/* Value to pass to log callback (or 0) *\/$/;"	m	struct:Wal	file:
iCell	safe/sqlite3.c	/^  int iCell;                        \/* Index of current cell in pNode *\/$/;"	m	struct:RtreeCursor	file:
iChange	safe/sqlite3.c	/^  u32 iChange;                    \/* Counter incremented each transaction *\/$/;"	m	struct:WalIndexHdr	file:
iChild	safe/sqlite3.c	/^  sqlite3_int64 iChild;           \/* Pointer to child node *\/$/;"	m	struct:NodeReader	file:
iCol	safe/sqlite3.c	/^  int iCol;                       \/* Column of table to populate aTerm for *\/$/;"	m	struct:TermOffsetCtx	file:
iCol	safe/sqlite3.c	/^  int iCol;                       \/* Column snippet is extracted from *\/$/;"	m	struct:SnippetFragment	file:
iCol	safe/sqlite3.c	/^  int iCol;                       \/* Column token must occur in *\/$/;"	m	struct:Fts3DeferredToken	file:
iCol	safe/sqlite3.c	/^  int iCol;                       \/* Current value of 'col' column *\/$/;"	m	struct:Fts3auxCursor	file:
iCol	safe/sqlite3.c	/^  int iCol;                       \/* Extract snippet from this column *\/$/;"	m	struct:SnippetIter	file:
iCol	safe/sqlite3.c	/^  int iCol;                       \/* The column the token must match *\/$/;"	m	struct:Fts3TokenAndCost	file:
iCol	safe/sqlite3.c	/^  int iCol;               \/* Table column this handle is open on *\/$/;"	m	struct:Incrblob	file:
iCol	safe/sqlite3.c	/^  int iCol;$/;"	m	struct:Fts3SegFilter	file:
iColCache	safe/sqlite3.c	/^  u8 iColCache;        \/* Next entry in aColCache[] to replace *\/$/;"	m	struct:Parse	file:
iColFilter	safe/sqlite3.c	/^  int iColFilter;                 \/* If >=0, filter for this column *\/$/;"	m	struct:Fts3MultiSegReader	file:
iColumn	safe/sqlite3.c	/^     int iColumn;              \/* Column number *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	file:
iColumn	safe/sqlite3.c	/^     int iColumn;              \/* Column on left-hand side of constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
iColumn	safe/sqlite3.c	/^    int iColumn;             \/* Column number within the source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iColumn	safe/sqlite3.c	/^    int iColumn;          \/* Table column number *\/$/;"	m	struct:Parse::yColCache	file:
iColumn	safe/sqlite3.c	/^  int iColumn;               \/* Index of column this phrase must match *\/$/;"	m	struct:Fts3Phrase	file:
iColumn	safe/sqlite3.c	/^  ynVar iColumn;         \/* TK_COLUMN: column index.  -1 for rowid.$/;"	m	struct:Expr	file:
iColumn	safe/sqlite3.h	/^     int iColumn;              \/* Column number *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby
iColumn	safe/sqlite3.h	/^     int iColumn;              \/* Column on left-hand side of constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
iContinue	safe/sqlite3.c	/^  int iContinue;                 \/* Jump here to continue with next record *\/$/;"	m	struct:WhereInfo	file:
iCoord	safe/sqlite3.c	/^  int iCoord;                     \/* Index of constrained coordinate *\/$/;"	m	struct:RtreeConstraint	file:
iCur	safe/sqlite3.c	/^        int iCur;              \/* The VDBE cursor used by this IN operator *\/$/;"	m	struct:WhereLevel::<anonymous>::<anonymous>::InLoop	file:
iCurrent	safe/sqlite3.c	/^  int iCurrent;                   \/* First token of current snippet *\/$/;"	m	struct:SnippetIter	file:
iCurrentBlock	safe/sqlite3.c	/^  sqlite3_int64 iCurrentBlock;    \/* Current leaf block (or 0) *\/$/;"	m	struct:Fts3SegReader	file:
iCursor	safe/sqlite3.c	/^    int iCursor;      \/* The VDBE cursor number used to access this table *\/$/;"	m	struct:SrcList::SrcList_item	file:
iDb	safe/sqlite3.c	/^    u8 iDb;                     \/* Which db file is being initialized *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
iDb	safe/sqlite3.c	/^  int iDb;              \/* Index in sqlite3.aDb[] of database holding pTab *\/$/;"	m	struct:AutoincInfo	file:
iDb	safe/sqlite3.c	/^  int iDb;              \/* Index of cursor database in db->aDb[] (or -1) *\/$/;"	m	struct:VdbeCursor	file:
iDb	safe/sqlite3.c	/^  int iDb;             \/* The database containing the table to be locked *\/$/;"	m	struct:TableLock	file:
iDb	safe/sqlite3.c	/^  int iDb;            \/* 0 for main database.  1 for TEMP, 2.. for ATTACHed *\/$/;"	m	struct:	file:
iDefaultCol	safe/sqlite3.c	/^  int iDefaultCol;                    \/* Default column to query *\/$/;"	m	struct:ParseContext	file:
iDepth	safe/sqlite3.c	/^  int iDepth;                 \/* Current depth of the r-tree structure *\/$/;"	m	struct:Rtree	file:
iDestSchema	safe/sqlite3.c	/^  u32 iDestSchema;         \/* Original schema cookie in destination *\/$/;"	m	struct:sqlite3_backup	file:
iDistinct	safe/sqlite3.c	/^    int iDistinct;           \/* Ephemeral table used to enforce DISTINCT *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
iDivisor	safe/sqlite3.c	/^  u32 iDivisor;   \/* Number of bits handled by each apSub[] entry. *\/$/;"	m	struct:Bitvec	file:
iDocid	safe/sqlite3.c	/^  sqlite3_int64 iDocid;          \/* Current docid (if pList!=0) *\/$/;"	m	struct:Fts3Doclist	file:
iDocid	safe/sqlite3.c	/^  sqlite3_int64 iDocid;      \/* Current docid *\/$/;"	m	struct:Fts3Expr	file:
iDocid	safe/sqlite3.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:Fts3SegReader	file:
iDocid	safe/sqlite3.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:TermOffsetCtx	file:
iDoclistToken	safe/sqlite3.c	/^  int iDoclistToken;$/;"	m	struct:Fts3Phrase	file:
iECursor	safe/sqlite3.c	/^  int iECursor;          \/* VDBE Cursor associated with this ExprList *\/$/;"	m	struct:ExprList	file:
iEnd	safe/sqlite3.c	/^  sqlite3_int64 iEnd;             \/* Block number of last allocated block *\/$/;"	m	struct:IncrmergeWriter	file:
iEndBlock	safe/sqlite3.c	/^  sqlite3_int64 iEndBlock;        \/* Rowid of final block in segment (or 0) *\/$/;"	m	struct:Fts3SegReader	file:
iEof	safe/sqlite3.c	/^  i64 iEof;                       \/* 1 byte past EOF for this iterator *\/$/;"	m	struct:VdbeSorterIter	file:
iFirst	safe/sqlite3.c	/^  sqlite3_int64 iFirst;           \/* First slot in %_segments written *\/$/;"	m	struct:SegmentWriter	file:
iForeGuard	safe/sqlite3.c	/^  int iForeGuard;                     \/* Guard word for sanity *\/$/;"	m	struct:MemBlockHdr	file:
iFree	safe/sqlite3.c	/^  sqlite3_int64 iFree;            \/* Next free slot in %_segments *\/$/;"	m	struct:SegmentWriter	file:
iFrom	safe/sqlite3.c	/^    int iFrom;         \/* Index of column in pFrom *\/$/;"	m	struct:FKey::sColMap	file:
iFrom	safe/sqlite3.c	/^  u8 iFrom;             \/* Which entry in the FROM clause *\/$/;"	m	struct:WhereLevel	file:
iGeneration	safe/sqlite3.c	/^  int iGeneration;     \/* Generation counter.  Incremented with each change *\/$/;"	m	struct:Schema	file:
iHash	safe/sqlite3.c	/^    u32 iHash;                 \/* Tiebreaker hash *\/$/;"	m	struct:Stat3Accum::Stat3Sample	file:
iHdrOffset	safe/sqlite3.c	/^  i64 iHdrOffset;              \/* See above *\/$/;"	m	struct:PagerSavepoint	file:
iHead	safe/sqlite3.c	/^  int iHead;                      \/* Next value in position list *\/$/;"	m	struct:SnippetPhrase	file:
iIdx	safe/sqlite3.c	/^  int iIdx;                       \/* Index of *output* segment in iAbsLevel+1 *\/$/;"	m	struct:IncrmergeWriter	file:
iIdx	safe/sqlite3.c	/^  int iIdx;                       \/* Index within level, or 0x7FFFFFFF for PT *\/$/;"	m	struct:Fts3SegReader	file:
iIdxCur	safe/sqlite3.c	/^  int iIdxCur;          \/* The VDBE cursor used to access pIdx *\/$/;"	m	struct:WhereLevel	file:
iJD	safe/sqlite3.c	/^  sqlite3_int64 iJD; \/* The julian day number times 86400000 *\/$/;"	m	struct:DateTime	file:
iKey	safe/sqlite3.c	/^  unsigned int iKey;             \/* Key value (page number) *\/$/;"	m	struct:PgHdr1	file:
iLangid	safe/sqlite3.c	/^  int iLangid;                        \/* Language id used with tokenizer *\/$/;"	m	struct:ParseContext	file:
iLangid	safe/sqlite3.c	/^  int iLangid;                    \/* Language being queried for *\/$/;"	m	struct:Fts3Cursor	file:
iLastCol	safe/sqlite3.c	/^  sqlite3_int64 iLastCol;$/;"	m	struct:PendingList	file:
iLastDocid	safe/sqlite3.c	/^  sqlite3_int64 iLastDocid;$/;"	m	struct:PendingList	file:
iLastPos	safe/sqlite3.c	/^  sqlite3_int64 iLastPos;$/;"	m	struct:PendingList	file:
iLeafEndBlock	safe/sqlite3.c	/^  sqlite3_int64 iLeafEndBlock;    \/* Rowid of final leaf block to traverse *\/$/;"	m	struct:Fts3SegReader	file:
iLeftJoin	safe/sqlite3.c	/^  int iLeftJoin;        \/* Memory cell used to implement LEFT OUTER JOIN *\/$/;"	m	struct:WhereLevel	file:
iLevel	safe/sqlite3.c	/^    int iLevel;           \/* Nesting level *\/$/;"	m	struct:Parse::yColCache	file:
iLimit	safe/sqlite3.c	/^  int iLimit, iOffset;   \/* Memory registers holding LIMIT & OFFSET counters *\/$/;"	m	struct:Select	file:
iMaster	safe/sqlite3.c	/^  u32 iMaster;$/;"	m	struct:Mem3Global	file:
iMaxKey	safe/sqlite3.c	/^  unsigned int iMaxKey;               \/* Largest key seen since xTruncate() *\/$/;"	m	struct:PCache1	file:
iMem	safe/sqlite3.c	/^    int iMem;                \/* Memory location that acts as accumulator *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iMem	safe/sqlite3.c	/^    int iMem;                \/* Memory location that acts as accumulator *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
iMem	safe/sqlite3.c	/^  int iMem;         \/* Base register where results are written *\/$/;"	m	struct:SelectDest	file:
iMin	safe/sqlite3.c	/^  int iMin;                 \/* Index of entry with minimum nEq and hash *\/$/;"	m	struct:Stat3Accum	file:
iNext	safe/sqlite3.c	/^    int iNext;                    \/* Next slot in aIndex[] not yet returned *\/$/;"	m	struct:WalIterator::WalSegment	file:
iNext	safe/sqlite3.c	/^  Pgno iNext;              \/* Page number of the next source page to copy *\/$/;"	m	struct:sqlite3_backup	file:
iNextSelectId	safe/sqlite3.c	/^  int iNextSelectId;        \/* Next available select ID for EXPLAIN output *\/$/;"	m	struct:Parse	file:
iNode	safe/sqlite3.c	/^  i64 iNode;$/;"	m	struct:RtreeNode	file:
iNodeSize	safe/sqlite3.c	/^  int iNodeSize;              \/* Size in bytes of each node in the node table *\/$/;"	m	struct:Rtree	file:
iOff	safe/sqlite3.c	/^  int iOff;                       \/* Current offset within aInput[] *\/$/;"	m	struct:unicode_cursor	file:
iOff	safe/sqlite3.c	/^  int iOff;                       \/* Current offset within aNode[] *\/$/;"	m	struct:NodeReader	file:
iOff	safe/sqlite3.c	/^  int iOff;                       \/* Offset of this term from read positions *\/$/;"	m	struct:TermOffset	file:
iOffset	safe/sqlite3.c	/^  i64 iOffset;                 \/* Starting offset in main journal *\/$/;"	m	struct:PagerSavepoint	file:
iOffset	safe/sqlite3.c	/^  int iLimit, iOffset;   \/* Memory registers holding LIMIT & OFFSET counters *\/$/;"	m	struct:Select	file:
iOffset	safe/sqlite3.c	/^  int iOffset;                 \/* current position in pInput *\/$/;"	m	struct:simple_tokenizer_cursor	file:
iOffset	safe/sqlite3.c	/^  int iOffset;                 \/* current position in zInput *\/$/;"	m	struct:porter_tokenizer_cursor	file:
iOffset	safe/sqlite3.c	/^  int iOffset;            \/* Byte offset of blob in cursor data *\/$/;"	m	struct:Incrblob	file:
iOffset	safe/sqlite3.c	/^  sqlite3_int64 iOffset;          \/* Offset from the beginning of the file *\/$/;"	m	struct:FilePoint	file:
iOrderByCol	safe/sqlite3.c	/^    u16 iOrderByCol;       \/* For ORDER BY, column number in result set *\/$/;"	m	struct:ExprList::ExprList_item	file:
iOverflow	safe/sqlite3.c	/^  u16 iOverflow; \/* Offset to overflow page number.  Zero if no overflow *\/$/;"	m	struct:CellInfo	file:
iPKey	safe/sqlite3.c	/^  int iPKey;           \/* If not negative, use aCol[iPKey] as the primary key *\/$/;"	m	struct:Table	file:
iPage	safe/sqlite3.c	/^  i16 iPage;                            \/* Index of current page in apPage *\/$/;"	m	struct:BtCursor	file:
iParent	safe/sqlite3.c	/^  int iParent;            \/* Disable pWC->a[iParent] when this term disabled *\/$/;"	m	struct:WhereTerm	file:
iParm	safe/sqlite3.c	/^  int iParm;        \/* A parameter used by the eDest disposal method *\/$/;"	m	struct:SelectDest	file:
iPos	safe/sqlite3.c	/^  int iPos;                       \/* Current position *\/$/;"	m	struct:LcsIterator	file:
iPos	safe/sqlite3.c	/^  int iPos;                       \/* Index of first token in snippet *\/$/;"	m	struct:SnippetFragment	file:
iPos	safe/sqlite3.c	/^  int iPos;                       \/* Position just read from pList *\/$/;"	m	struct:TermOffset	file:
iPosOffset	safe/sqlite3.c	/^  int iPosOffset;                 \/* Tokens count up to end of this phrase *\/$/;"	m	struct:LcsIterator	file:
iPrefEnc	safe/sqlite3.c	/^  u8 iPrefEnc;         \/* Preferred text encoding (SQLITE_UTF8, 16LE, 16BE) *\/$/;"	m	struct:FuncDef	file:
iPrevDocid	safe/sqlite3.c	/^  sqlite_int64 iPrevDocid;        \/* Docid of most recently inserted document *\/$/;"	m	struct:Fts3Table	file:
iPrevId	safe/sqlite3.c	/^  sqlite3_int64 iPrevId;          \/* Previous id read from aDoclist *\/$/;"	m	struct:Fts3Cursor	file:
iPrevLangid	safe/sqlite3.c	/^  int iPrevLangid;                \/* Langid of recently inserted document *\/$/;"	m	struct:Fts3Table	file:
iPrior	safe/sqlite3.c	/^  int iPrior;                     \/* Last result returned from the iterator *\/$/;"	m	struct:WalIterator	file:
iPrn	safe/sqlite3.c	/^  u32 iPrn;                 \/* Pseudo-random number used for sampling *\/$/;"	m	struct:Stat3Accum	file:
iRangeReg	safe/sqlite3.c	/^  int iRangeReg;       \/* First register in temporary register block *\/$/;"	m	struct:Parse	file:
iReadOff	safe/sqlite3.c	/^  i64 iReadOff;                   \/* Current read offset *\/$/;"	m	struct:VdbeSorterIter	file:
iReadOff	safe/sqlite3.c	/^  i64 iReadOff;                   \/* Current read offset within file pTemp1 *\/$/;"	m	struct:VdbeSorter	file:
iReg	safe/sqlite3.c	/^    int iReg;             \/* Reg with value of this column. 0 means none. *\/$/;"	m	struct:Parse::yColCache	file:
iReinsertHeight	safe/sqlite3.c	/^  int iReinsertHeight;        \/* Height of sub-trees Reinsert() has run on *\/$/;"	m	struct:Rtree	file:
iRightJoinTable	safe/sqlite3.c	/^  i16 iRightJoinTable;   \/* If EP_FromJoin, the right table of the join *\/$/;"	m	struct:Expr	file:
iRowid	safe/sqlite3.c	/^    i64 iRowid;                \/* Rowid in main table of the key *\/$/;"	m	struct:Stat3Accum::Stat3Sample	file:
iRowid	safe/sqlite3.c	/^  i64 iRowid;$/;"	m	struct:RtreeCell	file:
iRowid	safe/sqlite3.c	/^  sqlite3_int64 iRowid;           \/* Current rowid *\/$/;"	m	struct:Fts3auxCursor	file:
iSavepoint	safe/sqlite3.c	/^  int iSavepoint;           \/* Depth of the SAVEPOINT stack *\/$/;"	m	struct:VTable	file:
iSelectId	safe/sqlite3.c	/^    u8 iSelectId;     \/* If pSelect!=0, the id of the sub-select in EQP *\/$/;"	m	struct:SrcList::SrcList_item	file:
iSelectId	safe/sqlite3.c	/^  int iSelectId;            \/* ID of current select for EXPLAIN output *\/$/;"	m	struct:Parse	file:
iSize	safe/sqlite3.c	/^  i64 iSize;                          \/* Size of this allocation *\/$/;"	m	struct:MemBlockHdr	file:
iSize	safe/sqlite3.c	/^  int iSize;                      \/* Amount of zBuf[] currently used *\/$/;"	m	struct:JournalFile	file:
iSize	safe/sqlite3.c	/^  u32 iSize;      \/* Maximum bit index.  Max iSize is 4,294,967,296. *\/$/;"	m	struct:Bitvec	file:
iSorterColumn	safe/sqlite3.c	/^    int iSorterColumn;       \/* Column number in the sorting index *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iStart	safe/sqlite3.c	/^  sqlite3_int64 iStart;           \/* Block number of first allocated block *\/$/;"	m	struct:IncrmergeWriter	file:
iStartBlock	safe/sqlite3.c	/^  sqlite3_int64 iStartBlock;      \/* Rowid of first leaf block to traverse *\/$/;"	m	struct:Fts3SegReader	file:
iStatement	safe/sqlite3.c	/^  int iStatement;         \/* Statement number (or 0 if has not opened stmt) *\/$/;"	m	struct:Vdbe	file:
iStrategy	safe/sqlite3.c	/^  int iStrategy;                    \/* Copy of idxNum search parameter *\/$/;"	m	struct:RtreeCursor	file:
iSub	safe/sqlite3.c	/^  int iSub;                  \/* 0 = main program, 1 = first sub-program etc. *\/$/;"	m	struct:VdbeOpIter	file:
iSubRec	safe/sqlite3.c	/^  Pgno iSubRec;                \/* Index of first record in sub-journal *\/$/;"	m	struct:PagerSavepoint	file:
iSum	safe/sqlite3.c	/^  i64 iSum;         \/* Integer sum *\/   $/;"	m	struct:SumCtx	file:
iSyncPoint	safe/sqlite3.c	/^  sqlite3_int64 iSyncPoint;    \/* Fsync at this offset *\/$/;"	m	struct:WalWriter	file:
iTab	safe/sqlite3.c	/^  int iTab;            \/* The root page of the table to be locked *\/$/;"	m	struct:TableLock	file:
iTabCur	safe/sqlite3.c	/^  int iTabCur;          \/* The VDBE cursor used to access the table *\/$/;"	m	struct:WhereLevel	file:
iTable	safe/sqlite3.c	/^    int iTable;              \/* Cursor number of the source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iTable	safe/sqlite3.c	/^    int iTable;           \/* Table cursor number *\/$/;"	m	struct:Parse::yColCache	file:
iTable	safe/sqlite3.c	/^  Pgno iTable;          \/* Root page of table *\/$/;"	m	struct:BtLock	file:
iTable	safe/sqlite3.c	/^  int iTable;            \/* TK_COLUMN: cursor number of table holding column$/;"	m	struct:Expr	file:
iTail	safe/sqlite3.c	/^  int iTail;                      \/* Next value in trailing position list *\/$/;"	m	struct:SnippetPhrase	file:
iTerm	safe/sqlite3.c	/^  int iTerm;$/;"	m	struct:TermOffsetCtx	file:
iTermOffset	safe/sqlite3.c	/^     int iTermOffset;          \/* Used internally - xBestIndex should ignore *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
iTermOffset	safe/sqlite3.h	/^     int iTermOffset;          \/* Used internally - xBestIndex should ignore *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
iToken	safe/sqlite3.c	/^  int iToken;                     \/* Index of next token to be returned *\/$/;"	m	struct:unicode_cursor	file:
iToken	safe/sqlite3.c	/^  int iToken;                     \/* Position of token in phrase *\/$/;"	m	struct:Fts3TokenAndCost	file:
iToken	safe/sqlite3.c	/^  int iToken;                  \/* index of next token to be returned *\/$/;"	m	struct:porter_tokenizer_cursor	file:
iToken	safe/sqlite3.c	/^  int iToken;                  \/* index of next token to be returned *\/$/;"	m	struct:simple_tokenizer_cursor	file:
iToken	safe/sqlite3.c	/^  int iToken;$/;"	m	struct:IcuCursor	file:
iTop	safe/sqlite3.c	/^  int iTop;                      \/* The very beginning of the WHERE loop *\/$/;"	m	struct:WhereInfo	file:
iValue	safe/sqlite3.c	/^    int iValue;            \/* Non-negative integer value if EP_IntValue *\/$/;"	m	union:Expr::<anonymous>	file:
iVersion	safe/sqlite3.c	/^  int iVersion;            \/* Structure version number (currently 3) *\/$/;"	m	struct:sqlite3_vfs	file:
iVersion	safe/sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_io_methods	file:
iVersion	safe/sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_module	file:
iVersion	safe/sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_pcache_methods2	file:
iVersion	safe/sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_tokenizer_module	file:
iVersion	safe/sqlite3.c	/^  u32 iVersion;                   \/* Wal-index version *\/$/;"	m	struct:WalIndexHdr	file:
iVersion	safe/sqlite3.h	/^  int iVersion;            \/* Structure version number (currently 3) *\/$/;"	m	struct:sqlite3_vfs
iVersion	safe/sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_io_methods
iVersion	safe/sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_module
iVersion	safe/sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_pcache_methods2
iWriteOff	safe/sqlite3.c	/^  i64 iWriteOff;                  \/* Current write offset within file pTemp1 *\/$/;"	m	struct:VdbeSorter	file:
iZero	safe/sqlite3.c	/^    int iZero;                    \/* Frame number associated with aPgno[0] *\/$/;"	m	struct:WalIterator::WalSegment	file:
icuCaseFunc16	safe/sqlite3.c	/^static void icuCaseFunc16(sqlite3_context *p, int nArg, sqlite3_value **apArg){$/;"	f	file:
icuClose	safe/sqlite3.c	/^static int icuClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
icuCollationColl	safe/sqlite3.c	/^static int icuCollationColl($/;"	f	file:
icuCollationDel	safe/sqlite3.c	/^static void icuCollationDel(void *pCtx){$/;"	f	file:
icuCreate	safe/sqlite3.c	/^static int icuCreate($/;"	f	file:
icuDestroy	safe/sqlite3.c	/^static int icuDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
icuFunctionError	safe/sqlite3.c	/^static void icuFunctionError($/;"	f	file:
icuLikeCompare	safe/sqlite3.c	/^static int icuLikeCompare($/;"	f	file:
icuLikeFunc	safe/sqlite3.c	/^static void icuLikeFunc($/;"	f	file:
icuLoadCollation	safe/sqlite3.c	/^static void icuLoadCollation($/;"	f	file:
icuNext	safe/sqlite3.c	/^static int icuNext($/;"	f	file:
icuOpen	safe/sqlite3.c	/^static int icuOpen($/;"	f	file:
icuRegexpDelete	safe/sqlite3.c	/^static void icuRegexpDelete(void *p){$/;"	f	file:
icuRegexpFunc	safe/sqlite3.c	/^static void icuRegexpFunc(sqlite3_context *p, int nArg, sqlite3_value **apArg){$/;"	f	file:
icuTokenizerModule	safe/sqlite3.c	/^static const sqlite3_tokenizer_module icuTokenizerModule = {$/;"	v	file:
id	mtwamp.c	/^	long long id;$/;"	m	struct:WAMPSESSION	file:
id	safe/mtchannel.h	/^	char *id;						\/\/ A unique ID for this channel (currntly the 'fd' as a string)$/;"	m	struct:CHAN
id	safe/mtwamp.c	/^	long long id;$/;"	m	struct:WAMPSESSION	file:
id	safe/mtwamp.h	/^	long long id;$/;"	m	struct:WAMPSESSION
id	safe/mtwebsocket.h	/^	char *id;						\/\/ A unique ID for this channel (currntly the 'fd' as a string)$/;"	m	struct:WS
id	safe/spider.210.c	/^	const char *id;$/;"	m	struct:contract_t	file:
id	safe/spider.c	/^	const char *id;$/;"	m	struct:contract_t	file:
id	safe/sqlite3.c	/^  int  id;          \/* Mutex type *\/$/;"	m	struct:sqlite3_mutex	file:
id	safe/sqlite3.c	/^  int id;                    \/* Mutex type *\/$/;"	m	struct:sqlite3_mutex	file:
id	safe/sqlite3.c	/^  int id;     \/* The mutex type *\/$/;"	m	struct:sqlite3_debug_mutex	file:
id	safe/sqlite3.c	/^  u8 id;                     \/* Id of this connection with its os2ShmNode *\/$/;"	m	struct:os2ShmLink	file:
id	safe/sqlite3.c	/^  u8 id;                     \/* Id of this connection with its winShmNode *\/$/;"	m	struct:winShm	file:
id	safe/sqlite3.c	/^  u8 id;                     \/* Id of this connection within its unixShmNode *\/$/;"	m	struct:unixShm	file:
id	spider.c	/^	const char *id;$/;"	m	struct:contract_t	file:
identLength	safe/sqlite3.c	/^static int identLength(const char *z){$/;"	f	file:
identPut	safe/sqlite3.c	/^static void identPut(char *z, int *pIdx, char *zSignedIdent){$/;"	f	file:
idlePeriod	mtchannel.h	/^	int idlePeriod;					\/\/ How often to idle$/;"	m	struct:CHANPOOL
idmap_Add	mtwamp.c	/^int idmap_Add(IDMAP *im, long long id, void *value)$/;"	f
idmap_Add	safe/mtwamp.c	/^int idmap_Add(IDMAP *im, long long id, void *value)$/;"	f
idmap_Clear	mtwamp.c	/^void idmap_Clear(IDMAP *im)										{ spmap_Clear((SPMAP*)im); }$/;"	f
idmap_Clear	safe/mtwamp.c	/^void idmap_Clear(IDMAP *im)										{ spmap_Clear((SPMAP*)im); }$/;"	f
idmap_Count	mtwamp.c	/^int idmap_Count(IDMAP *im)										{ return spmap_Count((SPMAP*)im); }$/;"	f
idmap_Count	safe/mtwamp.c	/^int idmap_Count(IDMAP *im)										{ return spmap_Count((SPMAP*)im); }$/;"	f
idmap_Delete	mtwamp.c	/^void idmap_Delete(IDMAP *im)									{ spmap_Delete((SPMAP*)im); }$/;"	f
idmap_Delete	safe/mtwamp.c	/^void idmap_Delete(IDMAP *im)									{ spmap_Delete((SPMAP*)im); }$/;"	f
idmap_DeleteKey	mtwamp.c	/^int idmap_DeleteKey(IDMAP *im, long long id)$/;"	f
idmap_DeleteKey	safe/mtwamp.c	/^int idmap_DeleteKey(IDMAP *im, long long id)$/;"	f
idmap_GetKey	mtwamp.c	/^long long idmap_GetKey(SIMAP *im, void *value)$/;"	f
idmap_GetKey	safe/mtwamp.c	/^long long idmap_GetKey(SIMAP *im, void *value)$/;"	f
idmap_GetKeyAtIndex	mtwamp.c	/^long long idmap_GetKeyAtIndex(IDMAP *im, int index)$/;"	f
idmap_GetKeyAtIndex	safe/mtwamp.c	/^long long idmap_GetKeyAtIndex(IDMAP *im, int index)$/;"	f
idmap_GetNextEntry	mtwamp.c	/^int idmap_GetNextEntry(IDMAP *im, long long *pKey, void **pValue)$/;"	f
idmap_GetNextEntry	safe/mtwamp.c	/^int idmap_GetNextEntry(IDMAP *im, const char **pKey, void **pValue) { return spmap_GetNextEntry((SPMAP*)im, pKey, pValue); }$/;"	f
idmap_GetValue	mtwamp.c	/^void *idmap_GetValue(IDMAP *im, long long id)$/;"	f
idmap_GetValue	safe/mtwamp.c	/^void *idmap_GetValue(IDMAP *im, long long id)$/;"	f
idmap_GetValueAtIndex	mtwamp.c	/^void *idmap_GetValueAtIndex(IDMAP *im, int index)                 { return spmap_GetValueAtIndex((SPMAP*)im, index); }$/;"	f
idmap_GetValueAtIndex	safe/mtwamp.c	/^void *idmap_GetValueAtIndex(IDMAP *im, int index)                 { return spmap_GetValueAtIndex((SPMAP*)im, index); }$/;"	f
idmap_New	mtwamp.c	/^IDMAP *idmap_New()												{ return (IDMAP*)spmap_New(); }$/;"	f
idmap_New	safe/mtwamp.c	/^IDMAP *idmap_New()												{ return (IDMAP*)spmap_New(); }$/;"	f
idmap_Reset	mtwamp.c	/^void idmap_Reset(IDMAP *im)										{ spmap_Reset((SPMAP*)im); }$/;"	f
idmap_Reset	safe/mtwamp.c	/^void idmap_Reset(IDMAP *im)										{ spmap_Reset((SPMAP*)im); }$/;"	f
idmap_Sort	mtwamp.c	/^void idmap_Sort(IDMAP *im, int (*sorter)(const char *, const char *)) { spmap_Sort((SPMAP*)im, sorter); }$/;"	f
idmap_Sort	safe/mtwamp.c	/^void idmap_Sort(IDMAP *im, int (*sorter)(const char *, const char *)) { spmap_Sort((SPMAP*)im, sorter); }$/;"	f
idmap_SortValues	mtwamp.c	/^void idmap_SortValues(IDMAP *im, int (*sorter)(const char *, const char *)) { spmap_SortValues((SPMAP*)im, sorter); }$/;"	f
idmap_SortValues	safe/mtwamp.c	/^void idmap_SortValues(IDMAP *im, int (*sorter)(const char *, const char *)) { spmap_SortValues((SPMAP*)im, sorter); }$/;"	f
idx	safe/sqlite3.c	/^    int idx;          \/* Index in some Table.aCol[] of a column named zName *\/$/;"	m	struct:IdList::IdList_item	file:
idxHash	safe/sqlite3.c	/^  Hash idxHash;        \/* All (named) indices indexed by name *\/$/;"	m	struct:Schema	file:
idxNum	safe/sqlite3.c	/^  int idxNum;                \/* Number used to identify the index *\/$/;"	m	struct:sqlite3_index_info	file:
idxNum	safe/sqlite3.h	/^  int idxNum;                \/* Number used to identify the index *\/$/;"	m	struct:sqlite3_index_info
idxStr	safe/sqlite3.c	/^  char *idxStr;              \/* String, possibly obtained from sqlite3_malloc *\/$/;"	m	struct:sqlite3_index_info	file:
idxStr	safe/sqlite3.h	/^  char *idxStr;              \/* String, possibly obtained from sqlite3_malloc *\/$/;"	m	struct:sqlite3_index_info
ifnullFunc	safe/sqlite3.c	87556;"	d	file:
importVtabErrMsg	safe/sqlite3.c	/^static void importVtabErrMsg(Vdbe *p, sqlite3_vtab *pVtab){$/;"	f	file:
in	safe/mtwebsocket.h	/^	HLIST *in;						\/\/ incoming queue (never NULL)$/;"	m	struct:WS
in	safe/sqlite3.c	/^    } in;                 \/* Used when plan.wsFlags&WHERE_IN_ABLE *\/$/;"	m	union:WhereLevel::<anonymous>	file:
inNormalWrite	safe/sqlite3.c	/^  unsigned char inNormalWrite;   \/* True if in a normal write operation *\/$/;"	m	struct:unixFile	file:
inProgress	safe/sqlite3.c	/^  int inProgress;                   \/* True while initialization in progress *\/$/;"	m	struct:Sqlite3Config	file:
inTrans	safe/sqlite3.c	/^  u8 inTrans;          \/* 0: not writable.  1: Transaction.  2: Checkpoint *\/$/;"	m	struct:Db	file:
inTrans	safe/sqlite3.c	/^  u8 inTrans;        \/* TRANS_NONE, TRANS_READ or TRANS_WRITE *\/$/;"	m	struct:Btree	file:
inTransaction	safe/sqlite3.c	/^  int inTransaction;     \/* True after xBegin but before xCommit\/xRollback *\/$/;"	m	struct:Fts3Table	file:
inTransaction	safe/sqlite3.c	/^  u8 inTransaction;     \/* Transaction state *\/$/;"	m	struct:BtShared	file:
inVtabMethod	safe/sqlite3.c	/^  u8 inVtabMethod;        \/* See comments above *\/$/;"	m	struct:Vdbe	file:
inbuf	mtwebsocket.c	/^	HBUF *inbuf;					\/\/ Used if we have fragments$/;"	m	struct:WS	file:
inbuf	mtwebsocket.h	/^	HBUF *inbuf;					\/\/ Used if we have fragments$/;"	m	struct:WS
inbuf	safe/mtwebsocket.h	/^	HBUF *inbuf;					\/\/ Used if we have fragments$/;"	m	struct:WS
incrVacuum	safe/sqlite3.c	/^  u8 incrVacuum;        \/* True if incr-vacuum is enabled *\/$/;"	m	struct:BtShared	file:
incrVacuumStep	safe/sqlite3.c	/^static int incrVacuumStep(BtShared *pBt, Pgno nFin, Pgno iLastPg){$/;"	f	file:
indentString	bin2c.c	46;"	d	file:
indexable	safe/sqlite3.c	/^  Bitmask indexable;       \/* Bitmask of all indexable tables in the clause *\/$/;"	m	struct:WhereOrInfo	file:
info	mtchannel.h	/^	void *info;						\/\/ Miscellaneous info for the use of the caller$/;"	m	struct:CHAN
info	mtwamp.h	/^	void *info;								\/\/ Miscellaneous info owned by the thing creating this WAMP$/;"	m	struct:WAMP
info	mtwebsocket.c	/^	void *info;						\/\/ Miscellaneous info for the use of the caller$/;"	m	struct:WS	file:
info	mtwebsocket.h	/^	void *info;						\/\/ Miscellaneous info for the use of the caller$/;"	m	struct:WS
info	safe/sqlite3.c	/^  CellInfo info;            \/* A parse of the cell we are pointing at *\/$/;"	m	struct:BtCursor	file:
init	safe/sqlite3.c	/^  } init;$/;"	m	struct:sqlite3	file:
initMaskSet	safe/sqlite3.c	104069;"	d	file:
initUconvObjects	safe/sqlite3.c	/^static void initUconvObjects( void ){$/;"	f	file:
ino	safe/sqlite3.c	/^  ino_t ino;                  \/* Inode number *\/$/;"	m	struct:unixFileId	file:
inodeList	safe/sqlite3.c	/^static unixInodeInfo *inodeList = 0;$/;"	v	file:
inq	mtchannel.h	/^	HLIST *inq;						\/\/ incoming queue (never NULL)$/;"	m	struct:CHAN
inq	safe/mtchannel.h	/^	HLIST *inq;						\/\/ incoming queue (never NULL)$/;"	m	struct:CHAN
insertBinaryOperator	safe/sqlite3.c	/^static void insertBinaryOperator($/;"	f	file:
insertCell	safe/sqlite3.c	/^static void insertCell($/;"	f	file:
insertElement	safe/sqlite3.c	/^static void insertElement($/;"	f	file:
intKey	safe/sqlite3.c	/^  u8 intKey;           \/* True if intkey flag is set *\/$/;"	m	struct:MemPage	file:
intTestFunc	safe/sqlite3.c	/^static void intTestFunc($/;"	f	file:
integer	mtjson.h	/^		long long integer;				\/\/ For JSON_INTEGER$/;"	m	union:JSON::<anonymous>
integer	safe/mtjson.h	/^		long long integer;				\/\/ For JSON_INTEGER$/;"	m	union:JSON::<anonymous>
interruptx	safe/sqlite3.c	/^  void  (*interruptx)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
invalidateAllOverflowCache	safe/sqlite3.c	/^static void invalidateAllOverflowCache(BtShared *pBt){$/;"	f	file:
invalidateAllOverflowCache	safe/sqlite3.c	50702;"	d	file:
invalidateIncrblobCursors	safe/sqlite3.c	/^static void invalidateIncrblobCursors($/;"	f	file:
invalidateIncrblobCursors	safe/sqlite3.c	50703;"	d	file:
invalidateOverflowCache	safe/sqlite3.c	/^static void invalidateOverflowCache(BtCursor *pCur){$/;"	f	file:
invalidateOverflowCache	safe/sqlite3.c	50701;"	d	file:
invalidateTempStorage	safe/sqlite3.c	/^static int invalidateTempStorage(Parse *pParse){$/;"	f	file:
invokePolicy	mtwamp.c	/^	int invokePolicy;										\/\/ WAMP_INVOKE_SINGLE ... WAMP_INVOKE_LAST$/;"	m	struct:wamp_callee_t	file:
invoke_info	spider.c	/^typedef struct invoke_info {$/;"	s	file:
invoke_info	spider.c	/^} invoke_info;$/;"	t	file:
invokee	mtwamp.c	/^	wamp_invokee_t **invokee;$/;"	m	struct:wamp_callee_t	file:
invokee	mtwamp.c	/^	wamp_invokee_t *invokee;$/;"	m	struct:wamp_call_t	file:
inward_connection_t	mtwamputil.c	/^typedef struct inward_connection_t {$/;"	s	file:
inward_connection_t	mtwamputil.c	/^} inward_connection_t;$/;"	t	file:
io	safe/mtchannel.h	/^	BIO *io;						\/\/ io structure (NULL if we're using a plain fd)$/;"	m	struct:CHAN
io	safe/mtwebsocket.h	/^	BIO *io;						\/\/ io structure (NULL if we're using a plain fd)$/;"	m	struct:WS
ioprintf	safe/spider.133.c	/^static int ioprintf(const char *szFmt, ...)$/;"	f	file:
ioprintf	safe/spider.135.c	/^static int ioprintf(const char *szFmt, ...)$/;"	f	file:
ioprintf	safe/spider.200.c	/^static int ioprintf(const char *szFmt, ...)$/;"	f	file:
ioprintf	safe/spider.203.c	/^static int ioprintf(const char *szFmt, ...)$/;"	f	file:
ioprintf	safe/spider.204.c	/^static int ioprintf(const char *szFmt, ...)$/;"	f	file:
ioprintf	safe/spider.210.c	/^static int ioprintf(const char *szFmt, ...)$/;"	f	file:
ioprintf	safe/spider.c	/^static int ioprintf(const char *szFmt, ...)$/;"	f	file:
ioset	safe/spider.133.c	/^static void ioset(BIO *io)$/;"	f	file:
ioset	safe/spider.135.c	/^static void ioset(BIO *io)$/;"	f	file:
ioset	safe/spider.200.c	/^static void ioset(BIO *io)$/;"	f	file:
ioset	safe/spider.203.c	/^static void ioset(BIO *io)$/;"	f	file:
ioset	safe/spider.204.c	/^static void ioset(BIO *io)$/;"	f	file:
ioset	safe/spider.210.c	/^static void ioset(BIO *io)$/;"	f	file:
ioset	safe/spider.c	/^static void ioset(BIO *io)$/;"	f	file:
isAppropriateForFactoring	safe/sqlite3.c	/^static int isAppropriateForFactoring(Expr *p){$/;"	f	file:
isAttached	safe/sqlite3.c	/^  int isAttached;          \/* True once backup has been registered with pager *\/$/;"	m	struct:sqlite3_backup	file:
isCandidateForInOpt	safe/sqlite3.c	/^static int isCandidateForInOpt(Select *p){$/;"	f	file:
isConsonant	safe/sqlite3.c	/^static int isConsonant(const char *z){$/;"	f	file:
isCorrelated	safe/sqlite3.c	/^    u8 isCorrelated;  \/* True if sub-query is correlated *\/$/;"	m	struct:SrcList::SrcList_item	file:
isDate	safe/sqlite3.c	/^static int isDate($/;"	f	file:
isDeferred	safe/sqlite3.c	/^  u8 isDeferred;    \/* True if constraint checking is deferred till COMMIT *\/$/;"	m	struct:FKey	file:
isDelim	safe/sqlite3.c	125652;"	d	file:
isDirty	safe/sqlite3.c	/^  int isDirty;$/;"	m	struct:RtreeNode	file:
isDistinctIndex	safe/sqlite3.c	/^static int isDistinctIndex($/;"	f	file:
isDistinctRedundant	safe/sqlite3.c	/^static int isDistinctRedundant($/;"	f	file:
isEof	safe/sqlite3.c	/^  int isEof;                      \/* True if cursor is at EOF *\/$/;"	m	struct:Fts3auxCursor	file:
isEof	safe/sqlite3.c	/^  u8 isEof;                       \/* True if at End Of Results *\/$/;"	m	struct:Fts3Cursor	file:
isError	safe/sqlite3.c	/^  int isError;          \/* Error code returned by the function. *\/$/;"	m	struct:sqlite3_context	file:
isFatalError	safe/sqlite3.c	/^static int isFatalError(int rc){$/;"	f	file:
isHidden	safe/sqlite3.c	/^  u8 isHidden;     \/* True if this column is 'hidden' *\/$/;"	m	struct:Column	file:
isIncrblobHandle	safe/sqlite3.c	/^  u8 isIncrblobHandle;      \/* True if this cursor is an incr. io handle *\/$/;"	m	struct:BtCursor	file:
isIndex	safe/sqlite3.c	/^  Bool isIndex;         \/* True if an index containing keys only - no data *\/$/;"	m	struct:VdbeCursor	file:
isInit	safe/sqlite3.c	/^  int isInit;                       \/* True after initialization has finished *\/$/;"	m	struct:Sqlite3Config	file:
isInit	safe/sqlite3.c	/^  int isInit;                    \/* True if initialized *\/$/;"	m	struct:PCacheGlobal	file:
isInit	safe/sqlite3.c	/^  u8 isInit;                      \/* 1 when initialized *\/$/;"	m	struct:WalIndexHdr	file:
isInit	safe/sqlite3.c	/^  u8 isInit;           \/* True if previously initialized. MUST BE FIRST! *\/$/;"	m	struct:MemPage	file:
isInit	safe/sqlite3.c	/^  unsigned char isInit;          \/* True if initialized *\/$/;"	m	struct:sqlite3PrngType	file:
isInterrupted	safe/sqlite3.c	/^    volatile int isInterrupted; \/* True if sqlite3_interrupt has been called *\/$/;"	m	union:sqlite3::<anonymous>	file:
isLikeOrGlob	safe/sqlite3.c	/^static int isLikeOrGlob($/;"	f	file:
isLookaside	safe/sqlite3.c	/^static int isLookaside(sqlite3 *db, void *p){$/;"	f	file:
isLookaside	safe/sqlite3.c	19134;"	d	file:
isMallocInit	safe/sqlite3.c	/^  int isMallocInit;                 \/* True after malloc is initialized *\/$/;"	m	struct:Sqlite3Config	file:
isMatchOfColumn	safe/sqlite3.c	/^static int isMatchOfColumn($/;"	f	file:
isMatchinfoNeeded	safe/sqlite3.c	/^  int isMatchinfoNeeded;          \/* True when aMatchinfo[] needs filling in *\/$/;"	m	struct:Fts3Cursor	file:
isMultiWrite	safe/sqlite3.c	/^  u8 isMultiWrite;     \/* True if statement may modify\/insert multiple rows *\/$/;"	m	struct:Parse	file:
isMutexInit	safe/sqlite3.c	/^  int isMutexInit;                  \/* True after mutexes are initialized *\/$/;"	m	struct:Sqlite3Config	file:
isNT	safe/sqlite3.c	/^  static int isNT(void){$/;"	f	file:
isNT	safe/sqlite3.c	33189;"	d	file:
isNot	safe/sqlite3.c	/^  int isNot;                          \/* True if getNextNode() sees a unary - *\/$/;"	m	struct:ParseContext	file:
isOpen	safe/sqlite3.c	40029;"	d	file:
isOrdered	safe/sqlite3.c	/^  Bool isOrdered;       \/* True if the underlying table is BTREE_UNORDERED *\/$/;"	m	struct:VdbeCursor	file:
isPCacheInit	safe/sqlite3.c	/^  int isPCacheInit;                 \/* True after malloc is initialized *\/$/;"	m	struct:Sqlite3Config	file:
isPSample	safe/sqlite3.c	/^    u8 isPSample;              \/* True if a periodic sample *\/$/;"	m	struct:Stat3Accum::Stat3Sample	file:
isPrefix	safe/sqlite3.c	/^  int isPrefix;                   \/* True if token ends with a "*" character *\/$/;"	m	struct:Fts3PhraseToken	file:
isPrepareV2	safe/sqlite3.c	/^  u8 isPrepareV2;         \/* True if prepared with prepare_v2() *\/$/;"	m	struct:Vdbe	file:
isPrimKey	safe/sqlite3.c	/^  u8 isPrimKey;    \/* True if this column is part of the PRIMARY KEY *\/$/;"	m	struct:Column	file:
isPromiscuous	safe/spider.203.c	/^int isPromiscuous()$/;"	f
isPromiscuous	safe/spider.204.c	/^int isPromiscuous()$/;"	f
isPromiscuous	safe/spider.210.c	/^int isPromiscuous()$/;"	f
isPromiscuous	safe/spider.c	/^int isPromiscuous()$/;"	f
isPromiscuous	spider.c	/^int isPromiscuous()$/;"	f
isReadonly	safe/sqlite3.c	/^  u8 isReadonly;             \/* True if read-only *\/$/;"	m	struct:unixShmNode	file:
isRecognisedSpiderFunction	safe/spider.210.c	/^int isRecognisedSpiderFunction(const char *szApi)$/;"	f
isRecognisedSpiderFunction	safe/spider.c	/^int isRecognisedSpiderFunction(const char *szApi)$/;"	f
isRecognisedSpiderFunction	spider.c	/^int isRecognisedSpiderFunction(const char *szApi)$/;"	f
isRequireSeek	safe/sqlite3.c	/^  u8 isRequireSeek;               \/* True if must seek pStmt to %_content row *\/$/;"	m	struct:Fts3Cursor	file:
isRevoked	safe/spider.200.c	/^time_t isRevoked(const char *ca, long serial)$/;"	f
isRevoked	safe/spider.203.c	/^time_t isRevoked(const char *ca, long serial)$/;"	f
isRevoked	safe/spider.204.c	/^time_t isRevoked(const char *ca, long serial)$/;"	f
isRevoked	safe/spider.210.c	/^time_t isRevoked(const char *ca, long serial)$/;"	f
isRevoked	safe/spider.c	/^time_t isRevoked(const char *ca, long serial)$/;"	f
isRevoked	spider.c	/^time_t isRevoked(const char *ca, long serial)$/;"	f
isSimpleCount	safe/sqlite3.c	/^static Table *isSimpleCount(Select *p, AggInfo *pAggInfo){$/;"	f	file:
isSorter	safe/sqlite3.c	/^  Bool isSorter;        \/* True if a new-style sorter *\/$/;"	m	struct:VdbeCursor	file:
isSorter	safe/sqlite3.c	65376;"	d	file:
isSorter	safe/sqlite3.c	65378;"	d	file:
isSortingIndex	safe/sqlite3.c	/^static int isSortingIndex($/;"	f	file:
isSystemTable	safe/sqlite3.c	/^static int isSystemTable(Parse *pParse, const char *zName){$/;"	f	file:
isTable	safe/sqlite3.c	/^  Bool isTable;         \/* True if a table requiring integer keys *\/$/;"	m	struct:VdbeCursor	file:
isTransactionSavepoint	safe/sqlite3.c	/^  u8 isTransactionSavepoint;    \/* True if the outermost savepoint is a TS *\/$/;"	m	struct:sqlite3	file:
isView	safe/sqlite3.c	101696;"	d	file:
isView	safe/sqlite3.c	101700;"	d	file:
isView	safe/sqlite3.c	101701;"	d	file:
isView	safe/sqlite3.c	102114;"	d	file:
isView	safe/sqlite3.c	86777;"	d	file:
isView	safe/sqlite3.c	86780;"	d	file:
isView	safe/sqlite3.c	86781;"	d	file:
isView	safe/sqlite3.c	86962;"	d	file:
isView	safe/sqlite3.c	90508;"	d	file:
isView	safe/sqlite3.c	90511;"	d	file:
isView	safe/sqlite3.c	90512;"	d	file:
isView	safe/sqlite3.c	91050;"	d	file:
isVowel	safe/sqlite3.c	/^static int isVowel(const char *z){$/;"	f	file:
isWriteLock	safe/sqlite3.c	/^  u8 isWriteLock;      \/* True for write lock.  False for a read lock *\/$/;"	m	struct:TableLock	file:
ix	safe/sqlite3.c	/^  int ix[BMS];                  \/* Cursor assigned to each bit *\/$/;"	m	struct:WhereMaskSet	file:
j	safe/sqlite3.c	/^  unsigned char i, j;            \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
jfd	safe/sqlite3.c	/^  sqlite3_file *jfd;          \/* File descriptor for main journal *\/$/;"	m	struct:Pager	file:
jmpbuf_alarm	mtwamputil.c	/^static jmp_buf jmpbuf_alarm;$/;"	v	file:
jmpbuf_alarm	safe/spider.133.c	/^static jmp_buf jmpbuf_alarm;						\/\/ Used when alarm goes off for timeouts$/;"	v	file:
jmpbuf_alarm	safe/spider.135.c	/^static jmp_buf jmpbuf_alarm;						\/\/ Used when alarm goes off for timeouts$/;"	v	file:
jmpbuf_alarm	safe/spider.200.c	/^static jmp_buf jmpbuf_alarm;						\/\/ Used when alarm goes off for timeouts$/;"	v	file:
jmpbuf_alarm	safe/spider.203.c	/^static jmp_buf jmpbuf_alarm;						\/\/ Used when alarm goes off for timeouts$/;"	v	file:
jmpbuf_alarm	safe/spider.204.c	/^static jmp_buf jmpbuf_alarm;						\/\/ Used when alarm goes off for timeouts$/;"	v	file:
jmpbuf_alarm	safe/spider.210.c	/^static jmp_buf jmpbuf_alarm;						\/\/ Used when alarm goes off for timeouts$/;"	v	file:
jmpbuf_alarm	safe/spider.c	/^static jmp_buf jmpbuf_alarm;						\/\/ Used when alarm goes off for timeouts$/;"	v	file:
jmpbuf_alarm	spider.c	/^static jmp_buf jmpbuf_alarm;						\/\/ Used when alarm goes off for timeouts$/;"	v	file:
jointype	safe/sqlite3.c	/^    u8 jointype;      \/* Type of join between this able and the previous *\/$/;"	m	struct:SrcList::SrcList_item	file:
journalHdr	safe/sqlite3.c	/^  i64 journalHdr;             \/* Byte offset to previous journal header *\/$/;"	m	struct:Pager	file:
journalHdrOffset	safe/sqlite3.c	/^static i64 journalHdrOffset(Pager *pPager){$/;"	f	file:
journalMode	safe/sqlite3.c	/^  u8 journalMode;             \/* One of the PAGER_JOURNALMODE_* values *\/$/;"	m	struct:Pager	file:
journalOff	safe/sqlite3.c	/^  i64 journalOff;             \/* Current write offset in the journal file *\/$/;"	m	struct:Pager	file:
journalSizeLimit	safe/sqlite3.c	/^  i64 journalSizeLimit;       \/* Size limit for persistent journal files *\/$/;"	m	struct:Pager	file:
jrnlBufferSize	safe/sqlite3.c	/^static int jrnlBufferSize(Pager *pPager){$/;"	f	file:
jrnlClose	safe/sqlite3.c	/^static int jrnlClose(sqlite3_file *pJfd){$/;"	f	file:
jrnlFileSize	safe/sqlite3.c	/^static int jrnlFileSize(sqlite3_file *pJfd, sqlite_int64 *pSize){$/;"	f	file:
jrnlRead	safe/sqlite3.c	/^static int jrnlRead($/;"	f	file:
jrnlSync	safe/sqlite3.c	/^static int jrnlSync(sqlite3_file *pJfd, int flags){$/;"	f	file:
jrnlTruncate	safe/sqlite3.c	/^static int jrnlTruncate(sqlite3_file *pJfd, sqlite_int64 size){$/;"	f	file:
jrnlWrite	safe/sqlite3.c	/^static int jrnlWrite($/;"	f	file:
json_ArrayAdd	mtjson.c	/^API JSON *json_ArrayAdd(JSON *j, JSON *item)$/;"	f
json_ArrayAdd	safe/mtjson.c	/^API JSON *json_ArrayAdd(JSON *j, JSON *item)$/;"	f
json_ArrayAddFloat	mtjson.c	/^API JSON *json_ArrayAddFloat(JSON *j, double n)$/;"	f
json_ArrayAddFloat	safe/mtjson.c	287;"	d	file:
json_ArrayAddFloat	safe/mtjson.h	77;"	d
json_ArrayAddInteger	mtjson.c	/^API JSON *json_ArrayAddInteger(JSON *j, long long n)$/;"	f
json_ArrayAddInteger	safe/mtjson.c	286;"	d	file:
json_ArrayAddInteger	safe/mtjson.h	76;"	d
json_ArrayAddString	mtjson.c	/^API JSON *json_ArrayAddString(JSON *j, int len, const char *s)$/;"	f
json_ArrayAddString	safe/mtjson.c	288;"	d	file:
json_ArrayAddString	safe/mtjson.h	78;"	d
json_ArrayAddStringz	mtjson.c	77;"	d	file:
json_ArrayAddStringz	mtjson.h	60;"	d
json_ArrayAt	mtjson.c	/^API JSON *json_ArrayAt(JSON *j, int n)$/;"	f
json_ArrayAt	safe/mtjson.c	/^API JSON *json_ArrayAt(JSON *j, int n)				{ return j ? j->data.array.values[n] : NULL; }$/;"	f
json_ArrayCount	mtjson.c	/^API int json_ArrayCount(JSON *j)$/;"	f
json_ArrayCount	safe/mtjson.c	/^API int json_ArrayCount(JSON *j)					{ return j ? j->data.array.count : 0; }$/;"	f
json_ArrayDeleteAt	mtjson.c	/^API void json_ArrayDeleteAt(JSON *j, int n)$/;"	f
json_ArrayIntegerAt	mtjson.c	/^API long long json_ArrayIntegerAt(JSON *j, int n)$/;"	f
json_ArrayIntegerAt	safe/mtjson.c	/^API long long json_ArrayIntegerAt(JSON *j, int n)	{ return j ? json_AsInteger(json_ArrayAt(j, n)) : 0; }$/;"	f
json_ArrayObjectAt	mtjson.c	/^API SPMAP *json_ArrayObjectAt(JSON *j, int n)$/;"	f
json_ArrayObjectAt	safe/mtjson.c	/^API SPMAP *json_ArrayObjectAt(JSON *j, int n)		{ return j ? json_AsObject(json_ArrayAt(j, n)) : 0; }$/;"	f
json_ArraySetAt	mtjson.c	/^API JSON *json_ArraySetAt(JSON *j, int pos, JSON *item)$/;"	f
json_ArraySetIntegerAt	mtjson.c	/^API JSON *json_ArraySetIntegerAt(JSON *j, int pos, long long value)$/;"	f
json_ArrayStringAt	mtjson.c	/^API const char *json_ArrayStringAt(JSON *j, int n, int *plen)$/;"	f
json_ArrayStringAt	safe/mtjson.c	/^API const char *json_ArrayStringAt(JSON *j, int n)	{ return j ? json_AsString(json_ArrayAt(j, n)) : 0; }$/;"	f
json_ArrayStringzAt	mtjson.c	74;"	d	file:
json_ArrayStringzAt	mtjson.h	57;"	d
json_ArrayTakeAt	mtjson.c	/^API JSON *json_ArrayTakeAt(JSON *j, int n)$/;"	f
json_ArrayTakeAt	safe/mtjson.c	/^API JSON *json_ArrayTakeAt(JSON *j, int n)			\/\/ Removes an element from an array$/;"	f
json_ArrayTakeIntegerAt	mtjson.c	/^API long long json_ArrayTakeIntegerAt(JSON *j, int n)$/;"	f
json_ArrayTakeObjectAt	mtjson.c	/^API SPMAP *json_ArrayTakeObjectAt(JSON *j, int n)$/;"	f
json_ArrayTakeStringAt	mtjson.c	/^API const char *json_ArrayTakeStringAt(JSON *j, int n, int *plen)$/;"	f
json_ArrayTakeStringzAt	mtjson.c	78;"	d	file:
json_ArrayTakeStringzAt	mtjson.h	61;"	d
json_AsBool	mtjson.c	/^API int json_AsBool(JSON *j)$/;"	f
json_AsBool	safe/mtjson.c	/^API int json_AsBool(JSON *j)						{ return j ? j->data.truth : -1; }$/;"	f
json_AsFloat	mtjson.c	/^API double json_AsFloat(JSON *j)$/;"	f
json_AsFloat	safe/mtjson.c	/^API double json_AsFloat(JSON *j)$/;"	f
json_AsInteger	mtjson.c	/^API long long json_AsInteger(JSON *j)$/;"	f
json_AsInteger	safe/mtjson.c	/^API long long json_AsInteger(JSON *j)				{ return j ? j->data.integer : 0 ; }$/;"	f
json_AsObject	mtjson.c	/^API SPMAP *json_AsObject(JSON *j)$/;"	f
json_AsObject	safe/mtjson.c	/^API SPMAP *json_AsObject(JSON *j)					{ return j ? j->data.object : NULL; }$/;"	f
json_AsString	mtjson.c	/^API const char *json_AsString(JSON *j, int *plen)$/;"	f
json_AsString	safe/mtjson.c	/^API const char *json_AsString(JSON *j)				{ return j ? j->data.string.string : "NULL JSON"; }$/;"	f
json_AsStringz	mtjson.c	72;"	d	file:
json_AsStringz	mtjson.h	55;"	d
json_Copy	mtjson.c	/^API JSON *json_Copy(JSON *json)$/;"	f
json_Delete	mtjson.c	/^API void json_Delete(JSON *json)$/;"	f
json_Delete	safe/mtjson.c	/^API void json_Delete(JSON *j)$/;"	f
json_Error	mtjson.c	/^API const char *json_Error(JSON *j)$/;"	f
json_Error	safe/mtjson.c	/^API const char *json_Error(JSON *j)$/;"	f
json_IsArray	mtjson.c	/^API int json_IsArray(JSON *j)						{ return j && j->type == JSON_ARRAY; }$/;"	f
json_IsArray	safe/mtjson.c	/^API int json_IsArray(JSON *j)						{ return j && j->type == JSON_ARRAY; }$/;"	f
json_IsBool	mtjson.c	/^API int json_IsBool(JSON *j)						{ return j && j->type == JSON_BOOL; }$/;"	f
json_IsBool	safe/mtjson.c	/^API int json_IsBool(JSON *j)						{ return j && j->type == JSON_BOOL; }$/;"	f
json_IsFloat	mtjson.c	/^API int json_IsFloat(JSON *j)						{ return j && j->type == JSON_FLOAT; }$/;"	f
json_IsFloat	safe/mtjson.c	/^API int json_IsFloat(JSON *j)						{ return j && j->type == JSON_FLOAT; }$/;"	f
json_IsInteger	mtjson.c	/^API int json_IsInteger(JSON *j)						{ return j && j->type == JSON_INTEGER; }$/;"	f
json_IsInteger	safe/mtjson.c	/^API int json_IsInteger(JSON *j)						{ return j && j->type == JSON_INTEGER; }$/;"	f
json_IsNull	mtjson.c	/^API int json_IsNull(JSON *j)						{ return j && j->type == JSON_NULL; }$/;"	f
json_IsNull	safe/mtjson.c	/^API int json_IsNull(JSON *j)						{ return j && j->type == JSON_NULL; }$/;"	f
json_IsNumber	mtjson.c	/^API int json_IsNumber(JSON *j)						{ return j && (j->type == JSON_INTEGER || j->type == JSON_FLOAT); }$/;"	f
json_IsNumber	safe/mtjson.c	/^API int json_IsNumber(JSON *j)						{ return j && (j->type == JSON_INTEGER || j->type == JSON_FLOAT); }$/;"	f
json_IsObject	mtjson.c	/^API int json_IsObject(JSON *j)						{ return j && j->type == JSON_OBJECT; }$/;"	f
json_IsObject	safe/mtjson.c	/^API int json_IsObject(JSON *j)						{ return j && j->type == JSON_OBJECT; }$/;"	f
json_IsString	mtjson.c	/^API int json_IsString(JSON *j)						{ return j && j->type == JSON_STRING; }$/;"	f
json_IsString	safe/mtjson.c	/^API int json_IsString(JSON *j)						{ return j && j->type == JSON_STRING; }$/;"	f
json_LinkIn	mtjson.c	/^STATIC void json_LinkIn(JSON *j)$/;"	f
json_LinkOut	mtjson.c	/^STATIC void json_LinkOut(JSON *j)$/;"	f
json_LogAll	mtjson.c	/^API void json_LogAll()$/;"	f
json_New	mtjson.c	/^API JSON *json_New(int type)$/;"	f
json_New	safe/mtjson.c	/^API JSON *json_New(int type)$/;"	f
json_NewArray	mtjson.c	/^API JSON *json_NewArray()$/;"	f
json_NewArray	safe/mtjson.c	/^API JSON *json_NewArray()$/;"	f
json_NewBool	mtjson.c	/^API JSON *json_NewBool(int truth)$/;"	f
json_NewBool	safe/mtjson.c	/^API JSON *json_NewBool(int truth)$/;"	f
json_NewError	mtjson.c	/^API JSON *json_NewError(const char *string)$/;"	f
json_NewError	safe/mtjson.c	/^API JSON *json_NewError(const char *string)$/;"	f
json_NewErrorf	mtjson.c	/^API JSON *json_NewErrorf(const char *fmt, ...)$/;"	f
json_NewErrorf	safe/mtjson.c	/^API JSON *json_NewErrorf(const char *fmt, ...)$/;"	f
json_NewFloat	mtjson.c	/^API JSON *json_NewFloat(double number)$/;"	f
json_NewFloat	safe/mtjson.c	/^API JSON *json_NewFloat(double number)$/;"	f
json_NewInteger	mtjson.c	/^API JSON *json_NewInteger(long long number)$/;"	f
json_NewInteger	safe/mtjson.c	/^API JSON *json_NewInteger(long long number)$/;"	f
json_NewNull	mtjson.c	/^API JSON *json_NewNull()$/;"	f
json_NewNull	safe/mtjson.c	/^API JSON *json_NewNull()$/;"	f
json_NewObject	mtjson.c	/^API JSON *json_NewObject()$/;"	f
json_NewObject	safe/mtjson.c	/^API JSON *json_NewObject()$/;"	f
json_NewObjectWith	mtjson.c	/^API JSON *json_NewObjectWith(SPMAP *map)$/;"	f
json_NewString	mtjson.c	/^API JSON *json_NewString(int len, const char *string)$/;"	f
json_NewString	safe/mtjson.c	/^API JSON *json_NewString(int len, const char *string)	{ return json_NewStringHeap(len, string ? strdup(string) : NULL); }$/;"	f
json_NewStringHeap	mtjson.c	/^API JSON *json_NewStringHeap(int len, const char *string)$/;"	f
json_NewStringHeap	safe/mtjson.c	/^API JSON *json_NewStringHeap(int len, const char *string)$/;"	f
json_NewStringz	mtjson.c	76;"	d	file:
json_NewStringz	mtjson.h	59;"	d
json_NewStringzHeap	mtjson.c	75;"	d	file:
json_NewStringzHeap	mtjson.h	58;"	d
json_ObjectAdd	mtjson.c	/^API JSON *json_ObjectAdd(JSON *j, const char *name, JSON *item)$/;"	f
json_ObjectAdd	safe/mtjson.c	/^API JSON *json_ObjectAdd(JSON *j, const char *name, JSON *item)$/;"	f
json_ObjectAddFloat	mtjson.c	/^API JSON *json_ObjectAddFloat(JSON *j, const char *s, long long n)$/;"	f
json_ObjectAddFloat	safe/mtjson.c	291;"	d	file:
json_ObjectAddFloat	safe/mtjson.h	81;"	d
json_ObjectAddInteger	mtjson.c	/^API JSON *json_ObjectAddInteger(JSON *j, const char *s, long long n)$/;"	f
json_ObjectAddInteger	safe/mtjson.c	290;"	d	file:
json_ObjectAddInteger	safe/mtjson.h	80;"	d
json_ObjectAddString	mtjson.c	/^API JSON *json_ObjectAddString(JSON *j, const char *name, int len, const char *string)$/;"	f
json_ObjectAddString	safe/mtjson.c	292;"	d	file:
json_ObjectAddString	safe/mtjson.h	82;"	d
json_ObjectAddStringz	mtjson.c	79;"	d	file:
json_ObjectAddStringz	mtjson.h	62;"	d
json_ObjectAt	safe/mtjson.c	/^API JSON *json_ObjectAt(JSON *j, int n)				{ return j ? (JSON*)spmap_GetValueAtIndex(j->data.object, n) : NULL; }$/;"	f
json_ObjectCount	mtjson.c	/^API int json_ObjectCount(JSON *j)$/;"	f
json_ObjectCount	safe/mtjson.c	/^API int json_ObjectCount(JSON *j)					{ return j ? spmap_Count(j->data.object) : 0; }$/;"	f
json_ObjectElementAt	mtjson.c	/^API JSON *json_ObjectElementAt(JSON *j, int n)$/;"	f
json_ObjectElementCalled	mtjson.c	/^API JSON *json_ObjectElementCalled(JSON *j, const char *name)$/;"	f
json_ObjectFloatCalled	mtjson.c	/^API double json_ObjectFloatCalled(JSON *j, const char *name)$/;"	f
json_ObjectIntegerCalled	mtjson.c	/^API long long json_ObjectIntegerCalled(JSON *j, const char *name)$/;"	f
json_ObjectNameAt	mtjson.c	/^API const char *json_ObjectNameAt(JSON *j, int n)$/;"	f
json_ObjectNameAt	safe/mtjson.c	/^API const char *json_ObjectNameAt(JSON *j, int n)	{ return j ? spmap_GetKeyAtIndex(j->data.object, n) : NULL; }$/;"	f
json_ObjectStringCalled	mtjson.c	/^API const char *json_ObjectStringCalled(JSON *j, const char *name, int *plen)$/;"	f
json_ObjectStringzCalled	mtjson.c	80;"	d	file:
json_ObjectStringzCalled	mtjson.h	63;"	d
json_ObjectValue	safe/mtjson.c	/^API JSON *json_ObjectValue(JSON *j, const char *name)$/;"	f
json_Parse	mtjson.c	/^API JSON *json_Parse(const char **ptext)$/;"	f
json_Parse	safe/mtjson.c	/^API JSON *json_Parse(JSON *parent, const char **ptext)$/;"	f
json_ParseString	mtjson.c	/^STATIC const char *json_ParseString(const char **ptext, int *plen)$/;"	f
json_ParseString	safe/mtjson.c	/^STATIC const char *json_ParseString(const char **ptext, int *plen)$/;"	f
json_Release	mtjson.c	/^STATIC JSON *json_Release(JSON *json)$/;"	f
json_Render	mtjson.c	/^API const char *json_Render(JSON *json)$/;"	f
json_Render	safe/mtjson.c	/^API const char *json_Render(JSON *json)$/;"	f
json_RenderHeap	mtjson.c	/^API const char *json_RenderHeap(JSON *json)$/;"	f
json_RenderString	mtjson.c	/^STATIC const char *json_RenderString(int len, const char *string)$/;"	f
json_RenderString	safe/mtjson.c	/^STATIC const char *json_RenderString(const char *string)$/;"	f
json_StringLength	mtjson.c	/^API int json_StringLength(JSON *j)$/;"	f
json_ToBool	mtjson.c	/^API int json_ToBool(JSON *j)$/;"	f
json_ToFloat	mtjson.c	/^API double json_ToFloat(JSON *j)$/;"	f
json_ToInteger	mtjson.c	/^API long long json_ToInteger(JSON *j)$/;"	f
json_ToObject	mtjson.c	/^API SPMAP *json_ToObject(JSON *j)$/;"	f
json_ToString	mtjson.c	/^API const char *json_ToString(JSON *j, int *plen)$/;"	f
json_ToStringz	mtjson.c	73;"	d	file:
json_ToStringz	mtjson.h	56;"	d
json_Type	mtjson.c	/^API int json_Type(JSON *j)							{ return j ? j->type : JSON_ERROR; }$/;"	f
json_Type	safe/mtjson.c	/^API int json_Type(JSON *j)							{ return j ? j->type : JSON_ERROR; }$/;"	f
juliandayFunc	safe/sqlite3.c	/^static void juliandayFunc($/;"	f	file:
key	safe/sqlite3.c	/^  Blob key;                       \/* Last key written to the current block *\/$/;"	m	struct:NodeWriter	file:
key	safe/sqlite3.c	/^struct AttachKey { int type;  Token key; };$/;"	m	struct:AttachKey	file:
keyClass	safe/sqlite3.c	/^  char keyClass;          \/* HASH_INT, _POINTER, _STRING, _BINARY *\/$/;"	m	struct:Fts3Hash	file:
keyConf	safe/sqlite3.c	/^  u8 keyConf;          \/* What to do in case of uniqueness conflict on iPKey *\/$/;"	m	struct:Table	file:
keyInfoFromExprList	safe/sqlite3.c	/^static KeyInfo *keyInfoFromExprList(Parse *pParse, ExprList *pList){$/;"	f	file:
keywordCode	safe/sqlite3.c	/^static int keywordCode(const char *z, int n){$/;"	f	file:
kmg	safe/spider.203.c	/^static const char *kmg(size_t size)$/;"	f	file:
kmg	safe/spider.204.c	/^static const char *kmg(size_t size)$/;"	f	file:
kmg	safe/spider.210.c	/^static const char *kmg(size_t size)$/;"	f	file:
kmg	safe/spider.c	/^static const char *kmg(size_t size)$/;"	f	file:
kmg	spider.c	/^static const char *kmg(size_t size)$/;"	f	file:
langidFromSelect	safe/sqlite3.c	/^static int langidFromSelect(Fts3Table *p, sqlite3_stmt *pSelect){$/;"	f	file:
lastErrno	safe/sqlite3.c	/^  DWORD lastErrno;           \/* The Windows errno from the last I\/O error *\/$/;"	m	struct:winShmNode	file:
lastErrno	safe/sqlite3.c	/^  DWORD lastErrno;        \/* The Windows errno from the last I\/O error *\/$/;"	m	struct:winFile	file:
lastErrno	safe/sqlite3.c	/^  int lastErrno;                      \/* The unix errno from last I\/O error *\/$/;"	m	struct:unixFile	file:
lastRowid	safe/sqlite3.c	/^  i64 lastRowid;                \/* ROWID of most recent insert (see above) *\/$/;"	m	struct:sqlite3	file:
lastRowid	safe/sqlite3.c	/^  i64 lastRowid;          \/* Last insert rowid (sqlite3.lastRowid) *\/$/;"	m	struct:VdbeFrame	file:
lastRowid	safe/sqlite3.c	/^  i64 lastRowid;        \/* Last rowid from a Next or NextIdx operation *\/$/;"	m	struct:VdbeCursor	file:
last_insert_rowid	safe/sqlite3.c	/^  sqlite_int64  (*last_insert_rowid)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
last_insert_rowid	safe/sqlite3.c	/^static void last_insert_rowid($/;"	f	file:
leaf	safe/sqlite3.c	/^  u8 leaf;             \/* True if leaf flag is set *\/$/;"	m	struct:MemPage	file:
leaveMutex	safe/sqlite3.c	/^static void leaveMutex(void){$/;"	f	file:
leftColumn	safe/sqlite3.c	/^    int leftColumn;         \/* Column number of X in "X <op> <expr>" *\/$/;"	m	union:WhereTerm::<anonymous>	file:
leftCursor	safe/sqlite3.c	/^  int leftCursor;         \/* Cursor number of X in "X <op> <expr>" *\/$/;"	m	struct:WhereTerm	file:
legacyChild	safe/spider.c	/^int legacyChild = 0;							\/\/ pid of child that deals with legacy API calls$/;"	v
legacyChild	spider.c	/^int legacyChild = 0;							\/\/ pid of child that deals with legacy API calls$/;"	v
legacyPool	spider.c	/^CHANPOOL *legacyPool = NULL;								\/\/ Create a pool of connections for polling$/;"	v
legacyReady	safe/spider.c	/^int legacyReady = 0;							\/\/ 1 when legacy child is ready to accept calls$/;"	v
legacyReady	spider.c	/^int legacyReady = 0;							\/\/ 1 when legacy child is ready to accept calls$/;"	v
len	mtjson.h	/^			int len;$/;"	m	struct:JSON::<anonymous>::<anonymous>
len	safe/mtjson.h	/^			int len;$/;"	m	struct:JSON::<anonymous>::<anonymous>
length	safe/sqlite3.c	/^  unsigned long long length;        \/* nbr of bytes to lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
lengthFunc	safe/sqlite3.c	/^static void lengthFunc($/;"	f	file:
lhs	safe/sqlite3.c	/^  YYCODETYPE lhs;         \/* Symbol on the left-hand side of the rule *\/$/;"	m	struct:	file:
libversion	safe/sqlite3.c	/^  const char * (*libversion)(void);$/;"	m	struct:sqlite3_api_routines	file:
libversion_number	safe/sqlite3.c	/^  int  (*libversion_number)(void);$/;"	m	struct:sqlite3_api_routines	file:
likeFunc	safe/sqlite3.c	/^static void likeFunc($/;"	f	file:
likeInfoAlt	safe/sqlite3.c	/^static const struct compareInfo likeInfoAlt = { '%', '_',   0, 0 };$/;"	v	file:
likeInfoNorm	safe/sqlite3.c	/^static const struct compareInfo likeInfoNorm = { '%', '_',   0, 1 };$/;"	v	file:
likely	safe/sqlite3.c	550;"	d	file:
likely	safe/sqlite3.c	553;"	d	file:
limit	safe/sqlite3.c	/^  int (*limit)(sqlite3*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
limited	safe/spider.210.c	/^	char	limited;					\/\/ 1 if there are limits, 0 otherwise (quicker than checking the 8 individual limits)$/;"	m	struct:limits_t	file:
limited	safe/spider.c	/^	char	limited;					\/\/ 1 if there are limits, 0 otherwise (quicker than checking the 8 individual limits)$/;"	m	struct:limits_t	file:
limited	spider.c	/^	char	limited;					\/\/ 1 if there are limits, 0 otherwise (quicker than checking the 8 individual limits)$/;"	m	struct:limits_t	file:
limits	safe/spider.210.c	/^	limits_t *limits;					\/\/ Limits imposed on the API$/;"	m	struct:contract_t	file:
limits	safe/spider.c	/^	limits_t *limits;					\/\/ Limits imposed on the API$/;"	m	struct:contract_t	file:
limits	spider.c	/^	limits_t *limits;					\/\/ Limits imposed on the API$/;"	m	struct:contract_t	file:
limits_Delete	safe/spider.210.c	/^limits_t *limits_Delete(limits_t *al)$/;"	f
limits_Delete	safe/spider.c	/^limits_t *limits_Delete(limits_t *al)$/;"	f
limits_Delete	spider.c	/^limits_t *limits_Delete(limits_t *al)$/;"	f
limits_Dump	safe/spider.210.c	/^void limits_Dump(limits_t *limit)$/;"	f
limits_Dump	safe/spider.c	/^void limits_Dump(limits_t *limit)$/;"	f
limits_Dump	spider.c	/^void limits_Dump(limits_t *limit)$/;"	f
limits_New	safe/spider.210.c	/^limits_t *limits_New()$/;"	f
limits_New	safe/spider.c	/^limits_t *limits_New()$/;"	f
limits_New	spider.c	/^limits_t *limits_New()$/;"	f
limits_Parse	safe/spider.210.c	/^const char *limits_Parse(limits_t *limits, const char *text)$/;"	f
limits_Parse	safe/spider.c	/^const char *limits_Parse(limits_t *limits, const char *text)$/;"	f
limits_Parse	spider.c	/^const char *limits_Parse(limits_t *limits, const char *text)$/;"	f
limits_t	safe/spider.210.c	/^typedef struct limits_t {				\/\/ Structure that holds limits for individual caller's APIs$/;"	s	file:
limits_t	safe/spider.210.c	/^} limits_t;$/;"	t	file:
limits_t	safe/spider.c	/^typedef struct limits_t {				\/\/ Structure that holds limits for individual caller's APIs$/;"	s	file:
limits_t	safe/spider.c	/^} limits_t;$/;"	t	file:
limits_t	spider.c	/^typedef struct limits_t {				\/\/ Structure that holds limits for individual caller's APIs$/;"	s	file:
limits_t	spider.c	/^} limits_t;$/;"	t	file:
list	safe/mtwebsocket.h	/^	WSL *list;			\/\/ The list this channel is in, if any$/;"	m	struct:WS
list	safe/sqlite3.c	/^    } list;$/;"	m	union:Mem3Block::<anonymous>	file:
loadAnalysis	safe/sqlite3.c	/^static void loadAnalysis(Parse *pParse, int iDb){$/;"	f	file:
loadExt	safe/sqlite3.c	/^static void loadExt(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
loadStat3	safe/sqlite3.c	/^static int loadStat3(sqlite3 *db, const char *zDb){$/;"	f	file:
load_dh_params	safe/spider.133.c	/^static void load_dh_params(SSL_CTX *ctx)$/;"	f	file:
load_dh_params	safe/spider.135.c	/^static void load_dh_params(SSL_CTX *ctx)$/;"	f	file:
load_dh_params	safe/spider.200.c	/^static void load_dh_params(SSL_CTX *ctx)$/;"	f	file:
load_dh_params	safe/spider.203.c	/^static void load_dh_params(SSL_CTX *ctx)$/;"	f	file:
load_dh_params	safe/spider.204.c	/^static void load_dh_params(SSL_CTX *ctx)$/;"	f	file:
load_dh_params	safe/spider.210.c	/^static void load_dh_params(SSL_CTX *ctx)$/;"	f	file:
load_dh_params	safe/spider.c	/^static void load_dh_params(SSL_CTX *ctx)$/;"	f	file:
load_dh_params	spider.c	/^static void load_dh_params(SSL_CTX *ctx)$/;"	f	file:
local	safe/sqlite3.c	/^  winceLock local;        \/* Locks obtained by this instance of winFile *\/$/;"	m	struct:winFile	file:
local_ioerr	safe/sqlite3.c	/^static void local_ioerr(){$/;"	f	file:
localtime	safe/sqlite3.c	/^struct tm *__cdecl localtime(const time_t *t)$/;"	f
localtimeOffset	safe/sqlite3.c	/^static sqlite3_int64 localtimeOffset($/;"	f	file:
locateFkeyIndex	safe/sqlite3.c	/^static int locateFkeyIndex($/;"	f	file:
lock	safe/sqlite3.c	/^  BtLock lock;       \/* Object used to lock page 1 *\/$/;"	m	struct:Btree	file:
lockBtree	safe/sqlite3.c	/^static int lockBtree(BtShared *pBt){$/;"	f	file:
lockBtreeMutex	safe/sqlite3.c	/^static void lockBtreeMutex(Btree *p){$/;"	f	file:
lockError	safe/sqlite3.c	/^  u8 lockError;              \/* True if a locking error has occurred *\/$/;"	m	struct:Wal	file:
lockMask	safe/sqlite3.c	/^  yDbMask lockMask;       \/* Subset of btreeMask that requires a lock *\/$/;"	m	struct:Vdbe	file:
lockProxy	safe/sqlite3.c	/^  unixFile *lockProxy;         \/* Open proxy lock file *\/$/;"	m	struct:proxyLockingContext	file:
lockProxyPath	safe/sqlite3.c	/^  char *lockProxyPath;         \/* Name of the proxy lock file *\/$/;"	m	struct:proxyLockingContext	file:
lockTrace	safe/sqlite3.c	/^static int lockTrace(int fd, int op, struct flock *p){$/;"	f	file:
locked	safe/sqlite3.c	/^  u8 locked;         \/* True if db currently has pBt locked *\/$/;"	m	struct:Btree	file:
lockingContext	safe/sqlite3.c	/^  void *lockingContext;               \/* Locking style specific state *\/$/;"	m	struct:unixFile	file:
locktype	safe/sqlite3.c	/^  int locktype;             \/* Type of lock currently held on this file *\/$/;"	m	struct:os2File	file:
locktype	safe/sqlite3.c	/^  u8 locktype;            \/* Type of lock currently held on this file *\/$/;"	m	struct:winFile	file:
log	safe/sqlite3.c	/^  void (*log)(int,const char*,...);$/;"	m	struct:sqlite3_api_routines	file:
logBadConnection	safe/sqlite3.c	/^static void logBadConnection(const char *zType){$/;"	f	file:
logIoerr	safe/sqlite3.c	/^static void logIoerr(int nRetry){$/;"	f	file:
logPrefix	spider.c	/^static const char *logPrefix = "MAIN";				\/\/ Used in log messages$/;"	v	file:
longFromASN1_INTEGER	safe/spider.200.c	/^long longFromASN1_INTEGER(ASN1_INTEGER *a)$/;"	f
longFromASN1_INTEGER	safe/spider.203.c	/^long longFromASN1_INTEGER(ASN1_INTEGER *a)$/;"	f
longFromASN1_INTEGER	safe/spider.204.c	/^long longFromASN1_INTEGER(ASN1_INTEGER *a)$/;"	f
longFromASN1_INTEGER	safe/spider.210.c	/^long longFromASN1_INTEGER(ASN1_INTEGER *a)$/;"	f
longFromASN1_INTEGER	safe/spider.c	/^long longFromASN1_INTEGER(ASN1_INTEGER *a)$/;"	f
longFromASN1_INTEGER	spider.c	/^long longFromASN1_INTEGER(ASN1_INTEGER *a)$/;"	f
lookaside	safe/sqlite3.c	/^  Lookaside lookaside;          \/* Lookaside malloc configuration *\/$/;"	m	struct:sqlite3	file:
lookupName	safe/sqlite3.c	/^static int lookupName($/;"	f	file:
lowerFunc	safe/sqlite3.c	/^static void lowerFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
lru	safe/sqlite3.c	/^    int lru;              \/* Least recently used entry has the smallest value *\/$/;"	m	struct:Parse::yColCache	file:
m	safe/sqlite3.c	/^  int h, m;          \/* Hour and minutes *\/$/;"	m	struct:DateTime	file:
m	safe/sqlite3.c	/^  sqlite3_mem_methods m;            \/* Low-level memory allocation interface *\/$/;"	m	struct:Sqlite3Config	file:
m_eq_1	safe/sqlite3.c	/^static int m_eq_1(const char *z){$/;"	f	file:
m_gt_0	safe/sqlite3.c	/^static int m_gt_0(const char *z){$/;"	f	file:
m_gt_1	safe/sqlite3.c	/^static int m_gt_1(const char *z){$/;"	f	file:
magic	safe/sqlite3.c	/^  u32 magic;                      \/* Always RTREE_GEOMETRY_MAGIC *\/$/;"	m	struct:RtreeMatchArg	file:
magic	safe/sqlite3.c	/^  u32 magic;                    \/* Magic number for detect library misuse *\/$/;"	m	struct:sqlite3	file:
magic	safe/sqlite3.c	/^  u32 magic;              \/* Magic number for sanity checking *\/$/;"	m	struct:Vdbe	file:
magic	safe/sqlite3.c	/^  u32 magic;    \/* Magic number to detect structure corruption. *\/$/;"	m	struct:winMemData	file:
main	bin2c.c	/^int main(int argc, char **argv)$/;"	f
main	jtest.c	/^void main(int argc, const char *argv[])$/;"	f
main	safe/spider.133.c	/^int main(int argc, char *argv[])$/;"	f
main	safe/spider.135.c	/^int main(int argc, char *argv[])$/;"	f
main	safe/spider.200.c	/^int main(int argc, char *argv[])$/;"	f
main	safe/spider.203.c	/^int main(int argc, char *argv[])$/;"	f
main	safe/spider.204.c	/^int main(int argc, char *argv[])$/;"	f
main	safe/spider.210.c	/^int main(int argc, char *argv[])$/;"	f
main	safe/spider.c	/^int main(int argc, char *argv[], char *envp[])$/;"	f
main	spider.c	/^int main(int argc, char *argv[], char *envp[])$/;"	f
main_channel_pool	safe/spider.c	/^CHAN *main_channel_pool = NULL;					\/\/ Channel list used in ws_EventLoop()$/;"	v
main_channel_pool	spider.c	/^CHANPOOL *main_channel_pool = NULL;				\/\/ Channel list used in ws_EventLoop()$/;"	v
major	safe/sqlite3.c	/^  YYCODETYPE major;      \/* The major token value.  This is the code$/;"	m	struct:yyStackEntry	file:
makeCallHtml	safe/spider.c	/^char makeCallHtml = 1;					\/\/ call.html gets generated when invoking an API$/;"	v
makeCallHtml	spider.c	/^char makeCallHtml = 1;					\/\/ call.html gets generated when invoking an API$/;"	v
malloc	safe/sqlite3.c	/^  void *(*malloc)(int);$/;"	m	struct:sqlite3_api_routines	file:
mallocFailed	safe/sqlite3.c	/^  int mallocFailed; \/* A memory allocation error has occurred *\/$/;"	m	struct:IntegrityCk	file:
mallocFailed	safe/sqlite3.c	/^  u8   mallocFailed;   \/* Becomes true if any memory allocation fails *\/$/;"	m	struct:StrAccum	file:
mallocFailed	safe/sqlite3.c	/^  u8 mallocFailed;              \/* True if we have seen a malloc failure *\/$/;"	m	struct:sqlite3	file:
mallocWithAlarm	safe/sqlite3.c	/^static int mallocWithAlarm(int n, void **pp){$/;"	f	file:
map	mtchannel.h	/^	SPMAP *map;						\/\/ Map of channels$/;"	m	struct:CHANPOOL
map	safe/mtchannel.h	/^	SPMAP *map;						\/\/ Map of channels$/;"	m	struct:CHANPOOL
map	safe/mtwebsocket.h	/^	SPMAP *map;						\/\/ Map of channels$/;"	m	struct:WSL
mask	safe/sqlite3.c	/^  struct {int value; int mask;} yy207;$/;"	m	struct:	file:
maskPage	safe/sqlite3.c	/^  u16 maskPage;        \/* Mask for page offset *\/$/;"	m	struct:MemPage	file:
masked	mtwamp.h	/^	char masked;							\/\/ Non-0 if we want to send outgoing masks$/;"	m	struct:WAMP
matchAll	safe/sqlite3.c	/^  u8 matchAll;$/;"	m	struct:compareInfo	file:
matchOne	safe/sqlite3.c	/^  u8 matchOne;$/;"	m	struct:compareInfo	file:
matchQuality	safe/sqlite3.c	/^static int matchQuality($/;"	f	file:
matchSet	safe/sqlite3.c	/^  u8 matchSet;$/;"	m	struct:compareInfo	file:
max	safe/spider.133.c	129;"	d	file:
max	safe/spider.135.c	138;"	d	file:
max	safe/spider.200.c	144;"	d	file:
max	safe/spider.203.c	155;"	d	file:
max	safe/spider.204.c	156;"	d	file:
max	safe/spider.210.c	165;"	d	file:
max	safe/spider.c	216;"	d	file:
max	spider.c	220;"	d	file:
max1bytePayload	safe/sqlite3.c	/^  u8 max1bytePayload;   \/* Maximum first byte of cell for a 1-byte payload *\/$/;"	m	struct:BtShared	file:
max1bytePayload	safe/sqlite3.c	/^  u8 max1bytePayload;  \/* min(maxLocal,127) *\/$/;"	m	struct:MemPage	file:
maxCount	safe/sqlite3.c	/^  u32 maxCount;       \/* Maximum instantaneous currentCount *\/$/;"	m	struct:Mem5Global	file:
maxLeaf	safe/sqlite3.c	/^  u16 maxLeaf;          \/* Maximum local payload in a LEAFDATA table *\/$/;"	m	struct:BtShared	file:
maxLocal	safe/sqlite3.c	/^  u16 maxLocal;         \/* Maximum local payload in non-LEAFDATA tables *\/$/;"	m	struct:BtShared	file:
maxLocal	safe/sqlite3.c	/^  u16 maxLocal;        \/* Copy of BtShared.maxLocal or BtShared.maxLeaf *\/$/;"	m	struct:MemPage	file:
maxOut	safe/sqlite3.c	/^  u32 maxOut;         \/* Maximum instantaneous currentOut *\/$/;"	m	struct:Mem5Global	file:
maxRequest	safe/sqlite3.c	/^  u32 maxRequest;     \/* Largest allocation (exclusive of internal frag) *\/$/;"	m	struct:Mem5Global	file:
mayAbort	safe/sqlite3.c	/^  u8 mayAbort;         \/* True if statement may throw an ABORT exception *\/$/;"	m	struct:Parse	file:
mbcsToUnicode	safe/sqlite3.c	/^static LPWSTR mbcsToUnicode(const char *zFilename){$/;"	f	file:
mem	safe/sqlite3.c	/^} mem;$/;"	v	file:
mem0	safe/sqlite3.c	/^} mem0 = { 0, 0, 0, 0, 0, 0, 0, 0 };$/;"	v	file:
mem0	safe/sqlite3.c	18771;"	d	file:
mem3	safe/sqlite3.c	/^} mem3 = { 97535575 };$/;"	v	file:
mem3	safe/sqlite3.c	16228;"	d	file:
mem5	safe/sqlite3.c	/^} mem5;$/;"	v	file:
mem5	safe/sqlite3.c	16911;"	d	file:
memAboutToChange	safe/sqlite3.c	65275;"	d	file:
memAboutToChange	safe/sqlite3.c	65277;"	d	file:
memDb	safe/sqlite3.c	/^  u8 memDb;                   \/* True to inhibit all file I\/O *\/$/;"	m	struct:Pager	file:
memIsValid	safe/sqlite3.c	13144;"	d	file:
memTracePrint	safe/sqlite3.c	/^static void memTracePrint(FILE *out, Mem *p){$/;"	f	file:
memjrnlClose	safe/sqlite3.c	/^static int memjrnlClose(sqlite3_file *pJfd){$/;"	f	file:
memjrnlFileSize	safe/sqlite3.c	/^static int memjrnlFileSize(sqlite3_file *pJfd, sqlite_int64 *pSize){$/;"	f	file:
memjrnlRead	safe/sqlite3.c	/^static int memjrnlRead($/;"	f	file:
memjrnlSync	safe/sqlite3.c	/^static int memjrnlSync(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
memjrnlTruncate	safe/sqlite3.c	/^static int memjrnlTruncate(sqlite3_file *pJfd, sqlite_int64 size){$/;"	f	file:
memjrnlWrite	safe/sqlite3.c	/^static int memjrnlWrite($/;"	f	file:
memmem	mtwamputil.c	/^STATIC const char *memmem(const char *haystack, size_t hlen, const char *needle, size_t nlen)$/;"	f
memmem	safe/spider.133.c	/^const char *memmem(const char *haystack, size_t hlen, const char *needle, size_t nlen)$/;"	f
memmem	safe/spider.135.c	/^const char *memmem(const char *haystack, size_t hlen, const char *needle, size_t nlen)$/;"	f
memmem	safe/spider.200.c	/^const char *memmem(const char *haystack, size_t hlen, const char *needle, size_t nlen)$/;"	f
memmem	safe/spider.203.c	/^const char *memmem(const char *haystack, size_t hlen, const char *needle, size_t nlen)$/;"	f
memmem	safe/spider.204.c	/^const char *memmem(const char *haystack, size_t hlen, const char *needle, size_t nlen)$/;"	f
memmem	safe/spider.210.c	/^const char *memmem(const char *haystack, size_t hlen, const char *needle, size_t nlen)$/;"	f
memmem	safe/spider.c	/^const char *memmem(const char *haystack, size_t hlen, const char *needle, size_t nlen)$/;"	f
memmem	spider.c	/^const char *memmem(const char *haystack, size_t hlen, const char *needle, size_t nlen)$/;"	f
memory_highwater	safe/sqlite3.c	/^  sqlite3_int64 (*memory_highwater)(int);$/;"	m	struct:sqlite3_api_routines	file:
memory_used	safe/sqlite3.c	/^  sqlite3_int64 (*memory_used)(void);$/;"	m	struct:sqlite3_api_routines	file:
memsys3Checkout	safe/sqlite3.c	/^static void *memsys3Checkout(u32 i, u32 nBlock){$/;"	f	file:
memsys3Enter	safe/sqlite3.c	/^static void memsys3Enter(void){$/;"	f	file:
memsys3Free	safe/sqlite3.c	/^static void memsys3Free(void *pPrior){$/;"	f	file:
memsys3FreeUnsafe	safe/sqlite3.c	/^static void memsys3FreeUnsafe(void *pOld){$/;"	f	file:
memsys3FromMaster	safe/sqlite3.c	/^static void *memsys3FromMaster(u32 nBlock){$/;"	f	file:
memsys3Init	safe/sqlite3.c	/^static int memsys3Init(void *NotUsed){$/;"	f	file:
memsys3Leave	safe/sqlite3.c	/^static void memsys3Leave(void){$/;"	f	file:
memsys3Link	safe/sqlite3.c	/^static void memsys3Link(u32 i){$/;"	f	file:
memsys3LinkIntoList	safe/sqlite3.c	/^static void memsys3LinkIntoList(u32 i, u32 *pRoot){$/;"	f	file:
memsys3Malloc	safe/sqlite3.c	/^static void *memsys3Malloc(int nBytes){$/;"	f	file:
memsys3MallocUnsafe	safe/sqlite3.c	/^static void *memsys3MallocUnsafe(int nByte){$/;"	f	file:
memsys3Merge	safe/sqlite3.c	/^static void memsys3Merge(u32 *pRoot){$/;"	f	file:
memsys3OutOfMemory	safe/sqlite3.c	/^static void memsys3OutOfMemory(int nByte){$/;"	f	file:
memsys3Realloc	safe/sqlite3.c	/^static void *memsys3Realloc(void *pPrior, int nBytes){$/;"	f	file:
memsys3Roundup	safe/sqlite3.c	/^static int memsys3Roundup(int n){$/;"	f	file:
memsys3Shutdown	safe/sqlite3.c	/^static void memsys3Shutdown(void *NotUsed){$/;"	f	file:
memsys3Size	safe/sqlite3.c	/^static int memsys3Size(void *p){$/;"	f	file:
memsys3Unlink	safe/sqlite3.c	/^static void memsys3Unlink(u32 i){$/;"	f	file:
memsys3UnlinkFromList	safe/sqlite3.c	/^static void memsys3UnlinkFromList(u32 i, u32 *pRoot){$/;"	f	file:
memsys5Enter	safe/sqlite3.c	/^static void memsys5Enter(void){$/;"	f	file:
memsys5Free	safe/sqlite3.c	/^static void memsys5Free(void *pPrior){$/;"	f	file:
memsys5FreeUnsafe	safe/sqlite3.c	/^static void memsys5FreeUnsafe(void *pOld){$/;"	f	file:
memsys5Init	safe/sqlite3.c	/^static int memsys5Init(void *NotUsed){$/;"	f	file:
memsys5Leave	safe/sqlite3.c	/^static void memsys5Leave(void){$/;"	f	file:
memsys5Link	safe/sqlite3.c	/^static void memsys5Link(int i, int iLogsize){$/;"	f	file:
memsys5Log	safe/sqlite3.c	/^static int memsys5Log(int iValue){$/;"	f	file:
memsys5Malloc	safe/sqlite3.c	/^static void *memsys5Malloc(int nBytes){$/;"	f	file:
memsys5MallocUnsafe	safe/sqlite3.c	/^static void *memsys5MallocUnsafe(int nByte){$/;"	f	file:
memsys5Realloc	safe/sqlite3.c	/^static void *memsys5Realloc(void *pPrior, int nBytes){$/;"	f	file:
memsys5Roundup	safe/sqlite3.c	/^static int memsys5Roundup(int n){$/;"	f	file:
memsys5Shutdown	safe/sqlite3.c	/^static void memsys5Shutdown(void *NotUsed){$/;"	f	file:
memsys5Size	safe/sqlite3.c	/^static int memsys5Size(void *p){$/;"	f	file:
memsys5Unlink	safe/sqlite3.c	/^static void memsys5Unlink(int i, int iLogsize){$/;"	f	file:
memsys5UnlinkFirst	safe/sqlite3.c	/^static int memsys5UnlinkFirst(int iLogsize){$/;"	f	file:
mi_BytesIn	safe/spider.210.c	/^unsigned long mi_BytesIn = 0;			\/\/ Received from caller$/;"	v
mi_BytesIn	safe/spider.c	/^unsigned long mi_BytesIn = 0;			\/\/ Received from caller$/;"	v
mi_BytesIn	spider.c	/^unsigned long mi_BytesIn = 0;			\/\/ Received from caller$/;"	v
mi_BytesOut	safe/spider.210.c	/^unsigned long mi_BytesOut = 0;			\/\/ Written to caller$/;"	v
mi_BytesOut	safe/spider.c	/^unsigned long mi_BytesOut = 0;			\/\/ Written to caller$/;"	v
mi_BytesOut	spider.c	/^unsigned long mi_BytesOut = 0;			\/\/ Written to caller$/;"	v
mi_caller	safe/spider.133.c	/^const char *mi_caller = NULL;			\/\/ name of caller$/;"	v
mi_caller	safe/spider.135.c	/^const char *mi_caller = NULL;			\/\/ name of caller$/;"	v
mi_caller	safe/spider.200.c	/^const char *mi_caller = NULL;			\/\/ name of caller$/;"	v
mi_caller	safe/spider.203.c	/^const char *mi_caller = NULL;			\/\/ name of caller$/;"	v
mi_caller	safe/spider.204.c	/^const char *mi_caller = NULL;			\/\/ name of caller$/;"	v
mi_caller	safe/spider.210.c	/^const char *mi_caller = NULL;			\/\/ name of caller$/;"	v
mi_caller	safe/spider.c	/^const char *mi_caller = NULL;			\/\/ name of caller$/;"	v
mi_caller	spider.c	/^const char *mi_caller = NULL;			\/\/ name of caller$/;"	v
mi_function	safe/spider.133.c	/^const char *mi_function = NULL;			\/\/ Name of function$/;"	v
mi_function	safe/spider.135.c	/^const char *mi_function = NULL;			\/\/ Name of function$/;"	v
mi_function	safe/spider.200.c	/^const char *mi_function = NULL;			\/\/ Name of function$/;"	v
mi_function	safe/spider.203.c	/^const char *mi_function = NULL;			\/\/ Name of function$/;"	v
mi_function	safe/spider.204.c	/^const char *mi_function = NULL;			\/\/ Name of function$/;"	v
mi_function	safe/spider.210.c	/^const char *mi_function = NULL;			\/\/ Name of function$/;"	v
mi_function	safe/spider.c	/^const char *mi_function = NULL;			\/\/ Name of function$/;"	v
mi_function	spider.c	/^const char *mi_function = NULL;			\/\/ Name of function$/;"	v
mi_id	safe/spider.133.c	/^const char *mi_id;						\/\/ Message ID$/;"	v
mi_id	safe/spider.135.c	/^const char *mi_id;						\/\/ Message ID$/;"	v
mi_id	safe/spider.200.c	/^const char *mi_id = NULL;				\/\/ Message ID$/;"	v
mi_id	safe/spider.203.c	/^const char *mi_id = NULL;				\/\/ Message ID$/;"	v
mi_id	safe/spider.204.c	/^const char *mi_id = NULL;				\/\/ Message ID$/;"	v
mi_id	safe/spider.210.c	/^const char *mi_id = NULL;				\/\/ Message ID$/;"	v
mi_id	safe/spider.c	/^const char *mi_id = NULL;				\/\/ Message ID$/;"	v
mi_id	spider.c	/^const char *mi_id = NULL;				\/\/ Message ID$/;"	v
mi_inhibit	safe/spider.200.c	/^int mi_inhibit = 0;						\/\/ Set by internal processes to inhibit logging of MI on exit$/;"	v
mi_inhibit	safe/spider.203.c	/^int mi_inhibit = 0;						\/\/ Set by internal processes to inhibit logging of MI on exit$/;"	v
mi_inhibit	safe/spider.204.c	/^int mi_inhibit = 0;						\/\/ Set by internal processes to inhibit logging of MI on exit$/;"	v
mi_inhibit	safe/spider.210.c	/^int mi_inhibit = 0;						\/\/ Set by internal processes to inhibit logging of MI on exit$/;"	v
mi_inhibit	safe/spider.c	/^int mi_inhibit = 0;						\/\/ Set by internal processes to inhibit logging of MI on exit$/;"	v
mi_inhibit	spider.c	/^int mi_inhibit = 0;						\/\/ Set by internal processes to inhibit logging of MI on exit$/;"	v
mi_msecs	safe/spider.133.c	/^int mi_msecs = 0;						\/\/ Number of total elapsed milliseconds$/;"	v
mi_msecs	safe/spider.135.c	/^int mi_msecs = 0;						\/\/ Number of total elapsed milliseconds$/;"	v
mi_msecs	safe/spider.200.c	/^int mi_msecs = 0;						\/\/ Number of total elapsed milliseconds$/;"	v
mi_msecs	safe/spider.203.c	/^int mi_msecs = 0;						\/\/ Number of total elapsed milliseconds$/;"	v
mi_msecs	safe/spider.204.c	/^int mi_msecs = 0;						\/\/ Number of total elapsed milliseconds$/;"	v
mi_msecs	safe/spider.210.c	/^int mi_msecs = 0;						\/\/ Number of total elapsed milliseconds$/;"	v
mi_msecs	safe/spider.c	/^int mi_msecs = 0;						\/\/ Number of total elapsed milliseconds$/;"	v
mi_msecs	spider.c	/^int mi_msecs = 0;						\/\/ Number of total elapsed milliseconds$/;"	v
mi_protocol	safe/spider.200.c	/^const char *mi_protocol = NULL;			\/\/ Protocol used to connect$/;"	v
mi_protocol	safe/spider.203.c	/^const char *mi_protocol = NULL;			\/\/ Protocol used to connect$/;"	v
mi_protocol	safe/spider.204.c	/^const char *mi_protocol = NULL;			\/\/ Protocol used to connect$/;"	v
mi_protocol	safe/spider.210.c	/^const char *mi_protocol = NULL;			\/\/ Protocol used to connect$/;"	v
mi_protocol	safe/spider.c	/^const char *mi_protocol = NULL;			\/\/ Protocol used to connect$/;"	v
mi_protocol	spider.c	/^const char *mi_protocol = NULL;			\/\/ Protocol used to connect$/;"	v
mi_session	safe/spider.133.c	/^const char *mi_session = NULL;			\/\/ Session involved$/;"	v
mi_session	safe/spider.135.c	/^const char *mi_session = NULL;			\/\/ Session involved$/;"	v
mi_session	safe/spider.200.c	/^const char *mi_session = NULL;			\/\/ Session involved$/;"	v
mi_session	safe/spider.203.c	/^const char *mi_session = NULL;			\/\/ Session involved$/;"	v
mi_session	safe/spider.204.c	/^const char *mi_session = NULL;			\/\/ Session involved$/;"	v
mi_session	safe/spider.210.c	/^const char *mi_session = NULL;			\/\/ Session involved$/;"	v
mi_session	safe/spider.c	/^const char *mi_session = NULL;			\/\/ Session involved$/;"	v
mi_session	spider.c	/^const char *mi_session = NULL;			\/\/ Session involved$/;"	v
mi_status	safe/spider.133.c	/^int mi_status = -1;						\/\/ Returned status$/;"	v
mi_status	safe/spider.135.c	/^int mi_status = -1;						\/\/ Returned status$/;"	v
mi_status	safe/spider.200.c	/^int mi_status = -1;						\/\/ Returned status$/;"	v
mi_status	safe/spider.203.c	/^int mi_status = -1;						\/\/ Returned status$/;"	v
mi_status	safe/spider.204.c	/^int mi_status = -1;						\/\/ Returned status$/;"	v
mi_status	safe/spider.210.c	/^int mi_status = -1;						\/\/ Returned status$/;"	v
mi_status	safe/spider.c	/^int mi_status = -1;						\/\/ Returned status$/;"	v
mi_status	spider.c	/^int mi_status = -1;						\/\/ Returned status$/;"	v
mi_tms	safe/spider.133.c	/^struct tms mi_tms;						\/\/ Clock details$/;"	v
mi_tms	safe/spider.135.c	/^struct tms mi_tms;						\/\/ Clock details$/;"	v
mi_tms	safe/spider.200.c	/^struct tms mi_tms;						\/\/ Clock details$/;"	v
mi_tms	safe/spider.203.c	/^struct tms mi_tms;						\/\/ Clock details$/;"	v
mi_tms	safe/spider.204.c	/^struct tms mi_tms;						\/\/ Clock details$/;"	v
mi_tms	safe/spider.210.c	/^struct tms mi_tms;						\/\/ Clock details$/;"	v
mi_tms	safe/spider.c	/^struct tms mi_tms;						\/\/ Clock details$/;"	v
mi_tms	spider.c	/^struct tms mi_tms;						\/\/ Clock details$/;"	v
mi_tv	safe/spider.133.c	/^struct timeval mi_tv;					\/\/ Clock ticks since start of ServeRequest()$/;"	v
mi_tv	safe/spider.135.c	/^struct timeval mi_tv;					\/\/ Clock ticks since start of ServeRequest()$/;"	v
mi_tv	safe/spider.200.c	/^struct timeval mi_tv;					\/\/ Clock ticks since start of ServeRequest()$/;"	v
mi_tv	safe/spider.203.c	/^struct timeval mi_tv;					\/\/ Clock ticks since start of ServeRequest()$/;"	v
mi_tv	safe/spider.204.c	/^struct timeval mi_tv;					\/\/ Clock ticks since start of ServeRequest()$/;"	v
mi_tv	safe/spider.210.c	/^struct timeval mi_tv;					\/\/ Clock ticks since start of ServeRequest()$/;"	v
mi_tv	safe/spider.c	/^struct timeval mi_tv;					\/\/ Clock ticks since start of ServeRequest()$/;"	v
mi_tv	spider.c	/^struct timeval mi_tv;					\/\/ Clock ticks since start of ServeRequest()$/;"	v
mimeio	safe/spider.133.c	/^BIO *mimeio = NULL;$/;"	v
mimeio	safe/spider.135.c	/^BIO *mimeio = NULL;$/;"	v
mimeio	safe/spider.200.c	/^BIO *mimeio = NULL;$/;"	v
mimeio	safe/spider.203.c	/^BIO *mimeio = NULL;$/;"	v
mimeio	safe/spider.204.c	/^BIO *mimeio = NULL;$/;"	v
mimeio	safe/spider.210.c	/^BIO *mimeio = NULL;$/;"	v
mimeio	safe/spider.c	/^BIO *mimeio = NULL;$/;"	v
mimeio	spider.c	/^static BIO *mimeio = NULL;$/;"	v	file:
minBytes	mtchannel.h	/^	int minBytes;					\/\/ Minimum bytes received before receiver is called$/;"	m	struct:CHAN
minLeaf	safe/sqlite3.c	/^  u16 minLeaf;          \/* Minimum local payload in a LEAFDATA table *\/$/;"	m	struct:BtShared	file:
minLocal	safe/sqlite3.c	/^  u16 minLocal;         \/* Minimum local payload in non-LEAFDATA tables *\/$/;"	m	struct:BtShared	file:
minLocal	safe/sqlite3.c	/^  u16 minLocal;        \/* Copy of BtShared.minLocal or BtShared.minLeaf *\/$/;"	m	struct:MemPage	file:
minMaxFinalize	safe/sqlite3.c	/^static void minMaxFinalize(sqlite3_context *context){$/;"	f	file:
minMaxQuery	safe/sqlite3.c	/^static u8 minMaxQuery(Select *p){$/;"	f	file:
minWriteFileFormat	safe/sqlite3.c	/^  u8 minWriteFileFormat;  \/* Minimum file format for writable database files *\/$/;"	m	struct:Vdbe	file:
minmaxFunc	safe/sqlite3.c	/^static void minmaxFunc($/;"	f	file:
minmaxStep	safe/sqlite3.c	/^static void minmaxStep($/;"	f	file:
minor	safe/sqlite3.c	/^  YYMINORTYPE minor;     \/* The user-supplied minor token value.  This$/;"	m	struct:yyStackEntry	file:
mnMaster	safe/sqlite3.c	/^  u32 mnMaster;$/;"	m	struct:Mem3Global	file:
mnPmaSize	safe/sqlite3.c	/^  int mnPmaSize;                  \/* Minimum PMA size, in bytes *\/$/;"	m	struct:VdbeSorter	file:
mnReq	safe/sqlite3.c	/^  int mnReq, mxReq;                 \/* Min and max heap requests sizes *\/$/;"	m	struct:Sqlite3Config	file:
modifyPagePointer	safe/sqlite3.c	/^static int modifyPagePointer(MemPage *pPage, Pgno iFrom, Pgno iTo, u8 eType){$/;"	f	file:
moveToChild	safe/sqlite3.c	/^static int moveToChild(BtCursor *pCur, u32 newPgno){$/;"	f	file:
moveToLeftmost	safe/sqlite3.c	/^static int moveToLeftmost(BtCursor *pCur){$/;"	f	file:
moveToParent	safe/sqlite3.c	/^static void moveToParent(BtCursor *pCur){$/;"	f	file:
moveToRightmost	safe/sqlite3.c	/^static int moveToRightmost(BtCursor *pCur){$/;"	f	file:
moveToRoot	safe/sqlite3.c	/^static int moveToRoot(BtCursor *pCur){$/;"	f	file:
movetoTarget	safe/sqlite3.c	/^  i64 movetoTarget;     \/* Argument to the deferred sqlite3BtreeMoveto() *\/$/;"	m	struct:VdbeCursor	file:
mprintf	safe/sqlite3.c	/^  char * (*mprintf)(const char*,...);$/;"	m	struct:sqlite3_api_routines	file:
msc_ArchiveOldDirs	safe/spider.203.c	/^void msc_ArchiveOldDirs(int verbose)$/;"	f
msc_ArchiveOldDirs	safe/spider.204.c	/^void msc_ArchiveOldDirs(int verbose)$/;"	f
msc_ArchiveOldDirs	safe/spider.210.c	/^void msc_ArchiveOldDirs(int verbose)$/;"	f
msc_ArchiveOldDirs	safe/spider.c	/^void msc_ArchiveOldDirs(int verbose)$/;"	f
msc_ArchiveOldDirs	spider.c	/^void msc_ArchiveOldDirs(int verbose)$/;"	f
msc_DayZipFile	safe/spider.203.c	/^const char *msc_DayZipFile(int day, int month, int year)$/;"	f
msc_DayZipFile	safe/spider.204.c	/^const char *msc_DayZipFile(int day, int month, int year)$/;"	f
msc_DayZipFile	safe/spider.210.c	/^const char *msc_DayZipFile(int day, int month, int year)$/;"	f
msc_DayZipFile	safe/spider.c	/^const char *msc_DayZipFile(int day, int month, int year)$/;"	f
msc_DayZipFile	spider.c	/^const char *msc_DayZipFile(int day, int month, int year)$/;"	f
msc_DirCount	safe/spider.203.c	/^int msc_DirCount(const char *szDir)$/;"	f
msc_DirCount	safe/spider.204.c	/^int msc_DirCount(const char *szDir)$/;"	f
msc_DirCount	safe/spider.210.c	/^int msc_DirCount(const char *szDir)$/;"	f
msc_DirCount	safe/spider.c	/^int msc_DirCount(const char *szDir)$/;"	f
msc_DirCount	spider.c	/^int msc_DirCount(const char *szDir)$/;"	f
msc_DisplayCalendar	safe/spider.203.c	/^void msc_DisplayCalendar(BIO *io, int d, int m, int y, int bDeep, const char *szFilter)$/;"	f
msc_DisplayCalendar	safe/spider.204.c	/^void msc_DisplayCalendar(BIO *io, int d, int m, int y, int bDeep, const char *szFilter)$/;"	f
msc_DisplayCalendar	safe/spider.210.c	/^void msc_DisplayCalendar(BIO *io, int d, int m, int y, int bDeep, const char *szFilter)$/;"	f
msc_DisplayCalendar	safe/spider.c	/^void msc_DisplayCalendar(BIO *io, int d, int m, int y, int bDeep, const char *szFilter)$/;"	f
msc_DisplayCalendar	spider.c	/^void msc_DisplayCalendar(BIO *io, int d, int m, int y, int bDeep, const char *szFilter)$/;"	f
msc_DisplayMsgLogLine	safe/spider.203.c	/^void msc_DisplayMsgLogLine(BIO *io, const char *dir, int bDeep, const char *szFilter, int day, int month, int year)$/;"	f
msc_DisplayMsgLogLine	safe/spider.204.c	/^void msc_DisplayMsgLogLine(BIO *io, const char *dir, int bDeep, const char *szFilter, int day, int month, int year)$/;"	f
msc_DisplayMsgLogLine	safe/spider.210.c	/^void msc_DisplayMsgLogLine(BIO *io, const char *dir, int bDeep, const char *szFilter, int day, int month, int year)$/;"	f
msc_DisplayMsgLogLine	safe/spider.c	/^void msc_DisplayMsgLogLine(BIO *io, const char *dir, int bDeep, const char *szFilter, int day, int month, int year)$/;"	f
msc_DisplayMsgLogLine	spider.c	/^void msc_DisplayMsgLogLine(BIO *io, const char *dir, int bDeep, const char *szFilter, int day, int month, int year)$/;"	f
msc_FilterDayLink	safe/spider.203.c	/^const char *msc_FilterDayLink(int day, int month, int year, const char *szText)$/;"	f
msc_FilterDayLink	safe/spider.204.c	/^const char *msc_FilterDayLink(int day, int month, int year, const char *szText)$/;"	f
msc_FilterDayLink	safe/spider.210.c	/^const char *msc_FilterDayLink(int day, int month, int year, const char *szText)$/;"	f
msc_FilterDayLink	safe/spider.c	/^const char *msc_FilterDayLink(int day, int month, int year, const char *szText)$/;"	f
msc_FilterDayLink	spider.c	/^const char *msc_FilterDayLink(int day, int month, int year, const char *szText)$/;"	f
msc_HasLogError	safe/spider.203.c	/^int msc_HasLogError(const char *szFile)$/;"	f
msc_HasLogError	safe/spider.204.c	/^int msc_HasLogError(const char *szFile)$/;"	f
msc_HasLogError	safe/spider.210.c	/^int msc_HasLogError(const char *szFile)$/;"	f
msc_HasLogError	safe/spider.c	/^int msc_HasLogError(const char *szFile)$/;"	f
msc_HasLogError	spider.c	/^int msc_HasLogError(const char *szFile)$/;"	f
msc_MessageId	safe/spider.203.c	/^const char *msc_MessageId()$/;"	f
msc_MessageId	safe/spider.204.c	/^const char *msc_MessageId()$/;"	f
msc_MessageId	safe/spider.210.c	/^const char *msc_MessageId()$/;"	f
msc_MessageId	safe/spider.c	/^const char *msc_MessageId()$/;"	f
msc_MessageId	spider.c	/^const char *msc_MessageId()$/;"	f
msc_MonthLen	safe/spider.203.c	/^int msc_MonthLen(int month, int year)$/;"	f
msc_MonthLen	safe/spider.204.c	/^int msc_MonthLen(int month, int year)$/;"	f
msc_MonthLen	safe/spider.210.c	/^int msc_MonthLen(int month, int year)$/;"	f
msc_MonthLen	safe/spider.c	/^int msc_MonthLen(int month, int year)$/;"	f
msc_MonthLen	spider.c	/^int msc_MonthLen(int month, int year)$/;"	f
msc_NoteDir	safe/spider.203.c	/^const char *msc_NoteDir()$/;"	f
msc_NoteDir	safe/spider.204.c	/^const char *msc_NoteDir()$/;"	f
msc_NoteDir	safe/spider.210.c	/^const char *msc_NoteDir()$/;"	f
msc_NoteDir	safe/spider.c	/^const char *msc_NoteDir()$/;"	f
msc_NoteDir	spider.c	/^const char *msc_NoteDir()$/;"	f
msc_NoteDirTail	safe/spider.210.c	/^static const char *msc_NoteDirTail()$/;"	f	file:
msc_NoteDirTail	safe/spider.c	/^static const char *msc_NoteDirTail()$/;"	f	file:
msc_NoteDirTail	spider.c	/^static const char *msc_NoteDirTail()$/;"	f	file:
msc_StatusLink	safe/spider.203.c	/^const char *msc_StatusLink(int d, int m, int y, int bDeep, const char *szFilter)$/;"	f
msc_StatusLink	safe/spider.204.c	/^const char *msc_StatusLink(int d, int m, int y, int bDeep, const char *szFilter)$/;"	f
msc_StatusLink	safe/spider.210.c	/^const char *msc_StatusLink(int d, int m, int y, int bDeep, const char *szFilter)$/;"	f
msc_StatusLink	safe/spider.c	/^const char *msc_StatusLink(int d, int m, int y, int bDeep, const char *szFilter)$/;"	f
msc_StatusLink	spider.c	/^const char *msc_StatusLink(int d, int m, int y, int bDeep, const char *szFilter)$/;"	f
msc_SubtractDays	safe/spider.203.c	/^void msc_SubtractDays(int period, int *day, int *month, int *year)$/;"	f
msc_SubtractDays	safe/spider.204.c	/^void msc_SubtractDays(int period, int *day, int *month, int *year)$/;"	f
msc_SubtractDays	safe/spider.210.c	/^void msc_SubtractDays(int period, int *day, int *month, int *year)$/;"	f
msc_SubtractDays	safe/spider.c	/^void msc_SubtractDays(int period, int *day, int *month, int *year)$/;"	f
msc_SubtractDays	spider.c	/^void msc_SubtractDays(int period, int *day, int *month, int *year)$/;"	f
msc_UriEncode	safe/spider.203.c	/^const char *msc_UriEncode(const char *szText)$/;"	f
msc_UriEncode	safe/spider.204.c	/^const char *msc_UriEncode(const char *szText)$/;"	f
msc_UriEncode	safe/spider.210.c	/^const char *msc_UriEncode(const char *szText)$/;"	f
msc_UriEncode	safe/spider.c	/^const char *msc_UriEncode(const char *szText)$/;"	f
msc_UriEncode	spider.c	/^const char *msc_UriEncode(const char *szText)$/;"	f
msc_isDir	safe/spider.203.c	/^int msc_isDir(const char *szDir)$/;"	f
msc_isDir	safe/spider.204.c	/^int msc_isDir(const char *szDir)$/;"	f
msc_isDir	safe/spider.210.c	/^int msc_isDir(const char *szDir)$/;"	f
msc_isDir	safe/spider.c	/^int msc_isDir(const char *szDir)$/;"	f
msc_isDir	spider.c	/^int msc_isDir(const char *szDir)$/;"	f
msc_strrcmp	safe/spider.203.c	/^int msc_strrcmp(const char *a, const char *b)$/;"	f
msc_strrcmp	safe/spider.204.c	/^int msc_strrcmp(const char *a, const char *b)$/;"	f
msc_strrcmp	safe/spider.210.c	/^int msc_strrcmp(const char *a, const char *b)$/;"	f
msc_strrcmp	safe/spider.c	/^int msc_strrcmp(const char *a, const char *b)$/;"	f
msc_strrcmp	spider.c	/^int msc_strrcmp(const char *a, const char *b)$/;"	f
msglog_KeepAlways	safe/spider.c	/^char msglog_KeepAlways = 0;			\/\/ 1 if we're going to keep everything always$/;"	v
msglog_KeepAlways	spider.c	/^char msglog_KeepAlways = 0;			\/\/ 1 if we're going to keep everything always$/;"	v
msglog_KeepErrors	safe/spider.c	/^char msglog_KeepErrors = 1;			\/\/ 1 if we're going to set msglog_Keep on meeting an error$/;"	v
msglog_KeepErrors	spider.c	/^char msglog_KeepErrors = 1;			\/\/ 1 if we're going to set msglog_Keep on meeting an error$/;"	v
msglog_KeepFlows	safe/spider.c	/^char msglog_KeepFlows = 0;			\/\/ 1 if we're going to keep dataflows (files that start 'flow')$/;"	v
msglog_KeepFlows	spider.c	/^char msglog_KeepFlows = 0;			\/\/ 1 if we're going to keep dataflows (files that start 'flow')$/;"	v
mt_index	safe/spider.133.c	/^static int mt_index = MT_LEN*sizeof(unsigned long);$/;"	v	file:
mt_index	safe/spider.135.c	/^static int mt_index = MT_LEN*sizeof(unsigned long);$/;"	v	file:
mt_index	safe/spider.200.c	/^static int mt_index = MT_LEN*sizeof(unsigned long);$/;"	v	file:
mt_index	safe/spider.203.c	/^static int mt_index = MT_LEN*sizeof(unsigned long);$/;"	v	file:
mt_index	safe/spider.204.c	/^static int mt_index = MT_LEN*sizeof(unsigned long);$/;"	v	file:
mt_index	safe/spider.210.c	/^static int mt_index = MT_LEN*sizeof(unsigned long);$/;"	v	file:
mt_index	safe/spider.c	/^static int mt_index = MT_LEN*sizeof(unsigned long);$/;"	v	file:
mt_index	spider.c	/^static int mt_index = MT_LEN*sizeof(unsigned long);$/;"	v	file:
mt_random	safe/spider.133.c	/^unsigned long mt_random(unsigned long nMax) {$/;"	f
mt_random	safe/spider.135.c	/^unsigned long mt_random(unsigned long nMax) {$/;"	f
mt_random	safe/spider.200.c	/^unsigned long mt_random(unsigned long nMax) {$/;"	f
mt_random	safe/spider.203.c	/^unsigned long mt_random(unsigned long nMax) {$/;"	f
mt_random	safe/spider.204.c	/^unsigned long mt_random(unsigned long nMax) {$/;"	f
mt_random	safe/spider.210.c	/^unsigned long mt_random(unsigned long nMax) {$/;"	f
mt_random	safe/spider.c	/^unsigned long mt_random(unsigned long nMax) {$/;"	f
mt_random	spider.c	/^unsigned long mt_random(unsigned long nMax) {$/;"	f
mt_state	safe/spider.133.c	/^static unsigned long mt_state[MT_LEN];$/;"	v	file:
mt_state	safe/spider.135.c	/^static unsigned long mt_state[MT_LEN];$/;"	v	file:
mt_state	safe/spider.200.c	/^static unsigned long mt_state[MT_LEN];$/;"	v	file:
mt_state	safe/spider.203.c	/^static unsigned long mt_state[MT_LEN];$/;"	v	file:
mt_state	safe/spider.204.c	/^static unsigned long mt_state[MT_LEN];$/;"	v	file:
mt_state	safe/spider.210.c	/^static unsigned long mt_state[MT_LEN];$/;"	v	file:
mt_state	safe/spider.c	/^static unsigned long mt_state[MT_LEN];$/;"	v	file:
mt_state	spider.c	/^static unsigned long mt_state[MT_LEN];$/;"	v	file:
mtime	safe/spider.210.c	/^	time_t mtime;						\/\/ Modify date of the file$/;"	m	struct:contract_t	file:
mtime	safe/spider.c	/^	time_t mtime;						\/\/ Modify date of the file$/;"	m	struct:contract_t	file:
mtime	spider.c	/^	time_t mtime;						\/\/ Modify date of the file$/;"	m	struct:contract_t	file:
mtpost_Incoming	spider.c	/^int mtpost_Incoming(WAMP *wamp, int type, JSON *json)$/;"	f
mtpost_Init	spider.c	/^void mtpost_Init()$/;"	f
mtpost_OnConnected	spider.c	/^static int mtpost_OnConnected(WAMP *wamp)$/;"	f	file:
mtpost_Wamp	spider.c	/^void mtpost_Wamp(WAMP *wamp, JSON *json)$/;"	f
multiSelect	safe/sqlite3.c	/^static int multiSelect($/;"	f	file:
multiSelectCollSeq	safe/sqlite3.c	/^static CollSeq *multiSelectCollSeq(Parse *pParse, Select *p, int iCol){$/;"	f	file:
multiSelectOrderBy	safe/sqlite3.c	/^static int multiSelectOrderBy($/;"	f	file:
mutex	safe/sqlite3.c	/^  CRITICAL_SECTION mutex;    \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:
mutex	safe/sqlite3.c	/^  HMTX mutex;       \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:
mutex	safe/sqlite3.c	/^  pthread_mutex_t mutex;     \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:
mutex	safe/sqlite3.c	/^  sqlite3_mutex *mutex;          \/* MUTEX_STATIC_LRU or NULL *\/$/;"	m	struct:PGroup	file:
mutex	safe/sqlite3.c	/^  sqlite3_mutex *mutex;          \/* Mutex for accessing the following: *\/$/;"	m	struct:PCacheGlobal	file:
mutex	safe/sqlite3.c	/^  sqlite3_mutex *mutex;         \/* Connection mutex *\/$/;"	m	struct:sqlite3	file:
mutex	safe/sqlite3.c	/^  sqlite3_mutex *mutex;         \/* Mutex to serialize access *\/$/;"	m	struct:Mem0Global	file:
mutex	safe/sqlite3.c	/^  sqlite3_mutex *mutex;      \/* Mutex to access this object *\/$/;"	m	struct:os2ShmNode	file:
mutex	safe/sqlite3.c	/^  sqlite3_mutex *mutex;      \/* Mutex to access this object *\/$/;"	m	struct:unixShmNode	file:
mutex	safe/sqlite3.c	/^  sqlite3_mutex *mutex;      \/* Mutex to access this object *\/$/;"	m	struct:winShmNode	file:
mutex	safe/sqlite3.c	/^  sqlite3_mutex *mutex; \/* Non-recursive mutex required to access this object *\/$/;"	m	struct:BtShared	file:
mutex	safe/sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:	file:
mutex	safe/sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:Mem3Global	file:
mutex	safe/sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:Mem5Global	file:
mutex	safe/sqlite3.c	/^  sqlite3_mutex_methods mutex;      \/* Low-level mutex interface *\/$/;"	m	struct:Sqlite3Config	file:
mutexIsInit	safe/sqlite3.c	/^static SQLITE_WSD int mutexIsInit = 0;$/;"	v	file:
mutexIsNT	safe/sqlite3.c	18411;"	d	file:
mutex_alloc	safe/sqlite3.c	/^  sqlite3_mutex *(*mutex_alloc)(int);$/;"	m	struct:sqlite3_api_routines	file:
mutex_enter	safe/sqlite3.c	/^  void (*mutex_enter)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mutex_free	safe/sqlite3.c	/^  void (*mutex_free)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mutex_leave	safe/sqlite3.c	/^  void (*mutex_leave)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mutex_try	safe/sqlite3.c	/^  int (*mutex_try)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mwc_DisplayMessages	safe/spider.203.c	/^void mwc_DisplayMessages(BIO *io, int bDeep, const char *szFilter, int fromDay, int fromMonth, int fromYear, int toDay, int toMonth, int toYear)$/;"	f
mwc_DisplayMessages	safe/spider.204.c	/^void mwc_DisplayMessages(BIO *io, int bDeep, const char *szFilter, int fromDay, int fromMonth, int fromYear, int toDay, int toMonth, int toYear)$/;"	f
mwc_DisplayMessages	safe/spider.210.c	/^void mwc_DisplayMessages(BIO *io, int bDeep, const char *szFilter, int fromDay, int fromMonth, int fromYear, int toDay, int toMonth, int toYear)$/;"	f
mwc_DisplayMessages	safe/spider.c	/^void mwc_DisplayMessages(BIO *io, int bDeep, const char *szFilter, int fromDay, int fromMonth, int fromYear, int toDay, int toMonth, int toYear)$/;"	f
mwc_DisplayMessages	spider.c	/^void mwc_DisplayMessages(BIO *io, int bDeep, const char *szFilter, int fromDay, int fromMonth, int fromYear, int toDay, int toMonth, int toYear)$/;"	f
mxAlloc	safe/sqlite3.c	/^  int  mxAlloc;        \/* Maximum allowed string length *\/$/;"	m	struct:StrAccum	file:
mxCurrent	safe/sqlite3.c	/^  int mxCurrent[NCSIZE];   \/* Highwater mark for nCurrent *\/$/;"	m	struct:	file:
mxErr	safe/sqlite3.c	/^  int mxErr;        \/* Stop accumulating errors when this reaches zero *\/$/;"	m	struct:IntegrityCk	file:
mxFrame	safe/sqlite3.c	/^  u32 mxFrame;                    \/* Index of last valid frame in the WAL *\/$/;"	m	struct:WalIndexHdr	file:
mxOut	safe/sqlite3.c	/^  int mxOut;              \/* Highwater mark for nOut *\/$/;"	m	struct:Lookaside	file:
mxParserStack	safe/sqlite3.c	/^  int mxParserStack;                \/* maximum depth of the parser stack *\/$/;"	m	struct:Sqlite3Config	file:
mxPathname	safe/sqlite3.c	/^  int mxPathname;          \/* Maximum file pathname length *\/$/;"	m	struct:sqlite3_vfs	file:
mxPathname	safe/sqlite3.h	/^  int mxPathname;          \/* Maximum file pathname length *\/$/;"	m	struct:sqlite3_vfs
mxPgno	safe/sqlite3.c	/^  Pgno mxPgno;                \/* Maximum allowed size of the database *\/$/;"	m	struct:Pager	file:
mxPinned	safe/sqlite3.c	/^  unsigned int mxPinned;         \/* nMaxpage + 10 - nMinPage *\/$/;"	m	struct:PGroup	file:
mxPmaSize	safe/sqlite3.c	/^  int mxPmaSize;                  \/* Maximum PMA size, in bytes.  0==no limit *\/$/;"	m	struct:VdbeSorter	file:
mxReq	safe/sqlite3.c	/^  int mnReq, mxReq;                 \/* Min and max heap requests sizes *\/$/;"	m	struct:Sqlite3Config	file:
mxSample	safe/sqlite3.c	/^  int mxSample;             \/* Maximum number of samples to accumulate *\/$/;"	m	struct:Stat3Accum	file:
mxSavepoint	safe/sqlite3.c	/^  int mxSavepoint;       \/* Largest valid xSavepoint integer *\/$/;"	m	struct:Fts3Table	file:
mxStrlen	safe/sqlite3.c	/^  int mxStrlen;                     \/* Maximum string length *\/$/;"	m	struct:Sqlite3Config	file:
mxValue	safe/sqlite3.c	/^  int mxValue[10];          \/* Maximum value *\/$/;"	m	struct:sqlite3StatType	file:
mxWalSize	safe/sqlite3.c	/^  i64 mxWalSize;             \/* Truncate WAL to this size upon reset *\/$/;"	m	struct:Wal	file:
mystrtok_r	mtwamp.c	/^char *mystrtok_r(char *s, char c, char **next)$/;"	f
n	safe/sqlite3.c	/^  i64 n;$/;"	m	struct:CountCtx	file:
n	safe/sqlite3.c	/^  int n;                          \/* Length of z in bytes (excl. nul-term) *\/$/;"	m	struct:StrBuffer	file:
n	safe/sqlite3.c	/^  int n;                          \/* Number of bytes in buffer z *\/$/;"	m	struct:Fts3PhraseToken	file:
n	safe/sqlite3.c	/^  int n;                          \/* Number of valid bytes of data in a[] *\/$/;"	m	struct:Blob	file:
n	safe/sqlite3.c	/^  int n;                        \/* Number of assigned cursor values *\/$/;"	m	struct:WhereMaskSet	file:
n	safe/sqlite3.c	/^  int n;              \/* Number of characters in string value, excluding '\\0' *\/$/;"	m	struct:Mem	file:
n	safe/sqlite3.c	/^  unsigned int n;    \/* Number of characters in this token *\/$/;"	m	struct:Token	file:
n90pct	safe/sqlite3.c	/^  unsigned int n90pct;                \/* nMax*9\/10 *\/$/;"	m	struct:PCache1	file:
nAccumulator	safe/sqlite3.c	/^  int nAccumulator;       \/* Number of columns that show through to the output.$/;"	m	struct:AggInfo	file:
nAdvance	safe/sqlite3.c	/^  int nAdvance;                   \/* How many seg-readers to advance *\/$/;"	m	struct:Fts3MultiSegReader	file:
nAlias	safe/sqlite3.c	/^  int nAlias;               \/* Number of aliased result set columns *\/$/;"	m	struct:Parse	file:
nAll	safe/sqlite3.c	/^  int nAll;                      \/* Size of a[] in bytes *\/$/;"	m	struct:Fts3Doclist	file:
nAlloc	safe/sqlite3.c	/^  i16 nAlloc;      \/* Number of entries allocated in a[] below *\/$/;"	m	struct:SrcList	file:
nAlloc	safe/sqlite3.c	/^  int  nAlloc;         \/* Amount of space allocated in zText *\/$/;"	m	struct:StrAccum	file:
nAlloc	safe/sqlite3.c	/^  int nAlloc;                     \/* Allocated size of a[] (nAlloc>=n) *\/$/;"	m	struct:Blob	file:
nAlloc	safe/sqlite3.c	/^  int nAlloc;                     \/* Allocated size of buffer z in bytes *\/$/;"	m	struct:StrBuffer	file:
nAlloc	safe/sqlite3.c	/^  int nAlloc;                     \/* Bytes of space at aAlloc *\/$/;"	m	struct:VdbeSorterIter	file:
nAlloc	safe/sqlite3.c	/^  int nAlloc;                     \/* space allocated at zToken *\/$/;"	m	struct:unicode_cursor	file:
nAlloc	safe/sqlite3.c	/^  int nAlloc;        \/* Slots allocated for azResult[] *\/$/;"	m	struct:TabResult	file:
nAlloc	safe/sqlite3.c	/^  int nAlloc[NCSIZE];      \/* Total number of allocations *\/$/;"	m	struct:	file:
nAlloc	safe/sqlite3.c	/^  u64 nAlloc;         \/* Total number of calls to malloc *\/$/;"	m	struct:Mem5Global	file:
nAllocated	safe/sqlite3.c	/^  int nAllocated;              \/* space allocated to zToken buffer *\/$/;"	m	struct:porter_tokenizer_cursor	file:
nArg	safe/sqlite3.c	/^  i16 nArg;            \/* Number of arguments.  -1 means unlimited *\/$/;"	m	struct:FuncDef	file:
nAux	safe/sqlite3.c	/^  int nAux;                     \/* Number of entries allocated for apAux[] *\/$/;"	m	struct:VdbeFunc	file:
nBackfill	safe/sqlite3.c	/^  u32 nBackfill;                  \/* Number of WAL frames backfilled into DB *\/$/;"	m	struct:WalCkptInfo	file:
nBacktrace	safe/sqlite3.c	/^  char nBacktrace;                    \/* Number of backtraces on this alloc *\/$/;"	m	struct:MemBlockHdr	file:
nBacktrace	safe/sqlite3.c	/^  int nBacktrace;$/;"	m	struct:	file:
nBacktraceSlots	safe/sqlite3.c	/^  char nBacktraceSlots;               \/* Available backtrace slots *\/$/;"	m	struct:MemBlockHdr	file:
nBackup	safe/sqlite3.c	/^  int nBackup;       \/* Number of backup operations reading this btree *\/$/;"	m	struct:Btree	file:
nBlock	safe/sqlite3.c	/^  int nBlock;      \/* Number of szAtom sized blocks in zPool *\/$/;"	m	struct:Mem5Global	file:
nBuf	safe/sqlite3.c	/^  int nBuf;                       \/* Size of zBuf[] in bytes *\/$/;"	m	struct:JournalFile	file:
nBuffer	safe/sqlite3.c	/^  int nBuffer;                    \/* Allocated size of aBuffer[] in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:
nBuffer	safe/sqlite3.c	/^  int nBuffer;$/;"	m	struct:IcuCursor	file:
nBusy	safe/sqlite3.c	/^  int nBusy;                  \/* Current number of users of this structure *\/$/;"	m	struct:Rtree	file:
nBusy	safe/sqlite3.c	/^  int nBusy;                 \/* Incremented with each busy call *\/$/;"	m	struct:BusyHandler	file:
nByte	safe/sqlite3.c	/^  int nByte;              \/* Size of open blob, in bytes *\/$/;"	m	struct:Incrblob	file:
nByte	safe/sqlite3.c	/^  int nByte;        \/* Size in byte of text or blob. *\/$/;"	m	struct:IndexSample	file:
nBytes	safe/sqlite3.c	/^  int nBytes;                  \/* size of the input *\/$/;"	m	struct:simple_tokenizer_cursor	file:
nBytesPerCell	safe/sqlite3.c	/^  int nBytesPerCell;          \/* Bytes consumed per cell *\/$/;"	m	struct:Rtree	file:
nCell	safe/sqlite3.c	/^  u16 nCell;           \/* Number of cells on this page, local and ovfl *\/$/;"	m	struct:MemPage	file:
nChange	safe/sqlite3.c	/^  int nChange;                  \/* Value returned by sqlite3_changes() *\/$/;"	m	struct:sqlite3	file:
nChange	safe/sqlite3.c	/^  int nChange;            \/* Number of db changes made since last reset *\/$/;"	m	struct:Vdbe	file:
nChange	safe/sqlite3.c	/^  int nChange;            \/* Statement changes (Vdbe.nChanges)     *\/$/;"	m	struct:VdbeFrame	file:
nChar	safe/sqlite3.c	/^  int  nChar;          \/* Length of the string so far *\/$/;"	m	struct:StrAccum	file:
nChar	safe/sqlite3.c	/^  int nChar;                  \/* Number of UChar elements in pInput *\/$/;"	m	struct:IcuCursor	file:
nChild	safe/sqlite3.c	/^  u8 nChild;              \/* Number of children that must disable us *\/$/;"	m	struct:WhereTerm	file:
nChildCsr	safe/sqlite3.c	/^  int nChildCsr;          \/* Number of cursors for child frame *\/$/;"	m	struct:VdbeFrame	file:
nChildMem	safe/sqlite3.c	/^  int nChildMem;          \/* Number of memory cells for child frame *\/$/;"	m	struct:VdbeFrame	file:
nCkpt	safe/sqlite3.c	/^  u32 nCkpt;                 \/* Checkpoint sequence counter in the wal-header *\/$/;"	m	struct:Wal	file:
nCol	safe/sqlite3.c	/^  int nCol;                           \/* Number of entries in azCol[] *\/$/;"	m	struct:ParseContext	file:
nCol	safe/sqlite3.c	/^  int nCol;                       \/* Number of columns in table *\/$/;"	m	struct:MatchInfo	file:
nCol	safe/sqlite3.c	/^  int nCol;            \/* Number of columns in this table *\/$/;"	m	struct:Table	file:
nCol	safe/sqlite3.c	/^  int nCol;         \/* Number of columns in this key *\/$/;"	m	struct:FKey	file:
nColCache	safe/sqlite3.c	/^  u8 nColCache;        \/* Number of entries in aColCache[] *\/$/;"	m	struct:Parse	file:
nColumn	safe/sqlite3.c	/^  int nColumn;                    \/* number of named columns in virtual table *\/$/;"	m	struct:Fts3Table	file:
nColumn	safe/sqlite3.c	/^  int nColumn;            \/* Number of used entries in aCol[] *\/$/;"	m	struct:AggInfo	file:
nColumn	safe/sqlite3.c	/^  int nColumn;       \/* Number of columns in the result *\/$/;"	m	struct:TabResult	file:
nColumn	safe/sqlite3.c	/^  int nColumn;     \/* Number of columns in the table used by this index *\/$/;"	m	struct:Index	file:
nConstraint	safe/sqlite3.c	/^  int nConstraint;                  \/* Number of entries in aConstraint *\/$/;"	m	struct:RtreeCursor	file:
nConstraint	safe/sqlite3.c	/^  int nConstraint;           \/* Number of entries in aConstraint *\/$/;"	m	struct:sqlite3_index_info	file:
nConstraint	safe/sqlite3.h	/^  int nConstraint;           \/* Number of entries in aConstraint *\/$/;"	m	struct:sqlite3_index_info
nCost	safe/sqlite3.c	/^  int nCost;                      \/* Cost of running iterator *\/$/;"	m	struct:Fts3MultiSegReader	file:
nCount	safe/spider.133.c	/^	int nCount;								\/\/ Total number of connections$/;"	m	struct:NetworkPort_t	file:
nCount	safe/spider.135.c	/^	int nCount;								\/\/ Total number of connections$/;"	m	struct:NetworkPort_t	file:
nCount	safe/spider.200.c	/^	int nCount;								\/\/ Total number of connections$/;"	m	struct:NetworkPort_t	file:
nCount	safe/spider.203.c	/^	int nCount;								\/\/ Total number of connections$/;"	m	struct:NetworkPort_t	file:
nCount	safe/spider.204.c	/^	int nCount;								\/\/ Total number of connections$/;"	m	struct:NetworkPort_t	file:
nCount	safe/spider.210.c	/^	int nCount;								\/\/ Total number of connections$/;"	m	struct:NetworkPort_t	file:
nCount	safe/spider.c	/^	int nCount;								\/\/ Total number of connections$/;"	m	struct:NetworkPort_t	file:
nCount	spider.c	/^	int nCount;								\/\/ Total number of connections$/;"	m	struct:NetworkPort_t	file:
nCsr	safe/sqlite3.c	/^  int nCsr;                     \/* Number of cursors required *\/$/;"	m	struct:SubProgram	file:
nCurrent	safe/sqlite3.c	/^  int nCurrent[NCSIZE];    \/* Current number of allocations *\/$/;"	m	struct:	file:
nCurrentPage	safe/sqlite3.c	/^  unsigned int nCurrentPage;     \/* Number of purgeable pages allocated *\/$/;"	m	struct:PGroup	file:
nCursor	safe/sqlite3.c	/^  u16 nCursor;            \/* Number of entries in apCsr *\/$/;"	m	struct:VdbeFrame	file:
nCursor	safe/sqlite3.c	/^  u16 nCursor;            \/* Number of slots in apCsr[] *\/$/;"	m	struct:Vdbe	file:
nDLt	safe/sqlite3.c	/^    tRowcnt nDLt;              \/* sqlite_stat3.nDLt *\/$/;"	m	struct:Stat3Accum::Stat3Sample	file:
nDLt	safe/sqlite3.c	/^  tRowcnt nDLt;     \/* Est. number of distinct keys less than this sample *\/$/;"	m	struct:IndexSample	file:
nData	safe/sqlite3.c	/^  int nData;                      \/* Bytes of data in aData *\/$/;"	m	struct:SegmentWriter	file:
nData	safe/sqlite3.c	/^  int nData;                      \/* Bytes of valid data so far *\/$/;"	m	struct:SegmentNode	file:
nData	safe/sqlite3.c	/^  int nData;         \/* Slots used in azResult[].  (nRow+1)*nColumn *\/$/;"	m	struct:TabResult	file:
nData	safe/sqlite3.c	/^  int nData;$/;"	m	struct:PendingList	file:
nData	safe/sqlite3.c	/^  u32 nData;     \/* Number of bytes of data *\/$/;"	m	struct:CellInfo	file:
nDb	safe/sqlite3.c	/^  int nDb;                      \/* Number of backends currently in use *\/$/;"	m	struct:sqlite3	file:
nDeferredCons	safe/sqlite3.c	/^  i64 nDeferredCons;                  \/* Number of deferred fk violations *\/$/;"	m	struct:Savepoint	file:
nDeferredCons	safe/sqlite3.c	/^  i64 nDeferredCons;            \/* Net deferred constraints this transaction. *\/$/;"	m	struct:sqlite3	file:
nDim	safe/sqlite3.c	/^  int nDim;                   \/* Number of dimensions *\/$/;"	m	struct:Rtree	file:
nDoc	safe/sqlite3.c	/^    sqlite3_int64 nDoc;           \/* 'documents' values for current csr row *\/$/;"	m	struct:Fts3auxCursor::Fts3auxColstats	file:
nDoc	safe/sqlite3.c	/^  sqlite3_int64 nDoc;             \/* Documents in table *\/$/;"	m	struct:Fts3Cursor	file:
nDoc	safe/sqlite3.c	/^  sqlite3_int64 nDoc;             \/* Number of docs in database *\/$/;"	m	struct:MatchInfo	file:
nDoclist	safe/sqlite3.c	/^  int nDoclist;                   \/* Size of aDoclist[] in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:
nDoclist	safe/sqlite3.c	/^  int nDoclist;                   \/* Size of buffer at aDoclist *\/$/;"	m	struct:Fts3Cursor	file:
nDoclist	safe/sqlite3.c	/^  int nDoclist;                   \/* Size of doclist in bytes *\/$/;"	m	struct:NodeReader	file:
nDoclist	safe/sqlite3.c	/^  int nDoclist;                   \/* Size of doclist in current entry *\/$/;"	m	struct:Fts3SegReader	file:
nEntries	safe/spider.133.c	/^	int nEntries;$/;"	m	struct:note_t	file:
nEntries	safe/spider.135.c	/^	int nEntries;$/;"	m	struct:note_t	file:
nEntries	safe/spider.200.c	/^	int nEntries;$/;"	m	struct:note_t	file:
nEntries	safe/spider.203.c	/^	int nEntries;$/;"	m	struct:note_t	file:
nEntries	safe/spider.204.c	/^	int nEntries;$/;"	m	struct:note_t	file:
nEntries	safe/spider.210.c	/^	int nEntries;$/;"	m	struct:note_t	file:
nEntries	safe/spider.c	/^	int nEntries;$/;"	m	struct:note_t	file:
nEntries	spider.c	/^	int nEntries;$/;"	m	struct:note_t	file:
nEntry	safe/sqlite3.c	/^    int nEntry;                   \/* Nr. of entries in aPgno[] and aIndex[] *\/$/;"	m	struct:WalIterator::WalSegment	file:
nEntry	safe/sqlite3.c	/^  int nEntry;                     \/* Number of terms written to node so far *\/$/;"	m	struct:SegmentNode	file:
nEq	safe/sqlite3.c	/^    tRowcnt nEq;               \/* sqlite_stat3.nEq *\/$/;"	m	struct:Stat3Accum::Stat3Sample	file:
nEq	safe/sqlite3.c	/^  tRowcnt nEq;      \/* Est. number of rows where the key equals this sample *\/$/;"	m	struct:IndexSample	file:
nEq	safe/sqlite3.c	/^  u32 nEq;                       \/* Number of == constraints *\/$/;"	m	struct:WherePlan	file:
nErr	safe/sqlite3.c	/^  int nErr;            \/* Number of errors encountered while resolving names *\/$/;"	m	struct:NameContext	file:
nErr	safe/sqlite3.c	/^  int nErr;            \/* Number of errors seen *\/$/;"	m	struct:Parse	file:
nErr	safe/sqlite3.c	/^  int nErr;         \/* Number of messages written to zErrMsg so far *\/$/;"	m	struct:IntegrityCk	file:
nException	safe/sqlite3.c	/^  int nException;$/;"	m	struct:unicode_tokenizer	file:
nExpr	safe/sqlite3.c	/^  int nExpr;             \/* Number of expressions on the list *\/$/;"	m	struct:ExprList	file:
nExt	safe/sqlite3.c	/^  int nExt;              \/* Number of entries in aExt[] *\/          $/;"	m	struct:sqlite3AutoExtList	file:
nExtension	safe/sqlite3.c	/^  int nExtension;               \/* Number of loaded extensions *\/$/;"	m	struct:sqlite3	file:
nExtra	safe/sqlite3.c	/^  u16 nExtra;                 \/* Add this many bytes to each in-memory page *\/$/;"	m	struct:Pager	file:
nField	safe/sqlite3.c	/^  int nField;           \/* Number of fields in the header *\/$/;"	m	struct:VdbeCursor	file:
nField	safe/sqlite3.c	/^  u16 nField;         \/* Number of entries in aColl[] *\/$/;"	m	struct:KeyInfo	file:
nField	safe/sqlite3.c	/^  u16 nField;         \/* Number of entries in apMem[] *\/$/;"	m	struct:UnpackedRecord	file:
nFkConstraint	safe/sqlite3.c	/^  i64 nFkConstraint;      \/* Number of imm. FK constraints this VM *\/$/;"	m	struct:Vdbe	file:
nFrame	safe/sqlite3.c	/^  int nFrame;             \/* Number of frames in pFrame list *\/$/;"	m	struct:Vdbe	file:
nFree	safe/sqlite3.c	/^  u16 nFree;           \/* Number of free bytes on the page *\/$/;"	m	struct:MemPage	file:
nFreeSlot	safe/sqlite3.c	/^  int nFreeSlot;                 \/* Number of unused pcache slots *\/$/;"	m	struct:PCacheGlobal	file:
nFresh	safe/sqlite3.c	/^  u16 nFresh;                    \/* Number of objects on pFresh *\/$/;"	m	struct:RowSet	file:
nFunc	safe/sqlite3.c	/^  int nFunc;              \/* Number of entries in aFunc[] *\/$/;"	m	struct:AggInfo	file:
nHash	safe/sqlite3.c	/^  unsigned int nHash;                 \/* Number of slots in apHash[] *\/$/;"	m	struct:PCache1	file:
nHeader	safe/sqlite3.c	/^  u16 nHeader;   \/* Size of the cell content header in bytes *\/$/;"	m	struct:CellInfo	file:
nHeap	safe/sqlite3.c	/^  int nHeap;                        \/* Size of pHeap[] *\/$/;"	m	struct:Sqlite3Config	file:
nHeight	safe/sqlite3.c	/^  int nHeight;              \/* Expression tree height of current sub-select *\/$/;"	m	struct:Parse	file:
nHeight	safe/sqlite3.c	/^  int nHeight;           \/* Height of the tree headed by this node *\/$/;"	m	struct:Expr	file:
nId	safe/sqlite3.c	/^  int nId;         \/* Number of identifiers on the list *\/$/;"	m	struct:IdList	file:
nIn	safe/sqlite3.c	/^      int nIn;              \/* Number of entries in aInLoop[] *\/$/;"	m	struct:WhereLevel::<anonymous>::<anonymous>	file:
nInMemory	safe/sqlite3.c	/^  int nInMemory;                  \/* Current size of pRecord list as PMA *\/$/;"	m	struct:VdbeSorter	file:
nIndent	safe/sqlite3.c	/^  int nIndent;       \/* Number of elements in aIndent *\/$/;"	m	struct:Explain	file:
nIndex	safe/sqlite3.c	/^  int nIndex;                     \/* Size of aIndex[] *\/$/;"	m	struct:Fts3Table	file:
nInput	safe/sqlite3.c	/^  int nInput;                     \/* Size of aInput[] in bytes *\/$/;"	m	struct:unicode_cursor	file:
nInput	safe/sqlite3.c	/^  int nInput;                  \/* size of the input *\/$/;"	m	struct:porter_tokenizer_cursor	file:
nInvokees	mtwamp.c	/^	int nInvokees;											\/\/ Number of invokees servicing this call$/;"	m	struct:wamp_callee_t	file:
nKey	safe/sqlite3.c	/^  const char *pKey; int nKey;  \/* Key associated with this element *\/$/;"	m	struct:HashElem	file:
nKey	safe/sqlite3.c	/^  i64 nKey;        \/* Size of pKey, or last integer key *\/$/;"	m	struct:BtCursor	file:
nKey	safe/sqlite3.c	/^  i64 nKey;      \/* The key for INTKEY tables, or number of bytes in key *\/$/;"	m	struct:CellInfo	file:
nKey	safe/sqlite3.c	/^  int nKey;                       \/* Number of bytes in key *\/$/;"	m	struct:VdbeSorterIter	file:
nKey	safe/sqlite3.c	/^  void *pKey; int nKey;      \/* Key associated with this element *\/$/;"	m	struct:Fts3HashElem	file:
nLabel	safe/sqlite3.c	/^  int nLabel;             \/* Number of labels used *\/$/;"	m	struct:Vdbe	file:
nLeafAdd	safe/sqlite3.c	/^  u32 nLeafAdd;                   \/* Number of leaf blocks added this trans *\/$/;"	m	struct:Fts3Table	file:
nLeafEst	safe/sqlite3.c	/^  int nLeafEst;                   \/* Space allocated for leaf blocks *\/$/;"	m	struct:IncrmergeWriter	file:
nLevel	safe/sqlite3.c	/^  int nLevel;                    \/* Number of nested loop *\/$/;"	m	struct:WhereInfo	file:
nList	safe/sqlite3.c	/^  int nList;                     \/* Length of position list *\/$/;"	m	struct:Fts3Doclist	file:
nLocal	safe/sqlite3.c	/^  u16 nLocal;    \/* Amount of payload held locally *\/$/;"	m	struct:CellInfo	file:
nLock	safe/sqlite3.c	/^  int nLock;                      \/* Number of outstanding file locks *\/$/;"	m	struct:unixInodeInfo	file:
nLookaside	safe/sqlite3.c	/^  int nLookaside;                   \/* Default lookaside buffer count *\/$/;"	m	struct:Sqlite3Config	file:
nLt	safe/sqlite3.c	/^    tRowcnt nLt;               \/* sqlite_stat3.nLt *\/$/;"	m	struct:Stat3Accum::Stat3Sample	file:
nLt	safe/sqlite3.c	/^  tRowcnt nLt;      \/* Est. number of rows where key is less than this sample *\/$/;"	m	struct:IndexSample	file:
nMalloc	safe/sqlite3.c	/^  int nMalloc;                    \/* Size of malloc'd buffer at zMalloc *\/$/;"	m	struct:SegmentNode	file:
nMalloc	safe/sqlite3.c	/^  int nMalloc;                    \/* Size of malloc'd buffer at zMalloc *\/$/;"	m	struct:SegmentWriter	file:
nMatchinfo	safe/sqlite3.c	/^  int nMatchinfo;                 \/* Number of elements in aMatchinfo[] *\/$/;"	m	struct:Fts3Cursor	file:
nMax	safe/sqlite3.c	/^  unsigned int nMax;                  \/* Configured "cache_size" value *\/$/;"	m	struct:PCache1	file:
nMaxArg	safe/sqlite3.c	/^  int nMaxArg;         \/* Max args passed to user function by sub-program *\/$/;"	m	struct:Parse	file:
nMaxPage	safe/sqlite3.c	/^  unsigned int nMaxPage;         \/* Sum of nMax for purgeable caches *\/$/;"	m	struct:PGroup	file:
nMaxPendingData	safe/sqlite3.c	/^  int nMaxPendingData;            \/* Max pending data before flush to disk *\/$/;"	m	struct:Fts3Table	file:
nMem	safe/sqlite3.c	/^  int nMem;                     \/* Number of memory cells required *\/$/;"	m	struct:SubProgram	file:
nMem	safe/sqlite3.c	/^  int nMem;               \/* Number of entries in aMem *\/$/;"	m	struct:VdbeFrame	file:
nMem	safe/sqlite3.c	/^  int nMem;               \/* Number of memory locations currently allocated *\/$/;"	m	struct:Vdbe	file:
nMem	safe/sqlite3.c	/^  int nMem;            \/* Number of memory cells used so far *\/$/;"	m	struct:Parse	file:
nMem	safe/sqlite3.c	/^  int nMem;         \/* Number of registers allocated *\/$/;"	m	struct:SelectDest	file:
nMessages	safe/spider.133.c	/^	int nMessages;$/;"	m	struct:note_t	file:
nMessages	safe/spider.135.c	/^	int nMessages;$/;"	m	struct:note_t	file:
nMessages	safe/spider.200.c	/^	int nMessages;$/;"	m	struct:note_t	file:
nMessages	safe/spider.203.c	/^	int nMessages;$/;"	m	struct:note_t	file:
nMessages	safe/spider.204.c	/^	int nMessages;$/;"	m	struct:note_t	file:
nMessages	safe/spider.210.c	/^	int nMessages;$/;"	m	struct:note_t	file:
nMessages	safe/spider.c	/^	int nMessages;$/;"	m	struct:note_t	file:
nMessages	spider.c	/^	int nMessages;$/;"	m	struct:note_t	file:
nMin	safe/sqlite3.c	/^  unsigned int nMin;                  \/* Minimum number of pages reserved *\/$/;"	m	struct:PCache1	file:
nMinPage	safe/sqlite3.c	/^  unsigned int nMinPage;         \/* Sum of nMin for purgeable caches *\/$/;"	m	struct:PGroup	file:
nModuleArg	safe/sqlite3.c	/^  int nModuleArg;      \/* Number of arguments to the module *\/$/;"	m	struct:Table	file:
nName	safe/sqlite3.c	/^  int nName;                    \/* Length of the zCanonicalName[] string *\/$/;"	m	struct:vxworksFileId	file:
nNear	safe/sqlite3.c	/^  int nNear;                 \/* Valid if eType==FTSQUERY_NEAR *\/$/;"	m	struct:Fts3Expr	file:
nNest	safe/sqlite3.c	/^  int nNest;                          \/* Number of nested brackets *\/$/;"	m	struct:ParseContext	file:
nNetworkPorts	safe/spider.133.c	/^static int nNetworkPorts=0;$/;"	v	file:
nNetworkPorts	safe/spider.135.c	/^static int nNetworkPorts=0;$/;"	v	file:
nNetworkPorts	safe/spider.200.c	/^static int nNetworkPorts=0;$/;"	v	file:
nNetworkPorts	safe/spider.203.c	/^static int nNetworkPorts=0;$/;"	v	file:
nNetworkPorts	safe/spider.204.c	/^static int nNetworkPorts=0;$/;"	v	file:
nNetworkPorts	safe/spider.210.c	/^static int nNetworkPorts=0;$/;"	v	file:
nNetworkPorts	safe/spider.c	/^static int nNetworkPorts=0;$/;"	v	file:
nNetworkPorts	spider.c	/^static int nNetworkPorts=0;$/;"	v	file:
nNode	safe/sqlite3.c	/^  int nNode;                      \/* Size of buffer at aNode (or 0) *\/$/;"	m	struct:Fts3SegReader	file:
nNode	safe/sqlite3.c	/^  int nNode;$/;"	m	struct:NodeReader	file:
nNodeSize	safe/sqlite3.c	/^  int nNodeSize;                  \/* Soft limit for node size *\/$/;"	m	struct:Fts3Table	file:
nOcc	safe/sqlite3.c	/^    sqlite3_int64 nOcc;           \/* 'occurrences' values for current csr row *\/$/;"	m	struct:Fts3auxCursor::Fts3auxColstats	file:
nOffsetList	safe/sqlite3.c	/^  int nOffsetList;                \/* For descending pending seg-readers only *\/$/;"	m	struct:Fts3SegReader	file:
nOnce	safe/sqlite3.c	/^  int nOnce;                    \/* Number of OP_Once instructions *\/$/;"	m	struct:SubProgram	file:
nOnce	safe/sqlite3.c	/^  int nOnce;           \/* Number of OP_Once instructions so far *\/$/;"	m	struct:Parse	file:
nOnceFlag	safe/sqlite3.c	/^  int nOnceFlag;          \/* Number of entries in aOnceFlag *\/$/;"	m	struct:VdbeFrame	file:
nOnceFlag	safe/sqlite3.c	/^  int nOnceFlag;          \/* Size of array aOnceFlag[] *\/$/;"	m	struct:Vdbe	file:
nOp	safe/sqlite3.c	/^  int nOp;                      \/* Elements in aOp[] *\/$/;"	m	struct:SubProgram	file:
nOp	safe/sqlite3.c	/^  int nOp;                \/* Number of instructions in the program *\/$/;"	m	struct:Vdbe	file:
nOp	safe/sqlite3.c	/^  int nOp;                \/* Size of aOp array *\/$/;"	m	struct:VdbeFrame	file:
nOpAlloc	safe/sqlite3.c	/^  int nOpAlloc;           \/* Number of slots allocated for aOp[] *\/$/;"	m	struct:Vdbe	file:
nOrderBy	safe/sqlite3.c	/^  int nOrderBy;              \/* Number of terms in the ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	file:
nOrderBy	safe/sqlite3.h	/^  int nOrderBy;              \/* Number of terms in the ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info
nOrig	safe/sqlite3.c	/^  Pgno nOrig;                  \/* Original number of pages in file *\/$/;"	m	struct:PagerSavepoint	file:
nOut	safe/sqlite3.c	/^  int nOut;               \/* Number of buffers currently checked out *\/$/;"	m	struct:Lookaside	file:
nOverflow	safe/sqlite3.c	/^  u8 nOverflow;        \/* Number of overflow cell bodies in aCell[] *\/$/;"	m	struct:MemPage	file:
nOvfl	safe/sqlite3.c	/^  int nOvfl;                      \/* Number of overflow pages to load doclist *\/$/;"	m	struct:Fts3TokenAndCost	file:
nPMA	safe/sqlite3.c	/^  int nPMA;                       \/* Number of PMAs stored in pTemp1 *\/$/;"	m	struct:VdbeSorter	file:
nPSample	safe/sqlite3.c	/^  tRowcnt nPSample;         \/* How often to do a periodic sample *\/$/;"	m	struct:Stat3Accum	file:
nPage	safe/sqlite3.c	/^  Pgno nPage;       \/* Number of pages in the database *\/$/;"	m	struct:IntegrityCk	file:
nPage	safe/sqlite3.c	/^  int nPage;                        \/* Number of pages in pPage[] *\/$/;"	m	struct:Sqlite3Config	file:
nPage	safe/sqlite3.c	/^  u32 nPage;                      \/* Size of database in pages *\/$/;"	m	struct:WalIndexHdr	file:
nPage	safe/sqlite3.c	/^  u32 nPage;            \/* Number of pages in the database *\/$/;"	m	struct:BtShared	file:
nPage	safe/sqlite3.c	/^  unsigned int nPage;                 \/* Total number of pages in apHash *\/$/;"	m	struct:PCache1	file:
nPagecount	safe/sqlite3.c	/^  Pgno nPagecount;         \/* Total number of pages to copy *\/$/;"	m	struct:sqlite3_backup	file:
nParam	safe/sqlite3.c	/^  int nParam;                     \/* Size of array aParam[] *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
nParam	safe/sqlite3.c	/^  int nParam;$/;"	m	struct:RtreeMatchArg	file:
nParam	safe/sqlite3.h	/^  int nParam;                     \/* Size of array aParam[] *\/$/;"	m	struct:sqlite3_rtree_geometry
nPayload	safe/sqlite3.c	/^  u32 nPayload;  \/* Total amount of payload *\/$/;"	m	struct:CellInfo	file:
nPendingData	safe/sqlite3.c	/^  int nPendingData;               \/* Current bytes of pending data *\/$/;"	m	struct:Fts3Table	file:
nPgsz	safe/sqlite3.c	/^  int nPgsz;                      \/* Page size for host database *\/$/;"	m	struct:Fts3Table	file:
nPhrase	safe/sqlite3.c	/^  int nPhrase;                    \/* Number of matchable phrases in query *\/$/;"	m	struct:Fts3Cursor	file:
nPhrase	safe/sqlite3.c	/^  int nPhrase;                    \/* Number of matchable phrases in query *\/$/;"	m	struct:MatchInfo	file:
nPhrase	safe/sqlite3.c	/^  int nPhrase;                    \/* Number of phrases in query *\/$/;"	m	struct:SnippetIter	file:
nPhrase	safe/sqlite3.c	/^  int nPhrase;                    \/* Number of phrases seen so far *\/$/;"	m	struct:LoadDoclistCtx	file:
nPids	safe/spider.133.c	/^static int nPids=0;$/;"	v	file:
nPids	safe/spider.135.c	/^static int nPids=0;$/;"	v	file:
nPids	safe/spider.200.c	/^static int nPids=0;$/;"	v	file:
nPids	safe/spider.203.c	/^static int nPids=0;$/;"	v	file:
nPids	safe/spider.204.c	/^static int nPids=0;$/;"	v	file:
nPids	safe/spider.210.c	/^static int nPids=0;$/;"	v	file:
nPids	safe/spider.c	/^static int nPids=0;$/;"	v	file:
nPids	spider.c	/^static int nPids=0;$/;"	v	file:
nPool	safe/sqlite3.c	/^  u32 nPool;$/;"	m	struct:Mem3Global	file:
nPopulate	safe/sqlite3.c	/^  int nPopulate;                  \/* If >0, bytes of buffer aNode[] loaded *\/$/;"	m	struct:Fts3SegReader	file:
nPort	safe/spider.133.c	/^	int nPort;								\/\/ Port on which we're connecting$/;"	m	struct:NetworkPort_t	file:
nPort	safe/spider.135.c	/^	int nPort;								\/\/ Port on which we're connecting$/;"	m	struct:NetworkPort_t	file:
nPort	safe/spider.200.c	/^	int nPort;								\/\/ Port on which we're connecting$/;"	m	struct:NetworkPort_t	file:
nPort	safe/spider.203.c	/^	int nPort;								\/\/ Port on which we're connecting$/;"	m	struct:NetworkPort_t	file:
nPort	safe/spider.204.c	/^	int nPort;								\/\/ Port on which we're connecting$/;"	m	struct:NetworkPort_t	file:
nPort	safe/spider.210.c	/^	int nPort;								\/\/ Port on which we're connecting$/;"	m	struct:NetworkPort_t	file:
nPort	safe/spider.c	/^	int nPort;								\/\/ Port on which we're connecting$/;"	m	struct:NetworkPort_t	file:
nPort	spider.c	/^	int nPort;								\/\/ Port on which we're connecting$/;"	m	struct:NetworkPort_t	file:
nPrefix	safe/sqlite3.c	/^    int nPrefix;                  \/* Prefix length (0 for main terms index) *\/$/;"	m	struct:Fts3Table::Fts3Index	file:
nProgressOps	safe/sqlite3.c	/^  int nProgressOps;             \/* Number of opcodes for progress callback *\/$/;"	m	struct:sqlite3	file:
nProtocol	safe/spider.133.c	/^	int nProtocol;							\/\/ Protocol (TCP, TLS)$/;"	m	struct:NetworkPort_t	file:
nProtocol	safe/spider.135.c	/^	int nProtocol;							\/\/ Protocol (TCP, TLS)$/;"	m	struct:NetworkPort_t	file:
nProtocol	safe/spider.200.c	/^	int nProtocol;							\/\/ Protocol (TCP, TLS)$/;"	m	struct:NetworkPort_t	file:
nProtocol	safe/spider.203.c	/^	int nProtocol;							\/\/ Protocol (TCP, TLS)$/;"	m	struct:NetworkPort_t	file:
nProtocol	safe/spider.204.c	/^	int nProtocol;							\/\/ Protocol (TCP, TLS)$/;"	m	struct:NetworkPort_t	file:
nProtocol	safe/spider.210.c	/^	int nProtocol;							\/\/ Protocol (TCP, TLS)$/;"	m	struct:NetworkPort_t	file:
nProtocol	safe/spider.c	/^	int nProtocol;							\/\/ Protocol (TCP, TLS)$/;"	m	struct:NetworkPort_t	file:
nProtocol	spider.c	/^	int nProtocol;							\/\/ Protocol (TCP, TLS)$/;"	m	struct:NetworkPort_t	file:
nQPlan	safe/sqlite3.c	/^static int nQPlan = 0;              \/* Next free slow in _query_plan[] *\/$/;"	v	file:
nQueryLoop	safe/sqlite3.c	/^  double nQueryLoop;   \/* Estimated number of iterations of a query *\/$/;"	m	struct:Parse	file:
nRangeReg	safe/sqlite3.c	/^  int nRangeReg;       \/* Size of the temporary register block *\/$/;"	m	struct:Parse	file:
nRead	safe/sqlite3.c	/^  int nRead;                  \/* Database pages read *\/$/;"	m	struct:Pager	file:
nReadStream	safe/spider.133.c	/^int nReadStream;						\/\/ The stream to read$/;"	v
nReadStream	safe/spider.135.c	/^int nReadStream;						\/\/ The stream to read$/;"	v
nReadStream	safe/spider.200.c	/^int nReadStream;						\/\/ The stream to read$/;"	v
nReadStream	safe/spider.203.c	/^int nReadStream;						\/\/ The stream to read$/;"	v
nReadStream	safe/spider.204.c	/^int nReadStream;						\/\/ The stream to read$/;"	v
nReadStream	safe/spider.210.c	/^int nReadStream;						\/\/ The stream to read$/;"	v
nReadStream	safe/spider.c	/^int nReadStream;						\/\/ The stream to read$/;"	v
nReadStream	spider.c	/^int nReadStream;						\/\/ The stream to read$/;"	v
nReaders	safe/sqlite3.c	/^  int nReaders;       \/* Number of reader locks obtained *\/$/;"	m	struct:winceLock	file:
nRec	safe/sqlite3.c	/^  int nRec;                   \/* Pages journalled since last j-header written *\/$/;"	m	struct:Pager	file:
nRecyclable	safe/sqlite3.c	/^  unsigned int nRecyclable;           \/* Number of pages in the LRU list *\/$/;"	m	struct:PCache1	file:
nRef	safe/sqlite3.c	/^  i16 nRef;                      \/* Number of users of this page *\/$/;"	m	struct:PgHdr	file:
nRef	safe/sqlite3.c	/^  int nRef;                           \/* Number of referenced pages *\/$/;"	m	struct:PCache	file:
nRef	safe/sqlite3.c	/^  int nRef;                       \/* NO LONGER USED *\/$/;"	m	struct:sqlite3_vtab	file:
nRef	safe/sqlite3.c	/^  int nRef;                       \/* Number of pointers to this structure *\/$/;"	m	struct:unixInodeInfo	file:
nRef	safe/sqlite3.c	/^  int nRef;                     \/* Number of references to this one *\/$/;"	m	struct:vxworksFileId	file:
nRef	safe/sqlite3.c	/^  int nRef;                  \/* Number of os2ShmLink objects pointing to this *\/$/;"	m	struct:os2ShmNode	file:
nRef	safe/sqlite3.c	/^  int nRef;                  \/* Number of unixShm objects pointing to this *\/$/;"	m	struct:unixShmNode	file:
nRef	safe/sqlite3.c	/^  int nRef;                  \/* Number of winShm objects pointing to this *\/$/;"	m	struct:winShmNode	file:
nRef	safe/sqlite3.c	/^  int nRef;                 \/* Number of pointers to this structure *\/$/;"	m	struct:VTable	file:
nRef	safe/sqlite3.c	/^  int nRef;             \/* Number of references to this structure *\/$/;"	m	struct:BtShared	file:
nRef	safe/sqlite3.c	/^  int nRef;            \/* Number of names resolved by this context *\/$/;"	m	struct:NameContext	file:
nRef	safe/sqlite3.c	/^  int nRef;$/;"	m	struct:FuncDestructor	file:
nRef	safe/sqlite3.c	/^  int nRef;$/;"	m	struct:RtreeNode	file:
nRef	safe/sqlite3.c	/^  u16 nRef;            \/* Number of pointers to this Table *\/$/;"	m	struct:Table	file:
nRef	safe/sqlite3.c	/^  volatile int nRef;         \/* Number of enterances *\/$/;"	m	struct:sqlite3_mutex	file:
nRef	safe/sqlite3.c	/^  volatile int nRef;         \/* Number of entrances *\/$/;"	m	struct:sqlite3_mutex	file:
nRef	safe/sqlite3.h	/^  int nRef;                       \/* NO LONGER USED *\/$/;"	m	struct:sqlite3_vtab
nRefInitMutex	safe/sqlite3.c	/^  int nRefInitMutex;                \/* Number of users of pInitMutex *\/$/;"	m	struct:Sqlite3Config	file:
nRegion	safe/sqlite3.c	/^  int nRegion;               \/* Size of array apRegion *\/$/;"	m	struct:os2ShmNode	file:
nRegion	safe/sqlite3.c	/^  int nRegion;               \/* Size of array apRegion *\/$/;"	m	struct:winShmNode	file:
nRegion	safe/sqlite3.c	/^  u16 nRegion;               \/* Size of array apRegion *\/$/;"	m	struct:unixShmNode	file:
nRemaining	safe/sqlite3.c	/^  Pgno nRemaining;         \/* Number of pages left to copy *\/$/;"	m	struct:sqlite3_backup	file:
nResColumn	safe/sqlite3.c	/^  u16 nResColumn;         \/* Number of columns in one row of the result set *\/$/;"	m	struct:Vdbe	file:
nReserve	safe/sqlite3.c	/^  i16 nReserve;               \/* Number of unused bytes at end of each page *\/$/;"	m	struct:Pager	file:
nReserve	safe/sqlite3.c	/^  int nReserve;                  \/* Try to keep nFreeSlot above this *\/$/;"	m	struct:PCacheGlobal	file:
nRetries	safe/spider.133.c	/^	int nRetries;							\/\/ Number of retries left$/;"	m	struct:NetworkPort_t	file:
nRetries	safe/spider.135.c	/^	int nRetries;							\/\/ Number of retries left$/;"	m	struct:NetworkPort_t	file:
nRetries	safe/spider.200.c	/^	int nRetries;							\/\/ Number of retries left$/;"	m	struct:NetworkPort_t	file:
nRetries	safe/spider.203.c	/^	int nRetries;							\/\/ Number of retries left$/;"	m	struct:NetworkPort_t	file:
nRetries	safe/spider.204.c	/^	int nRetries;							\/\/ Number of retries left$/;"	m	struct:NetworkPort_t	file:
nRetries	safe/spider.210.c	/^	int nRetries;							\/\/ Number of retries left$/;"	m	struct:NetworkPort_t	file:
nRetries	safe/spider.c	/^	int nRetries;							\/\/ Number of retries left$/;"	m	struct:NetworkPort_t	file:
nRetries	spider.c	/^	int nRetries;							\/\/ Number of retries left$/;"	m	struct:NetworkPort_t	file:
nRow	safe/sqlite3.c	/^  double nRow;                   \/* Estimated number of rows (for EQP) *\/$/;"	m	struct:WherePlan	file:
nRow	safe/sqlite3.c	/^  int nRow;          \/* Number of rows in the result *\/$/;"	m	struct:TabResult	file:
nRow	safe/sqlite3.c	/^  tRowcnt nRow;             \/* Number of rows in the entire table *\/$/;"	m	struct:Stat3Accum	file:
nRowAvg	safe/sqlite3.c	/^  int nRowAvg;                    \/* Average size of database rows, in pages *\/$/;"	m	struct:Fts3Cursor	file:
nRowEst	safe/sqlite3.c	/^  tRowcnt nRowEst;     \/* Estimated rows in table - from sqlite_stat1 table *\/$/;"	m	struct:Table	file:
nRowOut	safe/sqlite3.c	/^  double nRowOut;                \/* Estimated number of output rows *\/$/;"	m	struct:WhereInfo	file:
nSample	safe/sqlite3.c	/^  int nSample;              \/* Current number of samples *\/$/;"	m	struct:Stat3Accum	file:
nSample	safe/sqlite3.c	/^  int nSample;             \/* Number of elements in aSample[] *\/$/;"	m	struct:Index	file:
nSavepoint	safe/sqlite3.c	/^  int nSavepoint;               \/* Number of non-transaction savepoints *\/$/;"	m	struct:sqlite3	file:
nSavepoint	safe/sqlite3.c	/^  int nSavepoint;             \/* Number of elements in aSavepoint[] *\/$/;"	m	struct:Pager	file:
nScratch	safe/sqlite3.c	/^  int nScratch;                     \/* Number of scratch buffers *\/$/;"	m	struct:Sqlite3Config	file:
nScratchFree	safe/sqlite3.c	/^  u32 nScratchFree;$/;"	m	struct:Mem0Global	file:
nSegment	safe/sqlite3.c	/^  int nSegment;                   \/* Number of entries in aSegment[] *\/$/;"	m	struct:WalIterator	file:
nSegment	safe/sqlite3.c	/^  int nSegment;                   \/* Size of apSegment array *\/$/;"	m	struct:Fts3MultiSegReader	file:
nSelectRow	safe/sqlite3.c	/^  double nSelectRow;     \/* Estimated number of result rows *\/$/;"	m	struct:Select	file:
nSet	safe/sqlite3.c	/^  int nSet;            \/* Number of sets used so far *\/$/;"	m	struct:Parse	file:
nSet	safe/sqlite3.c	/^  u32 nSet;       \/* Number of bits that are set - only valid for aHash$/;"	m	struct:Bitvec	file:
nShared	safe/sqlite3.c	/^  int nShared;                    \/* Number of SHARED locks held *\/$/;"	m	struct:unixInodeInfo	file:
nSize	safe/sqlite3.c	/^  int nSize;                      \/* Size of allocation at aData *\/$/;"	m	struct:SegmentWriter	file:
nSize	safe/sqlite3.c	/^  u16 nSize;     \/* Size of the cell content on the main b-tree page *\/$/;"	m	struct:CellInfo	file:
nSlot	safe/sqlite3.c	/^  int nSlot;                     \/* The number of pcache slots *\/$/;"	m	struct:PCacheGlobal	file:
nSlot	safe/sqlite3.c	/^  int nSlot;               \/* Number of entries in a[] *\/$/;"	m	struct:WhereClause	file:
nSnippet	safe/sqlite3.c	/^  int nSnippet;                   \/* Requested snippet length (in tokens) *\/$/;"	m	struct:SnippetIter	file:
nSock	safe/spider.133.c	/^	int nSock;								\/\/ Socket being used$/;"	m	struct:NetworkPort_t	file:
nSock	safe/spider.135.c	/^	int nSock;								\/\/ Socket being used$/;"	m	struct:NetworkPort_t	file:
nSock	safe/spider.200.c	/^	int nSock;								\/\/ Socket being used$/;"	m	struct:NetworkPort_t	file:
nSock	safe/spider.203.c	/^	int nSock;								\/\/ Socket being used$/;"	m	struct:NetworkPort_t	file:
nSock	safe/spider.204.c	/^	int nSock;								\/\/ Socket being used$/;"	m	struct:NetworkPort_t	file:
nSock	safe/spider.210.c	/^	int nSock;								\/\/ Socket being used$/;"	m	struct:NetworkPort_t	file:
nSock	safe/spider.c	/^	int nSock;								\/\/ Socket being used$/;"	m	struct:NetworkPort_t	file:
nSock	spider.c	/^	int nSock;								\/\/ Socket being used$/;"	m	struct:NetworkPort_t	file:
nSortingColumn	safe/sqlite3.c	/^  int nSortingColumn;     \/* Number of columns in the sorting index *\/$/;"	m	struct:AggInfo	file:
nSpace	safe/sqlite3.c	/^  int nSpace;$/;"	m	struct:PendingList	file:
nSrc	safe/sqlite3.c	/^  i16 nSrc;        \/* Number of tables or subqueries in the FROM clause *\/$/;"	m	struct:SrcList	file:
nStat	safe/sqlite3.c	/^  int nStat;                      \/* Size of aStat[] array *\/$/;"	m	struct:Fts3auxCursor	file:
nStatement	safe/sqlite3.c	/^  int nStatement;               \/* Number of nested statement-transactions  *\/$/;"	m	struct:sqlite3	file:
nStmtDefCons	safe/sqlite3.c	/^  i64 nStmtDefCons;       \/* Number of def. constraints when stmt started *\/$/;"	m	struct:Vdbe	file:
nStop	safe/sqlite3.c	/^  int nStop;                      \/* Byte-length of string zStop *\/$/;"	m	struct:Fts3auxCursor	file:
nSub	safe/sqlite3.c	/^  int nSub;                  \/* Number of entries in apSub *\/$/;"	m	struct:VdbeOpIter	file:
nSubRec	safe/sqlite3.c	/^  u32 nSubRec;                \/* Number of records written to sub-journal *\/$/;"	m	struct:Pager	file:
nTab	safe/sqlite3.c	/^  int nTab;            \/* Number of previously allocated VDBE cursors *\/$/;"	m	struct:Parse	file:
nTableLock	safe/sqlite3.c	/^  int nTableLock;        \/* Number of locks in aTableLock *\/$/;"	m	struct:Parse	file:
nTempInUse	safe/sqlite3.c	/^  u8 nTempInUse;       \/* Number of aTempReg[] currently checked out *\/$/;"	m	struct:Parse	file:
nTempReg	safe/sqlite3.c	/^  u8 nTempReg;         \/* Number of temporary registers in aTempReg[] *\/$/;"	m	struct:Parse	file:
nTerm	safe/sqlite3.c	/^  int nTerm;                      \/* Number of bytes in current term *\/$/;"	m	struct:Fts3SegReader	file:
nTerm	safe/sqlite3.c	/^  int nTerm;                      \/* Number of bytes in zTerm *\/$/;"	m	struct:SegmentNode	file:
nTerm	safe/sqlite3.c	/^  int nTerm;                      \/* Number of bytes in zTerm *\/$/;"	m	struct:SegmentWriter	file:
nTerm	safe/sqlite3.c	/^  int nTerm;                      \/* Size of zTerm in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:
nTerm	safe/sqlite3.c	/^  int nTerm;               \/* Number of terms *\/$/;"	m	struct:WhereClause	file:
nTerm	safe/sqlite3.c	/^  int nTerm;$/;"	m	struct:Fts3SegFilter	file:
nTermAlloc	safe/sqlite3.c	/^  int nTermAlloc;                 \/* Allocated size of zTerm buffer *\/$/;"	m	struct:Fts3SegReader	file:
nTitle	safe/sqlite3.c	/^  int nTitle;        \/* Bytes of zTitle to save.  Includes '\\0' and padding *\/$/;"	m	struct:	file:
nTitle	safe/sqlite3.c	/^  u8 nTitle;                          \/* Bytes of title; includes '\\0' *\/$/;"	m	struct:MemBlockHdr	file:
nToken	safe/sqlite3.c	/^  int nToken;                     \/* Number of tokens in phrase *\/$/;"	m	struct:SnippetPhrase	file:
nToken	safe/sqlite3.c	/^  int nToken;                     \/* Number of tokens seen so far *\/$/;"	m	struct:LoadDoclistCtx	file:
nToken	safe/sqlite3.c	/^  int nToken;                \/* Number of tokens in the phrase *\/$/;"	m	struct:Fts3Phrase	file:
nTokenAllocated	safe/sqlite3.c	/^  int nTokenAllocated;         \/* space allocated to zToken buffer *\/$/;"	m	struct:simple_tokenizer_cursor	file:
nTotalChange	safe/sqlite3.c	/^  int nTotalChange;             \/* Value returned by sqlite3_total_changes() *\/$/;"	m	struct:sqlite3	file:
nTransaction	safe/sqlite3.c	/^  int nTransaction;     \/* Number of open transactions (read + write) *\/$/;"	m	struct:BtShared	file:
nTree	safe/sqlite3.c	/^  int nTree;                      \/* Used size of aTree\/aIter (power of 2) *\/$/;"	m	struct:VdbeSorter	file:
nVTrans	safe/sqlite3.c	/^  int nVTrans;                  \/* Allocated size of aVTrans *\/$/;"	m	struct:sqlite3	file:
nVal	safe/sqlite3.c	/^  int nVal;$/;"	m	struct:SorterRecord	file:
nVar	safe/sqlite3.c	/^  int nVar;                 \/* Number of '?' variables seen in the SQL so far *\/$/;"	m	struct:Parse	file:
nVar	safe/sqlite3.c	/^  ynVar nVar;             \/* Number of entries in aVar[] *\/$/;"	m	struct:Vdbe	file:
nVtabLock	safe/sqlite3.c	/^  int nVtabLock;            \/* Number of virtual tables to lock *\/$/;"	m	struct:Parse	file:
nWiData	safe/sqlite3.c	/^  int nWiData;               \/* Size of array apWiData *\/$/;"	m	struct:Wal	file:
nWork	safe/sqlite3.c	/^  int nWork;                      \/* Number of leaf pages flushed *\/$/;"	m	struct:IncrmergeWriter	file:
nZero	safe/sqlite3.c	/^    int nZero;          \/* Used when bit MEM_Zero is set in flags *\/$/;"	m	union:Mem::<anonymous>	file:
name	mtchannel.h	/^	char *name;						\/\/ A unique ID for this channel (currntly the 'fd' as a string)$/;"	m	struct:CHAN
name	mtwamp.c	/^	const char *name;$/;"	m	struct:WAMPREALM	file:
name	mtwamp.c	/^	const char *name;$/;"	m	struct:wamp_code_t	file:
name	mtwamp.h	/^	const char *name;				\/\/ Unique ID for this wamp$/;"	m	struct:WAMP
name	mtwebsocket.c	/^	char *name;$/;"	m	struct:WS	file:
name	mtwebsocket.h	/^	char *name;$/;"	m	struct:WS
name	safe/mtwamp.c	/^	const char *name;$/;"	m	struct:WAMPREALM	file:
name	safe/mtwamp.c	/^	const char *name;$/;"	m	struct:wamp_code_t	file:
name	safe/mtwamp.h	/^	const char *name;$/;"	m	struct:WAMPREALM
nameInUsingClause	safe/sqlite3.c	/^static int nameInUsingClause(IdList *pUsing, const char *zCol){$/;"	f	file:
ncFlags	safe/sqlite3.c	/^  u8 ncFlags;          \/* Zero or more NC_* flags defined below *\/$/;"	m	struct:NameContext	file:
nearlyFull	safe/sqlite3.c	/^  int nearlyFull;$/;"	m	struct:Mem0Global	file:
needToFreeIdxStr	safe/sqlite3.c	/^  int needToFreeIdxStr;      \/* Free idxStr using sqlite3_free() if true *\/$/;"	m	struct:sqlite3_index_info	file:
needToFreeIdxStr	safe/sqlite3.h	/^  int needToFreeIdxStr;      \/* Free idxStr using sqlite3_free() if true *\/$/;"	m	struct:sqlite3_index_info
nested	safe/sqlite3.c	/^  u8 nested;           \/* Number of nested calls to the parser\/code generator *\/$/;"	m	struct:Parse	file:
newDatabase	safe/sqlite3.c	/^static int newDatabase(BtShared *pBt){$/;"	f	file:
newRowid	safe/sqlite3.c	/^static int newRowid(Rtree *pRtree, i64 *piRowid){$/;"	f	file:
newTnum	safe/sqlite3.c	/^    int newTnum;                \/* Rootpage of table being initialized *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
newmask	safe/sqlite3.c	/^  u32 newmask;         \/* Mask of new.* columns referenced *\/$/;"	m	struct:Parse	file:
next	mtjson.h	/^	struct JSON *next;$/;"	m	struct:JSON
next	safe/sqlite3.c	/^      u32 next;       \/* Index in mem3.aPool[] of next free chunk *\/$/;"	m	struct:Mem3Block::<anonymous>::<anonymous>	file:
next	safe/sqlite3.c	/^  Fts3HashElem *next, *prev; \/* Next and previous elements in the table *\/$/;"	m	struct:Fts3HashElem	file:
next	safe/sqlite3.c	/^  HashElem *next, *prev;       \/* Next and previous elements in the table *\/$/;"	m	struct:HashElem	file:
next	safe/sqlite3.c	/^  int next;       \/* Index of next free chunk *\/$/;"	m	struct:Mem5Link	file:
nextAutovac	safe/sqlite3.c	/^  signed char nextAutovac;      \/* Autovac setting after VACUUM if >=0 *\/$/;"	m	struct:sqlite3	file:
nextPagesize	safe/sqlite3.c	/^  int nextPagesize;             \/* Pagesize after VACUUM if >0 *\/$/;"	m	struct:sqlite3	file:
nextShmId	safe/sqlite3.c	/^  u8 nextShmId;              \/* Next available unixShm.id value *\/$/;"	m	struct:unixShmNode	file:
nextShmId	safe/sqlite3.c	/^  u8 nextShmId;              \/* Next available winShm.id value *\/$/;"	m	struct:winShmNode	file:
next_stmt	safe/sqlite3.c	/^  sqlite3_stmt *(*next_stmt)(sqlite3*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
nfsUnlock	safe/sqlite3.c	/^static int nfsUnlock(sqlite3_file *id, int eFileLock){$/;"	f	file:
noCase	safe/sqlite3.c	/^  u8 noCase;$/;"	m	struct:compareInfo	file:
noHeaderFilesAreNamed	bin2c.c	/^const char* noHeaderFilesAreNamed = "No header files are named";$/;"	v
noOutputFilesAreNamed	bin2c.c	/^const char* noOutputFilesAreNamed = "No output files are named";$/;"	v
noSymbolName	bin2c.c	/^const char* noSymbolName = "No symbol name is given";$/;"	v
noSync	safe/sqlite3.c	/^  u8 noSync;                  \/* Do not sync the journal if true *\/$/;"	m	struct:Pager	file:
nocaseCollatingFunc	safe/sqlite3.c	/^static int nocaseCollatingFunc($/;"	f	file:
nodeAcquire	safe/sqlite3.c	/^nodeAcquire($/;"	f	file:
nodeDeleteCell	safe/sqlite3.c	/^static void nodeDeleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell){$/;"	f	file:
nodeGetCell	safe/sqlite3.c	/^static void nodeGetCell($/;"	f	file:
nodeGetCoord	safe/sqlite3.c	/^static void nodeGetCoord($/;"	f	file:
nodeGetRowid	safe/sqlite3.c	/^static i64 nodeGetRowid($/;"	f	file:
nodeHash	safe/sqlite3.c	/^static int nodeHash(i64 iNode){$/;"	f	file:
nodeHashDelete	safe/sqlite3.c	/^static void nodeHashDelete(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeHashInsert	safe/sqlite3.c	/^static void nodeHashInsert(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeHashLookup	safe/sqlite3.c	/^static RtreeNode *nodeHashLookup(Rtree *pRtree, i64 iNode){$/;"	f	file:
nodeInsertCell	safe/sqlite3.c	/^nodeInsertCell($/;"	f	file:
nodeNew	safe/sqlite3.c	/^static RtreeNode *nodeNew(Rtree *pRtree, RtreeNode *pParent){$/;"	f	file:
nodeOverwriteCell	safe/sqlite3.c	/^static void nodeOverwriteCell($/;"	f	file:
nodeParentIndex	safe/sqlite3.c	/^static int nodeParentIndex(Rtree *pRtree, RtreeNode *pNode, int *piIndex){$/;"	f	file:
nodeReaderInit	safe/sqlite3.c	/^static int nodeReaderInit(NodeReader *p, const char *aNode, int nNode){$/;"	f	file:
nodeReaderNext	safe/sqlite3.c	/^static int nodeReaderNext(NodeReader *p){$/;"	f	file:
nodeReaderRelease	safe/sqlite3.c	/^static void nodeReaderRelease(NodeReader *p){$/;"	f	file:
nodeReference	safe/sqlite3.c	/^static void nodeReference(RtreeNode *p){$/;"	f	file:
nodeRelease	safe/sqlite3.c	/^nodeRelease(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeRowidIndex	safe/sqlite3.c	/^static int nodeRowidIndex($/;"	f	file:
nodeWrite	safe/sqlite3.c	/^nodeWrite(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeZero	safe/sqlite3.c	/^static void nodeZero(Rtree *pRtree, RtreeNode *p){$/;"	f	file:
nolockCheckReservedLock	safe/sqlite3.c	/^static int nolockCheckReservedLock(sqlite3_file *NotUsed, int *pResOut){$/;"	f	file:
nolockClose	safe/sqlite3.c	/^static int nolockClose(sqlite3_file *id) {$/;"	f	file:
nolockLock	safe/sqlite3.c	/^static int nolockLock(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
nolockUnlock	safe/sqlite3.c	/^static int nolockUnlock(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
nonce	mtwamputil.c	/^	const char *nonce;$/;"	m	struct:outward_connection_t	file:
noopMutexAlloc	safe/sqlite3.c	/^static sqlite3_mutex *noopMutexAlloc(int id){ $/;"	f	file:
noopMutexEnd	safe/sqlite3.c	/^static int noopMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
noopMutexEnter	safe/sqlite3.c	/^static void noopMutexEnter(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexFree	safe/sqlite3.c	/^static void noopMutexFree(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexInit	safe/sqlite3.c	/^static int noopMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
noopMutexLeave	safe/sqlite3.c	/^static void noopMutexLeave(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexTry	safe/sqlite3.c	/^static int noopMutexTry(sqlite3_mutex *p){$/;"	f	file:
notIndexed	safe/sqlite3.c	/^    u8 notIndexed;    \/* True if there is a NOT INDEXED clause *\/$/;"	m	struct:SrcList::SrcList_item	file:
notNull	safe/sqlite3.c	/^  u8 notNull;      \/* True if there is a NOT NULL constraint *\/$/;"	m	struct:Column	file:
notUsed1	safe/sqlite3.c	/^    double notUsed1;            \/* Spacer *\/$/;"	m	union:sqlite3::<anonymous>	file:
notValidId	bin2c.c	/^const char* notValidId = "'%s' is not a valid identifier";$/;"	v
note_Delete	safe/spider.133.c	/^static void note_Delete(note_t *n)$/;"	f	file:
note_Delete	safe/spider.135.c	/^static void note_Delete(note_t *n)$/;"	f	file:
note_Delete	safe/spider.200.c	/^static void note_Delete(note_t *n)$/;"	f	file:
note_Delete	safe/spider.203.c	/^static void note_Delete(note_t *n)$/;"	f	file:
note_Delete	safe/spider.204.c	/^static void note_Delete(note_t *n)$/;"	f	file:
note_Delete	safe/spider.210.c	/^static void note_Delete(note_t *n)$/;"	f	file:
note_Delete	safe/spider.c	/^static void note_Delete(note_t *n)$/;"	f	file:
note_Delete	spider.c	/^static void note_Delete(note_t *n)$/;"	f	file:
note_FindEntry	safe/spider.133.c	/^static const char *note_FindEntry(note_t *n, char c)$/;"	f	file:
note_FindEntry	safe/spider.135.c	/^static const char *note_FindEntry(note_t *n, char c)$/;"	f	file:
note_FindEntry	safe/spider.200.c	/^static const char *note_FindEntry(note_t *n, char c)$/;"	f	file:
note_FindEntry	safe/spider.203.c	/^static const char *note_FindEntry(note_t *n, char c)$/;"	f	file:
note_FindEntry	safe/spider.204.c	/^static const char *note_FindEntry(note_t *n, char c)$/;"	f	file:
note_FindEntry	safe/spider.210.c	/^static const char *note_FindEntry(note_t *n, char c)$/;"	f	file:
note_FindEntry	safe/spider.c	/^static const char *note_FindEntry(note_t *n, char c)$/;"	f	file:
note_FindEntry	spider.c	/^static const char *note_FindEntry(note_t *n, char c)$/;"	f	file:
note_GetEntry	safe/spider.133.c	/^static const char *note_GetEntry(note_t *n, int i)$/;"	f	file:
note_GetEntry	safe/spider.135.c	/^static const char *note_GetEntry(note_t *n, int i)$/;"	f	file:
note_GetEntry	safe/spider.200.c	/^static const char *note_GetEntry(note_t *n, int i)$/;"	f	file:
note_GetEntry	safe/spider.203.c	/^static const char *note_GetEntry(note_t *n, int i)$/;"	f	file:
note_GetEntry	safe/spider.204.c	/^static const char *note_GetEntry(note_t *n, int i)$/;"	f	file:
note_GetEntry	safe/spider.210.c	/^static const char *note_GetEntry(note_t *n, int i)$/;"	f	file:
note_GetEntry	safe/spider.c	/^static const char *note_GetEntry(note_t *n, int i)$/;"	f	file:
note_GetEntry	spider.c	/^static const char *note_GetEntry(note_t *n, int i)$/;"	f	file:
note_GetEntryCount	safe/spider.133.c	/^int note_GetEntryCount(note_t *n)		{return n?n->nEntries:0;}$/;"	f
note_GetEntryCount	safe/spider.135.c	/^int note_GetEntryCount(note_t *n)		{return n?n->nEntries:0;}$/;"	f
note_GetEntryCount	safe/spider.200.c	/^int note_GetEntryCount(note_t *n)		{return n?n->nEntries:0;}$/;"	f
note_GetEntryCount	safe/spider.203.c	/^int note_GetEntryCount(note_t *n)		{return n?n->nEntries:0;}$/;"	f
note_GetEntryCount	safe/spider.204.c	/^int note_GetEntryCount(note_t *n)		{return n?n->nEntries:0;}$/;"	f
note_GetEntryCount	safe/spider.210.c	/^int note_GetEntryCount(note_t *n)		{return n?n->nEntries:0;}$/;"	f
note_GetEntryCount	safe/spider.c	/^int note_GetEntryCount(note_t *n)		{return n?n->nEntries:0;}$/;"	f
note_GetEntryCount	spider.c	/^int note_GetEntryCount(note_t *n)		{return n?n->nEntries:0;}$/;"	f
note_GetMessage	safe/spider.133.c	/^static const char *note_GetMessage(note_t *n, int i)$/;"	f	file:
note_GetMessage	safe/spider.135.c	/^static const char *note_GetMessage(note_t *n, int i)$/;"	f	file:
note_GetMessage	safe/spider.200.c	/^static const char *note_GetMessage(note_t *n, int i)$/;"	f	file:
note_GetMessageCount	safe/spider.133.c	/^int note_GetMessageCount(note_t *n)		{return n?n->nMessages:0;}$/;"	f
note_GetMessageCount	safe/spider.135.c	/^int note_GetMessageCount(note_t *n)		{return n?n->nMessages:0;}$/;"	f
note_GetMessageCount	safe/spider.200.c	/^int note_GetMessageCount(note_t *n)		{return n?n->nMessages:0;}$/;"	f
note_GetMessageCount	safe/spider.203.c	/^int note_GetMessageCount(note_t *n)		{return n?n->nMessages:0;}$/;"	f
note_GetMessageCount	safe/spider.204.c	/^int note_GetMessageCount(note_t *n)		{return n?n->nMessages:0;}$/;"	f
note_GetMessageCount	safe/spider.210.c	/^int note_GetMessageCount(note_t *n)		{return n?n->nMessages:0;}$/;"	f
note_GetMessageCount	safe/spider.c	/^int note_GetMessageCount(note_t *n)		{return n?n->nMessages:0;}$/;"	f
note_GetMessageCount	spider.c	/^int note_GetMessageCount(note_t *n)		{return n?n->nMessages:0;}$/;"	f
note_LoadMessage	safe/spider.133.c	/^static note_t *note_LoadMessage(const char *szDir)$/;"	f	file:
note_LoadMessage	safe/spider.135.c	/^static note_t *note_LoadMessage(const char *szDir)$/;"	f	file:
note_LoadMessage	safe/spider.200.c	/^static note_t *note_LoadMessage(const char *szDir)$/;"	f	file:
note_LoadMessage	safe/spider.203.c	/^static note_t *note_LoadMessage(const char *szDir)$/;"	f	file:
note_LoadMessage	safe/spider.204.c	/^static note_t *note_LoadMessage(const char *szDir)$/;"	f	file:
note_LoadMessage	safe/spider.210.c	/^static note_t *note_LoadMessage(const char *szDir)$/;"	f	file:
note_LoadMessage	safe/spider.c	/^static note_t *note_LoadMessage(const char *szDir)$/;"	f	file:
note_LoadMessage	spider.c	/^static note_t *note_LoadMessage(const char *szDir)$/;"	f	file:
note_t	safe/spider.133.c	/^typedef struct note_t {$/;"	s	file:
note_t	safe/spider.133.c	/^} note_t;$/;"	t	file:
note_t	safe/spider.135.c	/^typedef struct note_t {$/;"	s	file:
note_t	safe/spider.135.c	/^} note_t;$/;"	t	file:
note_t	safe/spider.200.c	/^typedef struct note_t {$/;"	s	file:
note_t	safe/spider.200.c	/^} note_t;$/;"	t	file:
note_t	safe/spider.203.c	/^typedef struct note_t {$/;"	s	file:
note_t	safe/spider.203.c	/^} note_t;$/;"	t	file:
note_t	safe/spider.204.c	/^typedef struct note_t {$/;"	s	file:
note_t	safe/spider.204.c	/^} note_t;$/;"	t	file:
note_t	safe/spider.210.c	/^typedef struct note_t {$/;"	s	file:
note_t	safe/spider.210.c	/^} note_t;$/;"	t	file:
note_t	safe/spider.c	/^typedef struct note_t {$/;"	s	file:
note_t	safe/spider.c	/^} note_t;$/;"	t	file:
note_t	spider.c	/^typedef struct note_t {$/;"	s	file:
note_t	spider.c	/^} note_t;$/;"	t	file:
nowValue	safe/sqlite3.c	/^  int nowValue[10];         \/* Current value *\/$/;"	m	struct:sqlite3StatType	file:
nrhs	safe/sqlite3.c	/^  unsigned char nrhs;     \/* Number of right-hand side symbols in the rule *\/$/;"	m	struct:	file:
nullRow	safe/sqlite3.c	/^  Bool nullRow;         \/* True if pointing to a row with no data *\/$/;"	m	struct:VdbeCursor	file:
nullifFunc	safe/sqlite3.c	/^static void nullifFunc($/;"	f	file:
number	mtjson.h	/^		double number;					\/\/ For JSON_FLOAT$/;"	m	union:JSON::<anonymous>
number	safe/mtjson.h	/^		double number;					\/\/ For JSON_FLOAT$/;"	m	union:JSON::<anonymous>
numberOfCachePages	safe/sqlite3.c	/^static int numberOfCachePages(PCache *p){$/;"	f	file:
nzVar	safe/sqlite3.c	/^  int nzVar;                \/* Number of available slots in azVar[] *\/$/;"	m	struct:Parse	file:
nzVar	safe/sqlite3.c	/^  ynVar nzVar;            \/* Number of entries in azVar[] *\/$/;"	m	struct:Vdbe	file:
object	mtjson.h	/^		SPMAP *object;					\/\/ For JSON_OBJECT$/;"	m	union:JSON::<anonymous>
object	safe/mtjson.h	/^		SPMAP *object;					\/\/ For JSON_OBJECT$/;"	m	union:JSON::<anonymous>
objects	jtest.mak	/^objects= jtest.o mtjson.o$/;"	m
objects	makefile	/^objects= spider.o mtjson.o mtwebsocket.o mtwamp.o mtchannel.o mtwamputil.o$/;"	m
objects	spider.mak	/^objects= spider.o mtjson.o mtwebsocket.o mtwamp.o mtchannel.o mtwamputil.o$/;"	m
offset	safe/sqlite3.c	/^  unsigned long long offset;        \/* offset to first byte to lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
offsetof	safe/sqlite3.c	7949;"	d	file:
okOnePass	safe/sqlite3.c	/^  u8 okOnePass;        \/* Ok to use one-pass algorithm for UPDATE or DELETE *\/$/;"	m	struct:WhereInfo	file:
oldLockingContext	safe/sqlite3.c	/^  void *oldLockingContext;     \/* Original lockingcontext to restore on close *\/$/;"	m	struct:proxyLockingContext	file:
oldmask	safe/sqlite3.c	/^  u32 oldmask;         \/* Mask of old.* columns referenced *\/$/;"	m	struct:Parse	file:
omit	safe/sqlite3.c	/^    unsigned char omit;      \/* Do not code a test for this constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:
omit	safe/sqlite3.h	/^    unsigned char omit;      \/* Do not code a test for this constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage
onDone	mtwamputil.c	/^	INTWAMPFN	onDone;$/;"	m	struct:outward_connection_t	file:
onDone	mtwamputil.c	/^	INTWAMPFN onDone;$/;"	m	struct:inward_connection_t	file:
onError	safe/sqlite3.c	/^  u8 onError;      \/* OE_Abort, OE_Ignore, OE_Replace, or OE_None *\/$/;"	m	struct:Index	file:
onErrorText	safe/sqlite3.c	/^static const char *onErrorText(int onError){$/;"	f	file:
op	safe/sqlite3.c	/^     unsigned char op;         \/* Constraint operator *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
op	safe/sqlite3.c	/^  int op;                         \/* Constraining operation *\/$/;"	m	struct:RtreeConstraint	file:
op	safe/sqlite3.c	/^  u8 op, p5;            \/* Opcode and P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel	file:
op	safe/sqlite3.c	/^  u8 op;                   \/* Split operator.  TK_AND or TK_OR *\/$/;"	m	struct:WhereClause	file:
op	safe/sqlite3.c	/^  u8 op;                  \/* One of TK_DELETE, TK_UPDATE, TK_INSERT         *\/$/;"	m	struct:Trigger	file:
op	safe/sqlite3.c	/^  u8 op;                 \/* One of: TK_UNION TK_ALL TK_INTERSECT TK_EXCEPT *\/$/;"	m	struct:Select	file:
op	safe/sqlite3.c	/^  u8 op;                 \/* Operation performed by this node *\/$/;"	m	struct:Expr	file:
op	safe/sqlite3.c	/^  u8 op;               \/* One of TK_DELETE, TK_UPDATE, TK_INSERT, TK_SELECT *\/$/;"	m	struct:TriggerStep	file:
op	safe/sqlite3.h	/^     unsigned char op;         \/* Constraint operator *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
op2	safe/sqlite3.c	/^  u8 op2;                \/* If a TK_REGISTER, the original value of Expr.op *\/$/;"	m	struct:Expr	file:
opIterNext	safe/sqlite3.c	/^static Op *opIterNext(VdbeOpIter *p){$/;"	f	file:
opPrecedence	safe/sqlite3.c	/^static int opPrecedence(Fts3Expr *p){$/;"	f	file:
opcode	mtwebsocket.c	/^	unsigned char opcode;			\/\/ Current opcode (used to handle continution frames)$/;"	m	struct:WS	file:
opcode	mtwebsocket.h	/^	unsigned char opcode;			\/\/ Current opcode (used to handle continution frames)$/;"	m	struct:WS
opcode	safe/mtwebsocket.h	/^	unsigned char opcode;			\/\/ Current opcode (used to handle continution frames)$/;"	m	struct:WS
opcode	safe/sqlite3.c	/^  u8 opcode;          \/* What operation to perform *\/$/;"	m	struct:VdbeOp	file:
opcode	safe/sqlite3.c	/^  u8 opcode;          \/* What operation to perform *\/$/;"	m	struct:VdbeOpList	file:
open	safe/sqlite3.c	/^  int  (*open)(const char*,sqlite3**);$/;"	m	struct:sqlite3_api_routines	file:
open16	safe/sqlite3.c	/^  int  (*open16)(const void*,sqlite3**);$/;"	m	struct:sqlite3_api_routines	file:
openDatabase	safe/sqlite3.c	/^static int openDatabase($/;"	f	file:
openDirectory	safe/sqlite3.c	/^static int openDirectory(const char *zFilename, int *pFd){$/;"	f	file:
openFlags	safe/sqlite3.c	/^  int openFlags;                      \/* The flags specified at open() *\/$/;"	m	struct:unixFile	file:
openFlags	safe/sqlite3.c	/^  u8 openFlags;         \/* Flags to sqlite3BtreeOpen() *\/$/;"	m	struct:BtShared	file:
openFlags	safe/sqlite3.c	/^  unsigned int openFlags;       \/* Flags passed to sqlite3_vfs.xOpen() *\/$/;"	m	struct:sqlite3	file:
openHeaderFile	bin2c.c	/^static void openHeaderFile(const char *fileName)$/;"	f	file:
openOutputFile	bin2c.c	/^static void openOutputFile(const char *fileName)$/;"	f	file:
openStatTable	safe/sqlite3.c	/^static void openStatTable($/;"	f	file:
openSubJournal	safe/sqlite3.c	/^static int openSubJournal(Pager *pPager){$/;"	f	file:
open_v2	safe/sqlite3.c	/^  int (*open_v2)(const char*,sqlite3**,int,const char*);$/;"	m	struct:sqlite3_api_routines	file:
operatorMask	safe/sqlite3.c	/^static u16 operatorMask(int op){$/;"	f	file:
opflags	safe/sqlite3.c	/^  u8 opflags;         \/* Mask of the OPFLG_* flags in opcodes.h *\/$/;"	m	struct:VdbeOp	file:
orconf	safe/sqlite3.c	/^  int orconf;             \/* Default ON CONFLICT policy *\/$/;"	m	struct:TriggerPrg	file:
orconf	safe/sqlite3.c	/^  u8 orconf;           \/* OE_Rollback etc. *\/$/;"	m	struct:TriggerStep	file:
orderByConsumed	safe/sqlite3.c	/^  int orderByConsumed;       \/* True if output is already ordered *\/$/;"	m	struct:sqlite3_index_info	file:
orderByConsumed	safe/sqlite3.h	/^  int orderByConsumed;       \/* True if output is already ordered *\/$/;"	m	struct:sqlite3_index_info
orphanTrigger	safe/sqlite3.c	/^    u8 orphanTrigger;           \/* Last statement is orphaned TEMP trigger *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
os2Access	safe/sqlite3.c	/^static int os2Access($/;"	f	file:
os2CheckReservedLock	safe/sqlite3.c	/^static int os2CheckReservedLock( sqlite3_file *id, int *pOut ){$/;"	f	file:
os2Close	safe/sqlite3.c	/^static int os2Close( sqlite3_file *id ){$/;"	f	file:
os2CurrentTime	safe/sqlite3.c	/^static int os2CurrentTime( sqlite3_vfs *pVfs, double *prNow ){$/;"	f	file:
os2CurrentTimeInt64	safe/sqlite3.c	/^static int os2CurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *piNow){$/;"	f	file:
os2Delete	safe/sqlite3.c	/^static int os2Delete($/;"	f	file:
os2DeviceCharacteristics	safe/sqlite3.c	/^static int os2DeviceCharacteristics(sqlite3_file *id){$/;"	f	file:
os2DlClose	safe/sqlite3.c	/^static void os2DlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f	file:
os2DlClose	safe/sqlite3.c	24712;"	d	file:
os2DlError	safe/sqlite3.c	/^static void os2DlError(sqlite3_vfs *pVfs, int nBuf, char *zBufOut){$/;"	f	file:
os2DlError	safe/sqlite3.c	24710;"	d	file:
os2DlOpen	safe/sqlite3.c	/^static void *os2DlOpen(sqlite3_vfs *pVfs, const char *zFilename){$/;"	f	file:
os2DlOpen	safe/sqlite3.c	24709;"	d	file:
os2DlSym	safe/sqlite3.c	/^static void (*os2DlSym(sqlite3_vfs *pVfs, void *pHandle, const char *zSymbol))(void){$/;"	f	file:
os2DlSym	safe/sqlite3.c	24711;"	d	file:
os2File	safe/sqlite3.c	/^struct os2File {$/;"	s	file:
os2File	safe/sqlite3.c	/^typedef struct os2File os2File;         \/* The file structure *\/$/;"	t	file:
os2FileControl	safe/sqlite3.c	/^static int os2FileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
os2FileSize	safe/sqlite3.c	/^static int os2FileSize( sqlite3_file *id, sqlite3_int64 *pSize ){$/;"	f	file:
os2FullPathname	safe/sqlite3.c	/^static int os2FullPathname($/;"	f	file:
os2GetLastError	safe/sqlite3.c	/^static int os2GetLastError(sqlite3_vfs *pVfs, int nBuf, char *zBuf){$/;"	f	file:
os2IoMethod	safe/sqlite3.c	/^static const sqlite3_io_methods os2IoMethod = {$/;"	v	file:
os2Lock	safe/sqlite3.c	/^static int os2Lock( sqlite3_file *id, int locktype ){$/;"	f	file:
os2MutexAlloc	safe/sqlite3.c	/^static sqlite3_mutex *os2MutexAlloc(int iType){$/;"	f	file:
os2MutexEnd	safe/sqlite3.c	/^static int os2MutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
os2MutexEnter	safe/sqlite3.c	/^static void os2MutexEnter(sqlite3_mutex *p){$/;"	f	file:
os2MutexFree	safe/sqlite3.c	/^static void os2MutexFree(sqlite3_mutex *p){$/;"	f	file:
os2MutexHeld	safe/sqlite3.c	/^static int os2MutexHeld(sqlite3_mutex *p){$/;"	f	file:
os2MutexInit	safe/sqlite3.c	/^static int os2MutexInit(void){ return SQLITE_OK; }$/;"	f	file:
os2MutexLeave	safe/sqlite3.c	/^static void os2MutexLeave(sqlite3_mutex *p){$/;"	f	file:
os2MutexNotheld	safe/sqlite3.c	/^static int os2MutexNotheld(sqlite3_mutex *p){$/;"	f	file:
os2MutexTrace	safe/sqlite3.c	/^static void os2MutexTrace(sqlite3_mutex *p, char *pAction){$/;"	f	file:
os2MutexTry	safe/sqlite3.c	/^static int os2MutexTry(sqlite3_mutex *p){$/;"	f	file:
os2Open	safe/sqlite3.c	/^static int os2Open($/;"	f	file:
os2OpenSharedMemory	safe/sqlite3.c	/^static int os2OpenSharedMemory( os2File *fd, int szRegion ) {$/;"	f	file:
os2PurgeShmNodes	safe/sqlite3.c	/^static void os2PurgeShmNodes( int deleteFlag ) {$/;"	f	file:
os2Randomness	safe/sqlite3.c	/^static int os2Randomness(sqlite3_vfs *pVfs, int nBuf, char *zBuf ){$/;"	f	file:
os2Read	safe/sqlite3.c	/^static int os2Read($/;"	f	file:
os2SectorSize	safe/sqlite3.c	/^static int os2SectorSize(sqlite3_file *id){$/;"	f	file:
os2ShmBarrier	safe/sqlite3.c	/^static void os2ShmBarrier($/;"	f	file:
os2ShmBarrier	safe/sqlite3.c	24330;"	d	file:
os2ShmEnterMutex	safe/sqlite3.c	/^static void os2ShmEnterMutex(void){$/;"	f	file:
os2ShmLeaveMutex	safe/sqlite3.c	/^static void os2ShmLeaveMutex(void){$/;"	f	file:
os2ShmLink	safe/sqlite3.c	/^struct os2ShmLink {$/;"	s	file:
os2ShmLink	safe/sqlite3.c	/^typedef struct os2ShmLink os2ShmLink;   \/* A connection to shared-memory *\/$/;"	t	file:
os2ShmLock	safe/sqlite3.c	/^static int os2ShmLock($/;"	f	file:
os2ShmLock	safe/sqlite3.c	24329;"	d	file:
os2ShmMap	safe/sqlite3.c	/^static int os2ShmMap($/;"	f	file:
os2ShmMap	safe/sqlite3.c	24328;"	d	file:
os2ShmMutexHeld	safe/sqlite3.c	/^static int os2ShmMutexHeld(void) {$/;"	f	file:
os2ShmNode	safe/sqlite3.c	/^struct os2ShmNode {$/;"	s	file:
os2ShmNode	safe/sqlite3.c	/^typedef struct os2ShmNode os2ShmNode;   \/* A shared descritive memory node *\/$/;"	t	file:
os2ShmNodeList	safe/sqlite3.c	/^static os2ShmNode *os2ShmNodeList = NULL;$/;"	v	file:
os2ShmSystemLock	safe/sqlite3.c	/^static int os2ShmSystemLock($/;"	f	file:
os2ShmUnmap	safe/sqlite3.c	/^static int os2ShmUnmap($/;"	f	file:
os2ShmUnmap	safe/sqlite3.c	24331;"	d	file:
os2Sleep	safe/sqlite3.c	/^static int os2Sleep( sqlite3_vfs *pVfs, int microsec ){$/;"	f	file:
os2Sync	safe/sqlite3.c	/^static int os2Sync( sqlite3_file *id, int flags ){$/;"	f	file:
os2Truncate	safe/sqlite3.c	/^static int os2Truncate( sqlite3_file *id, i64 nByte ){$/;"	f	file:
os2Unlock	safe/sqlite3.c	/^static int os2Unlock( sqlite3_file *id, int locktype ){$/;"	f	file:
os2Write	safe/sqlite3.c	/^static int os2Write($/;"	f	file:
osAccess	safe/sqlite3.c	25469;"	d	file:
osAreFileApisANSI	safe/sqlite3.c	32458;"	d	file:
osAreFileApisANSI	safe/sqlite3.c	32479;"	d	file:
osCharLowerW	safe/sqlite3.c	32488;"	d	file:
osCharUpperW	safe/sqlite3.c	32496;"	d	file:
osClose	safe/sqlite3.c	25466;"	d	file:
osCloseHandle	safe/sqlite3.c	32500;"	d	file:
osCreateEventExW	safe/sqlite3.c	32922;"	d	file:
osCreateFile2	safe/sqlite3.c	32976;"	d	file:
osCreateFileA	safe/sqlite3.c	32508;"	d	file:
osCreateFileMappingFromApp	safe/sqlite3.c	33031;"	d	file:
osCreateFileMappingW	safe/sqlite3.c	32526;"	d	file:
osCreateFileW	safe/sqlite3.c	32517;"	d	file:
osCreateMutexW	safe/sqlite3.c	32535;"	d	file:
osDeleteFileA	safe/sqlite3.c	32544;"	d	file:
osDeleteFileW	safe/sqlite3.c	32552;"	d	file:
osFallocate	safe/sqlite3.c	25545;"	d	file:
osFchmod	safe/sqlite3.c	25538;"	d	file:
osFchown	safe/sqlite3.c	25560;"	d	file:
osFcntl	safe/sqlite3.c	25495;"	d	file:
osFcntl	safe/sqlite3.c	25794;"	d	file:
osFcntl	safe/sqlite3.c	25795;"	d	file:
osFileTimeToLocalFileTime	safe/sqlite3.c	32560;"	d	file:
osFileTimeToSystemTime	safe/sqlite3.c	32569;"	d	file:
osFlushFileBuffers	safe/sqlite3.c	32574;"	d	file:
osFormatMessageA	safe/sqlite3.c	32582;"	d	file:
osFormatMessageW	safe/sqlite3.c	32591;"	d	file:
osFreeLibrary	safe/sqlite3.c	32596;"	d	file:
osFstat	safe/sqlite3.c	25485;"	d	file:
osFstat	safe/sqlite3.c	25488;"	d	file:
osFtruncate	safe/sqlite3.c	25492;"	d	file:
osGetCurrentProcessId	safe/sqlite3.c	32600;"	d	file:
osGetDiskFreeSpaceA	safe/sqlite3.c	32608;"	d	file:
osGetDiskFreeSpaceW	safe/sqlite3.c	32617;"	d	file:
osGetFileAttributesA	safe/sqlite3.c	32626;"	d	file:
osGetFileAttributesExW	safe/sqlite3.c	32642;"	d	file:
osGetFileAttributesW	safe/sqlite3.c	32634;"	d	file:
osGetFileInformationByHandleEx	safe/sqlite3.c	32958;"	d	file:
osGetFileSize	safe/sqlite3.c	32651;"	d	file:
osGetFullPathNameA	safe/sqlite3.c	32659;"	d	file:
osGetFullPathNameW	safe/sqlite3.c	32668;"	d	file:
osGetLastError	safe/sqlite3.c	32673;"	d	file:
osGetNativeSystemInfo	safe/sqlite3.c	33002;"	d	file:
osGetProcAddressA	safe/sqlite3.c	32684;"	d	file:
osGetProcessHeap	safe/sqlite3.c	33023;"	d	file:
osGetSystemInfo	safe/sqlite3.c	32693;"	d	file:
osGetSystemTime	safe/sqlite3.c	32697;"	d	file:
osGetSystemTimeAsFileTime	safe/sqlite3.c	32705;"	d	file:
osGetTempPathA	safe/sqlite3.c	32714;"	d	file:
osGetTempPathW	safe/sqlite3.c	32722;"	d	file:
osGetTickCount	safe/sqlite3.c	32730;"	d	file:
osGetTickCount64	safe/sqlite3.c	32994;"	d	file:
osGetVersionExA	safe/sqlite3.c	32738;"	d	file:
osGetcwd	safe/sqlite3.c	25472;"	d	file:
osHeapAlloc	safe/sqlite3.c	32743;"	d	file:
osHeapCreate	safe/sqlite3.c	32752;"	d	file:
osHeapDestroy	safe/sqlite3.c	32761;"	d	file:
osHeapFree	safe/sqlite3.c	32765;"	d	file:
osHeapReAlloc	safe/sqlite3.c	32769;"	d	file:
osHeapSize	safe/sqlite3.c	32774;"	d	file:
osHeapValidate	safe/sqlite3.c	32783;"	d	file:
osLoadLibraryA	safe/sqlite3.c	32792;"	d	file:
osLoadLibraryW	safe/sqlite3.c	32800;"	d	file:
osLoadPackagedLibrary	safe/sqlite3.c	32985;"	d	file:
osLocalFree	safe/sqlite3.c	32808;"	d	file:
osLocaltime	safe/sqlite3.c	/^static int osLocaltime(time_t *t, struct tm *pTm){$/;"	f	file:
osLockFile	safe/sqlite3.c	32817;"	d	file:
osLockFileEx	safe/sqlite3.c	32828;"	d	file:
osMapViewOfFile	safe/sqlite3.c	32838;"	d	file:
osMapViewOfFileFromApp	safe/sqlite3.c	32967;"	d	file:
osMkdir	safe/sqlite3.c	25554;"	d	file:
osMultiByteToWideChar	safe/sqlite3.c	32843;"	d	file:
osOpen	safe/sqlite3.c	25463;"	d	file:
osOpenDirectory	safe/sqlite3.c	25551;"	d	file:
osOutputDebugStringA	safe/sqlite3.c	33011;"	d	file:
osOutputDebugStringW	safe/sqlite3.c	33019;"	d	file:
osPread	safe/sqlite3.c	25505;"	d	file:
osPread64	safe/sqlite3.c	25512;"	d	file:
osPwrite	safe/sqlite3.c	25522;"	d	file:
osPwrite64	safe/sqlite3.c	25530;"	d	file:
osQueryPerformanceCounter	safe/sqlite3.c	32848;"	d	file:
osRead	safe/sqlite3.c	25498;"	d	file:
osReadFile	safe/sqlite3.c	32853;"	d	file:
osRmdir	safe/sqlite3.c	25557;"	d	file:
osSetEndOfFile	safe/sqlite3.c	32858;"	d	file:
osSetFilePointer	safe/sqlite3.c	32866;"	d	file:
osSetFilePointerEx	safe/sqlite3.c	32949;"	d	file:
osSleep	safe/sqlite3.c	32875;"	d	file:
osStat	safe/sqlite3.c	25475;"	d	file:
osSystemTimeToFileTime	safe/sqlite3.c	32879;"	d	file:
osUmask	safe/sqlite3.c	25563;"	d	file:
osUnlink	safe/sqlite3.c	25548;"	d	file:
osUnlockFile	safe/sqlite3.c	32889;"	d	file:
osUnlockFileEx	safe/sqlite3.c	32899;"	d	file:
osUnmapViewOfFile	safe/sqlite3.c	32904;"	d	file:
osWaitForSingleObject	safe/sqlite3.c	32931;"	d	file:
osWaitForSingleObjectEx	safe/sqlite3.c	32940;"	d	file:
osWideCharToMultiByte	safe/sqlite3.c	32908;"	d	file:
osWrite	safe/sqlite3.c	25515;"	d	file:
osWriteFile	safe/sqlite3.c	32913;"	d	file:
out	safe/mtwebsocket.h	/^	HLIST *out;						\/\/ Outgoing queue (never NULL)$/;"	m	struct:WS
output	bin2c.c	/^static void output(const char *format, ...)$/;"	f	file:
outputFile	bin2c.c	/^FILE *outputFile;           \/* Current output file stream *\/$/;"	v
outputFileName	bin2c.c	/^const char *outputFileName; \/* Current output file name *\/$/;"	v
outputFormat	bin2c.c	48;"	d	file:
outputFormatBase	bin2c.c	47;"	d	file:
outputFormatEOF	bin2c.c	50;"	d	file:
outputFormatEOL	bin2c.c	49;"	d	file:
outq	mtchannel.h	/^	HLIST *outq;					\/\/ Outgoing queue (never NULL)$/;"	m	struct:CHAN
outq	safe/mtchannel.h	/^	HLIST *outq;					\/\/ Outgoing queue (never NULL)$/;"	m	struct:CHAN
outward_connection_t	mtwamputil.c	/^typedef struct outward_connection_t {$/;"	s	file:
outward_connection_t	mtwamputil.c	/^} outward_connection_t;$/;"	t	file:
overflow	safe/sqlite3.c	/^  u8 overflow;      \/* True if integer overflow seen *\/$/;"	m	struct:SumCtx	file:
overload_function	safe/sqlite3.c	/^  int (*overload_function)(sqlite3*, const char *zFuncName, int nArg);$/;"	m	struct:sqlite3_api_routines	file:
owner	safe/sqlite3.c	/^  volatile DWORD owner;      \/* Thread holding this mutex *\/$/;"	m	struct:sqlite3_mutex	file:
owner	safe/sqlite3.c	/^  volatile pthread_t owner;  \/* Thread that is within this mutex *\/$/;"	m	struct:sqlite3_mutex	file:
p	safe/sqlite3.c	/^    void *p;               \/* Generic pointer *\/$/;"	m	union:VdbeOp::<anonymous>	file:
p1	safe/sqlite3.c	/^  int p1, p2;           \/* Operands of the opcode used to ends the loop *\/$/;"	m	struct:WhereLevel	file:
p1	safe/sqlite3.c	/^  int p1;             \/* First operand *\/$/;"	m	struct:VdbeOp	file:
p1	safe/sqlite3.c	/^  signed char p1;     \/* First operand *\/$/;"	m	struct:VdbeOpList	file:
p2	safe/sqlite3.c	/^  int p1, p2;           \/* Operands of the opcode used to ends the loop *\/$/;"	m	struct:WhereLevel	file:
p2	safe/sqlite3.c	/^  int p2;             \/* Second parameter (often the jump destination) *\/$/;"	m	struct:VdbeOp	file:
p2	safe/sqlite3.c	/^  signed char p2;     \/* Second parameter (often the jump destination) *\/$/;"	m	struct:VdbeOpList	file:
p3	safe/sqlite3.c	/^  int p3;             \/* The third parameter *\/$/;"	m	struct:VdbeOp	file:
p3	safe/sqlite3.c	/^  signed char p3;     \/* Third parameter *\/$/;"	m	struct:VdbeOpList	file:
p4	safe/sqlite3.c	/^  } p4;$/;"	m	struct:VdbeOp	file:
p4type	safe/sqlite3.c	/^  signed char p4type; \/* One of the P4_xxx constants for p4 *\/$/;"	m	struct:VdbeOp	file:
p5	safe/sqlite3.c	/^  u8 op, p5;            \/* Opcode and P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel	file:
p5	safe/sqlite3.c	/^  u8 p5;              \/* Fifth parameter is an unsigned character *\/$/;"	m	struct:VdbeOp	file:
pAggInfo	safe/sqlite3.c	/^  AggInfo *pAggInfo;     \/* Used by TK_AGG_COLUMN and TK_AGG_FUNCTION *\/$/;"	m	struct:Expr	file:
pAggInfo	safe/sqlite3.c	/^  AggInfo *pAggInfo;   \/* Information about aggregates at this level *\/$/;"	m	struct:NameContext	file:
pAinc	safe/sqlite3.c	/^  AutoincInfo *pAinc;  \/* Information about AUTOINCREMENT counters *\/$/;"	m	struct:Parse	file:
pAndInfo	safe/sqlite3.c	/^    WhereAndInfo *pAndInfo; \/* Extra information if eOperator==WO_AND *\/$/;"	m	union:WhereTerm::<anonymous>	file:
pAppData	safe/sqlite3.c	/^  void *pAppData;                \/* Argument to xInit() and xShutdown() *\/$/;"	m	struct:sqlite3_mem_methods	file:
pAppData	safe/sqlite3.c	/^  void *pAppData;          \/* Pointer to application-specific data *\/$/;"	m	struct:sqlite3_vfs	file:
pAppData	safe/sqlite3.h	/^  void *pAppData;                \/* Argument to xInit() and xShutdown() *\/$/;"	m	struct:sqlite3_mem_methods
pAppData	safe/sqlite3.h	/^  void *pAppData;          \/* Pointer to application-specific data *\/$/;"	m	struct:sqlite3_vfs
pArg	safe/sqlite3.c	/^  void *pArg;                \/* First arg to busy callback *\/$/;"	m	struct:BusyHandler	file:
pArg	safe/sqlite3.c	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods	file:
pArg	safe/sqlite3.c	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods2	file:
pArg	safe/sqlite3.h	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods
pArg	safe/sqlite3.h	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods2
pAuthArg	safe/sqlite3.c	/^  void *pAuthArg;               \/* 1st argument to the access auth function *\/$/;"	m	struct:sqlite3	file:
pAux	safe/sqlite3.c	/^    void *pAux;                   \/* Aux data for the i-th argument *\/$/;"	m	struct:VdbeFunc::AuxData	file:
pAux	safe/sqlite3.c	/^  void *pAux;                          \/* pAux passed to create_module() *\/$/;"	m	struct:Module	file:
pBackup	safe/sqlite3.c	/^  sqlite3_backup *pBackup;    \/* Pointer to list of ongoing backup processes *\/$/;"	m	struct:Pager	file:
pBlob	safe/sqlite3.c	/^  sqlite3_blob *pBlob;            \/* If not NULL, blob handle to read node *\/$/;"	m	struct:Fts3SegReader	file:
pBlockingConnection	safe/sqlite3.c	/^  sqlite3 *pBlockingConnection; \/* Connection that caused SQLITE_LOCKED *\/$/;"	m	struct:sqlite3	file:
pBt	safe/sqlite3.c	/^  BtShared *pBt;            \/* The BtShared this cursor points to *\/$/;"	m	struct:BtCursor	file:
pBt	safe/sqlite3.c	/^  BtShared *pBt;       \/* Pointer to BtShared that this page is part of *\/$/;"	m	struct:MemPage	file:
pBt	safe/sqlite3.c	/^  BtShared *pBt;     \/* Sharable content of this btree *\/$/;"	m	struct:Btree	file:
pBt	safe/sqlite3.c	/^  BtShared *pBt;    \/* The tree being checked out *\/$/;"	m	struct:IntegrityCk	file:
pBt	safe/sqlite3.c	/^  Btree *pBt;           \/* Separate file holding temporary table *\/$/;"	m	struct:VdbeCursor	file:
pBt	safe/sqlite3.c	/^  Btree *pBt;          \/* The B*Tree structure for this database file *\/$/;"	m	struct:Db	file:
pBtree	safe/sqlite3.c	/^  Btree *pBtree;            \/* The Btree to which this cursor belongs *\/$/;"	m	struct:BtCursor	file:
pBtree	safe/sqlite3.c	/^  Btree *pBtree;        \/* Btree handle holding this lock *\/$/;"	m	struct:BtLock	file:
pBuf	safe/sqlite3.c	/^  void *pBuf;        \/* The content of the page *\/$/;"	m	struct:sqlite3_pcache_page	file:
pBuf	safe/sqlite3.h	/^  void *pBuf;        \/* The content of the page *\/$/;"	m	struct:sqlite3_pcache_page
pBusyHandlerArg	safe/sqlite3.c	/^  void *pBusyHandlerArg;      \/* Context argument for xBusyHandler *\/$/;"	m	struct:Pager	file:
pCache	safe/sqlite3.c	/^  PCache *pCache;                \/* Cache that owns this page *\/$/;"	m	struct:PgHdr	file:
pCache	safe/sqlite3.c	/^  PCache1 *pCache;               \/* Cache that currently owns this page *\/$/;"	m	struct:PgHdr1	file:
pCache	safe/sqlite3.c	/^  sqlite3_pcache *pCache;             \/* Pluggable cache module *\/$/;"	m	struct:PCache	file:
pCell	safe/sqlite3.c	/^  u8 *pCell;     \/* Pointer to the start of cell content *\/$/;"	m	struct:CellInfo	file:
pCheck	safe/sqlite3.c	/^  ExprList *pCheck;    \/* All CHECK constraints *\/$/;"	m	struct:Table	file:
pChunk	safe/sqlite3.c	/^  FileChunk *pChunk;              \/* Specific chunk into which cursor points *\/$/;"	m	struct:FilePoint	file:
pChunk	safe/sqlite3.c	/^  struct RowSetChunk *pChunk;    \/* List of all chunk allocations *\/$/;"	m	struct:RowSet	file:
pCodec	safe/sqlite3.c	/^  void *pCodec;               \/* First argument to xCodec... methods *\/$/;"	m	struct:Pager	file:
pColl	safe/sqlite3.c	/^    CollSeq *pColl;        \/* Used when p4type is P4_COLLSEQ *\/$/;"	m	union:VdbeOp::<anonymous>	file:
pColl	safe/sqlite3.c	/^  CollSeq *pColl;        \/* The collation type of the column or 0 *\/$/;"	m	struct:Expr	file:
pColl	safe/sqlite3.c	/^  CollSeq *pColl;       \/* Collating sequence *\/$/;"	m	struct:sqlite3_context	file:
pCollNeededArg	safe/sqlite3.c	/^  void *pCollNeededArg;$/;"	m	struct:sqlite3	file:
pColumns	safe/sqlite3.c	/^  IdList *pColumns;       \/* If this is an UPDATE OF <column-list> trigger,$/;"	m	struct:Trigger	file:
pCommitArg	safe/sqlite3.c	/^  void *pCommitArg;                 \/* Argument to xCommitCallback() *\/   $/;"	m	struct:sqlite3	file:
pContext	safe/sqlite3.c	/^  void *pContext;                 \/* Copy of pContext passed to s_r_g_c() *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
pContext	safe/sqlite3.c	/^  void *pContext;$/;"	m	struct:RtreeGeomCallback	file:
pContext	safe/sqlite3.c	/^  void *pContext;$/;"	m	struct:RtreeMatchArg	file:
pContext	safe/sqlite3.h	/^  void *pContext;                 \/* Copy of pContext passed to s_r_g_c() *\/$/;"	m	struct:sqlite3_rtree_geometry
pCsr	safe/sqlite3.c	/^  BtCursor *pCsr;         \/* Cursor pointing at blob row *\/$/;"	m	struct:Incrblob	file:
pCsr	safe/sqlite3.c	/^  Fts3Cursor *pCsr;               \/* Cursor snippet is being generated from *\/$/;"	m	struct:SnippetIter	file:
pCsr	safe/sqlite3.c	/^  Fts3Cursor *pCsr;               \/* FTS3 Cursor *\/$/;"	m	struct:LoadDoclistCtx	file:
pCsr	safe/sqlite3.c	/^  Fts3Cursor *pCsr;$/;"	m	struct:TermOffsetCtx	file:
pCtx	safe/sqlite3.c	/^  sqlite3_context *pCtx;              \/* Write error message here *\/$/;"	m	struct:ParseContext	file:
pCurrent	safe/sqlite3.c	/^  sqlite3_syscall_ptr pCurrent; \/* Current value of the system call *\/$/;"	m	struct:unix_syscall	file:
pCurrent	safe/sqlite3.c	/^  sqlite3_syscall_ptr pCurrent; \/* Current value of the system call *\/$/;"	m	struct:win_syscall	file:
pCursor	safe/sqlite3.c	/^  BtCursor *pCursor;    \/* A list of all open cursors *\/$/;"	m	struct:BtShared	file:
pCursor	safe/sqlite3.c	/^  BtCursor *pCursor;    \/* The cursor structure of the backend *\/$/;"	m	struct:VdbeCursor	file:
pCursor	safe/sqlite3.c	/^  Fts3Cursor *pCursor;            \/* FTS3 Cursor *\/$/;"	m	struct:MatchInfo	file:
pData	safe/sqlite3.c	/^  void *pData;                   \/* Page data *\/$/;"	m	struct:PgHdr	file:
pDbFd	safe/sqlite3.c	/^  sqlite3_file *pDbFd;       \/* File handle for the database file *\/$/;"	m	struct:Wal	file:
pDbPage	safe/sqlite3.c	/^  DbPage *pDbPage;     \/* Pager page handle *\/$/;"	m	struct:MemPage	file:
pDef	safe/sqlite3.c	/^    FuncDef *pDef;      \/* Used only when flags==MEM_Agg *\/$/;"	m	union:Mem::<anonymous>	file:
pDefault	safe/sqlite3.c	/^  sqlite3_syscall_ptr pDefault; \/* Default value *\/$/;"	m	struct:unix_syscall	file:
pDefault	safe/sqlite3.c	/^  sqlite3_syscall_ptr pDefault; \/* Default value *\/$/;"	m	struct:win_syscall	file:
pDeferred	safe/sqlite3.c	/^  Fts3DeferredToken *pDeferred;   \/* Deferred search tokens, if any *\/$/;"	m	struct:Fts3Cursor	file:
pDeferred	safe/sqlite3.c	/^  Fts3DeferredToken *pDeferred;   \/* Deferred token object for this token *\/$/;"	m	struct:Fts3PhraseToken	file:
pDelFrame	safe/sqlite3.c	/^  VdbeFrame *pDelFrame;   \/* List of frame objects to free on VM reset *\/$/;"	m	struct:Vdbe	file:
pDeleteNode	safe/sqlite3.c	/^  sqlite3_stmt *pDeleteNode;$/;"	m	struct:Rtree	file:
pDeleteParent	safe/sqlite3.c	/^  sqlite3_stmt *pDeleteParent;$/;"	m	struct:Rtree	file:
pDeleteRowid	safe/sqlite3.c	/^  sqlite3_stmt *pDeleteRowid;$/;"	m	struct:Rtree	file:
pDeleted	safe/sqlite3.c	/^  RtreeNode *pDeleted;$/;"	m	struct:Rtree	file:
pDest	safe/sqlite3.c	/^  Btree *pDest;            \/* Destination b-tree file *\/$/;"	m	struct:sqlite3_backup	file:
pDestDb	safe/sqlite3.c	/^  sqlite3* pDestDb;        \/* Destination database handle *\/$/;"	m	struct:sqlite3_backup	file:
pDestructor	safe/sqlite3.c	/^  FuncDestructor *pDestructor;   \/* Reference counted destructor function *\/$/;"	m	struct:FuncDef	file:
pDflt	safe/sqlite3.c	/^  Expr *pDflt;     \/* Default value of this column *\/$/;"	m	struct:Column	file:
pDfltColl	safe/sqlite3.c	/^  CollSeq *pDfltColl;           \/* The default collating sequence (BINARY) *\/$/;"	m	struct:sqlite3	file:
pDirty	safe/sqlite3.c	/^  PgHdr *pDirty, *pDirtyTail;         \/* List of dirty pages in LRU order *\/$/;"	m	struct:PCache	file:
pDirty	safe/sqlite3.c	/^  PgHdr *pDirty;                 \/* Transient list of dirty pages *\/$/;"	m	struct:PgHdr	file:
pDirtyNext	safe/sqlite3.c	/^  PgHdr *pDirtyNext;             \/* Next element in list of dirty pages *\/$/;"	m	struct:PgHdr	file:
pDirtyPrev	safe/sqlite3.c	/^  PgHdr *pDirtyPrev;             \/* Previous element in list of dirty pages *\/$/;"	m	struct:PgHdr	file:
pDirtyTail	safe/sqlite3.c	/^  PgHdr *pDirty, *pDirtyTail;         \/* List of dirty pages in LRU order *\/$/;"	m	struct:PCache	file:
pDisconnect	safe/sqlite3.c	/^  VTable *pDisconnect;    \/* Disconnect these in next sqlite3_prepare() *\/$/;"	m	struct:sqlite3	file:
pEList	safe/sqlite3.c	/^  ExprList *pEList;      \/* The fields of the result *\/$/;"	m	struct:Select	file:
pEList	safe/sqlite3.c	/^  ExprList *pEList;    \/* Optional list of named expressions *\/$/;"	m	struct:NameContext	file:
pEnd	safe/sqlite3.c	/^  void *pEnd;             \/* First byte past end of available space *\/$/;"	m	struct:Lookaside	file:
pEnd	safe/sqlite3.c	/^  void *pStart, *pEnd;           \/* Bounds of pagecache malloc range *\/$/;"	m	struct:PCacheGlobal	file:
pEntry	safe/sqlite3.c	/^  struct RowSetEntry *pEntry;    \/* List of entries using pRight *\/$/;"	m	struct:RowSet	file:
pErr	safe/sqlite3.c	/^  sqlite3_value *pErr;          \/* Most recent error message *\/$/;"	m	struct:sqlite3	file:
pExplain	safe/sqlite3.c	/^  Explain *pExplain;      \/* The explainer *\/$/;"	m	struct:Vdbe	file:
pExpr	safe/sqlite3.c	/^    Expr *pExpr;             \/* Expression encoding the function *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
pExpr	safe/sqlite3.c	/^    Expr *pExpr;             \/* The original expression *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
pExpr	safe/sqlite3.c	/^    Expr *pExpr;           \/* The list of expressions *\/$/;"	m	struct:ExprList::ExprList_item	file:
pExpr	safe/sqlite3.c	/^  Expr *pExpr;            \/* Pointer to the subexpression that is this term *\/$/;"	m	struct:WhereTerm	file:
pExpr	safe/sqlite3.c	/^  Expr *pExpr;          \/* The expression parse tree *\/$/;"	m	struct:ExprSpan	file:
pExpr	safe/sqlite3.c	/^  Fts3Expr *pExpr;                \/* Parsed MATCH query string *\/$/;"	m	struct:Fts3Cursor	file:
pExpr	safe/sqlite3.c	/^  Fts3Expr *pExpr;                \/* Pointer to phrase expression *\/$/;"	m	struct:LcsIterator	file:
pExprList	safe/sqlite3.c	/^  ExprList *pExprList; \/* SET clause for UPDATE.  VALUES clause for INSERT *\/$/;"	m	struct:TriggerStep	file:
pExtra	safe/sqlite3.c	/^  void *pExtra;                  \/* Extra content *\/$/;"	m	struct:PgHdr	file:
pExtra	safe/sqlite3.c	/^  void *pExtra;      \/* Extra information associated with the page *\/$/;"	m	struct:sqlite3_pcache_page	file:
pExtra	safe/sqlite3.h	/^  void *pExtra;      \/* Extra information associated with the page *\/$/;"	m	struct:sqlite3_pcache_page
pFKey	safe/sqlite3.c	/^  FKey *pFKey;         \/* Linked list of all foreign keys in this table *\/$/;"	m	struct:Table	file:
pFd	safe/sqlite3.c	/^  sqlite3_file *pFd;           \/* The WAL file to which we write *\/$/;"	m	struct:WalWriter	file:
pFile	safe/sqlite3.c	/^  sqlite3_file *pFile;            \/* File iterator is reading from *\/$/;"	m	struct:VdbeSorterIter	file:
pFiller	safe/sqlite3.c	/^  void *pFiller;      \/* So that sizeof(Mem) is a multiple of 8 *\/$/;"	m	struct:Mem	file:
pFilter	safe/sqlite3.c	/^  Fts3SegFilter *pFilter;         \/* Pointer to filter object *\/$/;"	m	struct:Fts3MultiSegReader	file:
pFirst	safe/sqlite3.c	/^  FileChunk *pFirst;              \/* Head of in-memory chunk-list *\/$/;"	m	struct:MemJournal	file:
pFirst	safe/sqlite3.c	/^  os2ShmLink *pFirst;        \/* First os2ShmLink object pointing to this *\/$/;"	m	struct:os2ShmNode	file:
pFirst	safe/sqlite3.c	/^  struct MemBlockHdr *pFirst;$/;"	m	struct:	file:
pFirst	safe/sqlite3.c	/^  unixShm *pFirst;           \/* All unixShm objects pointing to this *\/$/;"	m	struct:unixShmNode	file:
pFirst	safe/sqlite3.c	/^  winShm *pFirst;            \/* All winShm objects pointing to this *\/$/;"	m	struct:winShmNode	file:
pForest	safe/sqlite3.c	/^  struct RowSetEntry *pForest;   \/* List of binary trees of entries *\/$/;"	m	struct:RowSet	file:
pFrame	safe/sqlite3.c	/^    VdbeFrame *pFrame;  \/* Used when flags==MEM_Frame *\/$/;"	m	union:Mem::<anonymous>	file:
pFrame	safe/sqlite3.c	/^  VdbeFrame *pFrame;      \/* Parent frame *\/$/;"	m	struct:Vdbe	file:
pFree	safe/sqlite3.c	/^  LookasideSlot *pFree;   \/* List of available buffers *\/$/;"	m	struct:Lookaside	file:
pFree	safe/sqlite3.c	/^  PgFreeslot *pFree;             \/* Free page blocks *\/$/;"	m	struct:PCacheGlobal	file:
pFree	safe/sqlite3.c	/^  void *pFree;            \/* Free this when deleting the vdbe *\/$/;"	m	struct:Vdbe	file:
pFresh	safe/sqlite3.c	/^  struct RowSetEntry *pFresh;    \/* Source of new entry objects *\/$/;"	m	struct:RowSet	file:
pFrom	safe/sqlite3.c	/^  Table *pFrom;     \/* Table containing the REFERENCES clause (aka: Child) *\/$/;"	m	struct:FKey	file:
pFts3Tab	safe/sqlite3.c	/^  Fts3Table *pFts3Tab;$/;"	m	struct:Fts3auxTable	file:
pFunc	safe/sqlite3.c	/^    FuncDef *pFunc;          \/* The aggregate function implementation *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
pFunc	safe/sqlite3.c	/^    FuncDef *pFunc;        \/* Used when p4type is P4_FUNCDEF *\/$/;"	m	union:VdbeOp::<anonymous>	file:
pFunc	safe/sqlite3.c	/^  FuncDef *pFunc;               \/* The definition of the function *\/$/;"	m	struct:VdbeFunc	file:
pFunc	safe/sqlite3.c	/^  FuncDef *pFunc;       \/* Pointer to function information.  MUST BE FIRST *\/$/;"	m	struct:sqlite3_context	file:
pGeom	safe/sqlite3.c	/^  sqlite3_rtree_geometry *pGeom;  \/* Constraint callback argument for a MATCH *\/$/;"	m	struct:RtreeConstraint	file:
pGroup	safe/sqlite3.c	/^  PGroup *pGroup;                     \/* PGroup this cache belongs to *\/$/;"	m	struct:PCache1	file:
pGroupBy	safe/sqlite3.c	/^  ExprList *pGroupBy;     \/* The group by clause *\/$/;"	m	struct:AggInfo	file:
pGroupBy	safe/sqlite3.c	/^  ExprList *pGroupBy;    \/* The GROUP BY clause *\/$/;"	m	struct:Select	file:
pHasContent	safe/sqlite3.c	/^  Bitvec *pHasContent;  \/* Set of pages moved to free-list this transaction *\/$/;"	m	struct:BtShared	file:
pHash	safe/sqlite3.c	/^  FuncDef *pHash;      \/* Next with a different name but the same hash *\/$/;"	m	struct:FuncDef	file:
pHaving	safe/sqlite3.c	/^  Expr *pHaving;         \/* The HAVING clause *\/$/;"	m	struct:Select	file:
pHead	safe/sqlite3.c	/^  char *pHead;                    \/* Position list data following iHead *\/$/;"	m	struct:SnippetPhrase	file:
pHeap	safe/sqlite3.c	/^  void *pHeap;                      \/* Heap storage space *\/$/;"	m	struct:Sqlite3Config	file:
pI64	safe/sqlite3.c	/^    i64 *pI64;             \/* Used when p4type is P4_INT64 *\/$/;"	m	union:VdbeOp::<anonymous>	file:
pId	safe/sqlite3.c	/^  struct vxworksFileId *pId;          \/* Unique file ID *\/$/;"	m	struct:unixFile	file:
pId	safe/sqlite3.c	/^  struct vxworksFileId *pId;  \/* Unique file ID for vxworks. *\/$/;"	m	struct:unixFileId	file:
pIdList	safe/sqlite3.c	/^  IdList *pIdList;     \/* Column names for INSERT *\/$/;"	m	struct:TriggerStep	file:
pIdx	safe/sqlite3.c	/^    Index *pIdx;                   \/* Index when WHERE_INDEXED is true *\/$/;"	m	union:WherePlan::<anonymous>	file:
pIdxInfo	safe/sqlite3.c	/^  sqlite3_index_info *pIdxInfo;  \/* Index info for n-th source table *\/$/;"	m	struct:WhereLevel	file:
pInJournal	safe/sqlite3.c	/^  Bitvec *pInJournal;         \/* One bit for each page in the database file *\/$/;"	m	struct:Pager	file:
pInSavepoint	safe/sqlite3.c	/^  Bitvec *pInSavepoint;        \/* Set of pages in this savepoint *\/$/;"	m	struct:PagerSavepoint	file:
pIndex	safe/sqlite3.c	/^    Index *pIndex;    \/* Index structure corresponding to zIndex, if any *\/$/;"	m	struct:SrcList::SrcList_item	file:
pIndex	safe/sqlite3.c	/^  Index *pIndex;       \/* List of SQL indexes on this table. *\/$/;"	m	struct:Table	file:
pInitMutex	safe/sqlite3.c	/^  sqlite3_mutex *pInitMutex;        \/* Mutex used by sqlite3_initialize() *\/$/;"	m	struct:Sqlite3Config	file:
pInode	safe/sqlite3.c	/^  unixInodeInfo *pInode;              \/* Info about locks on this inode *\/$/;"	m	struct:unixFile	file:
pInode	safe/sqlite3.c	/^  unixInodeInfo *pInode;     \/* unixInodeInfo that owns this SHM node *\/$/;"	m	struct:unixShmNode	file:
pInput	safe/sqlite3.c	/^  const char *pInput;          \/* input we are tokenizing *\/$/;"	m	struct:simple_tokenizer_cursor	file:
pIter	safe/sqlite3.c	/^  UBreakIterator *pIter;      \/* ICU break-iterator object *\/$/;"	m	struct:IcuCursor	file:
pKey	safe/sqlite3.c	/^  const char *pKey; int nKey;  \/* Key associated with this element *\/$/;"	m	struct:HashElem	file:
pKey	safe/sqlite3.c	/^  void *pKey;      \/* Saved key that was cursor's last known position *\/$/;"	m	struct:BtCursor	file:
pKey	safe/sqlite3.c	/^  void *pKey; int nKey;      \/* Key associated with this element *\/$/;"	m	struct:Fts3HashElem	file:
pKeyInfo	safe/sqlite3.c	/^    KeyInfo *pKeyInfo;     \/* Used when p4type is P4_KEYINFO *\/$/;"	m	union:VdbeOp::<anonymous>	file:
pKeyInfo	safe/sqlite3.c	/^  KeyInfo *pKeyInfo;    \/* Info about index keys needed by index cursors *\/$/;"	m	struct:VdbeCursor	file:
pKeyInfo	safe/sqlite3.c	/^  KeyInfo *pKeyInfo;  \/* Collation and sort-order information *\/$/;"	m	struct:UnpackedRecord	file:
pKeyInfo	safe/sqlite3.c	/^  struct KeyInfo *pKeyInfo; \/* Argument passed to comparison function *\/$/;"	m	struct:BtCursor	file:
pLast	safe/sqlite3.c	/^  TriggerStep *pLast;  \/* Last element in link-list. Valid for 1st elem only *\/$/;"	m	struct:TriggerStep	file:
pLast	safe/sqlite3.c	/^  struct MemBlockHdr *pLast;$/;"	m	struct:	file:
pLast	safe/sqlite3.c	/^  struct RowSetEntry *pLast;     \/* Last entry on the pEntry list *\/$/;"	m	struct:RowSet	file:
pLeft	safe/sqlite3.c	/^  Expr *pLeft;           \/* Left subnode *\/$/;"	m	struct:Expr	file:
pLeft	safe/sqlite3.c	/^  Fts3Expr *pLeft;           \/* Left operand *\/$/;"	m	struct:Fts3Expr	file:
pLeft	safe/sqlite3.c	/^  struct RowSetEntry *pLeft;    \/* Left subtree (smaller entries) *\/$/;"	m	struct:RowSetEntry	file:
pLeftmost	safe/sqlite3.c	/^  SegmentNode *pLeftmost;         \/* Pointer to left-most node of this depth *\/$/;"	m	struct:SegmentNode	file:
pLimit	safe/sqlite3.c	/^  Expr *pLimit;          \/* LIMIT expression. NULL means not used. *\/$/;"	m	struct:Select	file:
pLimit	safe/sqlite3.c	/^  Expr *pLimit;    \/* The LIMIT expression.  NULL if there is no limit *\/$/;"	m	struct:LimitVal	file:
pList	safe/sqlite3.c	/^    ExprList *pList;     \/* Function arguments or in "<expr> IN (<expr-list)" *\/$/;"	m	union:Expr::<anonymous>	file:
pList	safe/sqlite3.c	/^  ExprList *pList;$/;"	m	struct:ValueList	file:
pList	safe/sqlite3.c	/^  PendingList *pList;             \/* Doclist is assembled here *\/$/;"	m	struct:Fts3DeferredToken	file:
pList	safe/sqlite3.c	/^  char *pList;                    \/* Pointer to start of phrase position list *\/$/;"	m	struct:SnippetPhrase	file:
pList	safe/sqlite3.c	/^  char *pList;                    \/* Position-list *\/$/;"	m	struct:TermOffset	file:
pList	safe/sqlite3.c	/^  char *pList;                   \/* Pointer to position list following iDocid *\/$/;"	m	struct:Fts3Doclist	file:
pLock	safe/sqlite3.c	/^  BtLock *pLock;        \/* List of locks held on this shared-btree struct *\/$/;"	m	struct:BtShared	file:
pLogArg	safe/sqlite3.c	/^  void *pLogArg;                       \/* First argument to xLog() *\/$/;"	m	struct:Sqlite3Config	file:
pLruHead	safe/sqlite3.c	/^  PgHdr1 *pLruHead, *pLruTail;   \/* LRU list of unpinned pages *\/$/;"	m	struct:PGroup	file:
pLruNext	safe/sqlite3.c	/^  PgHdr1 *pLruNext;              \/* Next in LRU list of unpinned pages *\/$/;"	m	struct:PgHdr1	file:
pLruPrev	safe/sqlite3.c	/^  PgHdr1 *pLruPrev;              \/* Previous in LRU list of unpinned pages *\/$/;"	m	struct:PgHdr1	file:
pLruTail	safe/sqlite3.c	/^  PgHdr1 *pLruHead, *pLruTail;   \/* LRU list of unpinned pages *\/$/;"	m	struct:PGroup	file:
pMap	safe/sqlite3.c	/^    void *pMap;$/;"	m	struct:winShmNode::ShmRegion	file:
pMaskSet	safe/sqlite3.c	/^  WhereMaskSet *pMaskSet;  \/* Mapping of table cursor numbers to bitmasks *\/$/;"	m	struct:WhereClause	file:
pMem	safe/sqlite3.c	/^    Mem *pMem;             \/* Used when p4type is P4_MEM *\/$/;"	m	union:VdbeOp::<anonymous>	file:
pMem	safe/sqlite3.c	/^  Mem *pMem;            \/* Memory cell used to store aggregate context *\/$/;"	m	struct:sqlite3_context	file:
pMethod	safe/sqlite3.c	/^  const sqlite3_io_methods *pMethod;  \/* Always the first entry *\/$/;"	m	struct:os2File	file:
pMethod	safe/sqlite3.c	/^  const sqlite3_io_methods *pMethod; \/*** Must be first ***\/$/;"	m	struct:winFile	file:
pMethod	safe/sqlite3.c	/^  sqlite3_io_methods *pMethod;    \/* I\/O methods on journal files *\/$/;"	m	struct:JournalFile	file:
pMethod	safe/sqlite3.c	/^  sqlite3_io_methods *pMethod;    \/* Parent class. MUST BE FIRST *\/$/;"	m	struct:MemJournal	file:
pMethod	safe/sqlite3.c	/^  sqlite3_io_methods const *pMethod;  \/* Always the first entry *\/$/;"	m	struct:unixFile	file:
pMethods	safe/sqlite3.c	/^  const struct sqlite3_io_methods *pMethods;  \/* Methods for an open file *\/$/;"	m	struct:sqlite3_file	file:
pMethods	safe/sqlite3.h	/^  const struct sqlite3_io_methods *pMethods;  \/* Methods for an open file *\/$/;"	m	struct:sqlite3_file
pMod	safe/sqlite3.c	/^  Module *pMod;             \/* Pointer to module implementation *\/$/;"	m	struct:VTable	file:
pModule	safe/sqlite3.c	/^  const sqlite3_module *pModule;       \/* Callback pointers *\/$/;"	m	struct:Module	file:
pModule	safe/sqlite3.c	/^  const sqlite3_module *pModule;     \/* Module for cursor pVtabCursor *\/$/;"	m	struct:VdbeCursor	file:
pModule	safe/sqlite3.c	/^  const sqlite3_module *pModule;  \/* The module for this virtual table *\/$/;"	m	struct:sqlite3_vtab	file:
pModule	safe/sqlite3.c	/^  const sqlite3_tokenizer_module *pModule;  \/* The module for this tokenizer *\/$/;"	m	struct:sqlite3_tokenizer	file:
pModule	safe/sqlite3.h	/^  const sqlite3_module *pModule;  \/* The module for this virtual table *\/$/;"	m	struct:sqlite3_vtab
pNC	safe/sqlite3.c	/^    NameContext *pNC;                          \/* Naming context *\/$/;"	m	union:Walker::<anonymous>	file:
pName	safe/sqlite3.c	/^  const Token *pName; \/* Name of the container - used for error messages *\/$/;"	m	struct:DbFixer	file:
pNewTable	safe/sqlite3.c	/^  Table *pNewTable;         \/* A table being constructed by CREATE TABLE *\/$/;"	m	struct:Parse	file:
pNewTrigger	safe/sqlite3.c	/^  Trigger *pNewTrigger;     \/* Trigger under construct by a CREATE TRIGGER *\/$/;"	m	struct:Parse	file:
pNext	safe/sqlite3.c	/^  AutoincInfo *pNext;   \/* Next info block in a list of them all *\/$/;"	m	struct:AutoincInfo	file:
pNext	safe/sqlite3.c	/^  BtCursor *pNext, *pPrev;  \/* Forms a linked list of all cursors *\/$/;"	m	struct:BtCursor	file:
pNext	safe/sqlite3.c	/^  BtLock *pNext;        \/* Next in BtShared.pLock list *\/$/;"	m	struct:BtLock	file:
pNext	safe/sqlite3.c	/^  BtShared *pNext;      \/* Next on a list of sharable BtShared structs *\/$/;"	m	struct:BtShared	file:
pNext	safe/sqlite3.c	/^  Btree *pNext;      \/* List of other sharable Btrees from the same db *\/$/;"	m	struct:Btree	file:
pNext	safe/sqlite3.c	/^  FileChunk *pNext;               \/* Next chunk in the journal *\/$/;"	m	struct:FileChunk	file:
pNext	safe/sqlite3.c	/^  Fts3DeferredToken *pNext;       \/* Next in list of deferred tokens *\/$/;"	m	struct:Fts3DeferredToken	file:
pNext	safe/sqlite3.c	/^  FuncDef *pNext;      \/* Next function with same name *\/$/;"	m	struct:FuncDef	file:
pNext	safe/sqlite3.c	/^  Index *pNext;    \/* The next index associated with the same table *\/$/;"	m	struct:Index	file:
pNext	safe/sqlite3.c	/^  LookasideSlot *pNext;    \/* Next buffer in the list of free buffers *\/$/;"	m	struct:LookasideSlot	file:
pNext	safe/sqlite3.c	/^  NameContext *pNext;  \/* Next outer name context.  NULL for outermost *\/$/;"	m	struct:NameContext	file:
pNext	safe/sqlite3.c	/^  PgFreeslot *pNext;  \/* Next free slot *\/$/;"	m	struct:PgFreeslot	file:
pNext	safe/sqlite3.c	/^  PgHdr1 *pNext;                 \/* Next in hash table chain *\/$/;"	m	struct:PgHdr1	file:
pNext	safe/sqlite3.c	/^  RtreeNode *pNext;                 \/* Next node in this hash chain *\/$/;"	m	struct:RtreeNode	file:
pNext	safe/sqlite3.c	/^  Savepoint *pNext;                   \/* Parent savepoint (if any) *\/$/;"	m	struct:Savepoint	file:
pNext	safe/sqlite3.c	/^  Select *pNext;         \/* Next select to the left in a compound *\/$/;"	m	struct:Select	file:
pNext	safe/sqlite3.c	/^  SorterRecord *pNext;$/;"	m	struct:SorterRecord	file:
pNext	safe/sqlite3.c	/^  SubProgram *pNext;            \/* Next sub-program already visited *\/$/;"	m	struct:SubProgram	file:
pNext	safe/sqlite3.c	/^  Trigger *pNext;         \/* Next trigger associated with the table *\/$/;"	m	struct:Trigger	file:
pNext	safe/sqlite3.c	/^  TriggerPrg *pNext;      \/* Next entry in Parse.pTriggerPrg list *\/$/;"	m	struct:TriggerPrg	file:
pNext	safe/sqlite3.c	/^  TriggerStep *pNext;  \/* Next in the link-list *\/$/;"	m	struct:TriggerStep	file:
pNext	safe/sqlite3.c	/^  UnixUnusedFd *pNext;      \/* Next unused file descriptor on same file *\/$/;"	m	struct:UnixUnusedFd	file:
pNext	safe/sqlite3.c	/^  VTable *pNext;            \/* Next in linked list (see above) *\/$/;"	m	struct:VTable	file:
pNext	safe/sqlite3.c	/^  Vdbe *pPrev,*pNext;     \/* Linked list of VDBEs with the same Vdbe.db *\/$/;"	m	struct:Vdbe	file:
pNext	safe/sqlite3.c	/^  os2ShmLink *pNext;         \/* Next os2Shm with the same os2ShmNode *\/$/;"	m	struct:os2ShmLink	file:
pNext	safe/sqlite3.c	/^  os2ShmNode *pNext;         \/* Next in list of all os2ShmNode objects *\/$/;"	m	struct:os2ShmNode	file:
pNext	safe/sqlite3.c	/^  sqlite3_backup *pNext;   \/* Next backup associated with source pager *\/$/;"	m	struct:sqlite3_backup	file:
pNext	safe/sqlite3.c	/^  sqlite3_vfs *pNext;      \/* Next registered VFS *\/$/;"	m	struct:sqlite3_vfs	file:
pNext	safe/sqlite3.c	/^  struct MemBlockHdr *pNext, *pPrev;  \/* Linked list of all unfreed memory *\/$/;"	m	struct:MemBlockHdr	file:
pNext	safe/sqlite3.c	/^  struct ScratchFreeslot *pNext;   \/* Next unused scratch buffer *\/$/;"	m	struct:ScratchFreeslot	file:
pNext	safe/sqlite3.c	/^  struct vxworksFileId *pNext;  \/* Next in a list of them all *\/$/;"	m	struct:vxworksFileId	file:
pNext	safe/sqlite3.c	/^  unixInodeInfo *pNext;           \/* List of all unixInodeInfo objects *\/$/;"	m	struct:unixInodeInfo	file:
pNext	safe/sqlite3.c	/^  unixShm *pNext;            \/* Next unixShm with the same unixShmNode *\/$/;"	m	struct:unixShm	file:
pNext	safe/sqlite3.c	/^  winShm *pNext;             \/* Next winShm with the same winShmNode *\/$/;"	m	struct:winShm	file:
pNext	safe/sqlite3.c	/^  winShmNode *pNext;         \/* Next in list of all winShmNode objects *\/$/;"	m	struct:winShmNode	file:
pNext	safe/sqlite3.h	/^  sqlite3_vfs *pNext;      \/* Next registered VFS *\/$/;"	m	struct:sqlite3_vfs
pNextBlocked	safe/sqlite3.c	/^  sqlite3 *pNextBlocked;        \/* Next in list of all blocked connections *\/$/;"	m	struct:sqlite3	file:
pNextChunk	safe/sqlite3.c	/^  struct RowSetChunk *pNextChunk;        \/* Next chunk on list of them all *\/$/;"	m	struct:RowSetChunk	file:
pNextDocid	safe/sqlite3.c	/^  char *pNextDocid;              \/* Pointer to next docid *\/$/;"	m	struct:Fts3Doclist	file:
pNextFrom	safe/sqlite3.c	/^  FKey *pNextFrom;  \/* Next foreign key in pFrom *\/$/;"	m	struct:FKey	file:
pNextId	safe/sqlite3.c	/^  char *pNextId;                  \/* Pointer into the body of aDoclist *\/$/;"	m	struct:Fts3Cursor	file:
pNextTo	safe/sqlite3.c	/^  FKey *pNextTo;    \/* Next foreign key on table named zTo *\/$/;"	m	struct:FKey	file:
pNextZombie	safe/sqlite3.c	/^  Table *pNextZombie;  \/* Next on the Parse.pZombieTab list *\/$/;"	m	struct:Table	file:
pNode	safe/sqlite3.c	/^  RtreeNode *pNode;                 \/* Node cursor is currently pointing at *\/$/;"	m	struct:RtreeCursor	file:
pOffset	safe/sqlite3.c	/^  Expr *pOffset;         \/* OFFSET expression. NULL means not used. *\/$/;"	m	struct:Select	file:
pOffset	safe/sqlite3.c	/^  Expr *pOffset;   \/* The OFFSET expression.  NULL if there is none *\/$/;"	m	struct:LimitVal	file:
pOffsetList	safe/sqlite3.c	/^  char *pOffsetList;$/;"	m	struct:Fts3SegReader	file:
pOldMethod	safe/sqlite3.c	/^  sqlite3_io_methods const *pOldMethod;     \/* Original I\/O methods for close *\/$/;"	m	struct:proxyLockingContext	file:
pOn	safe/sqlite3.c	/^    Expr *pOn;        \/* The ON clause of a join *\/$/;"	m	struct:SrcList::SrcList_item	file:
pOrInfo	safe/sqlite3.c	/^    WhereOrInfo *pOrInfo;   \/* Extra information if eOperator==WO_OR *\/$/;"	m	union:WhereTerm::<anonymous>	file:
pOrderBy	safe/sqlite3.c	/^  ExprList *pOrderBy;    \/* The ORDER BY clause *\/$/;"	m	struct:Select	file:
pOuter	safe/sqlite3.c	/^  WhereClause *pOuter;     \/* Outer conjunction *\/$/;"	m	struct:WhereClause	file:
pPCache	safe/sqlite3.c	/^  PCache *pPCache;            \/* Pointer to page cache object *\/$/;"	m	struct:Pager	file:
pPage	safe/sqlite3.c	/^  sqlite3_pcache_page *pPage;    \/* Pcache object page handle *\/$/;"	m	struct:PgHdr	file:
pPage	safe/sqlite3.c	/^  void *pPage;                      \/* Page cache memory *\/$/;"	m	struct:Sqlite3Config	file:
pPage1	safe/sqlite3.c	/^  MemPage *pPage1;      \/* First page of the database *\/$/;"	m	struct:BtShared	file:
pPage1	safe/sqlite3.c	/^  PgHdr *pPage1;                      \/* Reference to page 1 *\/$/;"	m	struct:PCache	file:
pPager	safe/sqlite3.c	/^  Pager *pPager;                 \/* The pager this page is part of *\/$/;"	m	struct:PgHdr	file:
pPager	safe/sqlite3.c	/^  Pager *pPager;        \/* The page cache *\/$/;"	m	struct:BtShared	file:
pPager	safe/sqlite3.c	/^  Pager *pPager;    \/* The associated pager.  Also accessible by pBt->pPager *\/$/;"	m	struct:IntegrityCk	file:
pParent	safe/sqlite3.c	/^  Fts3Expr *pParent;         \/* pParent->pLeft==this or pParent->pRight==this *\/$/;"	m	struct:Fts3Expr	file:
pParent	safe/sqlite3.c	/^  RtreeNode *pParent;               \/* Parent node *\/$/;"	m	struct:RtreeNode	file:
pParent	safe/sqlite3.c	/^  SegmentNode *pParent;           \/* Parent node (or NULL for root node) *\/$/;"	m	struct:SegmentNode	file:
pParent	safe/sqlite3.c	/^  VdbeFrame *pParent;     \/* Parent of this frame, or NULL if parent is main *\/$/;"	m	struct:VdbeFrame	file:
pParse	safe/sqlite3.c	/^  Parse *pParse;                            \/* Parser context.  *\/$/;"	m	struct:Walker	file:
pParse	safe/sqlite3.c	/^  Parse *pParse;              \/* The Parse structure *\/$/;"	m	struct:AuthContext	file:
pParse	safe/sqlite3.c	/^  Parse *pParse;           \/* The parser context *\/$/;"	m	struct:WhereClause	file:
pParse	safe/sqlite3.c	/^  Parse *pParse;       \/* Parsing and code generating context *\/$/;"	m	struct:WhereInfo	file:
pParse	safe/sqlite3.c	/^  Parse *pParse;       \/* The parser *\/$/;"	m	struct:NameContext	file:
pParse	safe/sqlite3.c	/^  Parse *pParse;      \/* The parsing context.  Error messages written here *\/$/;"	m	struct:DbFixer	file:
pPhrase	safe/sqlite3.c	/^  Fts3Phrase *pPhrase;            \/* The phrase the token belongs to *\/$/;"	m	struct:Fts3TokenAndCost	file:
pPhrase	safe/sqlite3.c	/^  Fts3Phrase *pPhrase;       \/* Valid if eType==FTSQUERY_PHRASE *\/$/;"	m	struct:Fts3Expr	file:
pPrev	safe/sqlite3.c	/^  BtCursor *pNext, *pPrev;  \/* Forms a linked list of all cursors *\/$/;"	m	struct:BtCursor	file:
pPrev	safe/sqlite3.c	/^  Btree *pPrev;      \/* Back pointer of the same list *\/$/;"	m	struct:Btree	file:
pPrev	safe/sqlite3.c	/^  Vdbe *pPrev,*pNext;     \/* Linked list of VDBEs with the same Vdbe.db *\/$/;"	m	struct:Vdbe	file:
pPrev	safe/sqlite3.c	/^  struct MemBlockHdr *pNext, *pPrev;  \/* Linked list of all unfreed memory *\/$/;"	m	struct:MemBlockHdr	file:
pPrev	safe/sqlite3.c	/^  unixInodeInfo *pPrev;           \/*    .... doubly linked *\/$/;"	m	struct:unixInodeInfo	file:
pPrevTo	safe/sqlite3.c	/^  FKey *pPrevTo;    \/* Previous foreign key on table named zTo *\/$/;"	m	struct:FKey	file:
pPrior	safe/sqlite3.c	/^  Select *pPrior;        \/* Prior select in a compound select statement *\/$/;"	m	struct:Select	file:
pProfileArg	safe/sqlite3.c	/^  void *pProfileArg;                        \/* Argument to profile function *\/$/;"	m	struct:sqlite3	file:
pProgram	safe/sqlite3.c	/^    SubProgram *pProgram;  \/* Used when p4type is P4_SUBPROGRAM *\/$/;"	m	union:VdbeOp::<anonymous>	file:
pProgram	safe/sqlite3.c	/^  SubProgram *pProgram;   \/* Linked list of all sub-programs used by VM *\/$/;"	m	struct:Vdbe	file:
pProgram	safe/sqlite3.c	/^  SubProgram *pProgram;   \/* Program implementing pTrigger\/orconf *\/$/;"	m	struct:TriggerPrg	file:
pProgressArg	safe/sqlite3.c	/^  void *pProgressArg;           \/* Argument to the progress callback *\/$/;"	m	struct:sqlite3	file:
pRead	safe/sqlite3.c	/^  char *pRead;                    \/* Cursor used to iterate through aDoclist *\/$/;"	m	struct:LcsIterator	file:
pReadNode	safe/sqlite3.c	/^  sqlite3_stmt *pReadNode;$/;"	m	struct:Rtree	file:
pReadParent	safe/sqlite3.c	/^  sqlite3_stmt *pReadParent;$/;"	m	struct:Rtree	file:
pReadRowid	safe/sqlite3.c	/^  sqlite3_stmt *pReadRowid;$/;"	m	struct:Rtree	file:
pReal	safe/sqlite3.c	/^    double *pReal;         \/* Used when p4type is P4_REAL *\/$/;"	m	union:VdbeOp::<anonymous>	file:
pReal	safe/sqlite3.c	/^  sqlite3_file *pReal;            \/* The "real" underlying file descriptor *\/$/;"	m	struct:JournalFile	file:
pRecord	safe/sqlite3.c	/^  SorterRecord *pRecord;          \/* Head of in-memory record list *\/$/;"	m	struct:VdbeSorter	file:
pReprepare	safe/sqlite3.c	/^  Vdbe *pReprepare;         \/* VM being reprepared (sqlite3Reprepare()) *\/$/;"	m	struct:Parse	file:
pResultSet	safe/sqlite3.c	/^  Mem *pResultSet;        \/* Pointer to an array of results *\/$/;"	m	struct:Vdbe	file:
pRight	safe/sqlite3.c	/^  Expr *pRight;          \/* Right subnode *\/$/;"	m	struct:Expr	file:
pRight	safe/sqlite3.c	/^  Fts3Expr *pRight;          \/* Right operand *\/$/;"	m	struct:Fts3Expr	file:
pRight	safe/sqlite3.c	/^  SegmentNode *pRight;            \/* Pointer to right-sibling *\/$/;"	m	struct:SegmentNode	file:
pRight	safe/sqlite3.c	/^  struct RowSetEntry *pRight;   \/* Right subtree (larger entries) or list *\/$/;"	m	struct:RowSetEntry	file:
pRightmost	safe/sqlite3.c	/^  Select *pRightmost;    \/* Right-most select in a compound select statement *\/$/;"	m	struct:Select	file:
pRollbackArg	safe/sqlite3.c	/^  void *pRollbackArg;               \/* Argument to xRollbackCallback() *\/   $/;"	m	struct:sqlite3	file:
pRoot	safe/sqlite3.c	/^  Fts3Expr *pRoot;                \/* Root of NEAR\/AND cluster *\/$/;"	m	struct:Fts3TokenAndCost	file:
pRowSet	safe/sqlite3.c	/^    RowSet *pRowSet;    \/* Used only when flags==MEM_RowSet *\/$/;"	m	union:Mem::<anonymous>	file:
pSavepoint	safe/sqlite3.c	/^  Savepoint *pSavepoint;        \/* List of active savepoints *\/$/;"	m	struct:sqlite3	file:
pSchema	safe/sqlite3.c	/^  Schema *pSchema;        \/* Schema containing the trigger *\/$/;"	m	struct:Trigger	file:
pSchema	safe/sqlite3.c	/^  Schema *pSchema;     \/* Pointer to database schema (possibly shared) *\/$/;"	m	struct:Db	file:
pSchema	safe/sqlite3.c	/^  Schema *pSchema;     \/* Schema that contains this table *\/$/;"	m	struct:Table	file:
pSchema	safe/sqlite3.c	/^  Schema *pSchema; \/* Schema containing this index *\/$/;"	m	struct:Index	file:
pSchema	safe/sqlite3.c	/^  void *pSchema;        \/* Pointer to space allocated by sqlite3BtreeSchema() *\/$/;"	m	struct:BtShared	file:
pScopyFrom	safe/sqlite3.c	/^  Mem *pScopyFrom;    \/* This Mem is a shallow copy of pScopyFrom *\/$/;"	m	struct:Mem	file:
pScratch	safe/sqlite3.c	/^  void *pScratch;                   \/* Scratch memory *\/$/;"	m	struct:Sqlite3Config	file:
pScratchEnd	safe/sqlite3.c	/^  void *pScratchEnd;$/;"	m	struct:Mem0Global	file:
pScratchFree	safe/sqlite3.c	/^  ScratchFreeslot *pScratchFree;$/;"	m	struct:Mem0Global	file:
pSegcsr	safe/sqlite3.c	/^  Fts3MultiSegReader *pSegcsr;    \/* Segment-reader for this token *\/$/;"	m	struct:Fts3PhraseToken	file:
pSegments	safe/sqlite3.c	/^  sqlite3_blob *pSegments;        \/* Blob handle open on %_segments table *\/$/;"	m	struct:Fts3Table	file:
pSelect	safe/sqlite3.c	/^    Select *pSelect;     \/* Used for sub-selects and "<expr> IN (<select>)" *\/$/;"	m	union:Expr::<anonymous>	file:
pSelect	safe/sqlite3.c	/^    Select *pSelect;  \/* A SELECT statement used in place of a table name *\/$/;"	m	struct:SrcList::SrcList_item	file:
pSelect	safe/sqlite3.c	/^  Select *pSelect;     \/* NULL for tables.  Points to definition if a view. *\/$/;"	m	struct:Table	file:
pSelect	safe/sqlite3.c	/^  Select *pSelect;     \/* SELECT statment or RHS of INSERT INTO .. SELECT ... *\/$/;"	m	struct:TriggerStep	file:
pSelect	safe/sqlite3.c	/^  Select *pSelect;$/;"	m	struct:ValueList	file:
pSem	safe/sqlite3.c	/^  sem_t *pSem;                    \/* Named POSIX semaphore *\/$/;"	m	struct:unixInodeInfo	file:
pSeqTab	safe/sqlite3.c	/^  Table *pSeqTab;      \/* The sqlite_sequence table used by AUTOINCREMENT *\/$/;"	m	struct:Schema	file:
pShm	safe/sqlite3.c	/^  unixShm *pShm;                      \/* Shared memory segment information *\/$/;"	m	struct:unixFile	file:
pShm	safe/sqlite3.c	/^  winShm *pShm;           \/* Instance of shared memory on this file *\/$/;"	m	struct:winFile	file:
pShmLink	safe/sqlite3.c	/^  os2ShmLink *pShmLink;     \/* Instance of shared memory on this file *\/$/;"	m	struct:os2File	file:
pShmNode	safe/sqlite3.c	/^  os2ShmNode *pShmNode;      \/* The underlying os2ShmNode object *\/$/;"	m	struct:os2ShmLink	file:
pShmNode	safe/sqlite3.c	/^  unixShmNode *pShmNode;          \/* Shared memory associated with this inode *\/$/;"	m	struct:unixInodeInfo	file:
pShmNode	safe/sqlite3.c	/^  unixShmNode *pShmNode;     \/* The underlying unixShmNode object *\/$/;"	m	struct:unixShm	file:
pShmNode	safe/sqlite3.c	/^  winShmNode *pShmNode;      \/* The underlying winShmNode object *\/$/;"	m	struct:winShm	file:
pSorter	safe/sqlite3.c	/^  VdbeSorter *pSorter;  \/* Sorter object for OP_SorterOpen cursors *\/$/;"	m	struct:VdbeCursor	file:
pSrc	safe/sqlite3.c	/^  Btree *pSrc;             \/* Source b-tree file *\/$/;"	m	struct:sqlite3_backup	file:
pSrc	safe/sqlite3.c	/^  SrcList *pSrc;         \/* The FROM clause *\/$/;"	m	struct:Select	file:
pSrcDb	safe/sqlite3.c	/^  sqlite3* pSrcDb;         \/* Source database handle *\/$/;"	m	struct:sqlite3_backup	file:
pSrcList	safe/sqlite3.c	/^    SrcList *pSrcList;                         \/* FROM clause *\/$/;"	m	union:Walker::<anonymous>	file:
pSrcList	safe/sqlite3.c	/^  SrcList *pSrcList;   \/* One or more tables used to resolve names *\/$/;"	m	struct:NameContext	file:
pStart	safe/sqlite3.c	/^  void *pStart, *pEnd;           \/* Bounds of pagecache malloc range *\/$/;"	m	struct:PCacheGlobal	file:
pStart	safe/sqlite3.c	/^  void *pStart;           \/* First byte of available memory space *\/$/;"	m	struct:Lookaside	file:
pStmt	safe/sqlite3.c	/^  sqlite3_stmt *pStmt;            \/* Prepared statement in use by the cursor *\/$/;"	m	struct:Fts3Cursor	file:
pStmt	safe/sqlite3.c	/^  sqlite3_stmt *pStmt;    \/* Statement holding cursor open *\/$/;"	m	struct:Incrblob	file:
pStress	safe/sqlite3.c	/^  void *pStress;                      \/* Argument to xStress *\/$/;"	m	struct:PCache	file:
pSynced	safe/sqlite3.c	/^  PgHdr *pSynced;                     \/* Last synced page in dirty page list *\/$/;"	m	struct:PCache	file:
pTab	safe/sqlite3.c	/^    Table *pTab;             \/* Source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
pTab	safe/sqlite3.c	/^    Table *pTab;      \/* An SQL table corresponding to zName *\/$/;"	m	struct:SrcList::SrcList_item	file:
pTab	safe/sqlite3.c	/^  Table *pTab;           \/* Table for TK_COLUMN expressions. *\/$/;"	m	struct:Expr	file:
pTab	safe/sqlite3.c	/^  Table *pTab;          \/* Table this info block refers to *\/$/;"	m	struct:AutoincInfo	file:
pTab	safe/sqlite3.c	/^  Table *pTab;        \/* The Table object to which the virtual table belongs *\/$/;"	m	struct:VtabCtx	file:
pTabList	safe/sqlite3.c	/^  SrcList *pTabList;             \/* List of tables in the join *\/$/;"	m	struct:WhereInfo	file:
pTabSchema	safe/sqlite3.c	/^  Schema *pTabSchema;     \/* Schema containing the table *\/$/;"	m	struct:Trigger	file:
pTable	safe/sqlite3.c	/^  Table *pTable;   \/* The SQL table being indexed *\/$/;"	m	struct:Index	file:
pTail	safe/sqlite3.c	/^  char *pTail;                    \/* Position list data following iTail *\/$/;"	m	struct:SnippetPhrase	file:
pTemp1	safe/sqlite3.c	/^  sqlite3_file *pTemp1;           \/* PMA file 1 *\/$/;"	m	struct:VdbeSorter	file:
pTerm	safe/sqlite3.c	/^    struct WhereTerm *pTerm;       \/* WHERE clause term for OR-search *\/$/;"	m	union:WherePlan::<anonymous>	file:
pTmpSpace	safe/sqlite3.c	/^  char *pTmpSpace;            \/* Pager.pageSize bytes of space for tmp use *\/$/;"	m	struct:Pager	file:
pTmpSpace	safe/sqlite3.c	/^  u8 *pTmpSpace;        \/* BtShared.pageSize bytes of space for tmp use *\/$/;"	m	struct:BtShared	file:
pToken	safe/sqlite3.c	/^  Fts3PhraseToken *pToken;        \/* Pointer to corresponding expr token *\/$/;"	m	struct:Fts3DeferredToken	file:
pToken	safe/sqlite3.c	/^  Fts3PhraseToken *pToken;        \/* The token itself *\/$/;"	m	struct:Fts3TokenAndCost	file:
pToken	safe/sqlite3.c	/^  char *pToken;                \/* storage for current token *\/$/;"	m	struct:simple_tokenizer_cursor	file:
pTokenizer	safe/sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;       \/* Tokenizer for this cursor. *\/$/;"	m	struct:sqlite3_tokenizer_cursor	file:
pTokenizer	safe/sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;      \/* Tokenizer module *\/$/;"	m	struct:ParseContext	file:
pTokenizer	safe/sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;  \/* tokenizer for inserts and queries *\/$/;"	m	struct:Fts3Table	file:
pToplevel	safe/sqlite3.c	/^  Parse *pToplevel;    \/* Parse structure for main program (or NULL) *\/$/;"	m	struct:Parse	file:
pTraceArg	safe/sqlite3.c	/^  void *pTraceArg;                          \/* Argument to the trace function *\/$/;"	m	struct:sqlite3	file:
pTree	safe/sqlite3.c	/^  SegmentNode *pTree;             \/* Pointer to interior tree structure *\/$/;"	m	struct:SegmentWriter	file:
pTrig	safe/sqlite3.c	/^  Trigger *pTrig;      \/* The trigger that this step is a part of *\/$/;"	m	struct:TriggerStep	file:
pTrigger	safe/sqlite3.c	/^  Trigger *pTrigger;      \/* Trigger this program was coded from *\/$/;"	m	struct:TriggerPrg	file:
pTrigger	safe/sqlite3.c	/^  Trigger *pTrigger;   \/* List of triggers stored in pSchema *\/$/;"	m	struct:Table	file:
pTrigger	safe/sqlite3.c	101695;"	d	file:
pTrigger	safe/sqlite3.c	102117;"	d	file:
pTrigger	safe/sqlite3.c	86776;"	d	file:
pTrigger	safe/sqlite3.c	86965;"	d	file:
pTrigger	safe/sqlite3.c	90506;"	d	file:
pTrigger	safe/sqlite3.c	91053;"	d	file:
pTriggerPrg	safe/sqlite3.c	/^  TriggerPrg *pTriggerPrg;  \/* Linked list of coded triggers *\/$/;"	m	struct:Parse	file:
pTriggerTab	safe/sqlite3.c	/^  Table *pTriggerTab;  \/* Table triggers are being coded for *\/$/;"	m	struct:Parse	file:
pUnlockArg	safe/sqlite3.c	/^  void *pUnlockArg;                     \/* Argument to xUnlockNotify *\/$/;"	m	struct:sqlite3	file:
pUnlockConnection	safe/sqlite3.c	/^  sqlite3 *pUnlockConnection;           \/* Connection to watch for unlock *\/$/;"	m	struct:sqlite3	file:
pUnpacked	safe/sqlite3.c	/^  UnpackedRecord *pUnpacked;      \/* Used to unpack keys *\/$/;"	m	struct:VdbeSorter	file:
pUnused	safe/sqlite3.c	/^  UnixUnusedFd *pUnused;              \/* Pre-allocated UnixUnusedFd *\/$/;"	m	struct:unixFile	file:
pUnused	safe/sqlite3.c	/^  UnixUnusedFd *pUnused;          \/* Unused file descriptors to close *\/$/;"	m	struct:unixInodeInfo	file:
pUpdateArg	safe/sqlite3.c	/^  void *pUpdateArg;$/;"	m	struct:sqlite3	file:
pUser	safe/sqlite3.c	/^  void *pUser;                    \/* Callback implementation user data *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
pUser	safe/sqlite3.c	/^  void *pUser;          \/* First argument to xCmp() *\/$/;"	m	struct:CollSeq	file:
pUser	safe/sqlite3.h	/^  void *pUser;                    \/* Callback implementation user data *\/$/;"	m	struct:sqlite3_rtree_geometry
pUserData	safe/sqlite3.c	/^  void *pUserData;     \/* User data parameter *\/$/;"	m	struct:FuncDef	file:
pUserData	safe/sqlite3.c	/^  void *pUserData;$/;"	m	struct:FuncDestructor	file:
pUsing	safe/sqlite3.c	/^    IdList *pUsing;   \/* The USING clause of a join *\/$/;"	m	struct:SrcList::SrcList_item	file:
pVTable	safe/sqlite3.c	/^  VTable *pVTable;     \/* List of VTable objects. *\/$/;"	m	struct:Table	file:
pVTable	safe/sqlite3.c	/^  VTable *pVTable;    \/* The virtual table being constructed *\/$/;"	m	struct:VtabCtx	file:
pVal	safe/sqlite3.c	/^  void *pVal;$/;"	m	struct:SorterRecord	file:
pVdbe	safe/sqlite3.c	/^  Vdbe *pVdbe;         \/* An engine for executing database bytecode *\/$/;"	m	struct:Parse	file:
pVdbe	safe/sqlite3.c	/^  Vdbe *pVdbe;       \/* Attach the explanation to this Vdbe *\/$/;"	m	struct:Explain	file:
pVdbe	safe/sqlite3.c	/^  struct Vdbe *pVdbe;           \/* List of active virtual machines *\/$/;"	m	struct:sqlite3	file:
pVdbeFunc	safe/sqlite3.c	/^    VdbeFunc *pVdbeFunc;   \/* Used when p4type is P4_VDBEFUNC *\/$/;"	m	union:VdbeOp::<anonymous>	file:
pVdbeFunc	safe/sqlite3.c	/^  VdbeFunc *pVdbeFunc;  \/* Auxilary data, if created. *\/$/;"	m	struct:sqlite3_context	file:
pVfs	safe/sqlite3.c	/^  sqlite3_vfs *pVfs;                  \/* The VFS that created this unixFile *\/$/;"	m	struct:unixFile	file:
pVfs	safe/sqlite3.c	/^  sqlite3_vfs *pVfs;              \/* The "real" underlying VFS *\/$/;"	m	struct:JournalFile	file:
pVfs	safe/sqlite3.c	/^  sqlite3_vfs *pVfs;            \/* OS Interface *\/$/;"	m	struct:sqlite3	file:
pVfs	safe/sqlite3.c	/^  sqlite3_vfs *pVfs;          \/* OS functions to use for IO *\/$/;"	m	struct:Pager	file:
pVfs	safe/sqlite3.c	/^  sqlite3_vfs *pVfs;         \/* The VFS used to create pDbFd *\/$/;"	m	struct:Wal	file:
pVfs	safe/sqlite3.c	/^  sqlite3_vfs *pVfs;      \/* The VFS used to open this file *\/$/;"	m	struct:winFile	file:
pVtab	safe/sqlite3.c	/^    VTable *pVtab;         \/* Used when p4type is P4_VTAB *\/$/;"	m	union:VdbeOp::<anonymous>	file:
pVtab	safe/sqlite3.c	/^  sqlite3_vtab *pVtab;      \/* Pointer to vtab instance *\/$/;"	m	struct:VTable	file:
pVtab	safe/sqlite3.c	/^  sqlite3_vtab *pVtab;      \/* Virtual table of this cursor *\/$/;"	m	struct:sqlite3_vtab_cursor	file:
pVtab	safe/sqlite3.h	/^  sqlite3_vtab *pVtab;      \/* Virtual table of this cursor *\/$/;"	m	struct:sqlite3_vtab_cursor
pVtabCtx	safe/sqlite3.c	/^  VtabCtx *pVtabCtx;            \/* Context for active vtab connect\/create *\/$/;"	m	struct:sqlite3	file:
pVtabCursor	safe/sqlite3.c	/^  sqlite3_vtab_cursor *pVtabCursor;  \/* The cursor for a virtual table *\/$/;"	m	struct:VdbeCursor	file:
pVtabIdx	safe/sqlite3.c	/^    sqlite3_index_info *pVtabIdx;  \/* Virtual table index to use *\/$/;"	m	union:WherePlan::<anonymous>	file:
pWC	safe/sqlite3.c	/^  WhereClause *pWC;       \/* The clause this term is part of *\/$/;"	m	struct:WhereTerm	file:
pWC	safe/sqlite3.c	/^  struct WhereClause *pWC;       \/* Decomposition of the WHERE clause *\/$/;"	m	struct:WhereInfo	file:
pWal	safe/sqlite3.c	/^  Wal *pWal;                   \/* The complete WAL information *\/$/;"	m	struct:WalWriter	file:
pWal	safe/sqlite3.c	/^  Wal *pWal;                  \/* Write-ahead log used by "journal_mode=wal" *\/$/;"	m	struct:Pager	file:
pWalArg	safe/sqlite3.c	/^  void *pWalArg;$/;"	m	struct:sqlite3	file:
pWalFd	safe/sqlite3.c	/^  sqlite3_file *pWalFd;      \/* File handle for WAL file *\/$/;"	m	struct:Wal	file:
pWhen	safe/sqlite3.c	/^  Expr *pWhen;            \/* The WHEN clause of the expression (may be NULL) *\/$/;"	m	struct:Trigger	file:
pWhere	safe/sqlite3.c	/^  Expr *pWhere;          \/* The WHERE clause *\/$/;"	m	struct:Select	file:
pWhere	safe/sqlite3.c	/^  Expr *pWhere;        \/* The WHERE clause for DELETE or UPDATE steps *\/$/;"	m	struct:TriggerStep	file:
pWriteNode	safe/sqlite3.c	/^  sqlite3_stmt *pWriteNode;$/;"	m	struct:Rtree	file:
pWriteParent	safe/sqlite3.c	/^  sqlite3_stmt *pWriteParent;$/;"	m	struct:Rtree	file:
pWriteRowid	safe/sqlite3.c	/^  sqlite3_stmt *pWriteRowid;$/;"	m	struct:Rtree	file:
pWriter	safe/sqlite3.c	/^  Btree *pWriter;       \/* Btree with currently open write transaction *\/$/;"	m	struct:BtShared	file:
pZombieTab	safe/sqlite3.c	/^  Table *pZombieTab;        \/* List of Table objects to delete after code gen *\/$/;"	m	struct:Parse	file:
pack_GetPacked	safe/spider.133.c	/^static const char *pack_GetPacked(int *pnLen)$/;"	f	file:
pack_GetPacked	safe/spider.135.c	/^static const char *pack_GetPacked(int *pnLen)$/;"	f	file:
pack_GetPacked	safe/spider.200.c	/^static const char *pack_GetPacked(int *pnLen)$/;"	f	file:
pack_GetPacked	safe/spider.203.c	/^static const char *pack_GetPacked(int *pnLen)$/;"	f	file:
pack_GetPacked	safe/spider.204.c	/^static const char *pack_GetPacked(int *pnLen)$/;"	f	file:
pack_GetPacked	safe/spider.210.c	/^static const char *pack_GetPacked(int *pnLen)$/;"	f	file:
pack_GetPacked	safe/spider.c	/^static const char *pack_GetPacked(int *pnLen)$/;"	f	file:
pack_GetPacked	spider.c	/^static const char *pack_GetPacked(int *pnLen)$/;"	f	file:
pack_GetUnpacked	safe/spider.133.c	/^static const char *pack_GetUnpacked(int *pnLen)$/;"	f	file:
pack_GetUnpacked	safe/spider.135.c	/^static const char *pack_GetUnpacked(int *pnLen)$/;"	f	file:
pack_GetUnpacked	safe/spider.200.c	/^static const char *pack_GetUnpacked(int *pnLen)$/;"	f	file:
pack_GetUnpacked	safe/spider.203.c	/^static const char *pack_GetUnpacked(int *pnLen)$/;"	f	file:
pack_GetUnpacked	safe/spider.204.c	/^static const char *pack_GetUnpacked(int *pnLen)$/;"	f	file:
pack_GetUnpacked	safe/spider.210.c	/^static const char *pack_GetUnpacked(int *pnLen)$/;"	f	file:
pack_GetUnpacked	safe/spider.c	/^static const char *pack_GetUnpacked(int *pnLen)$/;"	f	file:
pack_GetUnpacked	spider.c	/^static const char *pack_GetUnpacked(int *pnLen)$/;"	f	file:
pack_InitPack	safe/spider.133.c	/^static void pack_InitPack()$/;"	f	file:
pack_InitPack	safe/spider.135.c	/^static void pack_InitPack()$/;"	f	file:
pack_InitPack	safe/spider.200.c	/^static void pack_InitPack()$/;"	f	file:
pack_InitPack	safe/spider.203.c	/^static void pack_InitPack()$/;"	f	file:
pack_InitPack	safe/spider.204.c	/^static void pack_InitPack()$/;"	f	file:
pack_InitPack	safe/spider.210.c	/^static void pack_InitPack()$/;"	f	file:
pack_InitPack	safe/spider.c	/^static void pack_InitPack()$/;"	f	file:
pack_InitPack	spider.c	/^static void pack_InitPack()$/;"	f	file:
pack_InitUnpack	safe/spider.133.c	/^static void pack_InitUnpack()$/;"	f	file:
pack_InitUnpack	safe/spider.135.c	/^static void pack_InitUnpack()$/;"	f	file:
pack_InitUnpack	safe/spider.200.c	/^static void pack_InitUnpack()$/;"	f	file:
pack_InitUnpack	safe/spider.203.c	/^static void pack_InitUnpack()$/;"	f	file:
pack_InitUnpack	safe/spider.204.c	/^static void pack_InitUnpack()$/;"	f	file:
pack_InitUnpack	safe/spider.210.c	/^static void pack_InitUnpack()$/;"	f	file:
pack_InitUnpack	safe/spider.c	/^static void pack_InitUnpack()$/;"	f	file:
pack_InitUnpack	spider.c	/^static void pack_InitUnpack()$/;"	f	file:
pack_Pack	safe/spider.133.c	/^static int pack_Pack(const char *data, int nLen)$/;"	f	file:
pack_Pack	safe/spider.135.c	/^static int pack_Pack(const char *data, int nLen)$/;"	f	file:
pack_Pack	safe/spider.200.c	/^static int pack_Pack(const char *data, int nLen)$/;"	f	file:
pack_Pack	safe/spider.203.c	/^static int pack_Pack(const char *data, int nLen)$/;"	f	file:
pack_Pack	safe/spider.204.c	/^static int pack_Pack(const char *data, int nLen)$/;"	f	file:
pack_Pack	safe/spider.210.c	/^static int pack_Pack(const char *data, int nLen)$/;"	f	file:
pack_Pack	safe/spider.c	/^static int pack_Pack(const char *data, int nLen)$/;"	f	file:
pack_Pack	spider.c	/^static int pack_Pack(const char *data, int nLen)$/;"	f	file:
pack_Unpack	safe/spider.133.c	/^static int pack_Unpack(const char *data, int nLen)$/;"	f	file:
pack_Unpack	safe/spider.135.c	/^static int pack_Unpack(const char *data, int nLen)$/;"	f	file:
pack_Unpack	safe/spider.200.c	/^static int pack_Unpack(const char *data, int nLen)$/;"	f	file:
pack_Unpack	safe/spider.203.c	/^static int pack_Unpack(const char *data, int nLen)$/;"	f	file:
pack_Unpack	safe/spider.204.c	/^static int pack_Unpack(const char *data, int nLen)$/;"	f	file:
pack_Unpack	safe/spider.210.c	/^static int pack_Unpack(const char *data, int nLen)$/;"	f	file:
pack_Unpack	safe/spider.c	/^static int pack_Unpack(const char *data, int nLen)$/;"	f	file:
pack_Unpack	spider.c	/^static int pack_Unpack(const char *data, int nLen)$/;"	f	file:
packstrm	safe/spider.133.c	/^z_stream packstrm;$/;"	v
packstrm	safe/spider.135.c	/^z_stream packstrm;$/;"	v
packstrm	safe/spider.200.c	/^z_stream packstrm;$/;"	v
packstrm	safe/spider.203.c	/^z_stream packstrm;$/;"	v
packstrm	safe/spider.204.c	/^z_stream packstrm;$/;"	v
packstrm	safe/spider.210.c	/^z_stream packstrm;$/;"	v
packstrm	safe/spider.c	/^z_stream packstrm;$/;"	v
packstrm	spider.c	/^z_stream packstrm;$/;"	v
padToSectorBoundary	safe/sqlite3.c	/^  u8 padToSectorBoundary;    \/* Pad transactions out to the next sector *\/$/;"	m	struct:Wal	file:
page	safe/sqlite3.c	/^  sqlite3_pcache_page page;$/;"	m	struct:PgHdr1	file:
pageHash	safe/sqlite3.c	/^  u32 pageHash;                  \/* Hash of page content *\/$/;"	m	struct:PgHdr	file:
pageInJournal	safe/sqlite3.c	/^static int pageInJournal(PgHdr *pPg){$/;"	f	file:
pageReinit	safe/sqlite3.c	/^static void pageReinit(DbPage *pData){$/;"	f	file:
pageSize	safe/sqlite3.c	/^  int pageSize;               \/* Number of bytes in a page *\/$/;"	m	struct:Pager	file:
pageSize	safe/sqlite3.c	/^  u32 pageSize;         \/* Total number of bytes on a page *\/$/;"	m	struct:BtShared	file:
pagerBeginReadTransaction	safe/sqlite3.c	/^static int pagerBeginReadTransaction(Pager *pPager){$/;"	f	file:
pagerBeginReadTransaction	safe/sqlite3.c	40044;"	d	file:
pagerExclusiveLock	safe/sqlite3.c	/^static int pagerExclusiveLock(Pager *pPager){$/;"	f	file:
pagerLockDb	safe/sqlite3.c	/^static int pagerLockDb(Pager *pPager, int eLock){$/;"	f	file:
pagerOpenWal	safe/sqlite3.c	/^static int pagerOpenWal(Pager *pPager){$/;"	f	file:
pagerOpenWalIfPresent	safe/sqlite3.c	/^static int pagerOpenWalIfPresent(Pager *pPager){$/;"	f	file:
pagerOpenWalIfPresent	safe/sqlite3.c	40043;"	d	file:
pagerOpentemp	safe/sqlite3.c	/^static int pagerOpentemp($/;"	f	file:
pagerPagecount	safe/sqlite3.c	/^static int pagerPagecount(Pager *pPager, Pgno *pnPage){$/;"	f	file:
pagerPlaybackSavepoint	safe/sqlite3.c	/^static int pagerPlaybackSavepoint(Pager *pPager, PagerSavepoint *pSavepoint){$/;"	f	file:
pagerReportSize	safe/sqlite3.c	/^static void pagerReportSize(Pager *pPager){$/;"	f	file:
pagerReportSize	safe/sqlite3.c	41309;"	d	file:
pagerRollbackWal	safe/sqlite3.c	/^static int pagerRollbackWal(Pager *pPager){$/;"	f	file:
pagerRollbackWal	safe/sqlite3.c	40041;"	d	file:
pagerStress	safe/sqlite3.c	/^static int pagerStress(void *p, PgHdr *pPg){$/;"	f	file:
pagerSyncHotJournal	safe/sqlite3.c	/^static int pagerSyncHotJournal(Pager *pPager){$/;"	f	file:
pagerUndoCallback	safe/sqlite3.c	/^static int pagerUndoCallback(void *pCtx, Pgno iPg){$/;"	f	file:
pagerUnlockAndRollback	safe/sqlite3.c	/^static void pagerUnlockAndRollback(Pager *pPager){$/;"	f	file:
pagerUnlockDb	safe/sqlite3.c	/^static int pagerUnlockDb(Pager *pPager, int eLock){$/;"	f	file:
pagerUnlockIfUnused	safe/sqlite3.c	/^static void pagerUnlockIfUnused(Pager *pPager){$/;"	f	file:
pagerUseWal	safe/sqlite3.c	/^static int pagerUseWal(Pager *pPager){$/;"	f	file:
pagerUseWal	safe/sqlite3.c	40040;"	d	file:
pagerWalFrames	safe/sqlite3.c	/^static int pagerWalFrames($/;"	f	file:
pagerWalFrames	safe/sqlite3.c	40042;"	d	file:
pager_cksum	safe/sqlite3.c	/^static u32 pager_cksum(Pager *pPager, const u8 *aData){$/;"	f	file:
pager_datahash	safe/sqlite3.c	/^static u32 pager_datahash(int nByte, unsigned char *pData){$/;"	f	file:
pager_datahash	safe/sqlite3.c	40425;"	d	file:
pager_delmaster	safe/sqlite3.c	/^static int pager_delmaster(Pager *pPager, const char *zMaster){$/;"	f	file:
pager_end_transaction	safe/sqlite3.c	/^static int pager_end_transaction(Pager *pPager, int hasMaster){$/;"	f	file:
pager_error	safe/sqlite3.c	/^static int pager_error(Pager *pPager, int rc){$/;"	f	file:
pager_incr_changecounter	safe/sqlite3.c	/^static int pager_incr_changecounter(Pager *pPager, int isDirectMode){$/;"	f	file:
pager_lookup	safe/sqlite3.c	/^static PgHdr *pager_lookup(Pager *pPager, Pgno pgno){$/;"	f	file:
pager_open_journal	safe/sqlite3.c	/^static int pager_open_journal(Pager *pPager){$/;"	f	file:
pager_pagehash	safe/sqlite3.c	/^static u32 pager_pagehash(PgHdr *pPage){$/;"	f	file:
pager_pagehash	safe/sqlite3.c	40426;"	d	file:
pager_playback	safe/sqlite3.c	/^static int pager_playback(Pager *pPager, int isHot){$/;"	f	file:
pager_playback_one_page	safe/sqlite3.c	/^static int pager_playback_one_page($/;"	f	file:
pager_reset	safe/sqlite3.c	/^static void pager_reset(Pager *pPager){$/;"	f	file:
pager_set_pagehash	safe/sqlite3.c	/^static void pager_set_pagehash(PgHdr *pPage){$/;"	f	file:
pager_set_pagehash	safe/sqlite3.c	40427;"	d	file:
pager_truncate	safe/sqlite3.c	/^static int pager_truncate(Pager *pPager, Pgno nPage){$/;"	f	file:
pager_unlock	safe/sqlite3.c	/^static void pager_unlock(Pager *pPager){$/;"	f	file:
pager_wait_on_lock	safe/sqlite3.c	/^static int pager_wait_on_lock(Pager *pPager, int locktype){$/;"	f	file:
pager_write	safe/sqlite3.c	/^static int pager_write(PgHdr *pPg){$/;"	f	file:
pager_write_changecounter	safe/sqlite3.c	/^static void pager_write_changecounter(PgHdr *pPg){$/;"	f	file:
pager_write_pagelist	safe/sqlite3.c	/^static int pager_write_pagelist(Pager *pPager, PgHdr *pList){$/;"	f	file:
panic	bin2c.c	/^static void panic()$/;"	f	file:
parent	mtjson.h	/^	struct JSON		*parent;$/;"	m	struct:JSON
parent	safe/mtjson.h	/^	struct JSON		*parent;$/;"	m	struct:JSON
parentWrite	safe/sqlite3.c	/^static int parentWrite(Rtree *pRtree, sqlite3_int64 iNode, sqlite3_int64 iPar){$/;"	f	file:
parseCell	safe/sqlite3.c	51177;"	d	file:
parseDateOrTime	safe/sqlite3.c	/^static int parseDateOrTime($/;"	f	file:
parseHhMmSs	safe/sqlite3.c	/^static int parseHhMmSs(const char *zDate, DateTime *p){$/;"	f	file:
parseModifier	safe/sqlite3.c	/^static int parseModifier(sqlite3_context *pCtx, const char *zMod, DateTime *p){$/;"	f	file:
parseTimezone	safe/sqlite3.c	/^static int parseTimezone(const char *zDate, DateTime *p){$/;"	f	file:
parseYyyyMmDd	safe/sqlite3.c	/^static int parseYyyyMmDd(const char *zDate, DateTime *p){$/;"	f	file:
patternCompare	safe/sqlite3.c	/^static int patternCompare($/;"	f	file:
payloadSize	safe/sqlite3.c	/^  int payloadSize;      \/* Total number of bytes in the record *\/$/;"	m	struct:VdbeCursor	file:
pc	safe/sqlite3.c	/^  int pc;                 \/* Program Counter in parent (calling) frame *\/$/;"	m	struct:VdbeFrame	file:
pc	safe/sqlite3.c	/^  int pc;                 \/* The program counter *\/$/;"	m	struct:Vdbe	file:
pcache1	safe/sqlite3.c	37716;"	d	file:
pcache1Alloc	safe/sqlite3.c	/^static void *pcache1Alloc(int nByte){$/;"	f	file:
pcache1AllocPage	safe/sqlite3.c	/^static PgHdr1 *pcache1AllocPage(PCache1 *pCache){$/;"	f	file:
pcache1Cachesize	safe/sqlite3.c	/^static void pcache1Cachesize(sqlite3_pcache *p, int nMax){$/;"	f	file:
pcache1Create	safe/sqlite3.c	/^static sqlite3_pcache *pcache1Create(int szPage, int szExtra, int bPurgeable){$/;"	f	file:
pcache1Destroy	safe/sqlite3.c	/^static void pcache1Destroy(sqlite3_pcache *p){$/;"	f	file:
pcache1EnforceMaxPage	safe/sqlite3.c	/^static void pcache1EnforceMaxPage(PGroup *pGroup){$/;"	f	file:
pcache1EnterMutex	safe/sqlite3.c	37721;"	d	file:
pcache1Fetch	safe/sqlite3.c	/^static sqlite3_pcache_page *pcache1Fetch($/;"	f	file:
pcache1Free	safe/sqlite3.c	/^static int pcache1Free(void *p){$/;"	f	file:
pcache1FreePage	safe/sqlite3.c	/^static void pcache1FreePage(PgHdr1 *p){$/;"	f	file:
pcache1Init	safe/sqlite3.c	/^static int pcache1Init(void *NotUsed){$/;"	f	file:
pcache1LeaveMutex	safe/sqlite3.c	37722;"	d	file:
pcache1MemSize	safe/sqlite3.c	/^static int pcache1MemSize(void *p){$/;"	f	file:
pcache1Pagecount	safe/sqlite3.c	/^static int pcache1Pagecount(sqlite3_pcache *p){$/;"	f	file:
pcache1PinPage	safe/sqlite3.c	/^static void pcache1PinPage(PgHdr1 *pPage){$/;"	f	file:
pcache1Rekey	safe/sqlite3.c	/^static void pcache1Rekey($/;"	f	file:
pcache1RemoveFromHash	safe/sqlite3.c	/^static void pcache1RemoveFromHash(PgHdr1 *pPage){$/;"	f	file:
pcache1ResizeHash	safe/sqlite3.c	/^static int pcache1ResizeHash(PCache1 *p){$/;"	f	file:
pcache1Shrink	safe/sqlite3.c	/^static void pcache1Shrink(sqlite3_pcache *p){$/;"	f	file:
pcache1Shutdown	safe/sqlite3.c	/^static void pcache1Shutdown(void *NotUsed){$/;"	f	file:
pcache1Truncate	safe/sqlite3.c	/^static void pcache1Truncate(sqlite3_pcache *p, unsigned int iLimit){$/;"	f	file:
pcache1TruncateUnsafe	safe/sqlite3.c	/^static void pcache1TruncateUnsafe($/;"	f	file:
pcache1UnderMemoryPressure	safe/sqlite3.c	/^static int pcache1UnderMemoryPressure(PCache1 *pCache){$/;"	f	file:
pcache1Unpin	safe/sqlite3.c	/^static void pcache1Unpin($/;"	f	file:
pcache1_g	safe/sqlite3.c	/^} pcache1_g;$/;"	v	file:
pcache2	safe/sqlite3.c	/^  sqlite3_pcache_methods2 pcache2;  \/* Low-level page-cache interface *\/$/;"	m	struct:Sqlite3Config	file:
pcacheAddToDirtyList	safe/sqlite3.c	/^static void pcacheAddToDirtyList(PgHdr *pPage){$/;"	f	file:
pcacheCheckSynced	safe/sqlite3.c	/^static int pcacheCheckSynced(PCache *pCache){$/;"	f	file:
pcacheMergeDirtyList	safe/sqlite3.c	/^static PgHdr *pcacheMergeDirtyList(PgHdr *pA, PgHdr *pB){$/;"	f	file:
pcacheRemoveFromDirtyList	safe/sqlite3.c	/^static void pcacheRemoveFromDirtyList(PgHdr *pPage){$/;"	f	file:
pcacheSortDirtyList	safe/sqlite3.c	/^static PgHdr *pcacheSortDirtyList(PgHdr *pIn){$/;"	f	file:
pcacheUnpin	safe/sqlite3.c	/^static void pcacheUnpin(PgHdr *p){$/;"	f	file:
pgno	safe/sqlite3.c	/^  Pgno pgno;                     \/* Page number for this page *\/$/;"	m	struct:PgHdr	file:
pgno	safe/sqlite3.c	/^  Pgno pgno;           \/* Page number for this page *\/$/;"	m	struct:MemPage	file:
pgnoRoot	safe/sqlite3.c	/^  Pgno pgnoRoot;            \/* The root page of this tree *\/$/;"	m	struct:BtCursor	file:
pid	safe/spider.133.c	/^	int			pid;			\/\/ Process ID of the child$/;"	m	struct:childinfo_t	file:
pid	safe/spider.135.c	/^	int			pid;			\/\/ Process ID of the child$/;"	m	struct:childinfo_t	file:
pid	safe/spider.200.c	/^	int			pid;			\/\/ Process ID of the child$/;"	m	struct:childinfo_t	file:
pid	safe/spider.203.c	/^	int			pid;			\/\/ Process ID of the child$/;"	m	struct:childinfo_t	file:
pid	safe/spider.204.c	/^	int			pid;			\/\/ Process ID of the child$/;"	m	struct:childinfo_t	file:
pid	safe/spider.210.c	/^	int			pid;			\/\/ Process ID of the child$/;"	m	struct:childinfo_t	file:
pid	safe/spider.c	/^	int			pid;			\/\/ Process ID of the child$/;"	m	struct:childinfo_t	file:
pid	spider.c	/^	int			pid;			\/\/ Process ID of the child$/;"	m	struct:childinfo_t	file:
pidstr	safe/spider.133.c	/^static const char *pidstr()$/;"	f	file:
pidstr	safe/spider.135.c	/^static const char *pidstr()$/;"	f	file:
pidstr	safe/spider.200.c	/^static const char *pidstr()$/;"	f	file:
pidstr	safe/spider.203.c	/^static const char *pidstr()$/;"	f	file:
pidstr	safe/spider.204.c	/^static const char *pidstr()$/;"	f	file:
pidstr	safe/spider.210.c	/^static const char *pidstr()$/;"	f	file:
pidstr	safe/spider.c	/^static const char *pidstr()$/;"	f	file:
pidstr	spider.c	/^static const char *pidstr()$/;"	f	file:
plan	safe/sqlite3.c	/^  WherePlan plan;       \/* query plan for this element of the FROM clause *\/$/;"	m	struct:WhereLevel	file:
plan	safe/sqlite3.c	/^  WherePlan plan;    \/* The lookup strategy *\/$/;"	m	struct:WhereCost	file:
pnBytesFreed	safe/sqlite3.c	/^  int *pnBytesFreed;            \/* If not NULL, increment this in DbFree() *\/$/;"	m	struct:sqlite3	file:
pool	mtchannel.h	/^	CHANPOOL *pool;					\/\/ The pool this channel is in, if any$/;"	m	struct:CHAN
pool	safe/mtchannel.h	/^	CHANPOOL *pool;					\/\/ The pool this channel is in, if any$/;"	m	struct:CHAN
porterClose	safe/sqlite3.c	/^static int porterClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
porterCreate	safe/sqlite3.c	/^static int porterCreate($/;"	f	file:
porterDestroy	safe/sqlite3.c	/^static int porterDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
porterIdChar	safe/sqlite3.c	/^static const char porterIdChar[] = {$/;"	v	file:
porterNext	safe/sqlite3.c	/^static int porterNext($/;"	f	file:
porterOpen	safe/sqlite3.c	/^static int porterOpen($/;"	f	file:
porterTokenizerModule	safe/sqlite3.c	/^static const sqlite3_tokenizer_module porterTokenizerModule = {$/;"	v	file:
porter_stemmer	safe/sqlite3.c	/^static void porter_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){$/;"	f	file:
porter_tokenizer	safe/sqlite3.c	/^typedef struct porter_tokenizer {$/;"	s	file:
porter_tokenizer	safe/sqlite3.c	/^} porter_tokenizer;$/;"	t	file:
porter_tokenizer_cursor	safe/sqlite3.c	/^typedef struct porter_tokenizer_cursor {$/;"	s	file:
porter_tokenizer_cursor	safe/sqlite3.c	/^} porter_tokenizer_cursor;$/;"	t	file:
posixFchown	safe/sqlite3.c	/^static int posixFchown(int fd, uid_t uid, gid_t gid){$/;"	f	file:
posixOpen	safe/sqlite3.c	/^static int posixOpen(const char *zFile, int flags, int mode){$/;"	f	file:
posixUnlock	safe/sqlite3.c	/^static int posixUnlock(sqlite3_file *id, int eFileLock, int handleNFSUnlock){$/;"	f	file:
ppNextElem	safe/sqlite3.c	/^  Fts3HashElem **ppNextElem;$/;"	m	struct:Fts3SegReader	file:
prefix	safe/sqlite3.c	/^  etByte prefix;           \/* Offset into aPrefix[] of the prefix string *\/$/;"	m	struct:et_info	file:
prepare	safe/sqlite3.c	/^  int  (*prepare)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines	file:
prepare16	safe/sqlite3.c	/^  int  (*prepare16)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines	file:
prepare16_v2	safe/sqlite3.c	/^  int (*prepare16_v2)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines	file:
prepare_v2	safe/sqlite3.c	/^  int (*prepare_v2)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines	file:
prereqAll	safe/sqlite3.c	/^  Bitmask prereqAll;      \/* Bitmask of tables referenced by pExpr *\/$/;"	m	struct:WhereTerm	file:
prereqRight	safe/sqlite3.c	/^  Bitmask prereqRight;    \/* Bitmask of tables used by pExpr->pRight *\/$/;"	m	struct:WhereTerm	file:
prev	mtjson.h	/^	struct JSON *prev;					\/\/ To make a linked list of all JSONs for debug purposes$/;"	m	struct:JSON
prev	safe/sqlite3.c	/^      u32 prev;       \/* Index in mem3.aPool[] of previous free chunk *\/$/;"	m	struct:Mem3Block::<anonymous>::<anonymous>	file:
prev	safe/sqlite3.c	/^  Fts3HashElem *next, *prev; \/* Next and previous elements in the table *\/$/;"	m	struct:Fts3HashElem	file:
prev	safe/sqlite3.c	/^  HashElem *next, *prev;       \/* Next and previous elements in the table *\/$/;"	m	struct:HashElem	file:
prev	safe/sqlite3.c	/^  int prev;       \/* Index of previous free chunk *\/$/;"	m	struct:Mem5Link	file:
prevSize	safe/sqlite3.c	/^      u32 prevSize;   \/* Size of previous chunk in Mem3Block elements *\/$/;"	m	struct:Mem3Block::<anonymous>::<anonymous>	file:
print_pager_state	safe/sqlite3.c	/^static char *print_pager_state(Pager *p){$/;"	f	file:
printfError	bin2c.c	/^static void printfError(const char *format, ...)$/;"	f	file:
priority	mtwamp.c	/^	int	priority;$/;"	m	struct:wamp_invokee_t	file:
procedure	mtwamp.c	/^	const char *procedure;									\/\/ The name of the procedure that these callees handle$/;"	m	struct:wamp_callee_t	file:
processFile	bin2c.c	/^static void processFile(const char *fileName, long int from, long int to)$/;"	f	file:
profile	safe/sqlite3.c	/^  void * (*profile)(sqlite3*,void(*)(void*,const char*,sqlite_uint64),void*);$/;"	m	struct:sqlite3_api_routines	file:
progress_handler	safe/sqlite3.c	/^  void  (*progress_handler)(sqlite3*,int,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:
proxyBreakConchLock	safe/sqlite3.c	/^static int proxyBreakConchLock(unixFile *pFile, uuid_t myHostID){$/;"	f	file:
proxyCheckReservedLock	safe/sqlite3.c	/^static int proxyCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
proxyClose	safe/sqlite3.c	/^static int proxyClose(sqlite3_file *id) {$/;"	f	file:
proxyConchLock	safe/sqlite3.c	/^static int proxyConchLock(unixFile *pFile, uuid_t myHostID, int lockType){$/;"	f	file:
proxyCreateConchPathname	safe/sqlite3.c	/^static int proxyCreateConchPathname(char *dbPath, char **pConchPath){$/;"	f	file:
proxyCreateLockPath	safe/sqlite3.c	/^static int proxyCreateLockPath(const char *lockPath){$/;"	f	file:
proxyCreateUnixFile	safe/sqlite3.c	/^static int proxyCreateUnixFile($/;"	f	file:
proxyFileControl	safe/sqlite3.c	/^static int proxyFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
proxyGetDbPathForUnixFile	safe/sqlite3.c	/^static int proxyGetDbPathForUnixFile(unixFile *pFile, char *dbPath){$/;"	f	file:
proxyGetHostID	safe/sqlite3.c	/^static int proxyGetHostID(unsigned char *pHostID, int *pError){$/;"	f	file:
proxyGetLockPath	safe/sqlite3.c	/^static int proxyGetLockPath(const char *dbPath, char *lPath, size_t maxLen){$/;"	f	file:
proxyLock	safe/sqlite3.c	/^static int proxyLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
proxyLockingContext	safe/sqlite3.c	/^struct proxyLockingContext {$/;"	s	file:
proxyLockingContext	safe/sqlite3.c	/^typedef struct proxyLockingContext proxyLockingContext;$/;"	t	file:
proxyReleaseConch	safe/sqlite3.c	/^static int proxyReleaseConch(unixFile *pFile){$/;"	f	file:
proxyTakeConch	safe/sqlite3.c	/^static int proxyTakeConch(unixFile *pFile){$/;"	f	file:
proxyTransformUnixFile	safe/sqlite3.c	/^static int proxyTransformUnixFile(unixFile *pFile, const char *path) {$/;"	f	file:
proxyUnlock	safe/sqlite3.c	/^static int proxyUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
pseudoTableReg	safe/sqlite3.c	/^  int pseudoTableReg;   \/* Register holding pseudotable content. *\/$/;"	m	struct:VdbeCursor	file:
pszEntry	safe/spider.133.c	/^	char **pszEntry;				\/\/ Most entries$/;"	m	struct:note_t	file:
pszEntry	safe/spider.135.c	/^	char **pszEntry;				\/\/ Most entries$/;"	m	struct:note_t	file:
pszEntry	safe/spider.200.c	/^	char **pszEntry;				\/\/ Most entries$/;"	m	struct:note_t	file:
pszEntry	safe/spider.203.c	/^	char **pszEntry;				\/\/ Most entries$/;"	m	struct:note_t	file:
pszEntry	safe/spider.204.c	/^	char **pszEntry;				\/\/ Most entries$/;"	m	struct:note_t	file:
pszEntry	safe/spider.210.c	/^	char **pszEntry;				\/\/ Most entries$/;"	m	struct:note_t	file:
pszEntry	safe/spider.c	/^	char **pszEntry;				\/\/ Most entries$/;"	m	struct:note_t	file:
pszEntry	spider.c	/^	char **pszEntry;				\/\/ Most entries$/;"	m	struct:note_t	file:
pszMessage	safe/spider.133.c	/^	char **pszMessage;			\/\/ 'M' message entries$/;"	m	struct:note_t	file:
pszMessage	safe/spider.135.c	/^	char **pszMessage;			\/\/ 'M' message entries$/;"	m	struct:note_t	file:
pszMessage	safe/spider.200.c	/^	char **pszMessage;			\/\/ 'M' message entries$/;"	m	struct:note_t	file:
pszMessage	safe/spider.203.c	/^	char **pszMessage;			\/\/ 'M' message entries$/;"	m	struct:note_t	file:
pszMessage	safe/spider.204.c	/^	char **pszMessage;			\/\/ 'M' message entries$/;"	m	struct:note_t	file:
pszMessage	safe/spider.210.c	/^	char **pszMessage;			\/\/ 'M' message entries$/;"	m	struct:note_t	file:
pszMessage	safe/spider.c	/^	char **pszMessage;			\/\/ 'M' message entries$/;"	m	struct:note_t	file:
pszMessage	spider.c	/^	char **pszMessage;			\/\/ 'M' message entries$/;"	m	struct:note_t	file:
pthreadMutexAlloc	safe/sqlite3.c	/^static sqlite3_mutex *pthreadMutexAlloc(int iType){$/;"	f	file:
pthreadMutexEnd	safe/sqlite3.c	/^static int pthreadMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
pthreadMutexEnter	safe/sqlite3.c	/^static void pthreadMutexEnter(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexFree	safe/sqlite3.c	/^static void pthreadMutexFree(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexHeld	safe/sqlite3.c	/^static int pthreadMutexHeld(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexInit	safe/sqlite3.c	/^static int pthreadMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
pthreadMutexLeave	safe/sqlite3.c	/^static void pthreadMutexLeave(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexNotheld	safe/sqlite3.c	/^static int pthreadMutexNotheld(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexTry	safe/sqlite3.c	/^static int pthreadMutexTry(sqlite3_mutex *p){$/;"	f	file:
ptrmapGet	safe/sqlite3.c	/^static int ptrmapGet(BtShared *pBt, Pgno key, u8 *pEType, Pgno *pPgno){$/;"	f	file:
ptrmapGet	safe/sqlite3.c	51066;"	d	file:
ptrmapPageno	safe/sqlite3.c	/^static Pgno ptrmapPageno(BtShared *pBt, Pgno pgno){$/;"	f	file:
ptrmapPut	safe/sqlite3.c	/^static void ptrmapPut(BtShared *pBt, Pgno key, u8 eType, Pgno parent, int *pRC){$/;"	f	file:
ptrmapPut	safe/sqlite3.c	51065;"	d	file:
ptrmapPutOvflPtr	safe/sqlite3.c	/^static void ptrmapPutOvflPtr(MemPage *pPage, u8 *pCell, int *pRC){$/;"	f	file:
ptrmapPutOvflPtr	safe/sqlite3.c	51067;"	d	file:
pubsubPort	spider.c	/^static int pubsubPort = 4512;					\/\/ Currently always listen on 4512$/;"	v	file:
pubsub_AcceptPlain	spider.c	/^static void pubsub_AcceptPlain(int fd)$/;"	f	file:
pubsub_AcceptTls	spider.c	/^static void pubsub_AcceptTls(int fd)$/;"	f	file:
pubsub_OnClientChannelError	spider.c	/^static int pubsub_OnClientChannelError(CHAN *chan)$/;"	f	file:
pubsub_channel_pool	spider.c	/^CHANPOOL *pubsub_channel_pool = NULL;			\/\/ Channel list used in pubsub event loop()$/;"	v
pushOntoSorter	safe/sqlite3.c	/^static void pushOntoSorter($/;"	f	file:
put2byte	safe/sqlite3.c	49942;"	d	file:
put32bits	safe/sqlite3.c	40284;"	d	file:
put4byte	safe/sqlite3.c	49944;"	d	file:
putVarint	safe/sqlite3.c	11952;"	d	file:
putVarint32	safe/sqlite3.c	11950;"	d	file:
pzErrMsg	safe/sqlite3.c	/^  char **pzErrMsg;    \/* Error message stored here *\/$/;"	m	struct:	file:
qdc	safe/spider.210.c	/^	int		qdc;$/;"	m	struct:limits_t	file:
qdc	safe/spider.c	/^	int		qdc;$/;"	m	struct:limits_t	file:
qdc	spider.c	/^	int		qdc;$/;"	m	struct:limits_t	file:
qdt	safe/spider.210.c	/^	int		qdt;$/;"	m	struct:limits_t	file:
qdt	safe/spider.c	/^	int		qdt;$/;"	m	struct:limits_t	file:
qdt	spider.c	/^	int		qdt;$/;"	m	struct:limits_t	file:
qhc	safe/spider.210.c	/^	int		qhc;$/;"	m	struct:limits_t	file:
qhc	safe/spider.c	/^	int		qhc;$/;"	m	struct:limits_t	file:
qhc	spider.c	/^	int		qhc;$/;"	m	struct:limits_t	file:
qht	safe/spider.210.c	/^	int		qht;$/;"	m	struct:limits_t	file:
qht	safe/spider.c	/^	int		qht;$/;"	m	struct:limits_t	file:
qht	spider.c	/^	int		qht;$/;"	m	struct:limits_t	file:
querySharedCacheTableLock	safe/sqlite3.c	/^static int querySharedCacheTableLock(Btree *p, Pgno iTab, u8 eLock){$/;"	f	file:
querySharedCacheTableLock	safe/sqlite3.c	50306;"	d	file:
queryTestTokenizer	safe/sqlite3.c	/^static int queryTestTokenizer($/;"	f	file:
queryTokenizer	safe/sqlite3.c	/^int queryTokenizer($/;"	f	file:
quoteFunc	safe/sqlite3.c	/^static void quoteFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
r	safe/sqlite3.c	/^    double r;       \/* Value if eType is SQLITE_FLOAT *\/$/;"	m	union:IndexSample::<anonymous>	file:
r	safe/sqlite3.c	/^  double r;           \/* Real value *\/$/;"	m	struct:Mem	file:
rCost	safe/sqlite3.c	/^  double rCost;      \/* Overall cost of pursuing this search strategy *\/$/;"	m	struct:WhereCost	file:
rSum	safe/sqlite3.c	/^  double rSum;      \/* Floating point sum *\/$/;"	m	struct:SumCtx	file:
rValue	safe/sqlite3.c	/^  RtreeDValue rValue;             \/* Constraint value. *\/$/;"	m	struct:RtreeConstraint	file:
randomBlob	safe/sqlite3.c	/^static void randomBlob($/;"	f	file:
randomByte	safe/sqlite3.c	/^static u8 randomByte(void){$/;"	f	file:
randomFill	safe/sqlite3.c	/^static void randomFill(char *pBuf, int nByte){$/;"	f	file:
randomFunc	safe/sqlite3.c	/^static void randomFunc($/;"	f	file:
randomness	safe/sqlite3.c	/^  void (*randomness)(int,void*);$/;"	m	struct:sqlite3_api_routines	file:
rc	safe/sqlite3.c	/^  int rc;                  \/* Backup process error code *\/$/;"	m	struct:sqlite3_backup	file:
rc	safe/sqlite3.c	/^  int rc;                 \/* Value to return *\/$/;"	m	struct:Vdbe	file:
rc	safe/sqlite3.c	/^  int rc;              \/* Return code from execution *\/$/;"	m	struct:Parse	file:
rc	safe/sqlite3.c	/^  int rc;             \/* Result code stored here *\/$/;"	m	struct:	file:
rc	safe/sqlite3.c	/^  int rc;            \/* Return code from sqlite3_exec() *\/$/;"	m	struct:TabResult	file:
rcache_Decode	safe/spider.133.c	/^const char *rcache_Decode(char *szCoded)$/;"	f
rcache_Decode	safe/spider.135.c	/^const char *rcache_Decode(char *szCoded)$/;"	f
rcache_Decode	safe/spider.200.c	/^const char *rcache_Decode(char *szCoded)$/;"	f
rcache_Decode	safe/spider.203.c	/^const char *rcache_Decode(char *szCoded)$/;"	f
rcache_Decode	safe/spider.204.c	/^const char *rcache_Decode(char *szCoded)$/;"	f
rcache_Decode	safe/spider.210.c	/^const char *rcache_Decode(char *szCoded)$/;"	f
rcache_Decode	safe/spider.c	/^const char *rcache_Decode(char *szCoded)$/;"	f
rcache_Decode	spider.c	/^const char *rcache_Decode(char *szCoded)$/;"	f
rcache_Encode	safe/spider.133.c	/^const char *rcache_Encode(const char *szPlain)$/;"	f
rcache_Encode	safe/spider.135.c	/^const char *rcache_Encode(const char *szPlain)$/;"	f
rcache_Encode	safe/spider.200.c	/^const char *rcache_Encode(const char *szPlain)$/;"	f
rcache_Encode	safe/spider.203.c	/^const char *rcache_Encode(const char *szPlain)$/;"	f
rcache_Encode	safe/spider.204.c	/^const char *rcache_Encode(const char *szPlain)$/;"	f
rcache_Encode	safe/spider.210.c	/^const char *rcache_Encode(const char *szPlain)$/;"	f
rcache_Encode	safe/spider.c	/^const char *rcache_Encode(const char *szPlain)$/;"	f
rcache_Encode	spider.c	/^const char *rcache_Encode(const char *szPlain)$/;"	f
read32bits	safe/sqlite3.c	/^static int read32bits(sqlite3_file *fd, i64 offset, u32 *pRes){$/;"	f	file:
readCoord	safe/sqlite3.c	/^static void readCoord(u8 *p, RtreeCoord *pCoord){$/;"	f	file:
readDbPage	safe/sqlite3.c	/^static int readDbPage(PgHdr *pPg){$/;"	f	file:
readInt16	safe/sqlite3.c	/^static int readInt16(u8 *p){$/;"	f	file:
readInt64	safe/sqlite3.c	/^static i64 readInt64(u8 *p){$/;"	f	file:
readJournalHdr	safe/sqlite3.c	/^static int readJournalHdr($/;"	f	file:
readLock	safe/sqlite3.c	/^  i16 readLock;              \/* Which read lock is being held.  -1 for none *\/$/;"	m	struct:Wal	file:
readMasterJournal	safe/sqlite3.c	/^static int readMasterJournal(sqlite3_file *pJrnl, char *zMaster, u32 nMaster){$/;"	f	file:
readOnly	safe/sqlite3.c	/^  u8 readOnly;                \/* True for a read-only database *\/$/;"	m	struct:Pager	file:
readOnly	safe/sqlite3.c	/^  u8 readOnly;               \/* WAL_RDWR, WAL_RDONLY, or WAL_SHM_RDONLY *\/$/;"	m	struct:Wal	file:
readOnly	safe/sqlite3.c	/^  u8 readOnly;            \/* True for read-only statements *\/$/;"	m	struct:Vdbe	file:
readpoint	safe/sqlite3.c	/^  FilePoint readpoint;            \/* Pointer to the end of the last xRead() *\/$/;"	m	struct:MemJournal	file:
readsTable	safe/sqlite3.c	/^static int readsTable(Parse *p, int iStartAddr, int iDb, Table *pTab){$/;"	f	file:
realloc	safe/sqlite3.c	/^  void *(*realloc)(void*,int);$/;"	m	struct:sqlite3_api_routines	file:
realm	mtwamp.c	/^	WAMPREALM *realm;$/;"	m	struct:WAMPSESSION	file:
realm	mtwamp.h	/^	struct WAMPREALM *realm;$/;"	m	struct:WAMP
realm	safe/mtwamp.c	/^	WAMPREALM *realm;$/;"	m	struct:WAMP	file:
realm	safe/mtwamp.c	/^	WAMPREALM *realm;$/;"	m	struct:WAMPSESSION	file:
realm	safe/mtwamp.h	/^	WAMPREALM *realm;$/;"	m	struct:WAMP
realm	safe/mtwamp.h	/^	WAMPREALM *realm;$/;"	m	struct:WAMPSESSION
realm_Map	mtwamp.c	/^STATIC SPMAP *realm_Map()$/;"	f
realm_Map	safe/mtwamp.c	/^STATIC SPMAP *realm_Map()$/;"	f
redirect	mtwamp.c	/^	IDMAP *redirect;							\/\/ Re-direction map (see. wamp_RegisterRedirect())$/;"	m	struct:WAMPREALM	file:
referencesOtherTables	safe/sqlite3.c	/^static int referencesOtherTables($/;"	f	file:
regCtr	safe/sqlite3.c	/^  int regCtr;           \/* Memory register holding the rowid counter *\/$/;"	m	struct:AutoincInfo	file:
regReturn	safe/sqlite3.c	/^    int regReturn;    \/* Register holding return address of addrFillSub *\/$/;"	m	struct:SrcList::SrcList_item	file:
regRoot	safe/sqlite3.c	/^  int regRoot;         \/* Register holding root page number for new objects *\/$/;"	m	struct:Parse	file:
regRowid	safe/sqlite3.c	/^  int regRowid;        \/* Register holding rowid of CREATE TABLE entry *\/$/;"	m	struct:Parse	file:
registerTokenizer	safe/sqlite3.c	/^int registerTokenizer($/;"	f	file:
registerTrace	safe/sqlite3.c	/^static void registerTrace(FILE *out, int iReg, Mem *p){$/;"	f	file:
registrationId	mtwamp.c	/^	long long registrationId;								\/\/ Id under which callee registered$/;"	m	struct:wamp_callee_t	file:
registrationId	safe/mtwamp.c	/^	long long registrationId;								\/\/ Id under which callee registered$/;"	m	struct:wamp_callee_t	file:
rehash	safe/sqlite3.c	/^static int rehash(Hash *pH, unsigned int new_size){$/;"	f	file:
reindexDatabases	safe/sqlite3.c	/^static void reindexDatabases(Parse *pParse, char const *zColl){$/;"	f	file:
reindexTable	safe/sqlite3.c	/^static void reindexTable(Parse *pParse, Table *pTab, char const *zColl){$/;"	f	file:
reinsertNodeContent	safe/sqlite3.c	/^static int reinsertNodeContent(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
releaseAllSavepoints	safe/sqlite3.c	/^static void releaseAllSavepoints(Pager *pPager){$/;"	f	file:
releaseInodeInfo	safe/sqlite3.c	/^static void releaseInodeInfo(unixFile *pFile){$/;"	f	file:
releaseMemArray	safe/sqlite3.c	/^static void releaseMemArray(Mem *p, int N){$/;"	f	file:
releasePage	safe/sqlite3.c	/^static void releasePage(MemPage *pPage){$/;"	f	file:
release_memory	safe/sqlite3.c	/^  int (*release_memory)(int);$/;"	m	struct:sqlite3_api_routines	file:
reloadTableSchema	safe/sqlite3.c	/^static void reloadTableSchema(Parse *pParse, Table *pTab, const char *zName){$/;"	f	file:
relocatePage	safe/sqlite3.c	/^static int relocatePage($/;"	f	file:
removeElementGivenHash	safe/sqlite3.c	/^static void removeElementGivenHash($/;"	f	file:
removeFromBlockedList	safe/sqlite3.c	/^static void removeFromBlockedList(sqlite3 *db){$/;"	f	file:
removeFromSharingList	safe/sqlite3.c	/^static int removeFromSharingList(BtShared *pBt){$/;"	f	file:
removeNode	safe/sqlite3.c	/^static int removeNode(Rtree *pRtree, RtreeNode *pNode, int iHeight){$/;"	f	file:
remove_diacritic	safe/sqlite3.c	/^static int remove_diacritic(int c){$/;"	f	file:
renameParentFunc	safe/sqlite3.c	/^static void renameParentFunc($/;"	f	file:
renameTableFunc	safe/sqlite3.c	/^static void renameTableFunc($/;"	f	file:
renameTriggerFunc	safe/sqlite3.c	/^static void renameTriggerFunc($/;"	f	file:
renderLogMsg	safe/sqlite3.c	/^static void renderLogMsg(int iErrCode, const char *zFormat, va_list ap){$/;"	f	file:
replaceFunc	safe/sqlite3.c	/^static void replaceFunc($/;"	f	file:
requestId	mtwamp.c	/^	long long requestId;$/;"	m	struct:subscription_info_t	file:
requestId	spider.c	/^	long long requestId;$/;"	m	struct:invoke_info	file:
reserved	safe/sqlite3.c	/^  int reserved;$/;"	m	struct:afpLockingContext	file:
reset	safe/sqlite3.c	/^  int  (*reset)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
resetAccumulator	safe/sqlite3.c	/^static void resetAccumulator(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
resolveAlias	safe/sqlite3.c	/^static void resolveAlias($/;"	f	file:
resolveAsName	safe/sqlite3.c	/^static int resolveAsName($/;"	f	file:
resolveAttachExpr	safe/sqlite3.c	/^static int resolveAttachExpr(NameContext *pName, Expr *pExpr)$/;"	f	file:
resolveCompoundOrderBy	safe/sqlite3.c	/^static int resolveCompoundOrderBy($/;"	f	file:
resolveExprStep	safe/sqlite3.c	/^static int resolveExprStep(Walker *pWalker, Expr *pExpr){$/;"	f	file:
resolveOrderByTermToExprList	safe/sqlite3.c	/^static int resolveOrderByTermToExprList($/;"	f	file:
resolveOrderGroupBy	safe/sqlite3.c	/^static int resolveOrderGroupBy($/;"	f	file:
resolveOutOfRangeError	safe/sqlite3.c	/^static void resolveOutOfRangeError($/;"	f	file:
resolveP2Values	safe/sqlite3.c	/^static void resolveP2Values(Vdbe *p, int *pMaxFuncArgs){$/;"	f	file:
resolveSelectStep	safe/sqlite3.c	/^static int resolveSelectStep(Walker *pWalker, Select *p){$/;"	f	file:
restoreCursorPosition	safe/sqlite3.c	50918;"	d	file:
result_blob	safe/sqlite3.c	/^  void  (*result_blob)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_double	safe/sqlite3.c	/^  void  (*result_double)(sqlite3_context*,double);$/;"	m	struct:sqlite3_api_routines	file:
result_error	safe/sqlite3.c	/^  void  (*result_error)(sqlite3_context*,const char*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_error16	safe/sqlite3.c	/^  void  (*result_error16)(sqlite3_context*,const void*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_error_code	safe/sqlite3.c	/^  void (*result_error_code)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_error_nomem	safe/sqlite3.c	/^  void (*result_error_nomem)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
result_error_toobig	safe/sqlite3.c	/^  void (*result_error_toobig)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
result_int	safe/sqlite3.c	/^  void  (*result_int)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_int64	safe/sqlite3.c	/^  void  (*result_int64)(sqlite3_context*,sqlite_int64);$/;"	m	struct:sqlite3_api_routines	file:
result_null	safe/sqlite3.c	/^  void  (*result_null)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
result_text	safe/sqlite3.c	/^  void  (*result_text)(sqlite3_context*,const char*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text16	safe/sqlite3.c	/^  void  (*result_text16)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text16be	safe/sqlite3.c	/^  void  (*result_text16be)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text16le	safe/sqlite3.c	/^  void  (*result_text16le)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_value	safe/sqlite3.c	/^  void  (*result_value)(sqlite3_context*,sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
result_zeroblob	safe/sqlite3.c	/^  void (*result_zeroblob)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
retRangeStart	safe/sqlite3.c	/^  unsigned long long retRangeStart; \/* nbr of 1st byte locked if successful *\/$/;"	m	struct:ByteRangeLockPB2	file:
retryIoerr	safe/sqlite3.c	/^static int retryIoerr(int *pnRetry, DWORD *pError){$/;"	f	file:
returnSingleInt	safe/sqlite3.c	/^static void returnSingleInt(Parse *pParse, const char *zLabel, i64 value){$/;"	f	file:
robust_close	safe/sqlite3.c	/^static void robust_close(unixFile *pFile, int h, int lineno){$/;"	f	file:
robust_flock	safe/sqlite3.c	/^static int robust_flock(int fd, int op){$/;"	f	file:
robust_flock	safe/sqlite3.c	27257;"	d	file:
robust_ftruncate	safe/sqlite3.c	/^static int robust_ftruncate(int h, sqlite3_int64 sz){$/;"	f	file:
robust_open	safe/sqlite3.c	/^static int robust_open(const char *z, int f, mode_t m){$/;"	f	file:
rog_MkDir	safe/spider.133.c	/^static int rog_MkDir(const char *fmt, ...)$/;"	f	file:
rog_MkDir	safe/spider.135.c	/^static int rog_MkDir(const char *fmt, ...)$/;"	f	file:
rog_MkDir	safe/spider.200.c	/^static int rog_MkDir(const char *fmt, ...)$/;"	f	file:
rog_MkDir	safe/spider.203.c	/^static int rog_MkDir(const char *fmt, ...)$/;"	f	file:
rog_MkDir	safe/spider.204.c	/^static int rog_MkDir(const char *fmt, ...)$/;"	f	file:
rog_MkDir	safe/spider.210.c	/^static int rog_MkDir(const char *fmt, ...)$/;"	f	file:
rog_MkDir	safe/spider.c	/^static int rog_MkDir(const char *fmt, ...)$/;"	f	file:
rog_MkDir	spider.c	/^static int rog_MkDir(const char *fmt, ...)$/;"	f	file:
roginet_ntoa	safe/spider.133.c	/^static char *roginet_ntoa(struct in_addr in)$/;"	f	file:
roginet_ntoa	safe/spider.135.c	/^static char *roginet_ntoa(struct in_addr in)$/;"	f	file:
roginet_ntoa	safe/spider.200.c	/^static char *roginet_ntoa(struct in_addr in)$/;"	f	file:
roginet_ntoa	safe/spider.203.c	/^static char *roginet_ntoa(struct in_addr in)$/;"	f	file:
roginet_ntoa	safe/spider.204.c	/^static char *roginet_ntoa(struct in_addr in)$/;"	f	file:
roginet_ntoa	safe/spider.210.c	/^static char *roginet_ntoa(struct in_addr in)$/;"	f	file:
roginet_ntoa	safe/spider.c	/^static char *roginet_ntoa(struct in_addr in)$/;"	f	file:
roginet_ntoa	spider.c	/^static char *roginet_ntoa(struct in_addr in)$/;"	f	file:
rogxml_GetAttrDef	safe/spider.c	/^const char *rogxml_GetAttrDef(rogxml *rx, const char *szAttr, const char *szDef)$/;"	f
rogxml_GetAttrDef	spider.c	/^const char *rogxml_GetAttrDef(rogxml *rx, const char *szAttr, const char *szDef)$/;"	f
rogxml_ToNiceText	safe/spider.133.c	/^static const char *rogxml_ToNiceText(rogxml *rx)$/;"	f	file:
rogxml_ToNiceText	safe/spider.135.c	/^static const char *rogxml_ToNiceText(rogxml *rx)$/;"	f	file:
rogxml_ToNiceText	safe/spider.200.c	/^static const char *rogxml_ToNiceText(rogxml *rx)$/;"	f	file:
rogxml_ToNiceText	safe/spider.203.c	/^static const char *rogxml_ToNiceText(rogxml *rx)$/;"	f	file:
rogxml_ToNiceText	safe/spider.204.c	/^static const char *rogxml_ToNiceText(rogxml *rx)$/;"	f	file:
rogxml_ToNiceText	safe/spider.210.c	/^static const char *rogxml_ToNiceText(rogxml *rx)$/;"	f	file:
rogxml_ToNiceText	safe/spider.c	/^static const char *rogxml_ToNiceText(rogxml *rx)$/;"	f	file:
rogxml_ToNiceText	spider.c	/^static const char *rogxml_ToNiceText(rogxml *rx)$/;"	f	file:
rollback_hook	safe/sqlite3.c	/^  void * (*rollback_hook)(sqlite3*,void(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:
rootOnly	safe/sqlite3.c	/^  u8 rootOnly;                    \/* True for a root-only reader *\/$/;"	m	struct:Fts3SegReader	file:
roundFunc	safe/sqlite3.c	/^static void roundFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
roundRobinCount	mtwamp.c	/^	int roundRobinCount;$/;"	m	struct:wamp_callee_t	file:
rowSetEntryAlloc	safe/sqlite3.c	/^static struct RowSetEntry *rowSetEntryAlloc(RowSet *p){$/;"	f	file:
rowSetEntryMerge	safe/sqlite3.c	/^static struct RowSetEntry *rowSetEntryMerge($/;"	f	file:
rowSetEntrySort	safe/sqlite3.c	/^static struct RowSetEntry *rowSetEntrySort(struct RowSetEntry *pIn){$/;"	f	file:
rowSetListToTree	safe/sqlite3.c	/^static struct RowSetEntry *rowSetListToTree(struct RowSetEntry *pList){$/;"	f	file:
rowSetNDeepTree	safe/sqlite3.c	/^static struct RowSetEntry *rowSetNDeepTree($/;"	f	file:
rowSetToList	safe/sqlite3.c	/^static void rowSetToList(RowSet *p){$/;"	f	file:
rowSetTreeToList	safe/sqlite3.c	/^static void rowSetTreeToList($/;"	f	file:
rowid	safe/sqlite3.c	/^  i64 rowid;          \/* Used by UNPACKED_PREFIX_SEARCH *\/$/;"	m	struct:UnpackedRecord	file:
rowidIsValid	safe/sqlite3.c	/^  Bool rowidIsValid;    \/* True if lastRowid is valid *\/$/;"	m	struct:VdbeCursor	file:
rowidWrite	safe/sqlite3.c	/^static int rowidWrite(Rtree *pRtree, sqlite3_int64 iRowid, sqlite3_int64 iNode){$/;"	f	file:
rsFlags	safe/sqlite3.c	/^  u8 rsFlags;                    \/* Various flags *\/$/;"	m	struct:RowSet	file:
rtreeBestIndex	safe/sqlite3.c	/^static int rtreeBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){$/;"	f	file:
rtreeClose	safe/sqlite3.c	/^static int rtreeClose(sqlite3_vtab_cursor *cur){$/;"	f	file:
rtreeColumn	safe/sqlite3.c	/^static int rtreeColumn(sqlite3_vtab_cursor *cur, sqlite3_context *ctx, int i){$/;"	f	file:
rtreeConnect	safe/sqlite3.c	/^static int rtreeConnect($/;"	f	file:
rtreeCreate	safe/sqlite3.c	/^static int rtreeCreate($/;"	f	file:
rtreeDeleteRowid	safe/sqlite3.c	/^static int rtreeDeleteRowid(Rtree *pRtree, sqlite3_int64 iDelete){$/;"	f	file:
rtreeDestroy	safe/sqlite3.c	/^static int rtreeDestroy(sqlite3_vtab *pVtab){$/;"	f	file:
rtreeDisconnect	safe/sqlite3.c	/^static int rtreeDisconnect(sqlite3_vtab *pVtab){$/;"	f	file:
rtreeEof	safe/sqlite3.c	/^static int rtreeEof(sqlite3_vtab_cursor *cur){$/;"	f	file:
rtreeFilter	safe/sqlite3.c	/^static int rtreeFilter($/;"	f	file:
rtreeInit	safe/sqlite3.c	/^static int rtreeInit($/;"	f	file:
rtreeInsertCell	safe/sqlite3.c	/^static int rtreeInsertCell($/;"	f	file:
rtreeModule	safe/sqlite3.c	/^static sqlite3_module rtreeModule = {$/;"	v	file:
rtreeNext	safe/sqlite3.c	/^static int rtreeNext(sqlite3_vtab_cursor *pVtabCursor){$/;"	f	file:
rtreeOpen	safe/sqlite3.c	/^static int rtreeOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
rtreeReference	safe/sqlite3.c	/^static void rtreeReference(Rtree *pRtree){$/;"	f	file:
rtreeRelease	safe/sqlite3.c	/^static void rtreeRelease(Rtree *pRtree){$/;"	f	file:
rtreeRename	safe/sqlite3.c	/^static int rtreeRename(sqlite3_vtab *pVtab, const char *zNewName){$/;"	f	file:
rtreeRowid	safe/sqlite3.c	/^static int rtreeRowid(sqlite3_vtab_cursor *pVtabCursor, sqlite_int64 *pRowid){$/;"	f	file:
rtreeSqlInit	safe/sqlite3.c	/^static int rtreeSqlInit($/;"	f	file:
rtreeUpdate	safe/sqlite3.c	/^static int rtreeUpdate($/;"	f	file:
rtreeValueDown	safe/sqlite3.c	/^static RtreeValue rtreeValueDown(sqlite3_value *v){$/;"	f	file:
rtreeValueUp	safe/sqlite3.c	/^static RtreeValue rtreeValueUp(sqlite3_value *v){$/;"	f	file:
rtreedepth	safe/sqlite3.c	/^static void rtreedepth(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){$/;"	f	file:
rtreenode	safe/sqlite3.c	/^static void rtreenode(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){$/;"	f	file:
runOnlyOnce	safe/sqlite3.c	/^  u8 runOnlyOnce;         \/* Automatically expire on reset *\/$/;"	m	struct:Vdbe	file:
s	safe/sqlite3.c	/^  Mem s;                \/* The return value is stored here *\/$/;"	m	struct:sqlite3_context	file:
s	safe/sqlite3.c	/^  double s;          \/* Seconds *\/$/;"	m	struct:DateTime	file:
s	safe/sqlite3.c	/^  unsigned char s[256];          \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
s3ErrorHandler	safe/spider.135.c	/^void s3ErrorHandler(struct S3 *s, int nErr, const char *szErr, const char *szQuery)$/;"	f
s3ErrorHandler	safe/spider.200.c	/^void s3ErrorHandler(struct S3 *s, int nErr, const char *szErr, const char *szQuery)$/;"	f
s3ErrorHandler	safe/spider.203.c	/^void s3ErrorHandler(struct S3 *s, int nErr, const char *szErr, const char *szQuery)$/;"	f
s3ErrorHandler	safe/spider.204.c	/^void s3ErrorHandler(struct S3 *s, int nErr, const char *szErr, const char *szQuery)$/;"	f
s3ErrorHandler	safe/spider.210.c	/^void s3ErrorHandler(struct S3 *s, int nErr, const char *szErr, const char *szQuery)$/;"	f
s3ErrorHandler	safe/spider.c	/^void s3ErrorHandler(struct S3 *s, int nErr, const char *szErr, const char *szQuery)$/;"	f
s3ErrorHandler	spider.c	/^void s3ErrorHandler(struct S3 *s, int nErr, const char *szErr, const char *szQuery)$/;"	f
s3Main	safe/spider.133.c	/^S3 *s3Main()$/;"	f
s3Main	safe/spider.135.c	/^S3 *s3Main()$/;"	f
s3Main	safe/spider.200.c	/^S3 *s3Main()$/;"	f
s3Main	safe/spider.203.c	/^S3 *s3Main()$/;"	f
s3Main	safe/spider.204.c	/^S3 *s3Main()$/;"	f
s3Main	safe/spider.210.c	/^S3 *s3Main()$/;"	f
s3Main	safe/spider.c	/^S3 *s3Main()$/;"	f
s3Main	spider.c	/^S3 *s3Main()$/;"	f
s3MainDb	safe/spider.133.c	/^S3 *s3MainDb = NULL;$/;"	v
s3MainDb	safe/spider.135.c	/^S3 *s3MainDb = NULL;$/;"	v
s3MainDb	safe/spider.200.c	/^S3 *s3MainDb = NULL;$/;"	v
s3MainDb	safe/spider.203.c	/^S3 *s3MainDb = NULL;$/;"	v
s3MainDb	safe/spider.204.c	/^S3 *s3MainDb = NULL;$/;"	v
s3MainDb	safe/spider.210.c	/^S3 *s3MainDb = NULL;$/;"	v
s3MainDb	safe/spider.c	/^S3 *s3MainDb = NULL;$/;"	v
s3MainDb	spider.c	/^S3 *s3MainDb = NULL;$/;"	v
s3MainDelete	safe/spider.133.c	/^void s3MainDelete()$/;"	f
s3MainDelete	safe/spider.135.c	/^void s3MainDelete()$/;"	f
s3MainDelete	safe/spider.200.c	/^void s3MainDelete()$/;"	f
s3MainDelete	safe/spider.203.c	/^void s3MainDelete()$/;"	f
s3MainDelete	safe/spider.204.c	/^void s3MainDelete()$/;"	f
s3MainDelete	safe/spider.210.c	/^void s3MainDelete()$/;"	f
s3MainDelete	safe/spider.c	/^void s3MainDelete()$/;"	f
s3MainDelete	spider.c	/^void s3MainDelete()$/;"	f
s3Main_CreateTable	safe/spider.133.c	/^void s3Main_CreateTable(const char *table, const char *defn)$/;"	f
s3Main_CreateTable	safe/spider.135.c	/^void s3Main_CreateTable(const char *table, const char *defn)$/;"	f
s3Main_CreateTable	safe/spider.200.c	/^void s3Main_CreateTable(const char *table, const char *defn)$/;"	f
s3Main_CreateTable	safe/spider.203.c	/^void s3Main_CreateTable(const char *table, const char *defn)$/;"	f
s3Main_CreateTable	safe/spider.204.c	/^void s3Main_CreateTable(const char *table, const char *defn)$/;"	f
s3Main_CreateTable	safe/spider.210.c	/^void s3Main_CreateTable(const char *table, const char *defn)$/;"	f
s3Main_CreateTable	safe/spider.c	/^void s3Main_CreateTable(const char *table, const char *defn)$/;"	f
s3Main_CreateTable	spider.c	/^void s3Main_CreateTable(const char *table, const char *defn)$/;"	f
s3_CreateTable	safe/spider.200.c	/^void s3_CreateTable(S3 *db, const char *table, const char *defn)$/;"	f
s3_CreateTable	safe/spider.203.c	/^void s3_CreateTable(S3 *db, const char *table, const char *defn)$/;"	f
s3_CreateTable	safe/spider.204.c	/^void s3_CreateTable(S3 *db, const char *table, const char *defn)$/;"	f
s3_CreateTable	safe/spider.210.c	/^void s3_CreateTable(S3 *db, const char *table, const char *defn)$/;"	f
s3_CreateTable	safe/spider.c	/^void s3_CreateTable(S3 *db, const char *table, const char *defn)$/;"	f
s3_CreateTable	spider.c	/^void s3_CreateTable(S3 *db, const char *table, const char *defn)$/;"	f
sArg	safe/sqlite3.c	/^  Token sArg;               \/* Complete text of a module argument *\/$/;"	m	struct:Parse	file:
sColMap	safe/sqlite3.c	/^  struct sColMap {  \/* Mapping of columns in pFrom to columns in zTo *\/$/;"	s	struct:FKey	file:
sLastToken	safe/sqlite3.c	/^  Token sLastToken;         \/* The last token parsed *\/$/;"	m	struct:Parse	file:
sNameToken	safe/sqlite3.c	/^  Token sNameToken;         \/* Token with unqualified schema object name *\/$/;"	m	struct:Parse	file:
s_server_session_id_context	safe/spider.133.c	/^static int s_server_session_id_context = 1;$/;"	v	file:
s_server_session_id_context	safe/spider.135.c	/^static int s_server_session_id_context = 1;$/;"	v	file:
s_server_session_id_context	safe/spider.200.c	/^static char s_server_session_id_context[] = "context1"; $/;"	v	file:
s_server_session_id_context	safe/spider.203.c	/^static char s_server_session_id_context[] = "context1"; $/;"	v	file:
s_server_session_id_context	safe/spider.204.c	/^static char s_server_session_id_context[] = "context1"; $/;"	v	file:
s_server_session_id_context	safe/spider.210.c	/^static char s_server_session_id_context[] = "context1"; $/;"	v	file:
s_server_session_id_context	safe/spider.c	/^static char s_server_session_id_context[] = "context1"; $/;"	v	file:
s_server_session_id_context	spider.c	/^static char s_server_session_id_context[] = "context1"; $/;"	v	file:
safety_level	safe/sqlite3.c	/^  u8 safety_level;     \/* How aggressive at syncing data to disk *\/$/;"	m	struct:Db	file:
saveAllCursors	safe/sqlite3.c	/^static int saveAllCursors(BtShared *pBt, Pgno iRoot, BtCursor *pExcept){$/;"	f	file:
saveCursorPosition	safe/sqlite3.c	/^static int saveCursorPosition(BtCursor *pCur){$/;"	f	file:
saveInput	mtwamp.h	/^	HLIST *saveInput;				\/\/ If non-null, receives a copy of all input$/;"	m	struct:WAMP
saveOutput	mtwamp.h	/^	HLIST *saveOutput;				\/\/ If non-null, receives a copy of all output$/;"	m	struct:WAMP
savedNQueryLoop	safe/sqlite3.c	/^  double savedNQueryLoop;        \/* pParse->nQueryLoop outside the WHERE loop *\/$/;"	m	struct:WhereInfo	file:
saved_cnt	safe/sqlite3.c	/^static int saved_cnt;$/;"	v	file:
scalarFunc	safe/sqlite3.c	/^static void scalarFunc($/;"	f	file:
schemaIsValid	safe/sqlite3.c	/^static void schemaIsValid(Parse *pParse){$/;"	f	file:
schema_cookie	safe/sqlite3.c	/^  int schema_cookie;   \/* Database schema version number for this file *\/$/;"	m	struct:Schema	file:
scratchAllocOut	safe/sqlite3.c	/^static int scratchAllocOut = 0;$/;"	v	file:
sectorSize	safe/sqlite3.c	/^  u32 sectorSize;             \/* Assumed sector size during rollback *\/$/;"	m	struct:Pager	file:
seekAndRead	safe/sqlite3.c	/^static int seekAndRead(unixFile *id, sqlite3_int64 offset, void *pBuf, int cnt){$/;"	f	file:
seekAndWrite	safe/sqlite3.c	/^static int seekAndWrite(unixFile *id, i64 offset, const void *pBuf, int cnt){$/;"	f	file:
seekResult	safe/sqlite3.c	/^  int seekResult;$/;"	m	struct:VdbeCursor	file:
seekWinFile	safe/sqlite3.c	/^static int seekWinFile(winFile *pFile, sqlite3_int64 iOffset){$/;"	f	file:
selFlags	safe/sqlite3.c	/^  u16 selFlags;          \/* Various SF_* values *\/$/;"	m	struct:Select	file:
selectAddColumnTypeAndCollation	safe/sqlite3.c	/^static void selectAddColumnTypeAndCollation($/;"	f	file:
selectAddSubqueryTypeInfo	safe/sqlite3.c	/^static int selectAddSubqueryTypeInfo(Walker *pWalker, Select *p){$/;"	f	file:
selectColumnsFromExprList	safe/sqlite3.c	/^static int selectColumnsFromExprList($/;"	f	file:
selectExpander	safe/sqlite3.c	/^static int selectExpander(Walker *pWalker, Select *p){$/;"	f	file:
selectInnerLoop	safe/sqlite3.c	/^static void selectInnerLoop($/;"	f	file:
selectNodeIsConstant	safe/sqlite3.c	/^static int selectNodeIsConstant(Walker *pWalker, Select *NotUsed){$/;"	f	file:
selectOpName	safe/sqlite3.c	/^static const char *selectOpName(int id){$/;"	f	file:
semCheckReservedLock	safe/sqlite3.c	/^static int semCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
semClose	safe/sqlite3.c	/^static int semClose(sqlite3_file *id) {$/;"	f	file:
semLock	safe/sqlite3.c	/^static int semLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
semUnlock	safe/sqlite3.c	/^static int semUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
seqCount	safe/sqlite3.c	/^  i64 seqCount;         \/* Sequence counter *\/$/;"	m	struct:VdbeCursor	file:
service_BroadcastApiResult	safe/spider.c	/^void service_BroadcastApiResult(const char *szApi, const char *szResult)$/;"	f
service_Close	safe/spider.c	/^void service_Close()$/;"	f
service_Database	safe/spider.c	/^S3 *service_Database()$/;"	f
service_DatabaseFile	safe/spider.c	/^const char *service_DatabaseFile()$/;"	f
service_DoBroadcast	safe/spider.c	/^static rogxml *service_DoBroadcast(rogxml *rxRpc)$/;"	f	file:
service_DoFunction	safe/spider.c	/^static rogxml *service_DoFunction(rogxml *rxRpc, const char *szFunction)$/;"	f	file:
service_DoIgnore	safe/spider.c	/^static rogxml *service_DoIgnore(rogxml *rxRpc)$/;"	f	file:
service_DoListen	safe/spider.c	/^static rogxml *service_DoListen(rogxml *rxRpc)$/;"	f	file:
service_DoListener	safe/spider.c	/^static rogxml *service_DoListener(rogxml *rxRpc)$/;"	f	file:
service_DoSend	safe/spider.c	/^static rogxml *service_DoSend(rogxml *rxRpc)$/;"	f	file:
service_Send	safe/spider.c	/^void service_Send(const char *ip, int port, const char *service, const char *uri, const char *protocol, const char *verb, SSMAP *values, const char *payload)$/;"	f
session	mtwamp.h	/^	struct WAMPSESSION *session;$/;"	m	struct:WAMP
session	safe/mtwamp.c	/^	WAMPSESSION *session;$/;"	m	struct:WAMP	file:
session	safe/mtwamp.h	/^	WAMPSESSION *session;$/;"	m	struct:WAMP
session_Id	mtwamp.c	/^STATIC long long session_Id(WAMPSESSION *session)$/;"	f
session_Id	safe/mtwamp.c	/^STATIC long long session_Id(WAMPSESSION *session)$/;"	f
setChildPtrmaps	safe/sqlite3.c	/^static int setChildPtrmaps(MemPage *pPage){$/;"	f	file:
setChildPtrmaps	safe/sqlite3.c	53313;"	d	file:
setDateTimeToCurrent	safe/sqlite3.c	/^static int setDateTimeToCurrent(sqlite3_context *context, DateTime *p){$/;"	f	file:
setDestPgsz	safe/sqlite3.c	/^static int setDestPgsz(sqlite3_backup *p){$/;"	f	file:
setJoinExpr	safe/sqlite3.c	/^static void setJoinExpr(Expr *p, int iTable){$/;"	f	file:
setLikeOptFlag	safe/sqlite3.c	/^static void setLikeOptFlag(sqlite3 *db, const char *zName, u8 flagVal){$/;"	f	file:
setMaster	safe/sqlite3.c	/^  u8 setMaster;               \/* True if a m-j name has been written to jrnl *\/$/;"	m	struct:Pager	file:
setPageReferenced	safe/sqlite3.c	/^static void setPageReferenced(IntegrityCk *pCheck, Pgno iPg){$/;"	f	file:
setPendingFd	safe/sqlite3.c	/^static void setPendingFd(unixFile *pFile){$/;"	f	file:
setResultStrOrError	safe/sqlite3.c	/^static void setResultStrOrError($/;"	f	file:
setSectorSize	safe/sqlite3.c	/^static void setSectorSize(Pager *pPager){$/;"	f	file:
setSharedCacheTableLock	safe/sqlite3.c	/^static int setSharedCacheTableLock(Btree *p, Pgno iTable, u8 eLock){$/;"	f	file:
setSharedCacheTableLock	safe/sqlite3.c	50307;"	d	file:
setSymbolName	bin2c.c	/^static void setSymbolName(char *name)$/;"	f	file:
set_authorizer	safe/sqlite3.c	/^  int  (*set_authorizer)(sqlite3*,int(*)(void*,int,const char*,const char*,$/;"	m	struct:sqlite3_api_routines	file:
set_auxdata	safe/sqlite3.c	/^  void  (*set_auxdata)(sqlite3_context*,int,void*,void (*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
setupLookaside	safe/sqlite3.c	/^static int setupLookaside(sqlite3 *db, void *pBuf, int sz, int cnt){$/;"	f	file:
sharable	safe/sqlite3.c	/^  u8 sharable;       \/* True if we can share pBt with another db *\/$/;"	m	struct:Btree	file:
shared	safe/sqlite3.c	/^  winceLock *shared;      \/* Global shared lock memory for the file  *\/$/;"	m	struct:winFile	file:
sharedByte	safe/sqlite3.c	/^  unsigned long long sharedByte;  \/* for AFP simulated shared lock *\/$/;"	m	struct:unixInodeInfo	file:
sharedCacheEnabled	safe/sqlite3.c	/^  int sharedCacheEnabled;           \/* true if shared-cache mode enabled *\/$/;"	m	struct:Sqlite3Config	file:
sharedLockByte	safe/sqlite3.c	/^  short sharedLockByte;   \/* Randomly chosen byte used as a shared lock *\/$/;"	m	struct:winFile	file:
sharedMask	safe/sqlite3.c	/^  u16 sharedMask;            \/* Mask of shared locks held *\/$/;"	m	struct:unixShm	file:
sharedMask	safe/sqlite3.c	/^  u16 sharedMask;            \/* Mask of shared locks held *\/$/;"	m	struct:winShm	file:
sharedMask	safe/sqlite3.c	/^  u32 sharedMask;            \/* Mask of shared locks held *\/$/;"	m	struct:os2ShmLink	file:
sharedMask	safe/sqlite3.c	/^  u8 sharedMask;             \/* Mask of shared locks held *\/$/;"	m	struct:unixShmNode	file:
shmBaseName	safe/sqlite3.c	/^  char shmBaseName[1];       \/* Name of the memory object !!! must last !!! *\/$/;"	m	struct:os2ShmNode	file:
signature	mtjson.h	/^	long signature;$/;"	m	struct:JSON
simpleClose	safe/sqlite3.c	/^static int simpleClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
simpleCreate	safe/sqlite3.c	/^static int simpleCreate($/;"	f	file:
simpleDelim	safe/sqlite3.c	/^static int simpleDelim(simple_tokenizer *t, unsigned char c){$/;"	f	file:
simpleDestroy	safe/sqlite3.c	/^static int simpleDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
simpleNext	safe/sqlite3.c	/^static int simpleNext($/;"	f	file:
simpleOpen	safe/sqlite3.c	/^static int simpleOpen($/;"	f	file:
simpleTokenizerModule	safe/sqlite3.c	/^static const sqlite3_tokenizer_module simpleTokenizerModule = {$/;"	v	file:
simple_tokenizer	safe/sqlite3.c	/^typedef struct simple_tokenizer {$/;"	s	file:
simple_tokenizer	safe/sqlite3.c	/^} simple_tokenizer;$/;"	t	file:
simple_tokenizer_cursor	safe/sqlite3.c	/^typedef struct simple_tokenizer_cursor {$/;"	s	file:
simple_tokenizer_cursor	safe/sqlite3.c	/^} simple_tokenizer_cursor;$/;"	t	file:
size4x	safe/sqlite3.c	/^      u32 size4x;     \/* 4x the size of current chunk in Mem3Block elements *\/$/;"	m	struct:Mem3Block::<anonymous>::<anonymous>	file:
sizeDefinition	bin2c.c	51;"	d	file:
sizeMacroDefinition	bin2c.c	52;"	d	file:
sjfd	safe/sqlite3.c	/^  sqlite3_file *sjfd;         \/* File descriptor for sub-journal *\/$/;"	m	struct:Pager	file:
skipFlag	safe/sqlite3.c	/^  int skipFlag;         \/* Skip skip accumulator loading if true *\/$/;"	m	struct:sqlite3_context	file:
skipNext	safe/sqlite3.c	/^  int skipNext;    \/* Prev() is noop if negative. Next() is noop if positive *\/$/;"	m	struct:BtCursor	file:
sleep	safe/sqlite3.c	/^  int (*sleep)(int);$/;"	m	struct:sqlite3_api_routines	file:
sleepObj	safe/sqlite3.c	/^static HANDLE sleepObj = NULL;$/;"	v	file:
snprintf	safe/sqlite3.c	/^  char * (*snprintf)(int,char*,const char*,...);$/;"	m	struct:sqlite3_api_routines	file:
softHeapLimitEnforcer	safe/sqlite3.c	/^static void softHeapLimitEnforcer($/;"	f	file:
soft_heap_limit	safe/sqlite3.c	/^  void (*soft_heap_limit)(int);$/;"	m	struct:sqlite3_api_routines	file:
soft_heap_limit64	safe/sqlite3.c	/^  sqlite3_int64 (*soft_heap_limit64)(sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	file:
sortOrder	safe/sqlite3.c	/^    u8 sortOrder;          \/* 1 for DESC or 0 for ASC *\/$/;"	m	struct:ExprList::ExprList_item	file:
sortingIdx	safe/sqlite3.c	/^  int sortingIdx;         \/* Cursor number of the sorting index *\/$/;"	m	struct:AggInfo	file:
sortingIdxPTab	safe/sqlite3.c	/^  int sortingIdxPTab;     \/* Cursor number of pseudo-table *\/$/;"	m	struct:AggInfo	file:
soundexFunc	safe/sqlite3.c	/^static void soundexFunc($/;"	f	file:
sourceid	safe/sqlite3.c	/^  const char *(*sourceid)(void);$/;"	m	struct:sqlite3_api_routines	file:
sourceidFunc	safe/sqlite3.c	/^static void sourceidFunc($/;"	f	file:
spanBinaryExpr	safe/sqlite3.c	/^  static void spanBinaryExpr($/;"	f	file:
spanExpr	safe/sqlite3.c	/^  static void spanExpr(ExprSpan *pOut, Parse *pParse, int op, Token *pValue){$/;"	f	file:
spanSet	safe/sqlite3.c	/^  static void spanSet(ExprSpan *pOut, Token *pStart, Token *pEnd){$/;"	f	file:
spanUnaryPostfix	safe/sqlite3.c	/^  static void spanUnaryPostfix($/;"	f	file:
spanUnaryPrefix	safe/sqlite3.c	/^  static void spanUnaryPrefix($/;"	f	file:
spiderFork	spider.c	/^static int spiderFork(const char *name)$/;"	f	file:
spider_Call	safe/spider.c	/^const char *spider_Call(const char *szHost, const char *szSessionId, const char *szSessionToken, const char *szApi, const char *szzParams, int nInputLen, const char *szInput, const char *szOrganisationProduct)$/;"	f
spider_Call	spider.c	/^const char *spider_Call(const char *szHost, const char *szSessionId, const char *szSessionToken, const char *szApi, const char *szzParams, int nInputLen, const char *szInput, const char *szOrganisationProduct)$/;"	f
spider_CallXml	safe/spider.c	/^rogxml *spider_CallXml(const char *szHost, const char *szSessionId, const char *szSessionToken, const char *szApi, const char *szzParams, int nInputLen, const char *szInput, const char *szOrganisationProduct)$/;"	f
spider_CallXml	spider.c	/^rogxml *spider_CallXml(const char *szHost, const char *szSessionId, const char *szSessionToken, const char *szApi, const char *szzParams, int nInputLen, const char *szInput, const char *szOrganisationProduct)$/;"	f
spider_Login	safe/spider.c	/^int spider_Login(const char *szHost, const char *szSessionId, const char *szSessionToken, const char *szSite, const char *szUser, const char *szPassword, const char *szOrganisationProduct)$/;"	f
spider_Login	spider.c	/^int spider_Login(const char *szHost, const char *szSessionId, const char *szSessionToken, const char *szSite, const char *szUser, const char *szPassword, const char *szOrganisationProduct)$/;"	f
spider_SessionCreate	safe/spider.c	/^int spider_SessionCreate(const char *szHost, const char **pSessionId, const char **pSessionToken, rogxml **pXml, const char *szOrganisationProduct)$/;"	f
spider_SessionCreate	spider.c	/^int spider_SessionCreate(const char *szHost, const char **pSessionId, const char **pSessionToken, rogxml **pXml, const char *szOrganisationProduct)$/;"	f
splitNodeGuttman	safe/sqlite3.c	/^static int splitNodeGuttman($/;"	f	file:
splitNodeStartree	safe/sqlite3.c	/^static int splitNodeStartree($/;"	f	file:
sql	safe/sqlite3.c	/^  const char *(*sql)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
sqlite3	safe/sqlite3.c	/^struct sqlite3 {$/;"	s	file:
sqlite3	safe/sqlite3.c	/^typedef struct sqlite3 sqlite3;$/;"	t	file:
sqlite3	safe/sqlite3.h	/^typedef struct sqlite3 sqlite3;$/;"	t
sqlite3AbsInt32	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3AbsInt32(int x){$/;"	f
sqlite3AddCheckConstraint	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddCheckConstraint($/;"	f
sqlite3AddCollateType	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddCollateType(Parse *pParse, Token *pToken){$/;"	f
sqlite3AddColumn	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddColumn(Parse *pParse, Token *pName){$/;"	f
sqlite3AddColumnType	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddColumnType(Parse *pParse, Token *pType){$/;"	f
sqlite3AddDefaultValue	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddDefaultValue(Parse *pParse, ExprSpan *pSpan){$/;"	f
sqlite3AddInt64	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3AddInt64(i64 *pA, i64 iB){$/;"	f
sqlite3AddNotNull	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddNotNull(Parse *pParse, int onError){$/;"	f
sqlite3AddPrimaryKey	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddPrimaryKey($/;"	f
sqlite3AffinityType	safe/sqlite3.c	/^SQLITE_PRIVATE char sqlite3AffinityType(const char *zIn){$/;"	f
sqlite3AlterBeginAddColumn	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterBeginAddColumn(Parse *pParse, SrcList *pSrc){$/;"	f
sqlite3AlterFinishAddColumn	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterFinishAddColumn(Parse *pParse, Token *pColDef){$/;"	f
sqlite3AlterFunctions	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterFunctions(void){$/;"	f
sqlite3AlterRenameTable	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterRenameTable($/;"	f
sqlite3AnalysisLoad	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3AnalysisLoad(sqlite3 *db, int iDb){$/;"	f
sqlite3Analyze	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Analyze(Parse *pParse, Token *pName1, Token *pName2){$/;"	f
sqlite3ApiExit	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ApiExit(sqlite3* db, int rc){$/;"	f
sqlite3Apis	safe/sqlite3.c	/^static const sqlite3_api_routines sqlite3Apis = { 0 };$/;"	v	file:
sqlite3Apis	safe/sqlite3.c	/^static const sqlite3_api_routines sqlite3Apis = {$/;"	v	file:
sqlite3AppendSpace	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AppendSpace(StrAccum *pAccum, int N){$/;"	f
sqlite3ArrayAllocate	safe/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3ArrayAllocate($/;"	f
sqlite3AtoF	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3AtoF(const char *z, double *pResult, int length, u8 enc){$/;"	f
sqlite3Atoi	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Atoi(const char *z){$/;"	f
sqlite3Atoi64	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Atoi64(const char *zNum, i64 *pNum, int length, u8 enc){$/;"	f
sqlite3Attach	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Attach(Parse *pParse, Expr *p, Expr *pDbname, Expr *pKey){$/;"	f
sqlite3AuthCheck	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3AuthCheck($/;"	f
sqlite3AuthCheck	safe/sqlite3.c	11900;"	d	file:
sqlite3AuthContextPop	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AuthContextPop(AuthContext *pContext){$/;"	f
sqlite3AuthContextPop	safe/sqlite3.c	11902;"	d	file:
sqlite3AuthContextPush	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AuthContextPush($/;"	f
sqlite3AuthContextPush	safe/sqlite3.c	11901;"	d	file:
sqlite3AuthRead	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AuthRead($/;"	f
sqlite3AuthRead	safe/sqlite3.c	11899;"	d	file:
sqlite3AuthReadCol	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3AuthReadCol($/;"	f
sqlite3AutoExtList	safe/sqlite3.c	/^static SQLITE_WSD struct sqlite3AutoExtList {$/;"	s	file:
sqlite3AutoExtList	safe/sqlite3.c	/^typedef struct sqlite3AutoExtList sqlite3AutoExtList;$/;"	t	file:
sqlite3AutoLoadExtensions	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AutoLoadExtensions(sqlite3 *db){$/;"	f
sqlite3Autoext	safe/sqlite3.c	/^} sqlite3Autoext = { 0, 0 };$/;"	v	file:
sqlite3AutoincrementBegin	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AutoincrementBegin(Parse *pParse){$/;"	f
sqlite3AutoincrementBegin	safe/sqlite3.c	11742;"	d	file:
sqlite3AutoincrementEnd	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AutoincrementEnd(Parse *pParse){$/;"	f
sqlite3AutoincrementEnd	safe/sqlite3.c	11743;"	d	file:
sqlite3BackupRestart	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BackupRestart(sqlite3_backup *pBackup){$/;"	f
sqlite3BackupUpdate	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BackupUpdate(sqlite3_backup *pBackup, Pgno iPage, const u8 *aData){$/;"	f
sqlite3BeginBenignMalloc	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginBenignMalloc(void){$/;"	f
sqlite3BeginBenignMalloc	safe/sqlite3.c	12174;"	d	file:
sqlite3BeginParse	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginParse(Parse *pParse, int explainFlag){$/;"	f
sqlite3BeginTransaction	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginTransaction(Parse *pParse, int type){$/;"	f
sqlite3BeginTrigger	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginTrigger($/;"	f
sqlite3BeginWriteOperation	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginWriteOperation(Parse *pParse, int setStatement, int iDb){$/;"	f
sqlite3BenignMallocHooks	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BenignMallocHooks($/;"	f
sqlite3BinaryCompareCollSeq	safe/sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3BinaryCompareCollSeq($/;"	f
sqlite3BitvecBuiltinTest	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecBuiltinTest(int sz, int *aOp){$/;"	f
sqlite3BitvecClear	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BitvecClear(Bitvec *p, u32 i, void *pBuf){$/;"	f
sqlite3BitvecCreate	safe/sqlite3.c	/^SQLITE_PRIVATE Bitvec *sqlite3BitvecCreate(u32 iSize){$/;"	f
sqlite3BitvecDestroy	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BitvecDestroy(Bitvec *p){$/;"	f
sqlite3BitvecSet	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecSet(Bitvec *p, u32 i){$/;"	f
sqlite3BitvecSize	safe/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3BitvecSize(Bitvec *p){$/;"	f
sqlite3BitvecTest	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecTest(Bitvec *p, u32 i){$/;"	f
sqlite3BlockedList	safe/sqlite3.c	/^static sqlite3 *SQLITE_WSD sqlite3BlockedList = 0;$/;"	v	file:
sqlite3BtreeBeginStmt	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeBeginStmt(Btree *p, int iStatement){$/;"	f
sqlite3BtreeBeginTrans	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeBeginTrans(Btree *p, int wrflag){$/;"	f
sqlite3BtreeCacheOverflow	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeCacheOverflow(BtCursor *pCur){$/;"	f
sqlite3BtreeCheckpoint	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCheckpoint(Btree *p, int eMode, int *pnLog, int *pnCkpt){$/;"	f
sqlite3BtreeClearCursor	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeClearCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeClearTable	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeClearTable(Btree *p, int iTable, int *pnChange){$/;"	f
sqlite3BtreeClose	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeClose(Btree *p){$/;"	f
sqlite3BtreeCloseCursor	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCloseCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeCommit	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommit(Btree *p){$/;"	f
sqlite3BtreeCommitPhaseOne	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommitPhaseOne(Btree *p, const char *zMaster){$/;"	f
sqlite3BtreeCommitPhaseTwo	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommitPhaseTwo(Btree *p, int bCleanup){$/;"	f
sqlite3BtreeCopyFile	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCopyFile(Btree *pTo, Btree *pFrom){$/;"	f
sqlite3BtreeCount	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCount(BtCursor *pCur, i64 *pnEntry){$/;"	f
sqlite3BtreeCreateTable	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCreateTable(Btree *p, int *piTable, int flags){$/;"	f
sqlite3BtreeCursor	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursor($/;"	f
sqlite3BtreeCursorHasMoved	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorHasMoved(BtCursor *pCur, int *pHasMoved){$/;"	f
sqlite3BtreeCursorIsValid	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorIsValid(BtCursor *pCur){$/;"	f
sqlite3BtreeCursorSize	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorSize(void){$/;"	f
sqlite3BtreeCursorZero	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeCursorZero(BtCursor *p){$/;"	f
sqlite3BtreeData	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeData(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){$/;"	f
sqlite3BtreeDataFetch	safe/sqlite3.c	/^SQLITE_PRIVATE const void *sqlite3BtreeDataFetch(BtCursor *pCur, int *pAmt){$/;"	f
sqlite3BtreeDataSize	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeDataSize(BtCursor *pCur, u32 *pSize){$/;"	f
sqlite3BtreeDelete	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeDelete(BtCursor *pCur){$/;"	f
sqlite3BtreeDropTable	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeDropTable(Btree *p, int iTable, int *piMoved){$/;"	f
sqlite3BtreeEnter	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeEnter(Btree *p){$/;"	f
sqlite3BtreeEnter	safe/sqlite3.c	8448;"	d	file:
sqlite3BtreeEnterAll	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeEnterAll(sqlite3 *db){$/;"	f
sqlite3BtreeEnterAll	safe/sqlite3.c	8449;"	d	file:
sqlite3BtreeEnterCursor	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeEnterCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeEnterCursor	safe/sqlite3.c	8468;"	d	file:
sqlite3BtreeEof	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeEof(BtCursor *pCur){$/;"	f
sqlite3BtreeFirst	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeFirst(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeGetAutoVacuum	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetAutoVacuum(Btree *p){$/;"	f
sqlite3BtreeGetCachedRowid	safe/sqlite3.c	/^SQLITE_PRIVATE sqlite3_int64 sqlite3BtreeGetCachedRowid(BtCursor *pCur){$/;"	f
sqlite3BtreeGetFilename	safe/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3BtreeGetFilename(Btree *p){$/;"	f
sqlite3BtreeGetJournalname	safe/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3BtreeGetJournalname(Btree *p){$/;"	f
sqlite3BtreeGetMeta	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *p, int idx, u32 *pMeta){$/;"	f
sqlite3BtreeGetPageSize	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetPageSize(Btree *p){$/;"	f
sqlite3BtreeGetReserve	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetReserve(Btree *p){$/;"	f
sqlite3BtreeHoldsAllMutexes	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeHoldsAllMutexes(sqlite3 *db){$/;"	f
sqlite3BtreeHoldsAllMutexes	safe/sqlite3.c	8473;"	d	file:
sqlite3BtreeHoldsMutex	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeHoldsMutex(Btree *p){$/;"	f
sqlite3BtreeHoldsMutex	safe/sqlite3.c	8472;"	d	file:
sqlite3BtreeIncrVacuum	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIncrVacuum(Btree *p){$/;"	f
sqlite3BtreeInsert	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeInsert($/;"	f
sqlite3BtreeIntegrityCheck	safe/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3BtreeIntegrityCheck($/;"	f
sqlite3BtreeIsInBackup	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInBackup(Btree *p){$/;"	f
sqlite3BtreeIsInReadTrans	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInReadTrans(Btree *p){$/;"	f
sqlite3BtreeIsInTrans	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInTrans(Btree *p){$/;"	f
sqlite3BtreeKey	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeKey(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){$/;"	f
sqlite3BtreeKeyFetch	safe/sqlite3.c	/^SQLITE_PRIVATE const void *sqlite3BtreeKeyFetch(BtCursor *pCur, int *pAmt){$/;"	f
sqlite3BtreeKeySize	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeKeySize(BtCursor *pCur, i64 *pSize){$/;"	f
sqlite3BtreeLast	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeLast(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeLastPage	safe/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3BtreeLastPage(Btree *p){$/;"	f
sqlite3BtreeLeave	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeLeave(Btree *p){$/;"	f
sqlite3BtreeLeave	safe/sqlite3.c	8467;"	d	file:
sqlite3BtreeLeaveAll	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeLeaveAll(sqlite3 *db){$/;"	f
sqlite3BtreeLeaveAll	safe/sqlite3.c	8470;"	d	file:
sqlite3BtreeLeaveCursor	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeLeaveCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeLeaveCursor	safe/sqlite3.c	8469;"	d	file:
sqlite3BtreeLockTable	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeLockTable(Btree *p, int iTab, u8 isWriteLock){$/;"	f
sqlite3BtreeMaxPageCount	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeMaxPageCount(Btree *p, int mxPage){$/;"	f
sqlite3BtreeMovetoUnpacked	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeMovetoUnpacked($/;"	f
sqlite3BtreeNext	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeNext(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeOpen	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeOpen($/;"	f
sqlite3BtreePager	safe/sqlite3.c	/^SQLITE_PRIVATE Pager *sqlite3BtreePager(Btree *p){$/;"	f
sqlite3BtreePrevious	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreePrevious(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreePutData	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreePutData(BtCursor *pCsr, u32 offset, u32 amt, void *z){$/;"	f
sqlite3BtreeRollback	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeRollback(Btree *p, int tripCode){$/;"	f
sqlite3BtreeSavepoint	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSavepoint(Btree *p, int op, int iSavepoint){$/;"	f
sqlite3BtreeSchema	safe/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3BtreeSchema(Btree *p, int nBytes, void(*xFree)(void *)){$/;"	f
sqlite3BtreeSchemaLocked	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSchemaLocked(Btree *p){$/;"	f
sqlite3BtreeSecureDelete	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSecureDelete(Btree *p, int newFlag){$/;"	f
sqlite3BtreeSetAutoVacuum	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetAutoVacuum(Btree *p, int autoVacuum){$/;"	f
sqlite3BtreeSetCacheSize	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetCacheSize(Btree *p, int mxPage){$/;"	f
sqlite3BtreeSetCachedRowid	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeSetCachedRowid(BtCursor *pCur, sqlite3_int64 iRowid){$/;"	f
sqlite3BtreeSetPageSize	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){$/;"	f
sqlite3BtreeSetSafetyLevel	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetSafetyLevel($/;"	f
sqlite3BtreeSetVersion	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetVersion(Btree *pBtree, int iVersion){$/;"	f
sqlite3BtreeSharable	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSharable(Btree *p){$/;"	f
sqlite3BtreeSharable	safe/sqlite3.c	8466;"	d	file:
sqlite3BtreeSyncDisabled	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSyncDisabled(Btree *p){$/;"	f
sqlite3BtreeTripAllCursors	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeTripAllCursors(Btree *pBtree, int errCode){$/;"	f
sqlite3BtreeUpdateMeta	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeUpdateMeta(Btree *p, int idx, u32 iMeta){$/;"	f
sqlite3CantopenError	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CantopenError(int lineno){$/;"	f
sqlite3ChangeCookie	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ChangeCookie(Parse *pParse, int iDb){$/;"	f
sqlite3CheckCollSeq	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CheckCollSeq(Parse *pParse, CollSeq *pColl){$/;"	f
sqlite3CheckObjectName	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CheckObjectName(Parse *pParse, const char *zName){$/;"	f
sqlite3Checkpoint	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Checkpoint(sqlite3 *db, int iDb, int eMode, int *pnLog, int *pnCkpt){$/;"	f
sqlite3ClearStatTables	safe/sqlite3.c	/^static void sqlite3ClearStatTables($/;"	f	file:
sqlite3ClearTempRegCache	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ClearTempRegCache(Parse *pParse){$/;"	f
sqlite3CloseExtensions	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CloseExtensions(sqlite3 *db){$/;"	f
sqlite3CloseExtensions	safe/sqlite3.c	12073;"	d	file:
sqlite3CloseSavepoints	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CloseSavepoints(sqlite3 *db){$/;"	f
sqlite3CodeDropTable	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeDropTable(Parse *pParse, Table *pTab, int iDb, int isView){$/;"	f
sqlite3CodeOnce	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CodeOnce(Parse *pParse){$/;"	f
sqlite3CodeRowTrigger	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeRowTrigger($/;"	f
sqlite3CodeRowTrigger	safe/sqlite3.c	11882;"	d	file:
sqlite3CodeRowTriggerDirect	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeRowTriggerDirect($/;"	f
sqlite3CodeRowTriggerDirect	safe/sqlite3.c	11883;"	d	file:
sqlite3CodeSubselect	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CodeSubselect($/;"	f
sqlite3CodeVerifyNamedSchema	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeVerifyNamedSchema(Parse *pParse, const char *zDb){$/;"	f
sqlite3CodeVerifySchema	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeVerifySchema(Parse *pParse, int iDb){$/;"	f
sqlite3CollapseDatabaseArray	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CollapseDatabaseArray(sqlite3 *db){$/;"	f
sqlite3ColumnDefault	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ColumnDefault(Vdbe *v, Table *pTab, int i, int iReg){$/;"	f
sqlite3CommitInternalChanges	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CommitInternalChanges(sqlite3 *db){$/;"	f
sqlite3CommitTransaction	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CommitTransaction(Parse *pParse){$/;"	f
sqlite3CompareAffinity	safe/sqlite3.c	/^SQLITE_PRIVATE char sqlite3CompareAffinity(Expr *pExpr, char aff2){$/;"	f
sqlite3CompleteInsertion	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CompleteInsertion($/;"	f
sqlite3Config	safe/sqlite3.c	/^SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config = {$/;"	v
sqlite3Config	safe/sqlite3.c	/^SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config;$/;"	v
sqlite3ConnectionBlocked	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ConnectionBlocked(sqlite3 *db, sqlite3 *pBlocker){$/;"	f
sqlite3ConnectionBlocked	safe/sqlite3.c	12213;"	d	file:
sqlite3ConnectionClosed	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ConnectionClosed(sqlite3 *db){$/;"	f
sqlite3ConnectionClosed	safe/sqlite3.c	12215;"	d	file:
sqlite3ConnectionUnlocked	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ConnectionUnlocked(sqlite3 *db){$/;"	f
sqlite3ConnectionUnlocked	safe/sqlite3.c	12214;"	d	file:
sqlite3CorruptError	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CorruptError(int lineno){$/;"	f
sqlite3Coverage	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Coverage(int x){$/;"	f
sqlite3CreateColumnExpr	safe/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3CreateColumnExpr(sqlite3 *db, SrcList *pSrc, int iSrc, int iCol){$/;"	f
sqlite3CreateForeignKey	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CreateForeignKey($/;"	f
sqlite3CreateFunc	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CreateFunc($/;"	f
sqlite3CreateIndex	safe/sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3CreateIndex($/;"	f
sqlite3CreateView	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CreateView($/;"	f
sqlite3CtypeMap	safe/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[256] = {$/;"	v
sqlite3CtypeMap	safe/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[];$/;"	v
sqlite3DbFree	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DbFree(sqlite3 *db, void *p){$/;"	f
sqlite3DbMallocRaw	safe/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbMallocRaw(sqlite3 *db, int n){$/;"	f
sqlite3DbMallocSize	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3DbMallocSize(sqlite3 *db, void *p){$/;"	f
sqlite3DbMallocZero	safe/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbMallocZero(sqlite3 *db, int n){$/;"	f
sqlite3DbNameToBtree	safe/sqlite3.c	/^SQLITE_PRIVATE Btree *sqlite3DbNameToBtree(sqlite3 *db, const char *zDbName){$/;"	f
sqlite3DbRealloc	safe/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbRealloc(sqlite3 *db, void *p, int n){$/;"	f
sqlite3DbReallocOrFree	safe/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbReallocOrFree(sqlite3 *db, void *p, int n){$/;"	f
sqlite3DbStrDup	safe/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3DbStrDup(sqlite3 *db, const char *z){$/;"	f
sqlite3DbStrNDup	safe/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3DbStrNDup(sqlite3 *db, const char *z, int n){$/;"	f
sqlite3DebugPrintf	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DebugPrintf(const char *zFormat, ...){$/;"	f
sqlite3DebugPrintf	safe/sqlite3.c	39361;"	d	file:
sqlite3DefaultMutex	safe/sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3DefaultMutex(void){$/;"	f
sqlite3DefaultRowEst	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DefaultRowEst(Index *pIdx){$/;"	f
sqlite3DeferForeignKey	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeferForeignKey(Parse *pParse, int isDeferred){$/;"	f
sqlite3DeleteFrom	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteFrom($/;"	f
sqlite3DeleteIndexSamples	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteIndexSamples(sqlite3 *db, Index *pIdx){$/;"	f
sqlite3DeleteTable	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteTable(sqlite3 *db, Table *pTable){$/;"	f
sqlite3DeleteTrigger	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteTrigger(sqlite3 *db, Trigger *pTrigger){$/;"	f
sqlite3DeleteTrigger	safe/sqlite3.c	11879;"	d	file:
sqlite3DeleteTriggerStep	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteTriggerStep(sqlite3 *db, TriggerStep *pTriggerStep){$/;"	f
sqlite3Dequote	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Dequote(char *z){$/;"	f
sqlite3Detach	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Detach(Parse *pParse, Expr *pDbname){$/;"	f
sqlite3DropIndex	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropIndex(Parse *pParse, SrcList *pName, int ifExists){$/;"	f
sqlite3DropTable	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropTable(Parse *pParse, SrcList *pName, int isView, int noErr){$/;"	f
sqlite3DropTrigger	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropTrigger(Parse *pParse, SrcList *pName, int noErr){$/;"	f
sqlite3DropTriggerPtr	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropTriggerPtr(Parse *pParse, Trigger *pTrigger){$/;"	f
sqlite3DropTriggerPtr	safe/sqlite3.c	11880;"	d	file:
sqlite3EndBenignMalloc	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3EndBenignMalloc(void){$/;"	f
sqlite3EndBenignMalloc	safe/sqlite3.c	12175;"	d	file:
sqlite3EndTable	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3EndTable($/;"	f
sqlite3ErrStr	safe/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3ErrStr(int rc){$/;"	f
sqlite3Error	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Error(sqlite3 *db, int err_code, const char *zFormat, ...){$/;"	f
sqlite3ErrorMsg	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ErrorMsg(Parse *pParse, const char *zFormat, ...){$/;"	f
sqlite3ExpirePreparedStatements	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExpirePreparedStatements(sqlite3 *db){$/;"	f
sqlite3ExplainBegin	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExplainBegin(Vdbe *pVdbe){$/;"	f
sqlite3ExplainBegin	safe/sqlite3.c	11657;"	d	file:
sqlite3ExplainExpr	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExplainExpr(Vdbe *pOut, Expr *pExpr){$/;"	f
sqlite3ExplainExpr	safe/sqlite3.c	11659;"	d	file:
sqlite3ExplainExprList	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExplainExprList(Vdbe *pOut, ExprList *pList){$/;"	f
sqlite3ExplainExprList	safe/sqlite3.c	11660;"	d	file:
sqlite3ExplainFinish	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExplainFinish(Vdbe *pVdbe){$/;"	f
sqlite3ExplainFinish	safe/sqlite3.c	11661;"	d	file:
sqlite3ExplainNL	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExplainNL(Vdbe *pVdbe){$/;"	f
sqlite3ExplainPop	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExplainPop(Vdbe *p){$/;"	f
sqlite3ExplainPrintf	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExplainPrintf(Vdbe *pVdbe, const char *zFormat, ...){$/;"	f
sqlite3ExplainPush	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExplainPush(Vdbe *pVdbe){$/;"	f
sqlite3ExplainSelect	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExplainSelect(Vdbe *pVdbe, Select *p){$/;"	f
sqlite3ExplainSelect	safe/sqlite3.c	11658;"	d	file:
sqlite3Expr	safe/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3Expr($/;"	f
sqlite3ExprAffinity	safe/sqlite3.c	/^SQLITE_PRIVATE char sqlite3ExprAffinity(Expr *pExpr){$/;"	f
sqlite3ExprAlloc	safe/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAlloc($/;"	f
sqlite3ExprAnalyzeAggList	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAnalyzeAggList(NameContext *pNC, ExprList *pList){$/;"	f
sqlite3ExprAnalyzeAggregates	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAnalyzeAggregates(NameContext *pNC, Expr *pExpr){$/;"	f
sqlite3ExprAnd	safe/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAnd(sqlite3 *db, Expr *pLeft, Expr *pRight){$/;"	f
sqlite3ExprAssignVarNumber	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAssignVarNumber(Parse *pParse, Expr *pExpr){$/;"	f
sqlite3ExprAttachSubtrees	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAttachSubtrees($/;"	f
sqlite3ExprCacheAffinityChange	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheAffinityChange(Parse *pParse, int iStart, int iCount){$/;"	f
sqlite3ExprCacheClear	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheClear(Parse *pParse){$/;"	f
sqlite3ExprCachePinRegister	safe/sqlite3.c	/^static void sqlite3ExprCachePinRegister(Parse *pParse, int iReg){$/;"	f	file:
sqlite3ExprCachePop	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCachePop(Parse *pParse, int N){$/;"	f
sqlite3ExprCachePush	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCachePush(Parse *pParse){$/;"	f
sqlite3ExprCacheRemove	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheRemove(Parse *pParse, int iReg, int nReg){$/;"	f
sqlite3ExprCacheStore	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheStore(Parse *pParse, int iTab, int iCol, int iReg){$/;"	f
sqlite3ExprCanBeNull	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCanBeNull(const Expr *p){$/;"	f
sqlite3ExprCheckHeight	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCheckHeight(Parse *pParse, int nHeight){$/;"	f
sqlite3ExprCheckHeight	safe/sqlite3.c	12202;"	d	file:
sqlite3ExprCode	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCode(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeAndCache	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeAndCache(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeConstants	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeConstants(Parse *pParse, Expr *pExpr){$/;"	f
sqlite3ExprCodeCopy	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeCopy(Parse *pParse, int iFrom, int iTo, int nReg){$/;"	f
sqlite3ExprCodeExprList	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeExprList($/;"	f
sqlite3ExprCodeGetColumn	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeGetColumn($/;"	f
sqlite3ExprCodeGetColumnOfTable	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeGetColumnOfTable($/;"	f
sqlite3ExprCodeIN	safe/sqlite3.c	/^static void sqlite3ExprCodeIN($/;"	f	file:
sqlite3ExprCodeIsNullJump	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeIsNullJump($/;"	f
sqlite3ExprCodeMove	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeMove(Parse *pParse, int iFrom, int iTo, int nReg){$/;"	f
sqlite3ExprCodeTarget	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeTarget(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeTemp	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeTemp(Parse *pParse, Expr *pExpr, int *pReg){$/;"	f
sqlite3ExprCollSeq	safe/sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3ExprCollSeq(Parse *pParse, Expr *pExpr){$/;"	f
sqlite3ExprCompare	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCompare(Expr *pA, Expr *pB){$/;"	f
sqlite3ExprDelete	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprDelete(sqlite3 *db, Expr *p){$/;"	f
sqlite3ExprDup	safe/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprDup(sqlite3 *db, Expr *p, int flags){$/;"	f
sqlite3ExprFunction	safe/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprFunction(Parse *pParse, ExprList *pList, Token *pToken){$/;"	f
sqlite3ExprIfFalse	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprIfFalse(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){$/;"	f
sqlite3ExprIfTrue	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprIfTrue(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){$/;"	f
sqlite3ExprIsConstant	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstant(Expr *p){$/;"	f
sqlite3ExprIsConstantNotJoin	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstantNotJoin(Expr *p){$/;"	f
sqlite3ExprIsConstantOrFunction	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstantOrFunction(Expr *p){$/;"	f
sqlite3ExprIsInteger	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsInteger(Expr *p, int *pValue){$/;"	f
sqlite3ExprListAppend	safe/sqlite3.c	/^SQLITE_PRIVATE ExprList *sqlite3ExprListAppend($/;"	f
sqlite3ExprListCheckLength	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListCheckLength($/;"	f
sqlite3ExprListCompare	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprListCompare(ExprList *pA, ExprList *pB){$/;"	f
sqlite3ExprListDelete	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListDelete(sqlite3 *db, ExprList *pList){$/;"	f
sqlite3ExprListDup	safe/sqlite3.c	/^SQLITE_PRIVATE ExprList *sqlite3ExprListDup(sqlite3 *db, ExprList *p, int flags){$/;"	f
sqlite3ExprListSetName	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListSetName($/;"	f
sqlite3ExprListSetSpan	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListSetSpan($/;"	f
sqlite3ExprNeedsNoAffinityChange	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprNeedsNoAffinityChange(const Expr *p, char aff){$/;"	f
sqlite3ExprSetColl	safe/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprSetColl(Expr *pExpr, CollSeq *pColl){$/;"	f
sqlite3ExprSetCollByToken	safe/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprSetCollByToken(Parse *pParse, Expr *pExpr, Token *pCollName){$/;"	f
sqlite3ExprSetHeight	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprSetHeight(Parse *pParse, Expr *p){$/;"	f
sqlite3ExprSetHeight	safe/sqlite3.c	12200;"	d	file:
sqlite3FileSuffix3	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FileSuffix3(const char *zBaseFilename, char *z){$/;"	f
sqlite3FileSuffix3	safe/sqlite3.c	11982;"	d	file:
sqlite3FindCollSeq	safe/sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3FindCollSeq($/;"	f
sqlite3FindDb	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindDb(sqlite3 *db, Token *pName){$/;"	f
sqlite3FindDbName	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindDbName(sqlite3 *db, const char *zName){$/;"	f
sqlite3FindFunction	safe/sqlite3.c	/^SQLITE_PRIVATE FuncDef *sqlite3FindFunction($/;"	f
sqlite3FindInIndex	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindInIndex(Parse *pParse, Expr *pX, int *prNotFound){$/;"	f
sqlite3FindIndex	safe/sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3FindIndex(sqlite3 *db, const char *zName, const char *zDb){$/;"	f
sqlite3FindTable	safe/sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3FindTable(sqlite3 *db, const char *zName, const char *zDatabase){$/;"	f
sqlite3FinishCoding	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FinishCoding(Parse *pParse){$/;"	f
sqlite3FinishTrigger	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FinishTrigger($/;"	f
sqlite3FixExpr	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixExpr($/;"	f
sqlite3FixExprList	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixExprList($/;"	f
sqlite3FixInit	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixInit($/;"	f
sqlite3FixSelect	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixSelect($/;"	f
sqlite3FixSrcList	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixSrcList($/;"	f
sqlite3FixTriggerStep	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixTriggerStep($/;"	f
sqlite3FkActions	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkActions($/;"	f
sqlite3FkActions	safe/sqlite3.c	12146;"	d	file:
sqlite3FkCheck	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkCheck($/;"	f
sqlite3FkCheck	safe/sqlite3.c	12147;"	d	file:
sqlite3FkDelete	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkDelete(sqlite3 *db, Table *pTab){$/;"	f
sqlite3FkDelete	safe/sqlite3.c	12155;"	d	file:
sqlite3FkDropTable	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkDropTable(Parse *pParse, SrcList *pName, Table *pTab){$/;"	f
sqlite3FkDropTable	safe/sqlite3.c	12148;"	d	file:
sqlite3FkOldmask	safe/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3FkOldmask($/;"	f
sqlite3FkOldmask	safe/sqlite3.c	12149;"	d	file:
sqlite3FkReferences	safe/sqlite3.c	/^SQLITE_PRIVATE FKey *sqlite3FkReferences(Table *pTab){$/;"	f
sqlite3FkRequired	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FkRequired($/;"	f
sqlite3FkRequired	safe/sqlite3.c	12150;"	d	file:
sqlite3Fts3AllSegdirs	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3AllSegdirs($/;"	f
sqlite3Fts3CacheDeferredDoclists	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3CacheDeferredDoclists(Fts3Cursor *pCsr){$/;"	f
sqlite3Fts3Corrupt	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Corrupt(){$/;"	f
sqlite3Fts3CreateStatTable	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3CreateStatTable(int *pRc, Fts3Table *p){$/;"	f
sqlite3Fts3DeferToken	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3DeferToken($/;"	f
sqlite3Fts3DeferredTokenList	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3DeferredTokenList($/;"	f
sqlite3Fts3Dequote	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Dequote(char *z){$/;"	f
sqlite3Fts3DoclistNext	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3DoclistNext($/;"	f
sqlite3Fts3DoclistPrev	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3DoclistPrev($/;"	f
sqlite3Fts3EvalPhraseCleanup	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3EvalPhraseCleanup(Fts3Phrase *pPhrase){$/;"	f
sqlite3Fts3EvalPhrasePoslist	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3EvalPhrasePoslist($/;"	f
sqlite3Fts3EvalPhraseStats	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3EvalPhraseStats($/;"	f
sqlite3Fts3ExprFree	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3ExprFree(Fts3Expr *p){$/;"	f
sqlite3Fts3ExprInitTestInterface	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ExprInitTestInterface(sqlite3* db){$/;"	f
sqlite3Fts3ExprParse	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ExprParse($/;"	f
sqlite3Fts3FirstFilter	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3FirstFilter($/;"	f
sqlite3Fts3FreeDeferredDoclists	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3FreeDeferredDoclists(Fts3Cursor *pCsr){$/;"	f
sqlite3Fts3FreeDeferredTokens	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3FreeDeferredTokens(Fts3Cursor *pCsr){$/;"	f
sqlite3Fts3GetVarint	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3GetVarint(const char *p, sqlite_int64 *v){$/;"	f
sqlite3Fts3GetVarint32	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3GetVarint32(const char *p, int *pi){$/;"	f
sqlite3Fts3HashClear	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3HashClear(Fts3Hash *pH){$/;"	f
sqlite3Fts3HashFind	safe/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Fts3HashFind(const Fts3Hash *pH, const void *pKey, int nKey){$/;"	f
sqlite3Fts3HashFindElem	safe/sqlite3.c	/^SQLITE_PRIVATE Fts3HashElem *sqlite3Fts3HashFindElem($/;"	f
sqlite3Fts3HashInit	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3HashInit(Fts3Hash *pNew, char keyClass, char copyKey){$/;"	f
sqlite3Fts3HashInsert	safe/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Fts3HashInsert($/;"	f
sqlite3Fts3IcuTokenizerModule	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3IcuTokenizerModule($/;"	f
sqlite3Fts3Incrmerge	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Incrmerge(Fts3Table *p, int nMerge, int nMin){$/;"	f
sqlite3Fts3Init	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Init(sqlite3 *db){$/;"	f
sqlite3Fts3InitAux	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitAux(sqlite3 *db){$/;"	f
sqlite3Fts3InitHashTable	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitHashTable($/;"	f
sqlite3Fts3InitTokenizer	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitTokenizer($/;"	f
sqlite3Fts3IsIdChar	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3IsIdChar(char c){$/;"	f
sqlite3Fts3Matchinfo	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Matchinfo($/;"	f
sqlite3Fts3MaxLevel	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MaxLevel(Fts3Table *p, int *pnMax){$/;"	f
sqlite3Fts3MsrIncrNext	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrNext($/;"	f
sqlite3Fts3MsrIncrRestart	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrRestart(Fts3MultiSegReader *pCsr){$/;"	f
sqlite3Fts3MsrIncrStart	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrStart($/;"	f
sqlite3Fts3MsrOvfl	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrOvfl($/;"	f
sqlite3Fts3NextToken	safe/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3Fts3NextToken(const char *zStr, int *pn){$/;"	f
sqlite3Fts3Offsets	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Offsets($/;"	f
sqlite3Fts3OpenTokenizer	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3OpenTokenizer($/;"	f
sqlite3Fts3Optimize	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Optimize(Fts3Table *p){$/;"	f
sqlite3Fts3PendingTermsClear	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3PendingTermsClear(Fts3Table *p){$/;"	f
sqlite3Fts3PendingTermsFlush	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3PendingTermsFlush(Fts3Table *p){$/;"	f
sqlite3Fts3PorterTokenizerModule	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3PorterTokenizerModule($/;"	f
sqlite3Fts3PutVarint	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3PutVarint(char *p, sqlite_int64 v){$/;"	f
sqlite3Fts3ReadBlock	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ReadBlock($/;"	f
sqlite3Fts3ReadLock	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ReadLock(Fts3Table *p){$/;"	f
sqlite3Fts3SegReaderCursor	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderCursor($/;"	f
sqlite3Fts3SegReaderFinish	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SegReaderFinish($/;"	f
sqlite3Fts3SegReaderFree	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SegReaderFree(Fts3SegReader *pReader){$/;"	f
sqlite3Fts3SegReaderNew	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderNew($/;"	f
sqlite3Fts3SegReaderPending	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderPending($/;"	f
sqlite3Fts3SegReaderStart	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderStart($/;"	f
sqlite3Fts3SegReaderStep	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderStep($/;"	f
sqlite3Fts3SegmentsClose	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SegmentsClose(Fts3Table *p){$/;"	f
sqlite3Fts3SelectDocsize	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SelectDocsize($/;"	f
sqlite3Fts3SelectDoctotal	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SelectDoctotal($/;"	f
sqlite3Fts3SimpleTokenizerModule	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SimpleTokenizerModule($/;"	f
sqlite3Fts3Snippet	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Snippet($/;"	f
sqlite3Fts3UnicodeTokenizer	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3UnicodeTokenizer(sqlite3_tokenizer_module const **ppModule){$/;"	f
sqlite3Fts3UpdateMethod	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3UpdateMethod($/;"	f
sqlite3Fts3VarintLen	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3VarintLen(sqlite3_uint64 v){$/;"	f
sqlite3FtsUnicodeFold	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FtsUnicodeFold(int c, int bRemoveDiacritic){$/;"	f
sqlite3FtsUnicodeIsalnum	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FtsUnicodeIsalnum(int c){$/;"	f
sqlite3FtsUnicodeIsdiacritic	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FtsUnicodeIsdiacritic(int c){$/;"	f
sqlite3FuncDefInsert	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FuncDefInsert($/;"	f
sqlite3FunctionUsesOtherSrc	safe/sqlite3.c	/^static int sqlite3FunctionUsesOtherSrc(Expr *pExpr, SrcList *pSrcList){$/;"	f	file:
sqlite3GenerateConstraintChecks	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateConstraintChecks($/;"	f
sqlite3GenerateIndexKey	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3GenerateIndexKey($/;"	f
sqlite3GenerateRowDelete	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateRowDelete($/;"	f
sqlite3GenerateRowIndexDelete	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateRowIndexDelete($/;"	f
sqlite3Get4byte	safe/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3Get4byte(const u8 *p){$/;"	f
sqlite3GetBoolean	safe/sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3GetBoolean(const char *z, int dflt){$/;"	f
sqlite3GetCollSeq	safe/sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3GetCollSeq($/;"	f
sqlite3GetFuncCollSeq	safe/sqlite3.c	/^static CollSeq *sqlite3GetFuncCollSeq(sqlite3_context *context){$/;"	f	file:
sqlite3GetInt32	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetInt32(const char *zNum, int *pValue){$/;"	f
sqlite3GetTempRange	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetTempRange(Parse *pParse, int nReg){$/;"	f
sqlite3GetTempReg	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetTempReg(Parse *pParse){$/;"	f
sqlite3GetToken	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetToken(const unsigned char *z, int *tokenType){$/;"	f
sqlite3GetVTable	safe/sqlite3.c	/^SQLITE_PRIVATE VTable *sqlite3GetVTable(sqlite3 *db, Table *pTab){$/;"	f
sqlite3GetVTable	safe/sqlite3.c	12096;"	d	file:
sqlite3GetVarint	safe/sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3GetVarint(const unsigned char *p, u64 *v){$/;"	f
sqlite3GetVarint32	safe/sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3GetVarint32(const unsigned char *p, u32 *v){$/;"	f
sqlite3GetVdbe	safe/sqlite3.c	/^SQLITE_PRIVATE Vdbe *sqlite3GetVdbe(Parse *pParse){$/;"	f
sqlite3GlobalConfig	safe/sqlite3.c	8157;"	d	file:
sqlite3GlobalConfig	safe/sqlite3.c	8163;"	d	file:
sqlite3GlobalFunctions	safe/sqlite3.c	/^SQLITE_PRIVATE SQLITE_WSD FuncDefHash sqlite3GlobalFunctions;$/;"	v
sqlite3HaltConstraint	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3HaltConstraint(Parse *pParse, int onError, char *p4, int p4type){$/;"	f
sqlite3HashClear	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3HashClear(Hash *pH){$/;"	f
sqlite3HashFind	safe/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HashFind(const Hash *pH, const char *pKey, int nKey){$/;"	f
sqlite3HashInit	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3HashInit(Hash *pNew){$/;"	f
sqlite3HashInsert	safe/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HashInsert(Hash *pH, const char *pKey, int nKey, void *data){$/;"	f
sqlite3HeapNearlyFull	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3HeapNearlyFull(void){$/;"	f
sqlite3HexToBlob	safe/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HexToBlob(sqlite3 *db, const char *z, int n){$/;"	f
sqlite3HexToInt	safe/sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3HexToInt(int h){$/;"	f
sqlite3Hooks	safe/sqlite3.c	/^} sqlite3Hooks = { 0, 0 };$/;"	v	file:
sqlite3Hwtime	safe/sqlite3.c	/^  __inline__ sqlite_uint64 sqlite3Hwtime(void){$/;"	f
sqlite3Hwtime	safe/sqlite3.c	/^SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }$/;"	f
sqlite3IcuInit	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IcuInit(sqlite3 *db){$/;"	f
sqlite3IdListAppend	safe/sqlite3.c	/^SQLITE_PRIVATE IdList *sqlite3IdListAppend(sqlite3 *db, IdList *pList, Token *pToken){$/;"	f
sqlite3IdListDelete	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3IdListDelete(sqlite3 *db, IdList *pList){$/;"	f
sqlite3IdListDup	safe/sqlite3.c	/^SQLITE_PRIVATE IdList *sqlite3IdListDup(sqlite3 *db, IdList *p){$/;"	f
sqlite3IdListIndex	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IdListIndex(IdList *pList, const char *zName){$/;"	f
sqlite3IndexAffinityOk	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IndexAffinityOk(Expr *pExpr, char idx_affinity){$/;"	f
sqlite3IndexAffinityStr	safe/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3IndexAffinityStr(Vdbe *v, Index *pIdx){$/;"	f
sqlite3IndexKeyinfo	safe/sqlite3.c	/^SQLITE_PRIVATE KeyInfo *sqlite3IndexKeyinfo(Parse *pParse, Index *pIdx){$/;"	f
sqlite3IndexedByLookup	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IndexedByLookup(Parse *pParse, struct SrcList_item *pFrom){$/;"	f
sqlite3Init	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Init(sqlite3 *db, char **pzErrMsg){$/;"	f
sqlite3InitCallback	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3InitCallback(void *pInit, int argc, char **argv, char **NotUsed){$/;"	f
sqlite3InitInfo	safe/sqlite3.c	/^  struct sqlite3InitInfo {      \/* Information used during initialization *\/$/;"	s	struct:sqlite3	file:
sqlite3InitOne	safe/sqlite3.c	/^static int sqlite3InitOne(sqlite3 *db, int iDb, char **pzErrMsg){$/;"	f	file:
sqlite3Insert	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Insert($/;"	f
sqlite3IntTokens	safe/sqlite3.c	/^SQLITE_PRIVATE const Token sqlite3IntTokens[] = {$/;"	v
sqlite3IntTokens	safe/sqlite3.c	/^SQLITE_PRIVATE const Token sqlite3IntTokens[];$/;"	v
sqlite3InvalidFunction	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3InvalidFunction($/;"	f
sqlite3InvokeBusyHandler	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3InvokeBusyHandler(BusyHandler *p){$/;"	f
sqlite3IoTrace	safe/sqlite3.c	/^SQLITE_PRIVATE void (*sqlite3IoTrace)(const char*, ...) = 0;$/;"	v
sqlite3IoTrace	safe/sqlite3.c	/^SQLITE_PRIVATE void (*sqlite3IoTrace)(const char*,...);$/;"	v
sqlite3IsEbcdicIdChar	safe/sqlite3.c	/^SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[] = {$/;"	v
sqlite3IsEbcdicIdChar	safe/sqlite3.c	/^SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[];$/;"	v
sqlite3IsLikeFunction	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsLikeFunction(sqlite3 *db, Expr *pExpr, int *pIsNocase, char *aWc){$/;"	f
sqlite3IsMemJournal	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsMemJournal(sqlite3_file *pJfd){$/;"	f
sqlite3IsNaN	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsNaN(double x){$/;"	f
sqlite3IsNaN	safe/sqlite3.c	11627;"	d	file:
sqlite3IsNumericAffinity	safe/sqlite3.c	10158;"	d	file:
sqlite3IsReadOnly	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsReadOnly(Parse *pParse, Table *pTab, int viewOk){$/;"	f
sqlite3IsRowid	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsRowid(const char *z){$/;"	f
sqlite3Isalnum	safe/sqlite3.c	11542;"	d	file:
sqlite3Isalnum	safe/sqlite3.c	11550;"	d	file:
sqlite3Isalpha	safe/sqlite3.c	11543;"	d	file:
sqlite3Isalpha	safe/sqlite3.c	11551;"	d	file:
sqlite3Isdigit	safe/sqlite3.c	11544;"	d	file:
sqlite3Isdigit	safe/sqlite3.c	11552;"	d	file:
sqlite3Isspace	safe/sqlite3.c	11541;"	d	file:
sqlite3Isspace	safe/sqlite3.c	11549;"	d	file:
sqlite3Isxdigit	safe/sqlite3.c	11545;"	d	file:
sqlite3Isxdigit	safe/sqlite3.c	11553;"	d	file:
sqlite3JoinType	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3JoinType(Parse *pParse, Token *pA, Token *pB, Token *pC){$/;"	f
sqlite3JournalCreate	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalCreate(sqlite3_file *p){$/;"	f
sqlite3JournalModename	safe/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3JournalModename(int eMode){$/;"	f
sqlite3JournalOpen	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalOpen($/;"	f
sqlite3JournalSize	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalSize(sqlite3_vfs *pVfs){$/;"	f
sqlite3JournalSize	safe/sqlite3.c	12188;"	d	file:
sqlite3KeywordCode	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3KeywordCode(const unsigned char *z, int n){$/;"	f
sqlite3LimitWhere	safe/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3LimitWhere($/;"	f
sqlite3LoadExtension	safe/sqlite3.c	/^static int sqlite3LoadExtension($/;"	f	file:
sqlite3LocateCollSeq	safe/sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char *zName){$/;"	f
sqlite3LocateTable	safe/sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3LocateTable($/;"	f
sqlite3LockAndPrepare	safe/sqlite3.c	/^static int sqlite3LockAndPrepare($/;"	f	file:
sqlite3MAppendf	safe/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3MAppendf(sqlite3 *db, char *zStr, const char *zFormat, ...){$/;"	f
sqlite3MPrintf	safe/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3MPrintf(sqlite3 *db, const char *zFormat, ...){$/;"	f
sqlite3Malloc	safe/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Malloc(int n){$/;"	f
sqlite3MallocAlarm	safe/sqlite3.c	/^static void sqlite3MallocAlarm(int nByte){$/;"	f	file:
sqlite3MallocEnd	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MallocEnd(void){$/;"	f
sqlite3MallocInit	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MallocInit(void){$/;"	f
sqlite3MallocSize	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MallocSize(void *p){$/;"	f
sqlite3MallocZero	safe/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3MallocZero(int n){$/;"	f
sqlite3MaterializeView	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MaterializeView($/;"	f
sqlite3MayAbort	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MayAbort(Parse *pParse){$/;"	f
sqlite3MemCompare	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemCompare(const Mem *pMem1, const Mem *pMem2, const CollSeq *pColl){$/;"	f
sqlite3MemFree	safe/sqlite3.c	/^static void sqlite3MemFree(void *pPrior){ return; }$/;"	f	file:
sqlite3MemFree	safe/sqlite3.c	/^static void sqlite3MemFree(void *pPrior){$/;"	f	file:
sqlite3MemGetMemsys3	safe/sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys3(void){$/;"	f
sqlite3MemGetMemsys5	safe/sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys5(void){$/;"	f
sqlite3MemGetWin32	safe/sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetWin32(void){$/;"	f
sqlite3MemInit	safe/sqlite3.c	/^static int sqlite3MemInit(void *NotUsed){ return SQLITE_OK; }$/;"	f	file:
sqlite3MemInit	safe/sqlite3.c	/^static int sqlite3MemInit(void *NotUsed){$/;"	f	file:
sqlite3MemJournalOpen	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemJournalOpen(sqlite3_file *pJfd){$/;"	f
sqlite3MemJournalSize	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemJournalSize(void){$/;"	f
sqlite3MemMalloc	safe/sqlite3.c	/^static void *sqlite3MemMalloc(int nByte){ return 0; }$/;"	f	file:
sqlite3MemMalloc	safe/sqlite3.c	/^static void *sqlite3MemMalloc(int nByte){$/;"	f	file:
sqlite3MemRealloc	safe/sqlite3.c	/^static void *sqlite3MemRealloc(void *pPrior, int nByte){ return 0; }$/;"	f	file:
sqlite3MemRealloc	safe/sqlite3.c	/^static void *sqlite3MemRealloc(void *pPrior, int nByte){$/;"	f	file:
sqlite3MemRoundup	safe/sqlite3.c	/^static int sqlite3MemRoundup(int n){ return n; }$/;"	f	file:
sqlite3MemRoundup	safe/sqlite3.c	/^static int sqlite3MemRoundup(int n){$/;"	f	file:
sqlite3MemSetDefault	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemSetDefault(void){$/;"	f
sqlite3MemShutdown	safe/sqlite3.c	/^static void sqlite3MemShutdown(void *NotUsed){ return; }$/;"	f	file:
sqlite3MemShutdown	safe/sqlite3.c	/^static void sqlite3MemShutdown(void *NotUsed){$/;"	f	file:
sqlite3MemSize	safe/sqlite3.c	/^static int sqlite3MemSize(void *p){$/;"	f	file:
sqlite3MemSize	safe/sqlite3.c	/^static int sqlite3MemSize(void *pPrior){ return 0; }$/;"	f	file:
sqlite3MemSize	safe/sqlite3.c	/^static int sqlite3MemSize(void *pPrior){$/;"	f	file:
sqlite3MemdebugBacktrace	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugBacktrace(int depth){$/;"	f
sqlite3MemdebugBacktraceCallback	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugBacktraceCallback(void (*xBacktrace)(int, int, void **)){$/;"	f
sqlite3MemdebugDump	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugDump(const char *zFilename){$/;"	f
sqlite3MemdebugHasType	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugHasType(void *p, u8 eType){$/;"	f
sqlite3MemdebugHasType	safe/sqlite3.c	12270;"	d	file:
sqlite3MemdebugMallocCount	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugMallocCount(){$/;"	f
sqlite3MemdebugNoType	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugNoType(void *p, u8 eType){$/;"	f
sqlite3MemdebugNoType	safe/sqlite3.c	12271;"	d	file:
sqlite3MemdebugSetType	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSetType(void *p, u8 eType){$/;"	f
sqlite3MemdebugSetType	safe/sqlite3.c	12269;"	d	file:
sqlite3MemdebugSettitle	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSettitle(const char *zTitle){$/;"	f
sqlite3MemdebugSync	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSync(){$/;"	f
sqlite3MemoryAlarm	safe/sqlite3.c	/^static int sqlite3MemoryAlarm($/;"	f	file:
sqlite3Memsys3Dump	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Memsys3Dump(const char *zFilename){$/;"	f
sqlite3Memsys5Dump	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Memsys5Dump(const char *zFilename){$/;"	f
sqlite3MemsysGetHeader	safe/sqlite3.c	/^static struct MemBlockHdr *sqlite3MemsysGetHeader(void *pAllocation){$/;"	f	file:
sqlite3MinimumFileFormat	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MinimumFileFormat(Parse *pParse, int iDb, int minFormat){$/;"	f
sqlite3MisuseError	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MisuseError(int lineno){$/;"	f
sqlite3MulInt64	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MulInt64(i64 *pA, i64 iB){$/;"	f
sqlite3MultiWrite	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MultiWrite(Parse *pParse){$/;"	f
sqlite3MutexAlloc	safe/sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex *sqlite3MutexAlloc(int id){$/;"	f
sqlite3MutexAlloc	safe/sqlite3.c	9653;"	d	file:
sqlite3MutexEnd	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MutexEnd(void){$/;"	f
sqlite3MutexEnd	safe/sqlite3.c	9655;"	d	file:
sqlite3MutexInit	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MutexInit(void){ $/;"	f
sqlite3MutexInit	safe/sqlite3.c	9654;"	d	file:
sqlite3NameFromToken	safe/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3NameFromToken(sqlite3 *db, Token *pName){$/;"	f
sqlite3NestedParse	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3NestedParse(Parse *pParse, const char *zFormat, ...){$/;"	f
sqlite3NoopMutex	safe/sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3NoopMutex(void){$/;"	f
sqlite3OSTrace	safe/sqlite3.c	/^  int sqlite3OSTrace = SQLITE_DEBUG_OS_TRACE;$/;"	v
sqlite3OpcodeName	safe/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3OpcodeName(int i){$/;"	f
sqlite3OpcodeProperty	safe/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[] = OPFLG_INITIALIZER;$/;"	v
sqlite3OpcodeProperty	safe/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[];$/;"	v
sqlite3OpenMasterTable	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OpenMasterTable(Parse *p, int iDb){$/;"	f
sqlite3OpenTable	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OpenTable($/;"	f
sqlite3OpenTableAndIndices	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OpenTableAndIndices($/;"	f
sqlite3OpenTempDatabase	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OpenTempDatabase(Parse *pParse){$/;"	f
sqlite3OsAccess	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsAccess($/;"	f
sqlite3OsCheckReservedLock	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f
sqlite3OsClose	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsClose(sqlite3_file *pId){$/;"	f
sqlite3OsCloseFree	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCloseFree(sqlite3_file *pFile){$/;"	f
sqlite3OsCurrentTimeInt64	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *pTimeOut){$/;"	f
sqlite3OsDelete	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){$/;"	f
sqlite3OsDeviceCharacteristics	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsDeviceCharacteristics(sqlite3_file *id){$/;"	f
sqlite3OsDlClose	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f
sqlite3OsDlError	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsDlError(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f
sqlite3OsDlOpen	safe/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3OsDlOpen(sqlite3_vfs *pVfs, const char *zPath){$/;"	f
sqlite3OsDlSym	safe/sqlite3.c	/^SQLITE_PRIVATE void (*sqlite3OsDlSym(sqlite3_vfs *pVfs, void *pHdle, const char *zSym))(void){$/;"	f
sqlite3OsFileControl	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f
sqlite3OsFileControlHint	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsFileControlHint(sqlite3_file *id, int op, void *pArg){$/;"	f
sqlite3OsFileSize	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFileSize(sqlite3_file *id, i64 *pSize){$/;"	f
sqlite3OsFullPathname	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFullPathname($/;"	f
sqlite3OsInit	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsInit(void){$/;"	f
sqlite3OsLock	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsLock(sqlite3_file *id, int lockType){$/;"	f
sqlite3OsOpen	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsOpen($/;"	f
sqlite3OsOpenMalloc	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsOpenMalloc($/;"	f
sqlite3OsRandomness	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f
sqlite3OsRead	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsRead(sqlite3_file *id, void *pBuf, int amt, i64 offset){$/;"	f
sqlite3OsSectorSize	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSectorSize(sqlite3_file *id){$/;"	f
sqlite3OsShmBarrier	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsShmBarrier(sqlite3_file *id){$/;"	f
sqlite3OsShmLock	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmLock(sqlite3_file *id, int offset, int n, int flags){$/;"	f
sqlite3OsShmMap	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmMap($/;"	f
sqlite3OsShmUnmap	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmUnmap(sqlite3_file *id, int deleteFlag){$/;"	f
sqlite3OsSleep	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSleep(sqlite3_vfs *pVfs, int nMicro){$/;"	f
sqlite3OsSync	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSync(sqlite3_file *id, int flags){$/;"	f
sqlite3OsTruncate	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsTruncate(sqlite3_file *id, i64 size){$/;"	f
sqlite3OsUnlock	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsUnlock(sqlite3_file *id, int lockType){$/;"	f
sqlite3OsWrite	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsWrite(sqlite3_file *id, const void *pBuf, int amt, i64 offset){$/;"	f
sqlite3PCacheBufferSetup	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PCacheBufferSetup(void *pBuf, int sz, int n){$/;"	f
sqlite3PCacheSetDefault	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PCacheSetDefault(void){$/;"	f
sqlite3PExpr	safe/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3PExpr($/;"	f
sqlite3PageFree	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PageFree(void *p){$/;"	f
sqlite3PageMalloc	safe/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PageMalloc(int sz){$/;"	f
sqlite3PagerAcquire	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerAcquire($/;"	f
sqlite3PagerBackupPtr	safe/sqlite3.c	/^SQLITE_PRIVATE sqlite3_backup **sqlite3PagerBackupPtr(Pager *pPager){$/;"	f
sqlite3PagerBegin	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerBegin(Pager *pPager, int exFlag, int subjInMemory){$/;"	f
sqlite3PagerCacheStat	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerCacheStat(Pager *pPager, int eStat, int reset, int *pnVal){$/;"	f
sqlite3PagerCheckpoint	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCheckpoint(Pager *pPager, int eMode, int *pnLog, int *pnCkpt){$/;"	f
sqlite3PagerClearCache	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerClearCache(Pager *pPager){$/;"	f
sqlite3PagerClose	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerClose(Pager *pPager){$/;"	f
sqlite3PagerCloseWal	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCloseWal(Pager *pPager){$/;"	f
sqlite3PagerCodec	safe/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerCodec(PgHdr *pPg){$/;"	f
sqlite3PagerCommitPhaseOne	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCommitPhaseOne($/;"	f
sqlite3PagerCommitPhaseTwo	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCommitPhaseTwo(Pager *pPager){$/;"	f
sqlite3PagerDontWrite	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerDontWrite(PgHdr *pPg){$/;"	f
sqlite3PagerExclusiveLock	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerExclusiveLock(Pager *pPager){$/;"	f
sqlite3PagerFile	safe/sqlite3.c	/^SQLITE_PRIVATE sqlite3_file *sqlite3PagerFile(Pager *pPager){$/;"	f
sqlite3PagerFilename	safe/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3PagerFilename(Pager *pPager, int nullIfMemDb){$/;"	f
sqlite3PagerGet	safe/sqlite3.c	9028;"	d	file:
sqlite3PagerGetCodec	safe/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerGetCodec(Pager *pPager){$/;"	f
sqlite3PagerGetData	safe/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerGetData(DbPage *pPg){$/;"	f
sqlite3PagerGetExtra	safe/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerGetExtra(DbPage *pPg){$/;"	f
sqlite3PagerGetJournalMode	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerGetJournalMode(Pager *pPager){$/;"	f
sqlite3PagerIsMemdb	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerIsMemdb(Pager *pPager){$/;"	f
sqlite3PagerIsreadonly	safe/sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3PagerIsreadonly(Pager *pPager){$/;"	f
sqlite3PagerIswriteable	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerIswriteable(DbPage *pPg){$/;"	f
sqlite3PagerJournalSizeLimit	safe/sqlite3.c	/^SQLITE_PRIVATE i64 sqlite3PagerJournalSizeLimit(Pager *pPager, i64 iLimit){$/;"	f
sqlite3PagerJournalname	safe/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3PagerJournalname(Pager *pPager){$/;"	f
sqlite3PagerLockingMode	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerLockingMode(Pager *pPager, int eMode){$/;"	f
sqlite3PagerLookup	safe/sqlite3.c	/^SQLITE_PRIVATE DbPage *sqlite3PagerLookup(Pager *pPager, Pgno pgno){$/;"	f
sqlite3PagerMaxPageCount	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMaxPageCount(Pager *pPager, int mxPage){$/;"	f
sqlite3PagerMemUsed	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMemUsed(Pager *pPager){$/;"	f
sqlite3PagerMovepage	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMovepage(Pager *pPager, DbPage *pPg, Pgno pgno, int isCommit){$/;"	f
sqlite3PagerNosync	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerNosync(Pager *pPager){$/;"	f
sqlite3PagerOkToChangeJournalMode	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOkToChangeJournalMode(Pager *pPager){$/;"	f
sqlite3PagerOpen	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOpen($/;"	f
sqlite3PagerOpenSavepoint	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOpenSavepoint(Pager *pPager, int nSavepoint){$/;"	f
sqlite3PagerOpenWal	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOpenWal($/;"	f
sqlite3PagerPageRefcount	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerPageRefcount(DbPage *pPage){$/;"	f
sqlite3PagerPagecount	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerPagecount(Pager *pPager, int *pnPage){$/;"	f
sqlite3PagerPagenumber	safe/sqlite3.c	/^SQLITE_PRIVATE Pgno sqlite3PagerPagenumber(DbPage *pPg){$/;"	f
sqlite3PagerReadFileheader	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerReadFileheader(Pager *pPager, int N, unsigned char *pDest){$/;"	f
sqlite3PagerRef	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerRef(DbPage *pPg){$/;"	f
sqlite3PagerRefcount	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerRefcount(Pager *pPager){$/;"	f
sqlite3PagerRollback	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerRollback(Pager *pPager){$/;"	f
sqlite3PagerSavepoint	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSavepoint(Pager *pPager, int op, int iSavepoint){$/;"	f
sqlite3PagerSetBusyhandler	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetBusyhandler($/;"	f
sqlite3PagerSetCachesize	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetCachesize(Pager *pPager, int mxPage){$/;"	f
sqlite3PagerSetCodec	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetCodec($/;"	f
sqlite3PagerSetJournalMode	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSetJournalMode(Pager *pPager, int eMode){$/;"	f
sqlite3PagerSetPagesize	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSetPagesize(Pager *pPager, u32 *pPageSize, int nReserve){$/;"	f
sqlite3PagerSetSafetyLevel	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetSafetyLevel($/;"	f
sqlite3PagerSharedLock	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSharedLock(Pager *pPager){$/;"	f
sqlite3PagerShrink	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerShrink(Pager *pPager){$/;"	f
sqlite3PagerStats	safe/sqlite3.c	/^SQLITE_PRIVATE int *sqlite3PagerStats(Pager *pPager){$/;"	f
sqlite3PagerSync	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSync(Pager *pPager){$/;"	f
sqlite3PagerTempSpace	safe/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerTempSpace(Pager *pPager){$/;"	f
sqlite3PagerTruncateImage	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerTruncateImage(Pager *pPager, Pgno nPage){$/;"	f
sqlite3PagerUnref	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerUnref(DbPage *pPg){$/;"	f
sqlite3PagerVfs	safe/sqlite3.c	/^SQLITE_PRIVATE const sqlite3_vfs *sqlite3PagerVfs(Pager *pPager){$/;"	f
sqlite3PagerWalCallback	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWalCallback(Pager *pPager){$/;"	f
sqlite3PagerWalFramesize	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWalFramesize(Pager *pPager){$/;"	f
sqlite3PagerWalSupported	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWalSupported(Pager *pPager){$/;"	f
sqlite3PagerWrite	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWrite(DbPage *pDbPage){$/;"	f
sqlite3ParseToplevel	safe/sqlite3.c	11876;"	d	file:
sqlite3ParseToplevel	safe/sqlite3.c	11885;"	d	file:
sqlite3ParseUri	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ParseUri($/;"	f
sqlite3Parser	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Parser($/;"	f
sqlite3ParserARG_FETCH	safe/sqlite3.c	109155;"	d	file:
sqlite3ParserARG_PDECL	safe/sqlite3.c	109154;"	d	file:
sqlite3ParserARG_SDECL	safe/sqlite3.c	109153;"	d	file:
sqlite3ParserARG_STORE	safe/sqlite3.c	109156;"	d	file:
sqlite3ParserAlloc	safe/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3ParserAlloc(void *(*mallocProc)(size_t)){$/;"	f
sqlite3ParserFree	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ParserFree($/;"	f
sqlite3ParserStackPeak	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ParserStackPeak(void *p){$/;"	f
sqlite3ParserTOKENTYPE	safe/sqlite3.c	109131;"	d	file:
sqlite3ParserTrace	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ParserTrace(FILE *TraceFILE, char *zTracePrompt){$/;"	f
sqlite3PcacheCleanAll	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheCleanAll(PCache *pCache){$/;"	f
sqlite3PcacheClear	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClear(PCache *pCache){$/;"	f
sqlite3PcacheClearSyncFlags	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClearSyncFlags(PCache *pCache){$/;"	f
sqlite3PcacheClose	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClose(PCache *pCache){$/;"	f
sqlite3PcacheDirtyList	safe/sqlite3.c	/^SQLITE_PRIVATE PgHdr *sqlite3PcacheDirtyList(PCache *pCache){$/;"	f
sqlite3PcacheDrop	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheDrop(PgHdr *p){$/;"	f
sqlite3PcacheFetch	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheFetch($/;"	f
sqlite3PcacheGetCachesize	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheGetCachesize(PCache *pCache){$/;"	f
sqlite3PcacheInitialize	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheInitialize(void){$/;"	f
sqlite3PcacheIterateDirty	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheIterateDirty(PCache *pCache, void (*xIter)(PgHdr *)){$/;"	f
sqlite3PcacheMakeClean	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMakeClean(PgHdr *p){$/;"	f
sqlite3PcacheMakeDirty	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMakeDirty(PgHdr *p){$/;"	f
sqlite3PcacheMove	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMove(PgHdr *p, Pgno newPgno){$/;"	f
sqlite3PcacheOpen	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheOpen($/;"	f
sqlite3PcachePageRefcount	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcachePageRefcount(PgHdr *p){$/;"	f
sqlite3PcachePagecount	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcachePagecount(PCache *pCache){$/;"	f
sqlite3PcacheRef	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheRef(PgHdr *p){$/;"	f
sqlite3PcacheRefCount	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheRefCount(PCache *pCache){$/;"	f
sqlite3PcacheRelease	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheRelease(PgHdr *p){$/;"	f
sqlite3PcacheReleaseMemory	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheReleaseMemory(int nReq){$/;"	f
sqlite3PcacheSetCachesize	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheSetCachesize(PCache *pCache, int mxPage){$/;"	f
sqlite3PcacheSetPageSize	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheSetPageSize(PCache *pCache, int szPage){$/;"	f
sqlite3PcacheShrink	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheShrink(PCache *pCache){$/;"	f
sqlite3PcacheShutdown	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheShutdown(void){$/;"	f
sqlite3PcacheSize	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheSize(void){ return sizeof(PCache); }$/;"	f
sqlite3PcacheStats	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheStats($/;"	f
sqlite3PcacheTruncate	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheTruncate(PCache *pCache, Pgno pgno){$/;"	f
sqlite3PendingByte	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PendingByte = 0x40000000;$/;"	v
sqlite3PendingByte	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PendingByte;$/;"	v
sqlite3Pragma	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Pragma($/;"	f
sqlite3Prepare	safe/sqlite3.c	/^static int sqlite3Prepare($/;"	f	file:
sqlite3Prepare16	safe/sqlite3.c	/^static int sqlite3Prepare16($/;"	f	file:
sqlite3Prng	safe/sqlite3.c	/^} sqlite3Prng;$/;"	v	file:
sqlite3PrngResetState	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrngResetState(void){$/;"	f
sqlite3PrngRestoreState	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrngRestoreState(void){$/;"	f
sqlite3PrngSaveState	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrngSaveState(void){$/;"	f
sqlite3PrngType	safe/sqlite3.c	/^static SQLITE_WSD struct sqlite3PrngType {$/;"	s	file:
sqlite3Put4byte	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Put4byte(unsigned char *p, u32 v){$/;"	f
sqlite3PutVarint	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PutVarint(unsigned char *p, u64 v){$/;"	f
sqlite3PutVarint32	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PutVarint32(unsigned char *p, u32 v){$/;"	f
sqlite3ReadSchema	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ReadSchema(Parse *pParse){$/;"	f
sqlite3Realloc	safe/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Realloc(void *pOld, int nBytes){$/;"	f
sqlite3RefillIndex	safe/sqlite3.c	/^static void sqlite3RefillIndex(Parse *pParse, Index *pIndex, int memRootPage){$/;"	f	file:
sqlite3RegisterBuiltinFunctions	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterBuiltinFunctions(sqlite3 *db){$/;"	f
sqlite3RegisterDateTimeFunctions	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterDateTimeFunctions(void){$/;"	f
sqlite3RegisterGlobalFunctions	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterGlobalFunctions(void){$/;"	f
sqlite3RegisterLikeFunctions	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterLikeFunctions(sqlite3 *db, int caseSensitive){$/;"	f
sqlite3Reindex	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Reindex(Parse *pParse, Token *pName1, Token *pName2){$/;"	f
sqlite3ReleaseTempRange	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ReleaseTempRange(Parse *pParse, int iReg, int nReg){$/;"	f
sqlite3ReleaseTempReg	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ReleaseTempReg(Parse *pParse, int iReg){$/;"	f
sqlite3Reprepare	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Reprepare(Vdbe *p){$/;"	f
sqlite3ResetAllSchemasOfConnection	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResetAllSchemasOfConnection(sqlite3 *db){$/;"	f
sqlite3ResetOneSchema	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResetOneSchema(sqlite3 *db, int iDb){$/;"	f
sqlite3ResolveExprNames	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ResolveExprNames( $/;"	f
sqlite3ResolveOrderGroupBy	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ResolveOrderGroupBy($/;"	f
sqlite3ResolveSelectNames	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResolveSelectNames($/;"	f
sqlite3ResultSetOfSelect	safe/sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect){$/;"	f
sqlite3RollbackAll	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RollbackAll(sqlite3 *db, int tripCode){$/;"	f
sqlite3RollbackTransaction	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RollbackTransaction(Parse *pParse){$/;"	f
sqlite3RootPageMoved	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RootPageMoved(sqlite3 *db, int iDb, int iFrom, int iTo){$/;"	f
sqlite3RowSetClear	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RowSetClear(RowSet *p){$/;"	f
sqlite3RowSetInit	safe/sqlite3.c	/^SQLITE_PRIVATE RowSet *sqlite3RowSetInit(sqlite3 *db, void *pSpace, unsigned int N){$/;"	f
sqlite3RowSetInsert	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RowSetInsert(RowSet *p, i64 rowid){$/;"	f
sqlite3RowSetNext	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3RowSetNext(RowSet *p, i64 *pRowid){$/;"	f
sqlite3RowSetTest	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3RowSetTest(RowSet *pRowSet, u8 iBatch, sqlite3_int64 iRowid){$/;"	f
sqlite3RtreeInit	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3RtreeInit(sqlite3 *db){$/;"	f
sqlite3RunParser	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3RunParser(Parse *pParse, const char *zSql, char **pzErrMsg){$/;"	f
sqlite3RunVacuum	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3RunVacuum(char **pzErrMsg, sqlite3 *db){$/;"	f
sqlite3SafetyCheckOk	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SafetyCheckOk(sqlite3 *db){$/;"	f
sqlite3SafetyCheckSickOrOk	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SafetyCheckSickOrOk(sqlite3 *db){$/;"	f
sqlite3SavedPrng	safe/sqlite3.c	/^static SQLITE_WSD struct sqlite3PrngType sqlite3SavedPrng;$/;"	v	file:
sqlite3Savepoint	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Savepoint(Parse *pParse, int op, Token *pName){$/;"	f
sqlite3SchemaClear	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SchemaClear(void *p){$/;"	f
sqlite3SchemaGet	safe/sqlite3.c	/^SQLITE_PRIVATE Schema *sqlite3SchemaGet(sqlite3 *db, Btree *pBt){$/;"	f
sqlite3SchemaMutexHeld	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SchemaMutexHeld(sqlite3 *db, int iDb, Schema *pSchema){$/;"	f
sqlite3SchemaMutexHeld	safe/sqlite3.c	8474;"	d	file:
sqlite3SchemaToIndex	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SchemaToIndex(sqlite3 *db, Schema *pSchema){$/;"	f
sqlite3ScratchFree	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ScratchFree(void *p){$/;"	f
sqlite3ScratchMalloc	safe/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3ScratchMalloc(int n){$/;"	f
sqlite3Select	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Select($/;"	f
sqlite3SelectAddTypeInfo	safe/sqlite3.c	/^static void sqlite3SelectAddTypeInfo(Parse *pParse, Select *pSelect){$/;"	f	file:
sqlite3SelectDelete	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectDelete(sqlite3 *db, Select *p){$/;"	f
sqlite3SelectDestInit	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectDestInit(SelectDest *pDest, int eDest, int iParm){$/;"	f
sqlite3SelectDup	safe/sqlite3.c	/^SQLITE_PRIVATE Select *sqlite3SelectDup(sqlite3 *db, Select *p, int flags){$/;"	f
sqlite3SelectExpand	safe/sqlite3.c	/^static void sqlite3SelectExpand(Parse *pParse, Select *pSelect){$/;"	f	file:
sqlite3SelectExprHeight	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SelectExprHeight(Select *p){$/;"	f
sqlite3SelectExprHeight	safe/sqlite3.c	12201;"	d	file:
sqlite3SelectNew	safe/sqlite3.c	/^SQLITE_PRIVATE Select *sqlite3SelectNew($/;"	f
sqlite3SelectPrep	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectPrep($/;"	f
sqlite3SetString	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SetString(char **pz, sqlite3 *db, const char *zFormat, ...){$/;"	f
sqlite3SharedCacheList	safe/sqlite3.c	/^SQLITE_PRIVATE BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;$/;"	v
sqlite3SharedCacheList	safe/sqlite3.c	/^static BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;$/;"	v	file:
sqlite3SkipAccumulatorLoad	safe/sqlite3.c	/^static void sqlite3SkipAccumulatorLoad(sqlite3_context *context){$/;"	f	file:
sqlite3SrcListAppend	safe/sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListAppend($/;"	f
sqlite3SrcListAppendFromTerm	safe/sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListAppendFromTerm($/;"	f
sqlite3SrcListAssignCursors	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListAssignCursors(Parse *pParse, SrcList *pList){$/;"	f
sqlite3SrcListDelete	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListDelete(sqlite3 *db, SrcList *pList){$/;"	f
sqlite3SrcListDup	safe/sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListDup(sqlite3 *db, SrcList *p, int flags){$/;"	f
sqlite3SrcListEnlarge	safe/sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListEnlarge($/;"	f
sqlite3SrcListIndexedBy	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListIndexedBy(Parse *pParse, SrcList *p, Token *pIndexedBy){$/;"	f
sqlite3SrcListLookup	safe/sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3SrcListLookup(Parse *pParse, SrcList *pSrc){$/;"	f
sqlite3SrcListShiftJoinType	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListShiftJoinType(SrcList *p){$/;"	f
sqlite3StackAllocRaw	safe/sqlite3.c	11595;"	d	file:
sqlite3StackAllocRaw	safe/sqlite3.c	11599;"	d	file:
sqlite3StackAllocZero	safe/sqlite3.c	11596;"	d	file:
sqlite3StackAllocZero	safe/sqlite3.c	11600;"	d	file:
sqlite3StackFree	safe/sqlite3.c	11597;"	d	file:
sqlite3StackFree	safe/sqlite3.c	11601;"	d	file:
sqlite3StartTable	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StartTable($/;"	f
sqlite3Stat	safe/sqlite3.c	/^} sqlite3Stat = { {0,}, {0,} };$/;"	v	file:
sqlite3StatType	safe/sqlite3.c	/^static SQLITE_WSD struct sqlite3StatType {$/;"	s	file:
sqlite3StatType	safe/sqlite3.c	/^typedef struct sqlite3StatType sqlite3StatType;$/;"	t	file:
sqlite3StatusAdd	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StatusAdd(int op, int N){$/;"	f
sqlite3StatusSet	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StatusSet(int op, int X){$/;"	f
sqlite3StatusValue	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3StatusValue(int op){$/;"	f
sqlite3Step	safe/sqlite3.c	/^static int sqlite3Step(Vdbe *p){$/;"	f	file:
sqlite3StrAccumAppend	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumAppend(StrAccum *p, const char *z, int N){$/;"	f
sqlite3StrAccumFinish	safe/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3StrAccumFinish(StrAccum *p){$/;"	f
sqlite3StrAccumInit	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumInit(StrAccum *p, char *zBase, int n, int mx){$/;"	f
sqlite3StrAccumReset	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumReset(StrAccum *p){$/;"	f
sqlite3StrICmp	safe/sqlite3.c	11560;"	d	file:
sqlite3StrNICmp	safe/sqlite3.c	11562;"	d	file:
sqlite3Strlen30	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Strlen30(const char *z){$/;"	f
sqlite3SubInt64	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SubInt64(i64 *pA, i64 iB){$/;"	f
sqlite3TableAffinityStr	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3TableAffinityStr(Vdbe *v, Table *pTab){$/;"	f
sqlite3TableLock	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3TableLock($/;"	f
sqlite3TableLock	safe/sqlite3.c	12079;"	d	file:
sqlite3TempInMemory	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3TempInMemory(const sqlite3 *db){$/;"	f
sqlite3Tolower	safe/sqlite3.c	11546;"	d	file:
sqlite3Tolower	safe/sqlite3.c	11554;"	d	file:
sqlite3Toupper	safe/sqlite3.c	11540;"	d	file:
sqlite3Toupper	safe/sqlite3.c	11548;"	d	file:
sqlite3TransferBindings	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3TransferBindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){$/;"	f
sqlite3TriggerColmask	safe/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3TriggerColmask($/;"	f
sqlite3TriggerColmask	safe/sqlite3.c	11886;"	d	file:
sqlite3TriggerDeleteStep	safe/sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerDeleteStep($/;"	f
sqlite3TriggerInsertStep	safe/sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerInsertStep($/;"	f
sqlite3TriggerList	safe/sqlite3.c	/^SQLITE_PRIVATE Trigger *sqlite3TriggerList(Parse *pParse, Table *pTab){$/;"	f
sqlite3TriggerList	safe/sqlite3.c	11884;"	d	file:
sqlite3TriggerSelectStep	safe/sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerSelectStep(sqlite3 *db, Select *pSelect){$/;"	f
sqlite3TriggerUpdateStep	safe/sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerUpdateStep($/;"	f
sqlite3TriggersExist	safe/sqlite3.c	/^SQLITE_PRIVATE Trigger *sqlite3TriggersExist($/;"	f
sqlite3TriggersExist	safe/sqlite3.c	11878;"	d	file:
sqlite3TwoPartName	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3TwoPartName($/;"	f
sqlite3UnlinkAndDeleteIndex	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteIndex(sqlite3 *db, int iDb, const char *zIdxName){$/;"	f
sqlite3UnlinkAndDeleteTable	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTable(sqlite3 *db, int iDb, const char *zTabName){$/;"	f
sqlite3UnlinkAndDeleteTrigger	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTrigger(sqlite3 *db, int iDb, const char *zName){$/;"	f
sqlite3UnlinkAndDeleteTrigger	safe/sqlite3.c	11881;"	d	file:
sqlite3Update	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Update($/;"	f
sqlite3UpperToLower	safe/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[] = {$/;"	v
sqlite3UpperToLower	safe/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[];$/;"	v
sqlite3Utf16ByteLen	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf16ByteLen(const void *zIn, int nChar){$/;"	f
sqlite3Utf16to8	safe/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3Utf16to8(sqlite3 *db, const void *z, int nByte, u8 enc){$/;"	f
sqlite3Utf8CharLen	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf8CharLen(const char *zIn, int nByte){$/;"	f
sqlite3Utf8Read	safe/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3Utf8Read($/;"	f
sqlite3Utf8Read	safe/sqlite3.c	87674;"	d	file:
sqlite3Utf8To8	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf8To8(unsigned char *zIn){$/;"	f
sqlite3Utf8Trans1	safe/sqlite3.c	/^static const unsigned char sqlite3Utf8Trans1[] = {$/;"	v	file:
sqlite3Utf8to16	safe/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3Utf8to16(sqlite3 *db, u8 enc, char *z, int n, int *pnOut){$/;"	f
sqlite3UtfSelfTest	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3UtfSelfTest(void){$/;"	f
sqlite3VMPrintf	safe/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3VMPrintf(sqlite3 *db, const char *zFormat, va_list ap){$/;"	f
sqlite3VXPrintf	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VXPrintf($/;"	f
sqlite3Vacuum	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Vacuum(Parse *pParse){$/;"	f
sqlite3ValueApplyAffinity	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueApplyAffinity($/;"	f
sqlite3ValueBytes	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ValueBytes(sqlite3_value *pVal, u8 enc){$/;"	f
sqlite3ValueFree	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueFree(sqlite3_value *v){$/;"	f
sqlite3ValueFromExpr	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ValueFromExpr($/;"	f
sqlite3ValueNew	safe/sqlite3.c	/^SQLITE_PRIVATE sqlite3_value *sqlite3ValueNew(sqlite3 *db){$/;"	f
sqlite3ValueSetStr	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueSetStr($/;"	f
sqlite3ValueText	safe/sqlite3.c	/^SQLITE_PRIVATE const void *sqlite3ValueText(sqlite3_value* pVal, u8 enc){$/;"	f
sqlite3VarintLen	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VarintLen(u64 v){$/;"	f
sqlite3VdbeAddOp0	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp0(Vdbe *p, int op){$/;"	f
sqlite3VdbeAddOp1	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp1(Vdbe *p, int op, int p1){$/;"	f
sqlite3VdbeAddOp2	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp2(Vdbe *p, int op, int p1, int p2){$/;"	f
sqlite3VdbeAddOp3	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp3(Vdbe *p, int op, int p1, int p2, int p3){$/;"	f
sqlite3VdbeAddOp4	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp4($/;"	f
sqlite3VdbeAddOp4Int	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp4Int($/;"	f
sqlite3VdbeAddOpList	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOpList(Vdbe *p, int nOp, VdbeOpList const *aOp){$/;"	f
sqlite3VdbeAddParseSchemaOp	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeAddParseSchemaOp(Vdbe *p, int iDb, char *zWhere){$/;"	f
sqlite3VdbeAddopTrace	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddopTrace = 0;$/;"	v
sqlite3VdbeAllocUnpackedRecord	safe/sqlite3.c	/^SQLITE_PRIVATE UnpackedRecord *sqlite3VdbeAllocUnpackedRecord($/;"	f
sqlite3VdbeAssertMayAbort	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAssertMayAbort(Vdbe *v, int mayAbort){$/;"	f
sqlite3VdbeChangeEncoding	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeChangeEncoding(Mem *pMem, int desiredEnc){$/;"	f
sqlite3VdbeChangeP1	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP1(Vdbe *p, u32 addr, int val){$/;"	f
sqlite3VdbeChangeP2	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP2(Vdbe *p, u32 addr, int val){$/;"	f
sqlite3VdbeChangeP3	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP3(Vdbe *p, u32 addr, int val){$/;"	f
sqlite3VdbeChangeP4	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP4(Vdbe *p, int addr, const char *zP4, int n){$/;"	f
sqlite3VdbeChangeP5	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP5(Vdbe *p, u8 val){$/;"	f
sqlite3VdbeChangeToNoop	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeToNoop(Vdbe *p, int addr){$/;"	f
sqlite3VdbeCheckFk	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCheckFk(Vdbe *p, int deferred){$/;"	f
sqlite3VdbeCheckFk	safe/sqlite3.c	13381;"	d	file:
sqlite3VdbeCloseStatement	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCloseStatement(Vdbe *p, int eOp){$/;"	f
sqlite3VdbeComment	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeComment(Vdbe *p, const char *zFormat, ...){$/;"	f
sqlite3VdbeCountChanges	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeCountChanges(Vdbe *v){$/;"	f
sqlite3VdbeCreate	safe/sqlite3.c	/^SQLITE_PRIVATE Vdbe *sqlite3VdbeCreate(sqlite3 *db){$/;"	f
sqlite3VdbeCurrentAddr	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCurrentAddr(Vdbe *p){$/;"	f
sqlite3VdbeCursorMoveto	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCursorMoveto(VdbeCursor *p){$/;"	f
sqlite3VdbeDb	safe/sqlite3.c	/^SQLITE_PRIVATE sqlite3 *sqlite3VdbeDb(Vdbe *v){$/;"	f
sqlite3VdbeDelete	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeDelete(Vdbe *p){$/;"	f
sqlite3VdbeDeleteAuxData	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeDeleteAuxData(VdbeFunc *pVdbeFunc, int mask){$/;"	f
sqlite3VdbeDeleteObject	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeDeleteObject(sqlite3 *db, Vdbe *p){$/;"	f
sqlite3VdbeEnter	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeEnter(Vdbe *p){$/;"	f
sqlite3VdbeEnter	safe/sqlite3.c	13370;"	d	file:
sqlite3VdbeExec	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeExec($/;"	f
sqlite3VdbeExpandSql	safe/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3VdbeExpandSql($/;"	f
sqlite3VdbeExplanation	safe/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3VdbeExplanation(Vdbe *pVdbe){$/;"	f
sqlite3VdbeExplanation	safe/sqlite3.c	11662;"	d	file:
sqlite3VdbeFinalize	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeFinalize(Vdbe *p){$/;"	f
sqlite3VdbeFrameDelete	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeFrameDelete(VdbeFrame *p){$/;"	f
sqlite3VdbeFrameRestore	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeFrameRestore(VdbeFrame *pFrame){$/;"	f
sqlite3VdbeFreeCursor	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeFreeCursor(Vdbe *p, VdbeCursor *pCx){$/;"	f
sqlite3VdbeGetOp	safe/sqlite3.c	/^SQLITE_PRIVATE VdbeOp *sqlite3VdbeGetOp(Vdbe *p, int addr){$/;"	f
sqlite3VdbeGetValue	safe/sqlite3.c	/^SQLITE_PRIVATE sqlite3_value *sqlite3VdbeGetValue(Vdbe *v, int iVar, u8 aff){$/;"	f
sqlite3VdbeHalt	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeHalt(Vdbe *p){$/;"	f
sqlite3VdbeIOTraceSql	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeIOTraceSql(Vdbe *p){$/;"	f
sqlite3VdbeIOTraceSql	safe/sqlite3.c	12233;"	d	file:
sqlite3VdbeIdxKeyCompare	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeIdxKeyCompare($/;"	f
sqlite3VdbeIdxRowid	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeIdxRowid(sqlite3 *db, BtCursor *pCur, i64 *rowid){$/;"	f
sqlite3VdbeIntValue	safe/sqlite3.c	/^SQLITE_PRIVATE i64 sqlite3VdbeIntValue(Mem *pMem){$/;"	f
sqlite3VdbeIntegerAffinity	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeIntegerAffinity(Mem *pMem){$/;"	f
sqlite3VdbeJumpHere	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeJumpHere(Vdbe *p, int addr){$/;"	f
sqlite3VdbeLeave	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeLeave(Vdbe *p){$/;"	f
sqlite3VdbeLeave	safe/sqlite3.c	13371;"	d	file:
sqlite3VdbeLinkSubProgram	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeLinkSubProgram(Vdbe *pVdbe, SubProgram *p){$/;"	f
sqlite3VdbeList	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeList($/;"	f
sqlite3VdbeMakeLabel	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMakeLabel(Vdbe *p){$/;"	f
sqlite3VdbeMakeReady	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMakeReady($/;"	f
sqlite3VdbeMemAboutToChange	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemAboutToChange(Vdbe *pVdbe, Mem *pMem){$/;"	f
sqlite3VdbeMemCopy	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemCopy(Mem *pTo, const Mem *pFrom){$/;"	f
sqlite3VdbeMemExpandBlob	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemExpandBlob(Mem *pMem){$/;"	f
sqlite3VdbeMemExpandBlob	safe/sqlite3.c	13395;"	d	file:
sqlite3VdbeMemFinalize	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemFinalize(Mem *pMem, FuncDef *pFunc){$/;"	f
sqlite3VdbeMemFromBtree	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemFromBtree($/;"	f
sqlite3VdbeMemGrow	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemGrow(Mem *pMem, int n, int preserve){$/;"	f
sqlite3VdbeMemHandleBom	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemHandleBom(Mem *pMem){$/;"	f
sqlite3VdbeMemIntegerify	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemIntegerify(Mem *pMem){$/;"	f
sqlite3VdbeMemMakeWriteable	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemMakeWriteable(Mem *pMem){$/;"	f
sqlite3VdbeMemMove	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemMove(Mem *pTo, Mem *pFrom){$/;"	f
sqlite3VdbeMemNulTerminate	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemNulTerminate(Mem *pMem){$/;"	f
sqlite3VdbeMemNumerify	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemNumerify(Mem *pMem){$/;"	f
sqlite3VdbeMemPrettyPrint	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemPrettyPrint(Mem *pMem, char *zBuf){$/;"	f
sqlite3VdbeMemRealify	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemRealify(Mem *pMem){$/;"	f
sqlite3VdbeMemRelease	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemRelease(Mem *p){$/;"	f
sqlite3VdbeMemReleaseExternal	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemReleaseExternal(Mem *p){$/;"	f
sqlite3VdbeMemSetDouble	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetDouble(Mem *pMem, double val){$/;"	f
sqlite3VdbeMemSetDouble	safe/sqlite3.c	13318;"	d	file:
sqlite3VdbeMemSetInt64	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetInt64(Mem *pMem, i64 val){$/;"	f
sqlite3VdbeMemSetNull	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetNull(Mem *pMem){$/;"	f
sqlite3VdbeMemSetRowSet	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetRowSet(Mem *pMem){$/;"	f
sqlite3VdbeMemSetStr	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemSetStr($/;"	f
sqlite3VdbeMemSetZeroBlob	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetZeroBlob(Mem *pMem, int n){$/;"	f
sqlite3VdbeMemShallowCopy	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemShallowCopy(Mem *pTo, const Mem *pFrom, int srcType){$/;"	f
sqlite3VdbeMemStoreType	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemStoreType(Mem *pMem){$/;"	f
sqlite3VdbeMemStringify	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemStringify(Mem *pMem, int enc){$/;"	f
sqlite3VdbeMemTooBig	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemTooBig(Mem *p){$/;"	f
sqlite3VdbeMemTranslate	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemTranslate(Mem *pMem, u8 desiredEnc){$/;"	f
sqlite3VdbeNoopComment	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeNoopComment(Vdbe *p, const char *zFormat, ...){$/;"	f
sqlite3VdbeParameterIndex	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeParameterIndex(Vdbe *p, const char *zName, int nName){$/;"	f
sqlite3VdbePrintOp	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbePrintOp(FILE *pOut, int pc, Op *pOp){$/;"	f
sqlite3VdbePrintSql	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbePrintSql(Vdbe *p){$/;"	f
sqlite3VdbeRealValue	safe/sqlite3.c	/^SQLITE_PRIVATE double sqlite3VdbeRealValue(Mem *pMem){$/;"	f
sqlite3VdbeRecordCompare	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeRecordCompare($/;"	f
sqlite3VdbeRecordUnpack	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeRecordUnpack($/;"	f
sqlite3VdbeReset	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeReset(Vdbe *p){$/;"	f
sqlite3VdbeResetStepResult	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeResetStepResult(Vdbe *p){$/;"	f
sqlite3VdbeResolveLabel	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeResolveLabel(Vdbe *p, int x){$/;"	f
sqlite3VdbeRewind	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeRewind(Vdbe *p){$/;"	f
sqlite3VdbeRunOnlyOnce	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeRunOnlyOnce(Vdbe *p){$/;"	f
sqlite3VdbeSerialGet	safe/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialGet($/;"	f
sqlite3VdbeSerialPut	safe/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialPut(u8 *buf, int nBuf, Mem *pMem, int file_format){$/;"	f
sqlite3VdbeSerialType	safe/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialType(Mem *pMem, int file_format){$/;"	f
sqlite3VdbeSerialTypeLen	safe/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialTypeLen(u32 serial_type){$/;"	f
sqlite3VdbeSetChanges	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetChanges(sqlite3 *db, int nChange){$/;"	f
sqlite3VdbeSetColName	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSetColName($/;"	f
sqlite3VdbeSetNumCols	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetNumCols(Vdbe *p, int nResColumn){$/;"	f
sqlite3VdbeSetSql	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetSql(Vdbe *p, const char *z, int n, int isPrepareV2){$/;"	f
sqlite3VdbeSetVarmask	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetVarmask(Vdbe *v, int iVar){$/;"	f
sqlite3VdbeSorterClose	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSorterClose(sqlite3 *db, VdbeCursor *pCsr){$/;"	f
sqlite3VdbeSorterClose	safe/sqlite3.c	13351;"	d	file:
sqlite3VdbeSorterCompare	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterCompare($/;"	f
sqlite3VdbeSorterCompare	safe/sqlite3.c	13355;"	d	file:
sqlite3VdbeSorterInit	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterInit(sqlite3 *db, VdbeCursor *pCsr){$/;"	f
sqlite3VdbeSorterInit	safe/sqlite3.c	13349;"	d	file:
sqlite3VdbeSorterNext	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterNext(sqlite3 *db, VdbeCursor *pCsr, int *pbEof){$/;"	f
sqlite3VdbeSorterNext	safe/sqlite3.c	13354;"	d	file:
sqlite3VdbeSorterRewind	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterRewind(sqlite3 *db, VdbeCursor *pCsr, int *pbEof){$/;"	f
sqlite3VdbeSorterRewind	safe/sqlite3.c	13353;"	d	file:
sqlite3VdbeSorterRowkey	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterRowkey(VdbeCursor *pCsr, Mem *pOut){$/;"	f
sqlite3VdbeSorterRowkey	safe/sqlite3.c	13352;"	d	file:
sqlite3VdbeSorterWrite	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterWrite($/;"	f
sqlite3VdbeSorterWrite	safe/sqlite3.c	13350;"	d	file:
sqlite3VdbeSwap	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSwap(Vdbe *pA, Vdbe *pB){$/;"	f
sqlite3VdbeTakeOpArray	safe/sqlite3.c	/^SQLITE_PRIVATE VdbeOp *sqlite3VdbeTakeOpArray(Vdbe *p, int *pnOp, int *pnMaxArg){$/;"	f
sqlite3VdbeTrace	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeTrace(Vdbe *p, FILE *trace){$/;"	f
sqlite3VdbeTransferError	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeTransferError(Vdbe *p){$/;"	f
sqlite3VdbeUsesBtree	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeUsesBtree(Vdbe *p, int i){$/;"	f
sqlite3ViewGetColumnNames	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ViewGetColumnNames(Parse *pParse, Table *pTable){$/;"	f
sqlite3ViewGetColumnNames	safe/sqlite3.c	11732;"	d	file:
sqlite3VtabArgExtend	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabArgExtend(Parse *pParse, Token *p){$/;"	f
sqlite3VtabArgInit	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabArgInit(Parse *pParse){$/;"	f
sqlite3VtabBegin	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabBegin(sqlite3 *db, VTable *pVTab){$/;"	f
sqlite3VtabBeginParse	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabBeginParse($/;"	f
sqlite3VtabCallConnect	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallConnect(Parse *pParse, Table *pTab){$/;"	f
sqlite3VtabCallCreate	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallCreate(sqlite3 *db, int iDb, const char *zTab, char **pzErr){$/;"	f
sqlite3VtabCallDestroy	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallDestroy(sqlite3 *db, int iDb, const char *zTab){$/;"	f
sqlite3VtabClear	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabClear(sqlite3 *db, Table *p){$/;"	f
sqlite3VtabClear	safe/sqlite3.c	12087;"	d	file:
sqlite3VtabCommit	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCommit(sqlite3 *db){$/;"	f
sqlite3VtabCommit	safe/sqlite3.c	12090;"	d	file:
sqlite3VtabDisconnect	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabDisconnect(sqlite3 *db, Table *p){$/;"	f
sqlite3VtabFinishParse	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabFinishParse(Parse *pParse, Token *pEnd){$/;"	f
sqlite3VtabInSync	safe/sqlite3.c	12091;"	d	file:
sqlite3VtabInSync	safe/sqlite3.c	12108;"	d	file:
sqlite3VtabLock	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabLock(VTable *pVTab){$/;"	f
sqlite3VtabLock	safe/sqlite3.c	12092;"	d	file:
sqlite3VtabMakeWritable	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabMakeWritable(Parse *pParse, Table *pTab){$/;"	f
sqlite3VtabOverloadFunction	safe/sqlite3.c	/^SQLITE_PRIVATE FuncDef *sqlite3VtabOverloadFunction($/;"	f
sqlite3VtabRollback	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabRollback(sqlite3 *db){$/;"	f
sqlite3VtabRollback	safe/sqlite3.c	12089;"	d	file:
sqlite3VtabSavepoint	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabSavepoint(sqlite3 *db, int op, int iSavepoint){$/;"	f
sqlite3VtabSavepoint	safe/sqlite3.c	12095;"	d	file:
sqlite3VtabSync	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabSync(sqlite3 *db, char **pzErrmsg){$/;"	f
sqlite3VtabSync	safe/sqlite3.c	12088;"	d	file:
sqlite3VtabUnlock	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabUnlock(VTable *pVTab){$/;"	f
sqlite3VtabUnlock	safe/sqlite3.c	12093;"	d	file:
sqlite3VtabUnlockList	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabUnlockList(sqlite3 *db){$/;"	f
sqlite3VtabUnlockList	safe/sqlite3.c	12094;"	d	file:
sqlite3WalBeginReadTransaction	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalBeginReadTransaction(Wal *pWal, int *pChanged){$/;"	f
sqlite3WalBeginReadTransaction	safe/sqlite3.c	39160;"	d	file:
sqlite3WalBeginWriteTransaction	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalBeginWriteTransaction(Wal *pWal){$/;"	f
sqlite3WalBeginWriteTransaction	safe/sqlite3.c	39164;"	d	file:
sqlite3WalCallback	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalCallback(Wal *pWal){$/;"	f
sqlite3WalCallback	safe/sqlite3.c	39171;"	d	file:
sqlite3WalCheckpoint	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalCheckpoint($/;"	f
sqlite3WalCheckpoint	safe/sqlite3.c	39170;"	d	file:
sqlite3WalClose	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalClose($/;"	f
sqlite3WalClose	safe/sqlite3.c	39159;"	d	file:
sqlite3WalDbsize	safe/sqlite3.c	/^SQLITE_PRIVATE Pgno sqlite3WalDbsize(Wal *pWal){$/;"	f
sqlite3WalDbsize	safe/sqlite3.c	39163;"	d	file:
sqlite3WalDefaultHook	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalDefaultHook($/;"	f
sqlite3WalEndReadTransaction	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalEndReadTransaction(Wal *pWal){$/;"	f
sqlite3WalEndReadTransaction	safe/sqlite3.c	39161;"	d	file:
sqlite3WalEndWriteTransaction	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalEndWriteTransaction(Wal *pWal){$/;"	f
sqlite3WalEndWriteTransaction	safe/sqlite3.c	39165;"	d	file:
sqlite3WalExclusiveMode	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalExclusiveMode(Wal *pWal, int op){$/;"	f
sqlite3WalExclusiveMode	safe/sqlite3.c	39172;"	d	file:
sqlite3WalFrames	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalFrames($/;"	f
sqlite3WalFrames	safe/sqlite3.c	39169;"	d	file:
sqlite3WalFramesize	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalFramesize(Wal *pWal){$/;"	f
sqlite3WalFramesize	safe/sqlite3.c	39174;"	d	file:
sqlite3WalHeapMemory	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalHeapMemory(Wal *pWal){$/;"	f
sqlite3WalHeapMemory	safe/sqlite3.c	39173;"	d	file:
sqlite3WalLimit	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalLimit(Wal *pWal, i64 iLimit){$/;"	f
sqlite3WalLimit	safe/sqlite3.c	39158;"	d	file:
sqlite3WalOpen	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalOpen($/;"	f
sqlite3WalOpen	safe/sqlite3.c	39157;"	d	file:
sqlite3WalRead	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalRead($/;"	f
sqlite3WalRead	safe/sqlite3.c	39162;"	d	file:
sqlite3WalSavepoint	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalSavepoint(Wal *pWal, u32 *aWalData){$/;"	f
sqlite3WalSavepoint	safe/sqlite3.c	39167;"	d	file:
sqlite3WalSavepointUndo	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalSavepointUndo(Wal *pWal, u32 *aWalData){$/;"	f
sqlite3WalSavepointUndo	safe/sqlite3.c	39168;"	d	file:
sqlite3WalTrace	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalTrace = 0;$/;"	v
sqlite3WalUndo	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalUndo(Wal *pWal, int (*xUndo)(void *, Pgno), void *pUndoCtx){$/;"	f
sqlite3WalUndo	safe/sqlite3.c	39166;"	d	file:
sqlite3WalkExpr	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkExpr(Walker *pWalker, Expr *pExpr){$/;"	f
sqlite3WalkExprList	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkExprList(Walker *pWalker, ExprList *p){$/;"	f
sqlite3WalkSelect	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelect(Walker *pWalker, Select *p){$/;"	f
sqlite3WalkSelectExpr	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelectExpr(Walker *pWalker, Select *p){$/;"	f
sqlite3WalkSelectFrom	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelectFrom(Walker *pWalker, Select *p){$/;"	f
sqlite3WhereBegin	safe/sqlite3.c	/^SQLITE_PRIVATE WhereInfo *sqlite3WhereBegin($/;"	f
sqlite3WhereEnd	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WhereEnd(WhereInfo *pWInfo){$/;"	f
sqlite3WhereTrace	safe/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereTrace = 0;$/;"	v
sqlite3XPrintf	safe/sqlite3.c	/^SQLITE_PRIVATE void sqlite3XPrintf(StrAccum *p, const char *zFormat, ...){$/;"	f
sqlite3_aggregate_context	safe/sqlite3.c	/^SQLITE_API void *sqlite3_aggregate_context(sqlite3_context *p, int nByte){$/;"	f
sqlite3_aggregate_context	safe/sqlite3.c	92271;"	d	file:
sqlite3_aggregate_count	safe/sqlite3.c	/^SQLITE_API int sqlite3_aggregate_count(sqlite3_context *p){$/;"	f
sqlite3_aggregate_count	safe/sqlite3.c	92273;"	d	file:
sqlite3_api_routines	safe/sqlite3.c	/^struct sqlite3_api_routines {$/;"	s	file:
sqlite3_api_routines	safe/sqlite3.c	/^typedef struct sqlite3_api_routines sqlite3_api_routines;$/;"	t	file:
sqlite3_auto_extension	safe/sqlite3.c	/^SQLITE_API int sqlite3_auto_extension(void (*xInit)(void)){$/;"	f
sqlite3_backup	safe/sqlite3.c	/^struct sqlite3_backup {$/;"	s	file:
sqlite3_backup	safe/sqlite3.c	/^typedef struct sqlite3_backup sqlite3_backup;$/;"	t	file:
sqlite3_backup	safe/sqlite3.h	/^typedef struct sqlite3_backup sqlite3_backup;$/;"	t
sqlite3_backup_finish	safe/sqlite3.c	/^SQLITE_API int sqlite3_backup_finish(sqlite3_backup *p){$/;"	f
sqlite3_backup_finish	safe/sqlite3.c	92436;"	d	file:
sqlite3_backup_init	safe/sqlite3.c	/^SQLITE_API sqlite3_backup *sqlite3_backup_init($/;"	f
sqlite3_backup_init	safe/sqlite3.c	92437;"	d	file:
sqlite3_backup_pagecount	safe/sqlite3.c	/^SQLITE_API int sqlite3_backup_pagecount(sqlite3_backup *p){$/;"	f
sqlite3_backup_pagecount	safe/sqlite3.c	92438;"	d	file:
sqlite3_backup_remaining	safe/sqlite3.c	/^SQLITE_API int sqlite3_backup_remaining(sqlite3_backup *p){$/;"	f
sqlite3_backup_remaining	safe/sqlite3.c	92439;"	d	file:
sqlite3_backup_step	safe/sqlite3.c	/^SQLITE_API int sqlite3_backup_step(sqlite3_backup *p, int nPage){$/;"	f
sqlite3_backup_step	safe/sqlite3.c	92440;"	d	file:
sqlite3_bind_blob	safe/sqlite3.c	/^SQLITE_API int sqlite3_bind_blob($/;"	f
sqlite3_bind_blob	safe/sqlite3.c	92275;"	d	file:
sqlite3_bind_double	safe/sqlite3.c	/^SQLITE_API int sqlite3_bind_double(sqlite3_stmt *pStmt, int i, double rValue){$/;"	f
sqlite3_bind_double	safe/sqlite3.c	92276;"	d	file:
sqlite3_bind_int	safe/sqlite3.c	/^SQLITE_API int sqlite3_bind_int(sqlite3_stmt *p, int i, int iValue){$/;"	f
sqlite3_bind_int	safe/sqlite3.c	92277;"	d	file:
sqlite3_bind_int64	safe/sqlite3.c	/^SQLITE_API int sqlite3_bind_int64(sqlite3_stmt *pStmt, int i, sqlite_int64 iValue){$/;"	f
sqlite3_bind_int64	safe/sqlite3.c	92278;"	d	file:
sqlite3_bind_null	safe/sqlite3.c	/^SQLITE_API int sqlite3_bind_null(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_bind_null	safe/sqlite3.c	92279;"	d	file:
sqlite3_bind_parameter_count	safe/sqlite3.c	/^SQLITE_API int sqlite3_bind_parameter_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_bind_parameter_count	safe/sqlite3.c	92280;"	d	file:
sqlite3_bind_parameter_index	safe/sqlite3.c	/^SQLITE_API int sqlite3_bind_parameter_index(sqlite3_stmt *pStmt, const char *zName){$/;"	f
sqlite3_bind_parameter_index	safe/sqlite3.c	92281;"	d	file:
sqlite3_bind_parameter_name	safe/sqlite3.c	/^SQLITE_API const char *sqlite3_bind_parameter_name(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_bind_parameter_name	safe/sqlite3.c	92282;"	d	file:
sqlite3_bind_text	safe/sqlite3.c	/^SQLITE_API int sqlite3_bind_text( $/;"	f
sqlite3_bind_text	safe/sqlite3.c	92283;"	d	file:
sqlite3_bind_text16	safe/sqlite3.c	/^SQLITE_API int sqlite3_bind_text16($/;"	f
sqlite3_bind_text16	safe/sqlite3.c	92284;"	d	file:
sqlite3_bind_text16	safe/sqlite3.c	92493;"	d	file:
sqlite3_bind_value	safe/sqlite3.c	/^SQLITE_API int sqlite3_bind_value(sqlite3_stmt *pStmt, int i, const sqlite3_value *pValue){$/;"	f
sqlite3_bind_value	safe/sqlite3.c	92285;"	d	file:
sqlite3_bind_zeroblob	safe/sqlite3.c	/^SQLITE_API int sqlite3_bind_zeroblob(sqlite3_stmt *pStmt, int i, int n){$/;"	f
sqlite3_bind_zeroblob	safe/sqlite3.c	92401;"	d	file:
sqlite3_bind_zeroblob	safe/sqlite3.c	92554;"	d	file:
sqlite3_blob	safe/sqlite3.c	/^typedef struct sqlite3_blob sqlite3_blob;$/;"	t	file:
sqlite3_blob	safe/sqlite3.h	/^typedef struct sqlite3_blob sqlite3_blob;$/;"	t
sqlite3_blob_bytes	safe/sqlite3.c	/^SQLITE_API int sqlite3_blob_bytes(sqlite3_blob *pBlob){$/;"	f
sqlite3_blob_bytes	safe/sqlite3.c	92402;"	d	file:
sqlite3_blob_bytes	safe/sqlite3.c	92555;"	d	file:
sqlite3_blob_close	safe/sqlite3.c	/^SQLITE_API int sqlite3_blob_close(sqlite3_blob *pBlob){$/;"	f
sqlite3_blob_close	safe/sqlite3.c	92403;"	d	file:
sqlite3_blob_close	safe/sqlite3.c	92556;"	d	file:
sqlite3_blob_open	safe/sqlite3.c	/^SQLITE_API int sqlite3_blob_open($/;"	f
sqlite3_blob_open	safe/sqlite3.c	92404;"	d	file:
sqlite3_blob_open	safe/sqlite3.c	92557;"	d	file:
sqlite3_blob_read	safe/sqlite3.c	/^SQLITE_API int sqlite3_blob_read(sqlite3_blob *pBlob, void *z, int n, int iOffset){$/;"	f
sqlite3_blob_read	safe/sqlite3.c	92405;"	d	file:
sqlite3_blob_read	safe/sqlite3.c	92558;"	d	file:
sqlite3_blob_reopen	safe/sqlite3.c	/^SQLITE_API int sqlite3_blob_reopen(sqlite3_blob *pBlob, sqlite3_int64 iRow){$/;"	f
sqlite3_blob_reopen	safe/sqlite3.c	92457;"	d	file:
sqlite3_blob_reopen	safe/sqlite3.c	92560;"	d	file:
sqlite3_blob_write	safe/sqlite3.c	/^SQLITE_API int sqlite3_blob_write(sqlite3_blob *pBlob, const void *z, int n, int iOffset){$/;"	f
sqlite3_blob_write	safe/sqlite3.c	92406;"	d	file:
sqlite3_blob_write	safe/sqlite3.c	92559;"	d	file:
sqlite3_busy_handler	safe/sqlite3.c	/^SQLITE_API int sqlite3_busy_handler($/;"	f
sqlite3_busy_handler	safe/sqlite3.c	92286;"	d	file:
sqlite3_busy_timeout	safe/sqlite3.c	/^SQLITE_API int sqlite3_busy_timeout(sqlite3 *db, int ms){$/;"	f
sqlite3_busy_timeout	safe/sqlite3.c	92287;"	d	file:
sqlite3_callback	safe/sqlite3.c	/^typedef int (*sqlite3_callback)(void*,int,char**, char**);$/;"	t	file:
sqlite3_callback	safe/sqlite3.h	/^typedef int (*sqlite3_callback)(void*,int,char**, char**);$/;"	t
sqlite3_changes	safe/sqlite3.c	/^SQLITE_API int sqlite3_changes(sqlite3 *db){$/;"	f
sqlite3_changes	safe/sqlite3.c	92288;"	d	file:
sqlite3_clear_bindings	safe/sqlite3.c	/^SQLITE_API int sqlite3_clear_bindings(sqlite3_stmt *pStmt){$/;"	f
sqlite3_clear_bindings	safe/sqlite3.c	92400;"	d	file:
sqlite3_close	safe/sqlite3.c	/^SQLITE_API int sqlite3_close(sqlite3 *db){$/;"	f
sqlite3_close	safe/sqlite3.c	92289;"	d	file:
sqlite3_collation_needed	safe/sqlite3.c	/^SQLITE_API int sqlite3_collation_needed($/;"	f
sqlite3_collation_needed	safe/sqlite3.c	92290;"	d	file:
sqlite3_collation_needed16	safe/sqlite3.c	/^SQLITE_API int sqlite3_collation_needed16($/;"	f
sqlite3_collation_needed16	safe/sqlite3.c	92291;"	d	file:
sqlite3_collation_needed16	safe/sqlite3.c	92494;"	d	file:
sqlite3_column_blob	safe/sqlite3.c	/^SQLITE_API const void *sqlite3_column_blob(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_blob	safe/sqlite3.c	92292;"	d	file:
sqlite3_column_bytes	safe/sqlite3.c	/^SQLITE_API int sqlite3_column_bytes(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_bytes	safe/sqlite3.c	92293;"	d	file:
sqlite3_column_bytes16	safe/sqlite3.c	/^SQLITE_API int sqlite3_column_bytes16(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_bytes16	safe/sqlite3.c	92294;"	d	file:
sqlite3_column_count	safe/sqlite3.c	/^SQLITE_API int sqlite3_column_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_column_count	safe/sqlite3.c	92295;"	d	file:
sqlite3_column_database_name	safe/sqlite3.c	/^SQLITE_API const char *sqlite3_column_database_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_database_name	safe/sqlite3.c	92296;"	d	file:
sqlite3_column_database_name	safe/sqlite3.c	92479;"	d	file:
sqlite3_column_database_name16	safe/sqlite3.c	/^SQLITE_API const void *sqlite3_column_database_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_database_name16	safe/sqlite3.c	92297;"	d	file:
sqlite3_column_database_name16	safe/sqlite3.c	92480;"	d	file:
sqlite3_column_database_name16	safe/sqlite3.c	92512;"	d	file:
sqlite3_column_decltype	safe/sqlite3.c	/^SQLITE_API const char *sqlite3_column_decltype(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_decltype	safe/sqlite3.c	92298;"	d	file:
sqlite3_column_decltype	safe/sqlite3.c	92524;"	d	file:
sqlite3_column_decltype16	safe/sqlite3.c	/^SQLITE_API const void *sqlite3_column_decltype16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_decltype16	safe/sqlite3.c	92299;"	d	file:
sqlite3_column_decltype16	safe/sqlite3.c	92495;"	d	file:
sqlite3_column_decltype16	safe/sqlite3.c	92523;"	d	file:
sqlite3_column_double	safe/sqlite3.c	/^SQLITE_API double sqlite3_column_double(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_double	safe/sqlite3.c	92300;"	d	file:
sqlite3_column_int	safe/sqlite3.c	/^SQLITE_API int sqlite3_column_int(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_int	safe/sqlite3.c	92301;"	d	file:
sqlite3_column_int64	safe/sqlite3.c	/^SQLITE_API sqlite_int64 sqlite3_column_int64(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_int64	safe/sqlite3.c	92302;"	d	file:
sqlite3_column_name	safe/sqlite3.c	/^SQLITE_API const char *sqlite3_column_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_name	safe/sqlite3.c	92303;"	d	file:
sqlite3_column_name16	safe/sqlite3.c	/^SQLITE_API const void *sqlite3_column_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_name16	safe/sqlite3.c	92304;"	d	file:
sqlite3_column_name16	safe/sqlite3.c	92496;"	d	file:
sqlite3_column_origin_name	safe/sqlite3.c	/^SQLITE_API const char *sqlite3_column_origin_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_origin_name	safe/sqlite3.c	92305;"	d	file:
sqlite3_column_origin_name	safe/sqlite3.c	92483;"	d	file:
sqlite3_column_origin_name16	safe/sqlite3.c	/^SQLITE_API const void *sqlite3_column_origin_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_origin_name16	safe/sqlite3.c	92306;"	d	file:
sqlite3_column_origin_name16	safe/sqlite3.c	92484;"	d	file:
sqlite3_column_origin_name16	safe/sqlite3.c	92514;"	d	file:
sqlite3_column_table_name	safe/sqlite3.c	/^SQLITE_API const char *sqlite3_column_table_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_table_name	safe/sqlite3.c	92307;"	d	file:
sqlite3_column_table_name	safe/sqlite3.c	92481;"	d	file:
sqlite3_column_table_name16	safe/sqlite3.c	/^SQLITE_API const void *sqlite3_column_table_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_table_name16	safe/sqlite3.c	92308;"	d	file:
sqlite3_column_table_name16	safe/sqlite3.c	92482;"	d	file:
sqlite3_column_table_name16	safe/sqlite3.c	92513;"	d	file:
sqlite3_column_text	safe/sqlite3.c	/^SQLITE_API const unsigned char *sqlite3_column_text(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_text	safe/sqlite3.c	92309;"	d	file:
sqlite3_column_text16	safe/sqlite3.c	/^SQLITE_API const void *sqlite3_column_text16(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_text16	safe/sqlite3.c	92310;"	d	file:
sqlite3_column_text16	safe/sqlite3.c	92497;"	d	file:
sqlite3_column_type	safe/sqlite3.c	/^SQLITE_API int sqlite3_column_type(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_type	safe/sqlite3.c	92311;"	d	file:
sqlite3_column_value	safe/sqlite3.c	/^SQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_value	safe/sqlite3.c	92312;"	d	file:
sqlite3_commit_hook	safe/sqlite3.c	/^SQLITE_API void *sqlite3_commit_hook($/;"	f
sqlite3_commit_hook	safe/sqlite3.c	92313;"	d	file:
sqlite3_compileoption_get	safe/sqlite3.c	/^SQLITE_API const char *sqlite3_compileoption_get(int N){$/;"	f
sqlite3_compileoption_get	safe/sqlite3.c	92441;"	d	file:
sqlite3_compileoption_used	safe/sqlite3.c	/^SQLITE_API int sqlite3_compileoption_used(const char *zOptName){$/;"	f
sqlite3_compileoption_used	safe/sqlite3.c	92442;"	d	file:
sqlite3_complete	safe/sqlite3.c	/^SQLITE_API int sqlite3_complete(const char *zSql){$/;"	f
sqlite3_complete	safe/sqlite3.c	92314;"	d	file:
sqlite3_complete	safe/sqlite3.c	92518;"	d	file:
sqlite3_complete16	safe/sqlite3.c	/^SQLITE_API int sqlite3_complete16(const void *zSql){$/;"	f
sqlite3_complete16	safe/sqlite3.c	92315;"	d	file:
sqlite3_complete16	safe/sqlite3.c	92498;"	d	file:
sqlite3_complete16	safe/sqlite3.c	92519;"	d	file:
sqlite3_config	safe/sqlite3.c	/^SQLITE_API int sqlite3_config(int op, ...){$/;"	f
sqlite3_context	safe/sqlite3.c	/^struct sqlite3_context {$/;"	s	file:
sqlite3_context	safe/sqlite3.c	/^typedef struct sqlite3_context sqlite3_context;$/;"	t	file:
sqlite3_context	safe/sqlite3.h	/^typedef struct sqlite3_context sqlite3_context;$/;"	t
sqlite3_context_db_handle	safe/sqlite3.c	/^SQLITE_API sqlite3 *sqlite3_context_db_handle(sqlite3_context *p){$/;"	f
sqlite3_context_db_handle	safe/sqlite3.c	92430;"	d	file:
sqlite3_create_collation	safe/sqlite3.c	/^SQLITE_API int sqlite3_create_collation($/;"	f
sqlite3_create_collation	safe/sqlite3.c	92316;"	d	file:
sqlite3_create_collation16	safe/sqlite3.c	/^SQLITE_API int sqlite3_create_collation16($/;"	f
sqlite3_create_collation16	safe/sqlite3.c	92317;"	d	file:
sqlite3_create_collation16	safe/sqlite3.c	92499;"	d	file:
sqlite3_create_collation_v2	safe/sqlite3.c	/^SQLITE_API int sqlite3_create_collation_v2($/;"	f
sqlite3_create_collation_v2	safe/sqlite3.c	92407;"	d	file:
sqlite3_create_function	safe/sqlite3.c	/^SQLITE_API int sqlite3_create_function($/;"	f
sqlite3_create_function	safe/sqlite3.c	92318;"	d	file:
sqlite3_create_function16	safe/sqlite3.c	/^SQLITE_API int sqlite3_create_function16($/;"	f
sqlite3_create_function16	safe/sqlite3.c	92319;"	d	file:
sqlite3_create_function16	safe/sqlite3.c	92500;"	d	file:
sqlite3_create_function_v2	safe/sqlite3.c	/^SQLITE_API int sqlite3_create_function_v2($/;"	f
sqlite3_create_function_v2	safe/sqlite3.c	92443;"	d	file:
sqlite3_create_module	safe/sqlite3.c	/^SQLITE_API int sqlite3_create_module($/;"	f
sqlite3_create_module	safe/sqlite3.c	92320;"	d	file:
sqlite3_create_module	safe/sqlite3.c	92532;"	d	file:
sqlite3_create_module_v2	safe/sqlite3.c	/^SQLITE_API int sqlite3_create_module_v2($/;"	f
sqlite3_create_module_v2	safe/sqlite3.c	92321;"	d	file:
sqlite3_create_module_v2	safe/sqlite3.c	92533;"	d	file:
sqlite3_current_time	safe/sqlite3.c	/^SQLITE_API int sqlite3_current_time = 0;  \/* Fake system time in seconds since 1970. *\/$/;"	v
sqlite3_current_time	safe/sqlite3.c	/^SQLITE_API int sqlite3_current_time = 0;$/;"	v
sqlite3_data_count	safe/sqlite3.c	/^SQLITE_API int sqlite3_data_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_data_count	safe/sqlite3.c	92322;"	d	file:
sqlite3_data_directory	safe/sqlite3.c	/^SQLITE_API char *sqlite3_data_directory = 0;$/;"	v
sqlite3_data_directory	safe/sqlite3.c	/^SQLITE_API char *sqlite3_data_directory;$/;"	v
sqlite3_data_directory	safe/sqlite3.h	/^SQLITE_API SQLITE_EXTERN char *sqlite3_data_directory;$/;"	v
sqlite3_db_config	safe/sqlite3.c	/^SQLITE_API int sqlite3_db_config(sqlite3 *db, int op, ...){$/;"	f
sqlite3_db_config	safe/sqlite3.c	92444;"	d	file:
sqlite3_db_filename	safe/sqlite3.c	/^SQLITE_API const char *sqlite3_db_filename(sqlite3 *db, const char *zDbName){$/;"	f
sqlite3_db_handle	safe/sqlite3.c	/^SQLITE_API sqlite3 *sqlite3_db_handle(sqlite3_stmt *pStmt){$/;"	f
sqlite3_db_handle	safe/sqlite3.c	92323;"	d	file:
sqlite3_db_mutex	safe/sqlite3.c	/^SQLITE_API sqlite3_mutex *sqlite3_db_mutex(sqlite3 *db){$/;"	f
sqlite3_db_mutex	safe/sqlite3.c	92445;"	d	file:
sqlite3_db_readonly	safe/sqlite3.c	/^SQLITE_API int sqlite3_db_readonly(sqlite3 *db, const char *zDbName){$/;"	f
sqlite3_db_release_memory	safe/sqlite3.c	/^SQLITE_API int sqlite3_db_release_memory(sqlite3 *db){$/;"	f
sqlite3_db_status	safe/sqlite3.c	/^SQLITE_API int sqlite3_db_status($/;"	f
sqlite3_db_status	safe/sqlite3.c	92446;"	d	file:
sqlite3_debug_mutex	safe/sqlite3.c	/^typedef struct sqlite3_debug_mutex {$/;"	s	file:
sqlite3_debug_mutex	safe/sqlite3.c	/^} sqlite3_debug_mutex;$/;"	t	file:
sqlite3_declare_vtab	safe/sqlite3.c	/^SQLITE_API int sqlite3_declare_vtab(sqlite3 *db, const char *zCreateTable){$/;"	f
sqlite3_declare_vtab	safe/sqlite3.c	92324;"	d	file:
sqlite3_declare_vtab	safe/sqlite3.c	92534;"	d	file:
sqlite3_destructor_type	safe/sqlite3.c	/^typedef void (*sqlite3_destructor_type)(void*);$/;"	t	file:
sqlite3_destructor_type	safe/sqlite3.h	/^typedef void (*sqlite3_destructor_type)(void*);$/;"	t
sqlite3_diskfull	safe/sqlite3.c	/^SQLITE_API int sqlite3_diskfull = 0;$/;"	v
sqlite3_diskfull_pending	safe/sqlite3.c	/^SQLITE_API int sqlite3_diskfull_pending = 0;$/;"	v
sqlite3_enable_load_extension	safe/sqlite3.c	/^SQLITE_API int sqlite3_enable_load_extension(sqlite3 *db, int onoff){$/;"	f
sqlite3_enable_shared_cache	safe/sqlite3.c	/^SQLITE_API int sqlite3_enable_shared_cache(int enable){$/;"	f
sqlite3_enable_shared_cache	safe/sqlite3.c	92325;"	d	file:
sqlite3_enable_shared_cache	safe/sqlite3.c	92540;"	d	file:
sqlite3_errcode	safe/sqlite3.c	/^SQLITE_API int sqlite3_errcode(sqlite3 *db){$/;"	f
sqlite3_errcode	safe/sqlite3.c	92326;"	d	file:
sqlite3_errmsg	safe/sqlite3.c	/^SQLITE_API const char *sqlite3_errmsg(sqlite3 *db){$/;"	f
sqlite3_errmsg	safe/sqlite3.c	92327;"	d	file:
sqlite3_errmsg16	safe/sqlite3.c	/^SQLITE_API const void *sqlite3_errmsg16(sqlite3 *db){$/;"	f
sqlite3_errmsg16	safe/sqlite3.c	92328;"	d	file:
sqlite3_errmsg16	safe/sqlite3.c	92501;"	d	file:
sqlite3_exec	safe/sqlite3.c	/^SQLITE_API int sqlite3_exec($/;"	f
sqlite3_exec	safe/sqlite3.c	92329;"	d	file:
sqlite3_expired	safe/sqlite3.c	/^SQLITE_API int sqlite3_expired(sqlite3_stmt *pStmt){$/;"	f
sqlite3_expired	safe/sqlite3.c	92331;"	d	file:
sqlite3_extended_errcode	safe/sqlite3.c	/^SQLITE_API int sqlite3_extended_errcode(sqlite3 *db){$/;"	f
sqlite3_extended_errcode	safe/sqlite3.c	92447;"	d	file:
sqlite3_extended_result_codes	safe/sqlite3.c	/^SQLITE_API int sqlite3_extended_result_codes(sqlite3 *db, int onoff){$/;"	f
sqlite3_extended_result_codes	safe/sqlite3.c	92431;"	d	file:
sqlite3_extension_init	safe/sqlite3.c	/^SQLITE_API int sqlite3_extension_init($/;"	f
sqlite3_file	safe/sqlite3.c	/^struct sqlite3_file {$/;"	s	file:
sqlite3_file	safe/sqlite3.c	/^typedef struct sqlite3_file sqlite3_file;$/;"	t	file:
sqlite3_file	safe/sqlite3.h	/^struct sqlite3_file {$/;"	s
sqlite3_file	safe/sqlite3.h	/^typedef struct sqlite3_file sqlite3_file;$/;"	t
sqlite3_file_control	safe/sqlite3.c	/^SQLITE_API int sqlite3_file_control(sqlite3 *db, const char *zDbName, int op, void *pArg){$/;"	f
sqlite3_file_control	safe/sqlite3.c	92408;"	d	file:
sqlite3_finalize	safe/sqlite3.c	/^SQLITE_API int sqlite3_finalize(sqlite3_stmt *pStmt){$/;"	f
sqlite3_finalize	safe/sqlite3.c	92333;"	d	file:
sqlite3_found_count	safe/sqlite3.c	/^SQLITE_API int sqlite3_found_count = 0;$/;"	v
sqlite3_free	safe/sqlite3.c	/^SQLITE_API void sqlite3_free(void *p){$/;"	f
sqlite3_free	safe/sqlite3.c	92334;"	d	file:
sqlite3_free_table	safe/sqlite3.c	/^SQLITE_API void sqlite3_free_table($/;"	f
sqlite3_free_table	safe/sqlite3.c	92335;"	d	file:
sqlite3_free_table	safe/sqlite3.c	92549;"	d	file:
sqlite3_fts3_enable_parentheses	safe/sqlite3.c	/^SQLITE_API int sqlite3_fts3_enable_parentheses = 0;$/;"	v
sqlite3_fts3_enable_parentheses	safe/sqlite3.c	123752;"	d	file:
sqlite3_fts3_enable_parentheses	safe/sqlite3.c	123754;"	d	file:
sqlite3_fullsync_count	safe/sqlite3.c	/^SQLITE_API int sqlite3_fullsync_count = 0;$/;"	v
sqlite3_get_autocommit	safe/sqlite3.c	/^SQLITE_API int sqlite3_get_autocommit(sqlite3 *db){$/;"	f
sqlite3_get_autocommit	safe/sqlite3.c	92336;"	d	file:
sqlite3_get_auxdata	safe/sqlite3.c	/^SQLITE_API void *sqlite3_get_auxdata(sqlite3_context *pCtx, int iArg){$/;"	f
sqlite3_get_auxdata	safe/sqlite3.c	92337;"	d	file:
sqlite3_get_table	safe/sqlite3.c	/^SQLITE_API int sqlite3_get_table($/;"	f
sqlite3_get_table	safe/sqlite3.c	92338;"	d	file:
sqlite3_get_table	safe/sqlite3.c	92550;"	d	file:
sqlite3_get_table_cb	safe/sqlite3.c	/^static int sqlite3_get_table_cb(void *pArg, int nCol, char **argv, char **colv){$/;"	f	file:
sqlite3_global_recover	safe/sqlite3.c	/^SQLITE_API int sqlite3_global_recover(void){$/;"	f
sqlite3_global_recover	safe/sqlite3.c	92340;"	d	file:
sqlite3_hostid_num	safe/sqlite3.c	/^SQLITE_API int sqlite3_hostid_num = 0;$/;"	v
sqlite3_index_constraint	safe/sqlite3.c	/^  struct sqlite3_index_constraint {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_index_constraint	safe/sqlite3.h	/^  struct sqlite3_index_constraint {$/;"	s	struct:sqlite3_index_info
sqlite3_index_constraint_usage	safe/sqlite3.c	/^  struct sqlite3_index_constraint_usage {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_index_constraint_usage	safe/sqlite3.h	/^  struct sqlite3_index_constraint_usage {$/;"	s	struct:sqlite3_index_info
sqlite3_index_info	safe/sqlite3.c	/^struct sqlite3_index_info {$/;"	s	file:
sqlite3_index_info	safe/sqlite3.c	/^typedef struct sqlite3_index_info sqlite3_index_info;$/;"	t	file:
sqlite3_index_info	safe/sqlite3.h	/^struct sqlite3_index_info {$/;"	s
sqlite3_index_info	safe/sqlite3.h	/^typedef struct sqlite3_index_info sqlite3_index_info;$/;"	t
sqlite3_index_orderby	safe/sqlite3.c	/^  struct sqlite3_index_orderby {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_index_orderby	safe/sqlite3.h	/^  struct sqlite3_index_orderby {$/;"	s	struct:sqlite3_index_info
sqlite3_initialize	safe/sqlite3.c	/^SQLITE_API int sqlite3_initialize(void){$/;"	f
sqlite3_int64	safe/sqlite3.c	/^typedef sqlite_int64 sqlite3_int64;$/;"	t	file:
sqlite3_int64	safe/sqlite3.h	/^typedef sqlite_int64 sqlite3_int64;$/;"	t
sqlite3_interrupt	safe/sqlite3.c	/^SQLITE_API void sqlite3_interrupt(sqlite3 *db){$/;"	f
sqlite3_interrupt	safe/sqlite3.c	92342;"	d	file:
sqlite3_interrupt_count	safe/sqlite3.c	/^SQLITE_API int sqlite3_interrupt_count = 0;$/;"	v
sqlite3_io_error_benign	safe/sqlite3.c	/^SQLITE_API int sqlite3_io_error_benign = 0;         \/* True if errors are benign *\/$/;"	v
sqlite3_io_error_hardhit	safe/sqlite3.c	/^SQLITE_API int sqlite3_io_error_hardhit = 0;        \/* Number of non-benign errors *\/$/;"	v
sqlite3_io_error_hit	safe/sqlite3.c	/^SQLITE_API int sqlite3_io_error_hit = 0;            \/* Total number of I\/O Errors *\/$/;"	v
sqlite3_io_error_pending	safe/sqlite3.c	/^SQLITE_API int sqlite3_io_error_pending = 0;        \/* Count down to first I\/O error *\/$/;"	v
sqlite3_io_error_persist	safe/sqlite3.c	/^SQLITE_API int sqlite3_io_error_persist = 0;        \/* True if I\/O errors persist *\/$/;"	v
sqlite3_io_methods	safe/sqlite3.c	/^struct sqlite3_io_methods {$/;"	s	file:
sqlite3_io_methods	safe/sqlite3.c	/^typedef struct sqlite3_io_methods sqlite3_io_methods;$/;"	t	file:
sqlite3_io_methods	safe/sqlite3.h	/^struct sqlite3_io_methods {$/;"	s
sqlite3_io_methods	safe/sqlite3.h	/^typedef struct sqlite3_io_methods sqlite3_io_methods;$/;"	t
sqlite3_last_insert_rowid	safe/sqlite3.c	/^SQLITE_API sqlite_int64 sqlite3_last_insert_rowid(sqlite3 *db){$/;"	f
sqlite3_last_insert_rowid	safe/sqlite3.c	92343;"	d	file:
sqlite3_libversion	safe/sqlite3.c	/^SQLITE_API const char *sqlite3_libversion(void){ return sqlite3_version; }$/;"	f
sqlite3_libversion	safe/sqlite3.c	92344;"	d	file:
sqlite3_libversion_number	safe/sqlite3.c	/^SQLITE_API int sqlite3_libversion_number(void){ return SQLITE_VERSION_NUMBER; }$/;"	f
sqlite3_libversion_number	safe/sqlite3.c	92345;"	d	file:
sqlite3_like_count	safe/sqlite3.c	/^SQLITE_API int sqlite3_like_count = 0;$/;"	v
sqlite3_limit	safe/sqlite3.c	/^SQLITE_API int sqlite3_limit(sqlite3 *db, int limitId, int newLimit){$/;"	f
sqlite3_limit	safe/sqlite3.c	92432;"	d	file:
sqlite3_load_extension	safe/sqlite3.c	/^SQLITE_API int sqlite3_load_extension($/;"	f
sqlite3_log	safe/sqlite3.c	/^SQLITE_API void sqlite3_log(int iErrCode, const char *zFormat, ...){$/;"	f
sqlite3_log	safe/sqlite3.c	92448;"	d	file:
sqlite3_malloc	safe/sqlite3.c	/^SQLITE_API void *sqlite3_malloc(int n){$/;"	f
sqlite3_malloc	safe/sqlite3.c	92346;"	d	file:
sqlite3_max_blobsize	safe/sqlite3.c	/^SQLITE_API int sqlite3_max_blobsize = 0;$/;"	v
sqlite3_mem_methods	safe/sqlite3.c	/^struct sqlite3_mem_methods {$/;"	s	file:
sqlite3_mem_methods	safe/sqlite3.c	/^typedef struct sqlite3_mem_methods sqlite3_mem_methods;$/;"	t	file:
sqlite3_mem_methods	safe/sqlite3.h	/^struct sqlite3_mem_methods {$/;"	s
sqlite3_mem_methods	safe/sqlite3.h	/^typedef struct sqlite3_mem_methods sqlite3_mem_methods;$/;"	t
sqlite3_memdebug_vfs_oom_test	safe/sqlite3.c	/^SQLITE_API int sqlite3_memdebug_vfs_oom_test = 1;$/;"	v
sqlite3_memory_alarm	safe/sqlite3.c	/^SQLITE_API int sqlite3_memory_alarm($/;"	f
sqlite3_memory_highwater	safe/sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_memory_highwater(int resetFlag){$/;"	f
sqlite3_memory_highwater	safe/sqlite3.c	92409;"	d	file:
sqlite3_memory_used	safe/sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_memory_used(void){$/;"	f
sqlite3_memory_used	safe/sqlite3.c	92410;"	d	file:
sqlite3_module	safe/sqlite3.c	/^struct sqlite3_module {$/;"	s	file:
sqlite3_module	safe/sqlite3.c	/^typedef struct sqlite3_module sqlite3_module;$/;"	t	file:
sqlite3_module	safe/sqlite3.h	/^struct sqlite3_module {$/;"	s
sqlite3_module	safe/sqlite3.h	/^typedef struct sqlite3_module sqlite3_module;$/;"	t
sqlite3_mprintf	safe/sqlite3.c	/^SQLITE_API char *sqlite3_mprintf(const char *zFormat, ...){$/;"	f
sqlite3_mprintf	safe/sqlite3.c	92347;"	d	file:
sqlite3_mutex	safe/sqlite3.c	/^struct sqlite3_mutex {$/;"	s	file:
sqlite3_mutex	safe/sqlite3.c	/^typedef struct sqlite3_mutex sqlite3_mutex;$/;"	t	file:
sqlite3_mutex	safe/sqlite3.h	/^typedef struct sqlite3_mutex sqlite3_mutex;$/;"	t
sqlite3_mutex_alloc	safe/sqlite3.c	/^SQLITE_API sqlite3_mutex *sqlite3_mutex_alloc(int id){$/;"	f
sqlite3_mutex_alloc	safe/sqlite3.c	92411;"	d	file:
sqlite3_mutex_alloc	safe/sqlite3.c	9646;"	d	file:
sqlite3_mutex_enter	safe/sqlite3.c	/^SQLITE_API void sqlite3_mutex_enter(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_enter	safe/sqlite3.c	92412;"	d	file:
sqlite3_mutex_enter	safe/sqlite3.c	9648;"	d	file:
sqlite3_mutex_free	safe/sqlite3.c	/^SQLITE_API void sqlite3_mutex_free(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_free	safe/sqlite3.c	92413;"	d	file:
sqlite3_mutex_free	safe/sqlite3.c	9647;"	d	file:
sqlite3_mutex_held	safe/sqlite3.c	/^SQLITE_API int sqlite3_mutex_held(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_held	safe/sqlite3.c	9651;"	d	file:
sqlite3_mutex_leave	safe/sqlite3.c	/^SQLITE_API void sqlite3_mutex_leave(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_leave	safe/sqlite3.c	92414;"	d	file:
sqlite3_mutex_leave	safe/sqlite3.c	9650;"	d	file:
sqlite3_mutex_methods	safe/sqlite3.c	/^struct sqlite3_mutex_methods {$/;"	s	file:
sqlite3_mutex_methods	safe/sqlite3.c	/^typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;$/;"	t	file:
sqlite3_mutex_methods	safe/sqlite3.h	/^struct sqlite3_mutex_methods {$/;"	s
sqlite3_mutex_methods	safe/sqlite3.h	/^typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;$/;"	t
sqlite3_mutex_notheld	safe/sqlite3.c	/^SQLITE_API int sqlite3_mutex_notheld(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_notheld	safe/sqlite3.c	9652;"	d	file:
sqlite3_mutex_try	safe/sqlite3.c	/^SQLITE_API int sqlite3_mutex_try(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_try	safe/sqlite3.c	92415;"	d	file:
sqlite3_mutex_try	safe/sqlite3.c	9649;"	d	file:
sqlite3_next_stmt	safe/sqlite3.c	/^SQLITE_API sqlite3_stmt *sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt){$/;"	f
sqlite3_next_stmt	safe/sqlite3.c	92433;"	d	file:
sqlite3_open	safe/sqlite3.c	/^SQLITE_API int sqlite3_open($/;"	f
sqlite3_open	safe/sqlite3.c	92348;"	d	file:
sqlite3_open16	safe/sqlite3.c	/^SQLITE_API int sqlite3_open16($/;"	f
sqlite3_open16	safe/sqlite3.c	92349;"	d	file:
sqlite3_open16	safe/sqlite3.c	92502;"	d	file:
sqlite3_open_file_count	safe/sqlite3.c	/^SQLITE_API int sqlite3_open_file_count = 0;$/;"	v
sqlite3_open_v2	safe/sqlite3.c	/^SQLITE_API int sqlite3_open_v2($/;"	f
sqlite3_open_v2	safe/sqlite3.c	92416;"	d	file:
sqlite3_opentemp_count	safe/sqlite3.c	/^SQLITE_API int sqlite3_opentemp_count = 0;$/;"	v
sqlite3_os_end	safe/sqlite3.c	/^SQLITE_API int sqlite3_os_end(void){ $/;"	f
sqlite3_os_end	safe/sqlite3.c	/^SQLITE_API int sqlite3_os_end(void){$/;"	f
sqlite3_os_init	safe/sqlite3.c	/^SQLITE_API int sqlite3_os_init(void){ $/;"	f
sqlite3_os_init	safe/sqlite3.c	/^SQLITE_API int sqlite3_os_init(void){$/;"	f
sqlite3_os_type	safe/sqlite3.c	/^SQLITE_API int sqlite3_os_type = 0;$/;"	v
sqlite3_os_type	safe/sqlite3.c	/^static int sqlite3_os_type = 0;$/;"	v	file:
sqlite3_overload_function	safe/sqlite3.c	/^SQLITE_API int sqlite3_overload_function($/;"	f
sqlite3_overload_function	safe/sqlite3.c	92397;"	d	file:
sqlite3_pager_readdb_count	safe/sqlite3.c	/^SQLITE_API int sqlite3_pager_readdb_count = 0;    \/* Number of full pages read from DB *\/$/;"	v
sqlite3_pager_writedb_count	safe/sqlite3.c	/^SQLITE_API int sqlite3_pager_writedb_count = 0;   \/* Number of full pages written to DB *\/$/;"	v
sqlite3_pager_writej_count	safe/sqlite3.c	/^SQLITE_API int sqlite3_pager_writej_count = 0;    \/* Number of pages written to journal *\/$/;"	v
sqlite3_pcache	safe/sqlite3.c	/^typedef struct sqlite3_pcache sqlite3_pcache;$/;"	t	file:
sqlite3_pcache	safe/sqlite3.h	/^typedef struct sqlite3_pcache sqlite3_pcache;$/;"	t
sqlite3_pcache_methods	safe/sqlite3.c	/^struct sqlite3_pcache_methods {$/;"	s	file:
sqlite3_pcache_methods	safe/sqlite3.c	/^typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;$/;"	t	file:
sqlite3_pcache_methods	safe/sqlite3.h	/^struct sqlite3_pcache_methods {$/;"	s
sqlite3_pcache_methods	safe/sqlite3.h	/^typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;$/;"	t
sqlite3_pcache_methods2	safe/sqlite3.c	/^struct sqlite3_pcache_methods2 {$/;"	s	file:
sqlite3_pcache_methods2	safe/sqlite3.c	/^typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2;$/;"	t	file:
sqlite3_pcache_methods2	safe/sqlite3.h	/^struct sqlite3_pcache_methods2 {$/;"	s
sqlite3_pcache_methods2	safe/sqlite3.h	/^typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2;$/;"	t
sqlite3_pcache_page	safe/sqlite3.c	/^struct sqlite3_pcache_page {$/;"	s	file:
sqlite3_pcache_page	safe/sqlite3.c	/^typedef struct sqlite3_pcache_page sqlite3_pcache_page;$/;"	t	file:
sqlite3_pcache_page	safe/sqlite3.h	/^struct sqlite3_pcache_page {$/;"	s
sqlite3_pcache_page	safe/sqlite3.h	/^typedef struct sqlite3_pcache_page sqlite3_pcache_page;$/;"	t
sqlite3_prepare	safe/sqlite3.c	/^SQLITE_API int sqlite3_prepare($/;"	f
sqlite3_prepare	safe/sqlite3.c	92350;"	d	file:
sqlite3_prepare16	safe/sqlite3.c	/^SQLITE_API int sqlite3_prepare16($/;"	f
sqlite3_prepare16	safe/sqlite3.c	92351;"	d	file:
sqlite3_prepare16	safe/sqlite3.c	92503;"	d	file:
sqlite3_prepare16_v2	safe/sqlite3.c	/^SQLITE_API int sqlite3_prepare16_v2($/;"	f
sqlite3_prepare16_v2	safe/sqlite3.c	92353;"	d	file:
sqlite3_prepare16_v2	safe/sqlite3.c	92399;"	d	file:
sqlite3_prepare16_v2	safe/sqlite3.c	92504;"	d	file:
sqlite3_prepare_v2	safe/sqlite3.c	/^SQLITE_API int sqlite3_prepare_v2($/;"	f
sqlite3_prepare_v2	safe/sqlite3.c	92352;"	d	file:
sqlite3_prepare_v2	safe/sqlite3.c	92398;"	d	file:
sqlite3_profile	safe/sqlite3.c	/^SQLITE_API void *sqlite3_profile($/;"	f
sqlite3_profile	safe/sqlite3.c	92354;"	d	file:
sqlite3_profile	safe/sqlite3.c	92544;"	d	file:
sqlite3_progress_handler	safe/sqlite3.c	/^SQLITE_API void sqlite3_progress_handler($/;"	f
sqlite3_progress_handler	safe/sqlite3.c	92355;"	d	file:
sqlite3_progress_handler	safe/sqlite3.c	92528;"	d	file:
sqlite3_query_plan	safe/sqlite3.c	/^SQLITE_API char sqlite3_query_plan[BMS*2*40];  \/* Text of the join *\/$/;"	v
sqlite3_randomness	safe/sqlite3.c	/^SQLITE_API void sqlite3_randomness(int N, void *pBuf){$/;"	f
sqlite3_randomness	safe/sqlite3.c	92429;"	d	file:
sqlite3_realloc	safe/sqlite3.c	/^SQLITE_API void *sqlite3_realloc(void *pOld, int n){$/;"	f
sqlite3_realloc	safe/sqlite3.c	92356;"	d	file:
sqlite3_release_memory	safe/sqlite3.c	/^SQLITE_API int sqlite3_release_memory(int n){$/;"	f
sqlite3_release_memory	safe/sqlite3.c	92417;"	d	file:
sqlite3_reset	safe/sqlite3.c	/^SQLITE_API int sqlite3_reset(sqlite3_stmt *pStmt){$/;"	f
sqlite3_reset	safe/sqlite3.c	92357;"	d	file:
sqlite3_reset_auto_extension	safe/sqlite3.c	/^SQLITE_API void sqlite3_reset_auto_extension(void){$/;"	f
sqlite3_result_blob	safe/sqlite3.c	/^SQLITE_API void sqlite3_result_blob($/;"	f
sqlite3_result_blob	safe/sqlite3.c	92358;"	d	file:
sqlite3_result_double	safe/sqlite3.c	/^SQLITE_API void sqlite3_result_double(sqlite3_context *pCtx, double rVal){$/;"	f
sqlite3_result_double	safe/sqlite3.c	92359;"	d	file:
sqlite3_result_error	safe/sqlite3.c	/^SQLITE_API void sqlite3_result_error(sqlite3_context *pCtx, const char *z, int n){$/;"	f
sqlite3_result_error	safe/sqlite3.c	92360;"	d	file:
sqlite3_result_error16	safe/sqlite3.c	/^SQLITE_API void sqlite3_result_error16(sqlite3_context *pCtx, const void *z, int n){$/;"	f
sqlite3_result_error16	safe/sqlite3.c	92361;"	d	file:
sqlite3_result_error16	safe/sqlite3.c	92505;"	d	file:
sqlite3_result_error_code	safe/sqlite3.c	/^SQLITE_API void sqlite3_result_error_code(sqlite3_context *pCtx, int errCode){$/;"	f
sqlite3_result_error_code	safe/sqlite3.c	92427;"	d	file:
sqlite3_result_error_nomem	safe/sqlite3.c	/^SQLITE_API void sqlite3_result_error_nomem(sqlite3_context *pCtx){$/;"	f
sqlite3_result_error_nomem	safe/sqlite3.c	92418;"	d	file:
sqlite3_result_error_toobig	safe/sqlite3.c	/^SQLITE_API void sqlite3_result_error_toobig(sqlite3_context *pCtx){$/;"	f
sqlite3_result_error_toobig	safe/sqlite3.c	92419;"	d	file:
sqlite3_result_int	safe/sqlite3.c	/^SQLITE_API void sqlite3_result_int(sqlite3_context *pCtx, int iVal){$/;"	f
sqlite3_result_int	safe/sqlite3.c	92362;"	d	file:
sqlite3_result_int64	safe/sqlite3.c	/^SQLITE_API void sqlite3_result_int64(sqlite3_context *pCtx, i64 iVal){$/;"	f
sqlite3_result_int64	safe/sqlite3.c	92363;"	d	file:
sqlite3_result_null	safe/sqlite3.c	/^SQLITE_API void sqlite3_result_null(sqlite3_context *pCtx){$/;"	f
sqlite3_result_null	safe/sqlite3.c	92364;"	d	file:
sqlite3_result_text	safe/sqlite3.c	/^SQLITE_API void sqlite3_result_text($/;"	f
sqlite3_result_text	safe/sqlite3.c	92365;"	d	file:
sqlite3_result_text16	safe/sqlite3.c	/^SQLITE_API void sqlite3_result_text16($/;"	f
sqlite3_result_text16	safe/sqlite3.c	92366;"	d	file:
sqlite3_result_text16	safe/sqlite3.c	92506;"	d	file:
sqlite3_result_text16be	safe/sqlite3.c	/^SQLITE_API void sqlite3_result_text16be($/;"	f
sqlite3_result_text16be	safe/sqlite3.c	92367;"	d	file:
sqlite3_result_text16be	safe/sqlite3.c	92507;"	d	file:
sqlite3_result_text16le	safe/sqlite3.c	/^SQLITE_API void sqlite3_result_text16le($/;"	f
sqlite3_result_text16le	safe/sqlite3.c	92368;"	d	file:
sqlite3_result_text16le	safe/sqlite3.c	92508;"	d	file:
sqlite3_result_value	safe/sqlite3.c	/^SQLITE_API void sqlite3_result_value(sqlite3_context *pCtx, sqlite3_value *pValue){$/;"	f
sqlite3_result_value	safe/sqlite3.c	92369;"	d	file:
sqlite3_result_zeroblob	safe/sqlite3.c	/^SQLITE_API void sqlite3_result_zeroblob(sqlite3_context *pCtx, int n){$/;"	f
sqlite3_result_zeroblob	safe/sqlite3.c	92426;"	d	file:
sqlite3_rollback_hook	safe/sqlite3.c	/^SQLITE_API void *sqlite3_rollback_hook($/;"	f
sqlite3_rollback_hook	safe/sqlite3.c	92370;"	d	file:
sqlite3_rtree_geometry	safe/sqlite3.c	/^struct sqlite3_rtree_geometry {$/;"	s	file:
sqlite3_rtree_geometry	safe/sqlite3.c	/^typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;$/;"	t	file:
sqlite3_rtree_geometry	safe/sqlite3.h	/^struct sqlite3_rtree_geometry {$/;"	s
sqlite3_rtree_geometry	safe/sqlite3.h	/^typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;$/;"	t
sqlite3_rtree_geometry_callback	safe/sqlite3.c	/^SQLITE_API int sqlite3_rtree_geometry_callback($/;"	f
sqlite3_search_count	safe/sqlite3.c	/^SQLITE_API int sqlite3_search_count = 0;$/;"	v
sqlite3_set_authorizer	safe/sqlite3.c	/^SQLITE_API int sqlite3_set_authorizer($/;"	f
sqlite3_set_authorizer	safe/sqlite3.c	92371;"	d	file:
sqlite3_set_authorizer	safe/sqlite3.c	92489;"	d	file:
sqlite3_set_auxdata	safe/sqlite3.c	/^SQLITE_API void sqlite3_set_auxdata($/;"	f
sqlite3_set_auxdata	safe/sqlite3.c	92372;"	d	file:
sqlite3_shutdown	safe/sqlite3.c	/^SQLITE_API int sqlite3_shutdown(void){$/;"	f
sqlite3_sleep	safe/sqlite3.c	/^SQLITE_API int sqlite3_sleep(int ms){$/;"	f
sqlite3_sleep	safe/sqlite3.c	92420;"	d	file:
sqlite3_snprintf	safe/sqlite3.c	/^SQLITE_API char *sqlite3_snprintf(int n, char *zBuf, const char *zFormat, ...){$/;"	f
sqlite3_snprintf	safe/sqlite3.c	92373;"	d	file:
sqlite3_soft_heap_limit	safe/sqlite3.c	/^SQLITE_API void sqlite3_soft_heap_limit(int n){$/;"	f
sqlite3_soft_heap_limit	safe/sqlite3.c	92421;"	d	file:
sqlite3_soft_heap_limit64	safe/sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 n){$/;"	f
sqlite3_soft_heap_limit64	safe/sqlite3.c	92449;"	d	file:
sqlite3_sort_count	safe/sqlite3.c	/^SQLITE_API int sqlite3_sort_count = 0;$/;"	v
sqlite3_sourceid	safe/sqlite3.c	/^SQLITE_API const char *sqlite3_sourceid(void){ return SQLITE_SOURCE_ID; }$/;"	f
sqlite3_sourceid	safe/sqlite3.c	92450;"	d	file:
sqlite3_sql	safe/sqlite3.c	/^SQLITE_API const char *sqlite3_sql(sqlite3_stmt *pStmt){$/;"	f
sqlite3_sql	safe/sqlite3.c	92434;"	d	file:
sqlite3_status	safe/sqlite3.c	/^SQLITE_API int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag){$/;"	f
sqlite3_status	safe/sqlite3.c	92435;"	d	file:
sqlite3_step	safe/sqlite3.c	/^SQLITE_API int sqlite3_step(sqlite3_stmt *pStmt){$/;"	f
sqlite3_step	safe/sqlite3.c	92374;"	d	file:
sqlite3_stmt	safe/sqlite3.c	/^typedef struct sqlite3_stmt sqlite3_stmt;$/;"	t	file:
sqlite3_stmt	safe/sqlite3.h	/^typedef struct sqlite3_stmt sqlite3_stmt;$/;"	t
sqlite3_stmt_busy	safe/sqlite3.c	/^SQLITE_API int sqlite3_stmt_busy(sqlite3_stmt *pStmt){$/;"	f
sqlite3_stmt_readonly	safe/sqlite3.c	/^SQLITE_API int sqlite3_stmt_readonly(sqlite3_stmt *pStmt){$/;"	f
sqlite3_stmt_status	safe/sqlite3.c	/^SQLITE_API int sqlite3_stmt_status(sqlite3_stmt *pStmt, int op, int resetFlag){$/;"	f
sqlite3_stmt_status	safe/sqlite3.c	92451;"	d	file:
sqlite3_stricmp	safe/sqlite3.c	/^SQLITE_API int sqlite3_stricmp(const char *zLeft, const char *zRight){$/;"	f
sqlite3_strnicmp	safe/sqlite3.c	/^SQLITE_API int sqlite3_strnicmp(const char *zLeft, const char *zRight, int N){$/;"	f
sqlite3_strnicmp	safe/sqlite3.c	92452;"	d	file:
sqlite3_sync_count	safe/sqlite3.c	/^SQLITE_API int sqlite3_sync_count = 0;$/;"	v
sqlite3_syscall_ptr	safe/sqlite3.c	/^typedef void (*sqlite3_syscall_ptr)(void);$/;"	t	file:
sqlite3_syscall_ptr	safe/sqlite3.h	/^typedef void (*sqlite3_syscall_ptr)(void);$/;"	t
sqlite3_table_column_metadata	safe/sqlite3.c	/^SQLITE_API int sqlite3_table_column_metadata($/;"	f
sqlite3_table_column_metadata	safe/sqlite3.c	92375;"	d	file:
sqlite3_table_column_metadata	safe/sqlite3.c	92485;"	d	file:
sqlite3_temp_directory	safe/sqlite3.c	/^SQLITE_API char *sqlite3_temp_directory = 0;$/;"	v
sqlite3_temp_directory	safe/sqlite3.c	/^SQLITE_API char *sqlite3_temp_directory;$/;"	v
sqlite3_temp_directory	safe/sqlite3.h	/^SQLITE_API SQLITE_EXTERN char *sqlite3_temp_directory;$/;"	v
sqlite3_test_control	safe/sqlite3.c	/^SQLITE_API int sqlite3_test_control(int op, ...){$/;"	f
sqlite3_test_control	safe/sqlite3.c	92428;"	d	file:
sqlite3_thread_cleanup	safe/sqlite3.c	/^SQLITE_API void sqlite3_thread_cleanup(void){$/;"	f
sqlite3_thread_cleanup	safe/sqlite3.c	92376;"	d	file:
sqlite3_threadsafe	safe/sqlite3.c	/^SQLITE_API int sqlite3_threadsafe(void){ return SQLITE_THREADSAFE; }$/;"	f
sqlite3_threadsafe	safe/sqlite3.c	92425;"	d	file:
sqlite3_tokenizer	safe/sqlite3.c	/^struct sqlite3_tokenizer {$/;"	s	file:
sqlite3_tokenizer	safe/sqlite3.c	/^typedef struct sqlite3_tokenizer sqlite3_tokenizer;$/;"	t	file:
sqlite3_tokenizer_cursor	safe/sqlite3.c	/^struct sqlite3_tokenizer_cursor {$/;"	s	file:
sqlite3_tokenizer_cursor	safe/sqlite3.c	/^typedef struct sqlite3_tokenizer_cursor sqlite3_tokenizer_cursor;$/;"	t	file:
sqlite3_tokenizer_module	safe/sqlite3.c	/^struct sqlite3_tokenizer_module {$/;"	s	file:
sqlite3_tokenizer_module	safe/sqlite3.c	/^typedef struct sqlite3_tokenizer_module sqlite3_tokenizer_module;$/;"	t	file:
sqlite3_total_changes	safe/sqlite3.c	/^SQLITE_API int sqlite3_total_changes(sqlite3 *db){$/;"	f
sqlite3_total_changes	safe/sqlite3.c	92377;"	d	file:
sqlite3_trace	safe/sqlite3.c	/^SQLITE_API void *sqlite3_trace(sqlite3 *db, void (*xTrace)(void*,const char*), void *pArg){$/;"	f
sqlite3_trace	safe/sqlite3.c	92378;"	d	file:
sqlite3_trace	safe/sqlite3.c	92545;"	d	file:
sqlite3_transfer_bindings	safe/sqlite3.c	/^SQLITE_API int sqlite3_transfer_bindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){$/;"	f
sqlite3_transfer_bindings	safe/sqlite3.c	92380;"	d	file:
sqlite3_uint64	safe/sqlite3.c	/^typedef sqlite_uint64 sqlite3_uint64;$/;"	t	file:
sqlite3_uint64	safe/sqlite3.h	/^typedef sqlite_uint64 sqlite3_uint64;$/;"	t
sqlite3_unlock_notify	safe/sqlite3.c	/^SQLITE_API int sqlite3_unlock_notify($/;"	f
sqlite3_unlock_notify	safe/sqlite3.c	92453;"	d	file:
sqlite3_update_hook	safe/sqlite3.c	/^SQLITE_API void *sqlite3_update_hook($/;"	f
sqlite3_update_hook	safe/sqlite3.c	92382;"	d	file:
sqlite3_uri_boolean	safe/sqlite3.c	/^SQLITE_API int sqlite3_uri_boolean(const char *zFilename, const char *zParam, int bDflt){$/;"	f
sqlite3_uri_int64	safe/sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_uri_int64($/;"	f
sqlite3_uri_parameter	safe/sqlite3.c	/^SQLITE_API const char *sqlite3_uri_parameter(const char *zFilename, const char *zParam){$/;"	f
sqlite3_user_data	safe/sqlite3.c	/^SQLITE_API void *sqlite3_user_data(sqlite3_context *p){$/;"	f
sqlite3_user_data	safe/sqlite3.c	92383;"	d	file:
sqlite3_value	safe/sqlite3.c	/^typedef struct Mem sqlite3_value;$/;"	t	file:
sqlite3_value	safe/sqlite3.h	/^typedef struct Mem sqlite3_value;$/;"	t
sqlite3_value_blob	safe/sqlite3.c	/^SQLITE_API const void *sqlite3_value_blob(sqlite3_value *pVal){$/;"	f
sqlite3_value_blob	safe/sqlite3.c	92384;"	d	file:
sqlite3_value_bytes	safe/sqlite3.c	/^SQLITE_API int sqlite3_value_bytes(sqlite3_value *pVal){$/;"	f
sqlite3_value_bytes	safe/sqlite3.c	92385;"	d	file:
sqlite3_value_bytes16	safe/sqlite3.c	/^SQLITE_API int sqlite3_value_bytes16(sqlite3_value *pVal){$/;"	f
sqlite3_value_bytes16	safe/sqlite3.c	92386;"	d	file:
sqlite3_value_double	safe/sqlite3.c	/^SQLITE_API double sqlite3_value_double(sqlite3_value *pVal){$/;"	f
sqlite3_value_double	safe/sqlite3.c	92387;"	d	file:
sqlite3_value_int	safe/sqlite3.c	/^SQLITE_API int sqlite3_value_int(sqlite3_value *pVal){$/;"	f
sqlite3_value_int	safe/sqlite3.c	92388;"	d	file:
sqlite3_value_int64	safe/sqlite3.c	/^SQLITE_API sqlite_int64 sqlite3_value_int64(sqlite3_value *pVal){$/;"	f
sqlite3_value_int64	safe/sqlite3.c	92389;"	d	file:
sqlite3_value_numeric_type	safe/sqlite3.c	/^SQLITE_API int sqlite3_value_numeric_type(sqlite3_value *pVal){$/;"	f
sqlite3_value_numeric_type	safe/sqlite3.c	92390;"	d	file:
sqlite3_value_text	safe/sqlite3.c	/^SQLITE_API const unsigned char *sqlite3_value_text(sqlite3_value *pVal){$/;"	f
sqlite3_value_text	safe/sqlite3.c	92391;"	d	file:
sqlite3_value_text16	safe/sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16(sqlite3_value* pVal){$/;"	f
sqlite3_value_text16	safe/sqlite3.c	92392;"	d	file:
sqlite3_value_text16	safe/sqlite3.c	92509;"	d	file:
sqlite3_value_text16be	safe/sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16be(sqlite3_value *pVal){$/;"	f
sqlite3_value_text16be	safe/sqlite3.c	92393;"	d	file:
sqlite3_value_text16be	safe/sqlite3.c	92510;"	d	file:
sqlite3_value_text16le	safe/sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16le(sqlite3_value *pVal){$/;"	f
sqlite3_value_text16le	safe/sqlite3.c	92394;"	d	file:
sqlite3_value_text16le	safe/sqlite3.c	92511;"	d	file:
sqlite3_value_type	safe/sqlite3.c	/^SQLITE_API int sqlite3_value_type(sqlite3_value* pVal){$/;"	f
sqlite3_value_type	safe/sqlite3.c	92395;"	d	file:
sqlite3_version	safe/sqlite3.c	/^SQLITE_API const char sqlite3_version[] = SQLITE_VERSION;$/;"	v
sqlite3_version	safe/sqlite3.h	/^SQLITE_API SQLITE_EXTERN const char sqlite3_version[];$/;"	v
sqlite3_vfs	safe/sqlite3.c	/^struct sqlite3_vfs {$/;"	s	file:
sqlite3_vfs	safe/sqlite3.c	/^typedef struct sqlite3_vfs sqlite3_vfs;$/;"	t	file:
sqlite3_vfs	safe/sqlite3.h	/^struct sqlite3_vfs {$/;"	s
sqlite3_vfs	safe/sqlite3.h	/^typedef struct sqlite3_vfs sqlite3_vfs;$/;"	t
sqlite3_vfs_find	safe/sqlite3.c	/^SQLITE_API sqlite3_vfs *sqlite3_vfs_find(const char *zVfs){$/;"	f
sqlite3_vfs_find	safe/sqlite3.c	92422;"	d	file:
sqlite3_vfs_register	safe/sqlite3.c	/^SQLITE_API int sqlite3_vfs_register(sqlite3_vfs *pVfs, int makeDflt){$/;"	f
sqlite3_vfs_register	safe/sqlite3.c	92423;"	d	file:
sqlite3_vfs_unregister	safe/sqlite3.c	/^SQLITE_API int sqlite3_vfs_unregister(sqlite3_vfs *pVfs){$/;"	f
sqlite3_vfs_unregister	safe/sqlite3.c	92424;"	d	file:
sqlite3_vmprintf	safe/sqlite3.c	/^SQLITE_API char *sqlite3_vmprintf(const char *zFormat, va_list ap){$/;"	f
sqlite3_vmprintf	safe/sqlite3.c	92396;"	d	file:
sqlite3_vsnprintf	safe/sqlite3.c	/^SQLITE_API char *sqlite3_vsnprintf(int n, char *zBuf, const char *zFormat, va_list ap){$/;"	f
sqlite3_vtab	safe/sqlite3.c	/^struct sqlite3_vtab {$/;"	s	file:
sqlite3_vtab	safe/sqlite3.c	/^typedef struct sqlite3_vtab sqlite3_vtab;$/;"	t	file:
sqlite3_vtab	safe/sqlite3.h	/^struct sqlite3_vtab {$/;"	s
sqlite3_vtab	safe/sqlite3.h	/^typedef struct sqlite3_vtab sqlite3_vtab;$/;"	t
sqlite3_vtab_config	safe/sqlite3.c	/^SQLITE_API int sqlite3_vtab_config(sqlite3 *db, int op, ...){$/;"	f
sqlite3_vtab_config	safe/sqlite3.c	92458;"	d	file:
sqlite3_vtab_config	safe/sqlite3.c	92535;"	d	file:
sqlite3_vtab_cursor	safe/sqlite3.c	/^struct sqlite3_vtab_cursor {$/;"	s	file:
sqlite3_vtab_cursor	safe/sqlite3.c	/^typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;$/;"	t	file:
sqlite3_vtab_cursor	safe/sqlite3.h	/^struct sqlite3_vtab_cursor {$/;"	s
sqlite3_vtab_cursor	safe/sqlite3.h	/^typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;$/;"	t
sqlite3_vtab_on_conflict	safe/sqlite3.c	/^SQLITE_API int sqlite3_vtab_on_conflict(sqlite3 *db){$/;"	f
sqlite3_vtab_on_conflict	safe/sqlite3.c	92459;"	d	file:
sqlite3_vtab_on_conflict	safe/sqlite3.c	92536;"	d	file:
sqlite3_wal_autocheckpoint	safe/sqlite3.c	/^SQLITE_API int sqlite3_wal_autocheckpoint(sqlite3 *db, int nFrame){$/;"	f
sqlite3_wal_autocheckpoint	safe/sqlite3.c	92454;"	d	file:
sqlite3_wal_checkpoint	safe/sqlite3.c	/^SQLITE_API int sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb){$/;"	f
sqlite3_wal_checkpoint	safe/sqlite3.c	92455;"	d	file:
sqlite3_wal_checkpoint_v2	safe/sqlite3.c	/^SQLITE_API int sqlite3_wal_checkpoint_v2($/;"	f
sqlite3_wal_hook	safe/sqlite3.c	/^SQLITE_API void *sqlite3_wal_hook($/;"	f
sqlite3_wal_hook	safe/sqlite3.c	92456;"	d	file:
sqlite3_win32_mbcs_to_utf8	safe/sqlite3.c	/^SQLITE_API char *sqlite3_win32_mbcs_to_utf8(const char *zFilename){$/;"	f
sqlite3_win32_sleep	safe/sqlite3.c	/^SQLITE_API void sqlite3_win32_sleep(DWORD milliseconds){$/;"	f
sqlite3_win32_utf8_to_mbcs	safe/sqlite3.c	/^SQLITE_API char *sqlite3_win32_utf8_to_mbcs(const char *zFilename){$/;"	f
sqlite3_win32_write_debug	safe/sqlite3.c	/^SQLITE_API void sqlite3_win32_write_debug(char *zBuf, int nBuf){$/;"	f
sqlite3_xferopt_count	safe/sqlite3.c	/^SQLITE_API int sqlite3_xferopt_count;$/;"	v
sqlite3one	safe/sqlite3.c	/^SQLITE_PRIVATE const int sqlite3one = 1;$/;"	v
sqlite3one	safe/sqlite3.c	/^SQLITE_PRIVATE const int sqlite3one;$/;"	v
sqliteAuthBadReturnCode	safe/sqlite3.c	/^static void sqliteAuthBadReturnCode(Parse *pParse){$/;"	f	file:
sqliteDefaultBusyCallback	safe/sqlite3.c	/^static int sqliteDefaultBusyCallback($/;"	f	file:
sqliteDeleteColumnNames	safe/sqlite3.c	/^static void sqliteDeleteColumnNames(sqlite3 *db, Table *pTable){$/;"	f	file:
sqliteErrorFromPosixError	safe/sqlite3.c	/^static int sqliteErrorFromPosixError(int posixError, int sqliteIOErr) {$/;"	f	file:
sqliteHashData	safe/sqlite3.c	7705;"	d	file:
sqliteHashFirst	safe/sqlite3.c	7703;"	d	file:
sqliteHashNext	safe/sqlite3.c	7704;"	d	file:
sqliteProcessJoin	safe/sqlite3.c	/^static int sqliteProcessJoin(Parse *pParse, Select *p){$/;"	f	file:
sqliteViewResetAll	safe/sqlite3.c	/^static void sqliteViewResetAll(sqlite3 *db, int idx){$/;"	f	file:
sqliteViewResetAll	safe/sqlite3.c	84061;"	d	file:
sqlite_int64	safe/sqlite3.c	/^  typedef SQLITE_INT64_TYPE sqlite_int64;$/;"	t	file:
sqlite_int64	safe/sqlite3.c	/^  typedef __int64 sqlite_int64;$/;"	t	file:
sqlite_int64	safe/sqlite3.c	/^  typedef long long int sqlite_int64;$/;"	t	file:
sqlite_int64	safe/sqlite3.h	/^  typedef SQLITE_INT64_TYPE sqlite_int64;$/;"	t
sqlite_int64	safe/sqlite3.h	/^  typedef __int64 sqlite_int64;$/;"	t
sqlite_int64	safe/sqlite3.h	/^  typedef long long int sqlite_int64;$/;"	t
sqlite_uint64	safe/sqlite3.c	/^  typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;$/;"	t	file:
sqlite_uint64	safe/sqlite3.c	/^  typedef unsigned __int64 sqlite_uint64;$/;"	t	file:
sqlite_uint64	safe/sqlite3.c	/^  typedef unsigned long long int sqlite_uint64;$/;"	t	file:
sqlite_uint64	safe/sqlite3.h	/^  typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;$/;"	t
sqlite_uint64	safe/sqlite3.h	/^  typedef unsigned __int64 sqlite_uint64;$/;"	t
sqlite_uint64	safe/sqlite3.h	/^  typedef unsigned long long int sqlite_uint64;$/;"	t
ssEnv	safe/spider.133.c	/^SSMAP *ssEnv = NULL;$/;"	v
ssEnv	safe/spider.135.c	/^SSMAP *ssEnv = NULL;$/;"	v
ssEnv	safe/spider.200.c	/^SSMAP *ssEnv = NULL;$/;"	v
ssEnv	safe/spider.203.c	/^SSMAP *ssEnv = NULL;$/;"	v
ssEnv	safe/spider.204.c	/^SSMAP *ssEnv = NULL;$/;"	v
ssEnv	safe/spider.210.c	/^SSMAP *ssEnv = NULL;$/;"	v
ssEnv	safe/spider.c	/^SSMAP *ssEnv = NULL;$/;"	v
ssEnv	spider.c	/^SSMAP *ssEnv = NULL;$/;"	v
ssmap_GetFile	safe/spider.133.c	/^static SSMAP *ssmap_GetFile(const char *szFilename)$/;"	f	file:
ssmap_GetFile	safe/spider.135.c	/^static SSMAP *ssmap_GetFile(const char *szFilename)$/;"	f	file:
ssmap_GetFile	safe/spider.200.c	/^static SSMAP *ssmap_GetFile(const char *szFilename)$/;"	f	file:
ssmap_GetFile	safe/spider.203.c	/^static SSMAP *ssmap_GetFile(const char *szFilename)$/;"	f	file:
ssmap_GetFile	safe/spider.204.c	/^static SSMAP *ssmap_GetFile(const char *szFilename)$/;"	f	file:
ssmap_GetFile	safe/spider.210.c	/^static SSMAP *ssmap_GetFile(const char *szFilename)$/;"	f	file:
ssmap_GetFile	safe/spider.c	/^static SSMAP *ssmap_GetFile(const char *szFilename)$/;"	f	file:
ssmap_GetFile	spider.c	/^static SSMAP *ssmap_GetFile(const char *szFilename)$/;"	f	file:
ssmap_PutFile	safe/spider.203.c	/^static int ssmap_PutFile(SSMAP *map, const char *szFilename)$/;"	f	file:
ssmap_PutFile	safe/spider.204.c	/^static int ssmap_PutFile(SSMAP *map, const char *szFilename)$/;"	f	file:
ssmap_PutFile	safe/spider.210.c	/^static int ssmap_PutFile(SSMAP *map, const char *szFilename)$/;"	f	file:
ssmap_PutFile	safe/spider.c	/^static int ssmap_PutFile(SSMAP *map, const char *szFilename)$/;"	f	file:
ssmap_PutFile	spider.c	/^static int ssmap_PutFile(SSMAP *map, const char *szFilename)$/;"	f	file:
stage	mtwamputil.c	/^	int stage;$/;"	m	struct:inward_connection_t	file:
star_oh	safe/sqlite3.c	/^static int star_oh(const char *z){$/;"	f	file:
startEndFlag	safe/sqlite3.c	/^  unsigned char startEndFlag;       \/* 1=rel to end of fork, 0=rel to start *\/$/;"	m	struct:ByteRangeLockPB2	file:
startTime	safe/sqlite3.c	/^  i64 startTime;          \/* Time when query started - used for profiling *\/$/;"	m	struct:Vdbe	file:
stat3Get	safe/sqlite3.c	/^static void stat3Get($/;"	f	file:
stat3GetFuncdef	safe/sqlite3.c	/^static const FuncDef stat3GetFuncdef = {$/;"	v	file:
stat3Init	safe/sqlite3.c	/^static void stat3Init($/;"	f	file:
stat3InitFuncdef	safe/sqlite3.c	/^static const FuncDef stat3InitFuncdef = {$/;"	v	file:
stat3Push	safe/sqlite3.c	/^static void stat3Push($/;"	f	file:
stat3PushFuncdef	safe/sqlite3.c	/^static const FuncDef stat3PushFuncdef = {$/;"	v	file:
stateno	safe/sqlite3.c	/^  YYACTIONTYPE stateno;  \/* The state-number *\/$/;"	m	struct:yyStackEntry	file:
status	safe/sqlite3.c	/^  int (*status)(int,int*,int*,int);$/;"	m	struct:sqlite3_api_routines	file:
stem	safe/sqlite3.c	/^static int stem($/;"	f	file:
step	safe/sqlite3.c	/^  int  (*step)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
step_list	safe/sqlite3.c	/^  TriggerStep *step_list; \/* Link list of trigger program steps             *\/$/;"	m	struct:Trigger	file:
stmt_status	safe/sqlite3.c	/^  int (*stmt_status)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
str	safe/sqlite3.c	/^  StrAccum str;      \/* The string being accumulated *\/$/;"	m	struct:Explain	file:
strHash	safe/sqlite3.c	/^static unsigned int strHash(const char *z, int nKey){$/;"	f	file:
strftimeFunc	safe/sqlite3.c	/^static void strftimeFunc($/;"	f	file:
string	mtjson.h	/^			const char *string;$/;"	m	struct:JSON::<anonymous>::<anonymous>
string	mtjson.h	/^		} string;$/;"	m	union:JSON::<anonymous>
string	safe/mtjson.h	/^			const char *string;$/;"	m	struct:JSON::<anonymous>::<anonymous>
string	safe/mtjson.h	/^		} string;$/;"	m	union:JSON::<anonymous>
strnicmp	safe/sqlite3.c	/^  int (*strnicmp)(const char*,const char*,int);$/;"	m	struct:sqlite3_api_routines	file:
subMapExact	mtwamp.c	/^	SPMAP *subMapExact;							\/\/ Three maps to handle subsscriptions$/;"	m	struct:WAMPREALM	file:
subMapPrefix	mtwamp.c	/^	SPMAP *subMapPrefix;$/;"	m	struct:WAMPREALM	file:
subMapWildcard	mtwamp.c	/^	SPMAP *subMapWildcard;$/;"	m	struct:WAMPREALM	file:
subjInMemory	safe/sqlite3.c	/^  u8 subjInMemory;            \/* True to use in-memory sub-journals *\/$/;"	m	struct:Pager	file:
subjRequiresPage	safe/sqlite3.c	/^static int subjRequiresPage(PgHdr *pPg){$/;"	f	file:
subjournalPage	safe/sqlite3.c	/^static int subjournalPage(PgHdr *pPg){$/;"	f	file:
subscriptionId	mtwamp.c	/^	long long subscriptionId;$/;"	m	struct:subscription_t	file:
subscription_info_t	mtwamp.c	/^typedef struct subscription_info_t {$/;"	s	file:
subscription_info_t	mtwamp.c	/^} subscription_info_t;$/;"	t	file:
subscription_t	mtwamp.c	/^typedef struct subscription_t {$/;"	s	file:
subscription_t	mtwamp.c	/^} subscription_t;$/;"	t	file:
substExpr	safe/sqlite3.c	/^static Expr *substExpr($/;"	f	file:
substExprList	safe/sqlite3.c	/^static void substExprList($/;"	f	file:
substSelect	safe/sqlite3.c	/^static void substSelect($/;"	f	file:
substrFunc	safe/sqlite3.c	/^static void substrFunc($/;"	f	file:
sumFinalize	safe/sqlite3.c	/^static void sumFinalize(sqlite3_context *context){$/;"	f	file:
sumStep	safe/sqlite3.c	/^static void sumStep(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
suppressErr	safe/sqlite3.c	/^  u8 suppressErr;               \/* Do not issue error messages if true *\/$/;"	m	struct:sqlite3	file:
swapMixedEndianFloat	safe/sqlite3.c	63069;"	d	file:
swapMixedEndianFloat	safe/sqlite3.c	63071;"	d	file:
switchLockProxyPath	safe/sqlite3.c	/^static int switchLockProxyPath(unixFile *pFile, const char *path) {$/;"	f	file:
symbolName	bin2c.c	/^char *symbolName;           \/* Current symbol name *\/$/;"	v
symbolNameGiven	bin2c.c	/^const char* symbolNameGiven = "Symbol name is given twice";$/;"	v
syncFlags	safe/sqlite3.c	/^  int syncFlags;               \/* Flags for the fsync *\/$/;"	m	struct:WalWriter	file:
syncFlags	safe/sqlite3.c	/^  u8 syncFlags;               \/* SYNC_NORMAL or SYNC_FULL otherwise *\/$/;"	m	struct:Pager	file:
syncFlags	safe/sqlite3.c	/^  u8 syncFlags;              \/* Flags to use to sync header writes *\/$/;"	m	struct:Wal	file:
syncHeader	safe/sqlite3.c	/^  u8 syncHeader;             \/* Fsync the WAL header if true *\/$/;"	m	struct:Wal	file:
syncJournal	safe/sqlite3.c	/^static int syncJournal(Pager *pPager, int newHdr){$/;"	f	file:
synthCollSeq	safe/sqlite3.c	/^static int synthCollSeq(sqlite3 *db, CollSeq *pColl){$/;"	f	file:
sz	safe/sqlite3.c	/^  u16 sz;                 \/* Size of each buffer in bytes *\/$/;"	m	struct:Lookaside	file:
szAtom	safe/sqlite3.c	/^  int szAtom;      \/* Smallest possible allocation in bytes *\/$/;"	m	struct:Mem5Global	file:
szBaseDir	safe/spider.133.c	/^static const char *szBaseDir = NULL;$/;"	v	file:
szBaseDir	safe/spider.135.c	/^static const char *szBaseDir = NULL;$/;"	v	file:
szBaseDir	safe/spider.200.c	/^static const char *szBaseDir = NULL;$/;"	v	file:
szBaseDir	safe/spider.203.c	/^static const char *szBaseDir = NULL;$/;"	v	file:
szBaseDir	safe/spider.204.c	/^static const char *szBaseDir = NULL;$/;"	v	file:
szBaseDir	safe/spider.210.c	/^static const char *szBaseDir = NULL;$/;"	v	file:
szBaseDir	safe/spider.c	/^static const char *szBaseDir = NULL;$/;"	v	file:
szBaseDir	spider.c	/^static const char *szBaseDir = NULL;$/;"	v	file:
szCache	safe/sqlite3.c	/^  int szCache;                        \/* Configured cache size *\/$/;"	m	struct:PCache	file:
szChunk	safe/sqlite3.c	/^  int szChunk;                        \/* Configured by FCNTL_CHUNK_SIZE *\/$/;"	m	struct:unixFile	file:
szChunk	safe/sqlite3.c	/^  int szChunk;              \/* Chunk size configured by FCNTL_CHUNK_SIZE *\/$/;"	m	struct:os2File	file:
szChunk	safe/sqlite3.c	/^  int szChunk;            \/* Chunk size configured by FCNTL_CHUNK_SIZE *\/$/;"	m	struct:winFile	file:
szConfigFile	safe/spider.133.c	/^static const char *szConfigFile = NULL;$/;"	v	file:
szConfigFile	safe/spider.135.c	/^static const char *szConfigFile = NULL;$/;"	v	file:
szConfigFile	safe/spider.200.c	/^static const char *szConfigFile = NULL;$/;"	v	file:
szConfigFile	safe/spider.203.c	/^static const char *szConfigFile = NULL;$/;"	v	file:
szConfigFile	safe/spider.204.c	/^static const char *szConfigFile = NULL;$/;"	v	file:
szConfigFile	safe/spider.210.c	/^static const char *szConfigFile = NULL;$/;"	v	file:
szConfigFile	safe/spider.c	/^static const char *szConfigFile = NULL;$/;"	v	file:
szConfigFile	spider.c	/^static const char *szConfigFile = NULL;$/;"	v	file:
szContractDir	safe/spider.210.c	/^static const char *szContractDir = NULL;		\/\/ Where contract files live$/;"	v	file:
szContractDir	safe/spider.c	/^static const char *szContractDir = NULL;		\/\/ Where contract files live$/;"	v	file:
szContractDir	spider.c	/^static const char *szContractDir = NULL;		\/\/ Where contract files live$/;"	v	file:
szContractDirLeaf	safe/spider.210.c	/^static const char *szContractDirLeaf = "contracts";	\/\/ Where contracts live$/;"	v	file:
szContractDirLeaf	safe/spider.c	/^static const char *szContractDirLeaf = "contracts";	\/\/ Where contracts live$/;"	v	file:
szContractDirLeaf	spider.c	/^static const char *szContractDirLeaf = "contracts";	\/\/ Where contracts live$/;"	v	file:
szDefaultBaseDir	safe/spider.133.c	/^static const char *szDefaultBaseDir = "\/usr\/mt\/spider";$/;"	v	file:
szDefaultBaseDir	safe/spider.135.c	/^static const char *szDefaultBaseDir = "\/usr\/mt\/spider";$/;"	v	file:
szDefaultBaseDir	safe/spider.200.c	/^static const char *szDefaultBaseDir = "\/usr\/mt\/spider";$/;"	v	file:
szDefaultBaseDir	safe/spider.203.c	/^static const char *szDefaultBaseDir = "\/usr\/mt\/spider";$/;"	v	file:
szDefaultBaseDir	safe/spider.204.c	/^static const char *szDefaultBaseDir = "\/usr\/mt\/spider";	\/\/ Unless told otherwise$/;"	v	file:
szDefaultBaseDir	safe/spider.210.c	/^static const char *szDefaultBaseDir = "\/usr\/mt\/spider";	\/\/ Unless told otherwise$/;"	v	file:
szDefaultBaseDir	safe/spider.c	/^static const char *szDefaultBaseDir = "\/usr\/mt\/spider";	\/\/ Unless told otherwise$/;"	v	file:
szDefaultBaseDir	spider.c	/^static const char *szDefaultBaseDir = "\/usr\/mt\/spider";	\/\/ Unless told otherwise$/;"	v	file:
szEnvDir	safe/spider.204.c	/^static const char *szEnvDir = NULL;				\/\/ Environment directories$/;"	v	file:
szEnvDir	safe/spider.210.c	/^static const char *szEnvDir = NULL;				\/\/ Environment directories$/;"	v	file:
szEnvDir	safe/spider.c	/^static const char *szEnvDir = NULL;				\/\/ Environment directories$/;"	v	file:
szEnvDir	spider.c	/^static const char *szEnvDir = NULL;				\/\/ Environment directories$/;"	v	file:
szEnvDirLeaf	safe/spider.204.c	/^static const char *szEnvDirLeaf = "env";			\/\/ Environment directories$/;"	v	file:
szEnvDirLeaf	safe/spider.210.c	/^static const char *szEnvDirLeaf = "env";			\/\/ Environment directories$/;"	v	file:
szEnvDirLeaf	safe/spider.c	/^static const char *szEnvDirLeaf = "env";			\/\/ Environment directories$/;"	v	file:
szEnvDirLeaf	spider.c	/^static const char *szEnvDirLeaf = "env";			\/\/ Environment directories$/;"	v	file:
szEnvironment	safe/spider.204.c	/^static const char *szEnvironment = NULL;			\/\/ Set to a string if the envionment is non-default$/;"	v	file:
szEnvironment	safe/spider.210.c	/^static const char *szEnvironment = NULL;			\/\/ Set to a string if the envionment is non-default$/;"	v	file:
szEnvironment	safe/spider.c	/^static const char *szEnvironment = NULL;			\/\/ Set to a string if the envionment is non-default$/;"	v	file:
szEnvironment	spider.c	/^static const char *szEnvironment = NULL;			\/\/ Set to a string if the envionment is non-default$/;"	v	file:
szEtcDir	safe/spider.133.c	/^static const char *szEtcDir = NULL;$/;"	v	file:
szEtcDir	safe/spider.135.c	/^static const char *szEtcDir = NULL;$/;"	v	file:
szEtcDir	safe/spider.200.c	/^static const char *szEtcDir = NULL;$/;"	v	file:
szEtcDir	safe/spider.203.c	/^static const char *szEtcDir = NULL;$/;"	v	file:
szEtcDir	safe/spider.204.c	/^static const char *szEtcDir = NULL;				\/\/ Miscellaneous settings$/;"	v	file:
szEtcDir	safe/spider.210.c	/^static const char *szEtcDir = NULL;				\/\/ Miscellaneous settings$/;"	v	file:
szEtcDir	safe/spider.c	/^static const char *szEtcDir = NULL;				\/\/ Miscellaneous settings$/;"	v	file:
szEtcDir	spider.c	/^static const char *szEtcDir = NULL;				\/\/ Miscellaneous settings$/;"	v	file:
szEtcDirLeaf	safe/spider.204.c	/^static const char *szEtcDirLeaf = "etc";			\/\/ Where miscellaneous stuff goes$/;"	v	file:
szEtcDirLeaf	safe/spider.210.c	/^static const char *szEtcDirLeaf = "etc";			\/\/ Where miscellaneous stuff goes$/;"	v	file:
szEtcDirLeaf	safe/spider.c	/^static const char *szEtcDirLeaf = "etc";			\/\/ Where miscellaneous stuff goes$/;"	v	file:
szEtcDirLeaf	spider.c	/^static const char *szEtcDirLeaf = "etc";			\/\/ Where miscellaneous stuff goes$/;"	v	file:
szExtra	safe/sqlite3.c	/^  int szExtra;                        \/* Size of extra space for each page *\/$/;"	m	struct:PCache	file:
szExtra	safe/sqlite3.c	/^  int szExtra;                        \/* Size of extra space in bytes *\/$/;"	m	struct:PCache1	file:
szFilename	safe/spider.210.c	/^	const char *szFilename;				\/\/ Full name of the contract file$/;"	m	struct:contract_t	file:
szFilename	safe/spider.c	/^	const char *szFilename;				\/\/ Full name of the contract file$/;"	m	struct:contract_t	file:
szFilename	spider.c	/^	const char *szFilename;				\/\/ Full name of the contract file$/;"	m	struct:contract_t	file:
szFirstBlock	safe/sqlite3.c	/^  int szFirstBlock;          \/* Size of first block written to WAL file *\/$/;"	m	struct:Wal	file:
szGlobalNoteDir	safe/spider.203.c	/^static const char *szGlobalNoteDir = NULL;$/;"	v	file:
szGlobalNoteDir	safe/spider.204.c	/^static const char *szGlobalNoteDir = NULL;$/;"	v	file:
szGlobalNoteDir	safe/spider.210.c	/^static const char *szGlobalNoteDir = NULL;$/;"	v	file:
szGlobalNoteDirTail	safe/spider.210.c	/^static const char *szGlobalNoteDirTail = NULL;$/;"	v	file:
szHostname	safe/spider.133.c	/^static char szHostname[50];$/;"	v	file:
szHostname	safe/spider.135.c	/^static char szHostname[50];$/;"	v	file:
szHostname	safe/spider.200.c	/^static char szHostname[50];$/;"	v	file:
szHostname	safe/spider.203.c	/^static char szHostname[50];$/;"	v	file:
szHostname	safe/spider.204.c	/^static char szHostname[50];$/;"	v	file:
szHostname	safe/spider.210.c	/^static char szHostname[50];$/;"	v	file:
szHostname	safe/spider.c	/^static char szHostname[50];$/;"	v	file:
szHostname	spider.c	/^static char szHostname[50];$/;"	v	file:
szId	safe/spider.133.c	/^	const char *szId;			\/\/ Message ID the child is dealing with$/;"	m	struct:childinfo_t	file:
szId	safe/spider.135.c	/^	const char *szId;			\/\/ Message ID the child is dealing with$/;"	m	struct:childinfo_t	file:
szId	safe/spider.200.c	/^	const char *szId;			\/\/ Message ID the child is dealing with$/;"	m	struct:childinfo_t	file:
szId	safe/spider.203.c	/^	const char *szId;			\/\/ Message ID the child is dealing with$/;"	m	struct:childinfo_t	file:
szId	safe/spider.204.c	/^	const char *szId;			\/\/ Message ID the child is dealing with$/;"	m	struct:childinfo_t	file:
szId	safe/spider.210.c	/^	const char *szId;			\/\/ Message ID the child is dealing with$/;"	m	struct:childinfo_t	file:
szId	safe/spider.c	/^	const char *szId;			\/\/ Message ID the child is dealing with$/;"	m	struct:childinfo_t	file:
szId	spider.c	/^	const char *szId;			\/\/ Message ID the child is dealing with$/;"	m	struct:childinfo_t	file:
szIp	safe/spider.133.c	/^	const char *szIp;			\/\/ IP that triggered the child$/;"	m	struct:childinfo_t	file:
szIp	safe/spider.135.c	/^	const char *szIp;			\/\/ IP that triggered the child$/;"	m	struct:childinfo_t	file:
szIp	safe/spider.200.c	/^	const char *szIp;			\/\/ IP that triggered the child$/;"	m	struct:childinfo_t	file:
szIp	safe/spider.203.c	/^	const char *szIp;			\/\/ IP that triggered the child$/;"	m	struct:childinfo_t	file:
szIp	safe/spider.204.c	/^	const char *szIp;			\/\/ IP that triggered the child$/;"	m	struct:childinfo_t	file:
szIp	safe/spider.210.c	/^	const char *szIp;			\/\/ IP that triggered the child$/;"	m	struct:childinfo_t	file:
szIp	safe/spider.c	/^	const char *szIp;			\/\/ IP that triggered the child$/;"	m	struct:childinfo_t	file:
szIp	spider.c	/^	const char *szIp;			\/\/ IP that triggered the child$/;"	m	struct:childinfo_t	file:
szLogDir	safe/spider.133.c	/^static const char *szLogDir = NULL;				\/\/ Where logs go$/;"	v	file:
szLogDir	safe/spider.135.c	/^static const char *szLogDir = NULL;				\/\/ Where logs go$/;"	v	file:
szLogDir	safe/spider.200.c	/^static const char *szLogDir = NULL;				\/\/ Where logs go$/;"	v	file:
szLogDir	safe/spider.203.c	/^static const char *szLogDir = NULL;				\/\/ Where logs go$/;"	v	file:
szLogDir	safe/spider.204.c	/^static const char *szLogDir = NULL;				\/\/ Where logs go$/;"	v	file:
szLogDir	safe/spider.210.c	/^static const char *szLogDir = NULL;				\/\/ Where logs go$/;"	v	file:
szLogDir	safe/spider.c	/^static const char *szLogDir = NULL;				\/\/ Where logs go$/;"	v	file:
szLogDir	spider.c	/^static const char *szLogDir = NULL;				\/\/ Where logs go$/;"	v	file:
szLogDirLeaf	safe/spider.204.c	/^static const char *szLogDirLeaf = "logs";			\/\/ Where logs go$/;"	v	file:
szLogDirLeaf	safe/spider.210.c	/^static const char *szLogDirLeaf = "logs";			\/\/ Where logs go$/;"	v	file:
szLogDirLeaf	safe/spider.c	/^static const char *szLogDirLeaf = "logs";			\/\/ Where logs go$/;"	v	file:
szLogDirLeaf	spider.c	/^static const char *szLogDirLeaf = "logs";			\/\/ Where logs go$/;"	v	file:
szLogFile	safe/spider.133.c	/^static const char *szLogFile = NULL;			\/\/ The file into which logs are written...$/;"	v	file:
szLogFile	safe/spider.135.c	/^static const char *szLogFile = NULL;			\/\/ The file into which logs are written...$/;"	v	file:
szLogFile	safe/spider.200.c	/^static const char *szLogFile = NULL;			\/\/ The file into which logs are written...$/;"	v	file:
szLogFile	safe/spider.203.c	/^static const char *szLogFile = NULL;			\/\/ The file into which logs are written...$/;"	v	file:
szLogFile	safe/spider.210.c	/^static const char *szLogFile = NULL;$/;"	v	file:
szLogFile	safe/spider.c	/^static const char *szLogFile = NULL;$/;"	v	file:
szLogFile	spider.c	/^static const char *szLogFile = NULL;$/;"	v	file:
szLookaside	safe/sqlite3.c	/^  int szLookaside;                  \/* Default lookaside buffer size *\/$/;"	m	struct:Sqlite3Config	file:
szMaster	safe/sqlite3.c	/^  u32 szMaster;$/;"	m	struct:Mem3Global	file:
szMiFile	safe/spider.210.c	/^static const char *szMiFile = NULL;$/;"	v	file:
szMiFile	safe/spider.c	/^static const char *szMiFile = NULL;$/;"	v	file:
szMiFile	spider.c	/^static const char *szMiFile = NULL;$/;"	v	file:
szMsgLogDir	safe/spider.133.c	/^static const char *szMsgLogDir = NULL;			\/\/ Logged messages$/;"	v	file:
szMsgLogDir	safe/spider.135.c	/^static const char *szMsgLogDir = NULL;			\/\/ Logged messages$/;"	v	file:
szMsgLogDir	safe/spider.200.c	/^static const char *szMsgLogDir = NULL;			\/\/ Logged messages$/;"	v	file:
szMsgLogDir	safe/spider.203.c	/^static const char *szMsgLogDir = NULL;			\/\/ Logged messages$/;"	v	file:
szMsgLogDir	safe/spider.204.c	/^static const char *szMsgLogDir = NULL;			\/\/ Logged messages$/;"	v	file:
szMsgLogDir	safe/spider.210.c	/^static const char *szMsgLogDir = NULL;			\/\/ Logged messages$/;"	v	file:
szMsgLogDir	safe/spider.c	/^static const char *szMsgLogDir = NULL;			\/\/ Logged messages$/;"	v	file:
szMsgLogDir	spider.c	/^static const char *szMsgLogDir = NULL;			\/\/ Logged messages$/;"	v	file:
szMsgLogDirLeaf	safe/spider.203.c	/^static const char *szMsgLogDirLeaf = NULL;		\/\/ Last part of szMsgLogDir$/;"	v	file:
szMsgLogDirLeaf	safe/spider.204.c	/^static const char *szMsgLogDirLeaf = "msglog";		\/\/ Logged messages$/;"	v	file:
szMsgLogDirLeaf	safe/spider.210.c	/^static const char *szMsgLogDirLeaf = "msglog";		\/\/ Logged messages$/;"	v	file:
szMsgLogDirLeaf	safe/spider.c	/^static const char *szMsgLogDirLeaf = "msglog";		\/\/ Logged messages$/;"	v	file:
szMsgLogDirLeaf	spider.c	/^static const char *szMsgLogDirLeaf = "msglog";		\/\/ Logged messages$/;"	v	file:
szMyName	safe/spider.133.c	/^static const char *szMyName = "spider";$/;"	v	file:
szMyName	safe/spider.135.c	/^static const char *szMyName = "spider";$/;"	v	file:
szMyName	safe/spider.200.c	/^static const char *szMyName = "spider";$/;"	v	file:
szMyName	safe/spider.203.c	/^static const char *szMyName = "spider";$/;"	v	file:
szMyName	safe/spider.204.c	/^static const char *szMyName = "spider";$/;"	v	file:
szMyName	safe/spider.210.c	/^static const char *szMyName = "spider";$/;"	v	file:
szMyName	safe/spider.c	/^static const char *szMyName = "spider";$/;"	v	file:
szMyName	spider.c	/^static const char *szMyName = "spider";$/;"	v	file:
szOrganisationProduct	safe/spider.210.c	/^	const char *szOrganisationProduct;	\/\/ The organisation:product$/;"	m	struct:contract_t	file:
szOrganisationProduct	safe/spider.c	/^	const char *szOrganisationProduct;	\/\/ The organisation:product$/;"	m	struct:contract_t	file:
szOrganisationProduct	spider.c	/^	const char *szOrganisationProduct;	\/\/ The organisation:product$/;"	m	struct:contract_t	file:
szOsFile	safe/sqlite3.c	/^  int szOsFile;            \/* Size of subclassed sqlite3_file *\/$/;"	m	struct:sqlite3_vfs	file:
szOsFile	safe/sqlite3.h	/^  int szOsFile;            \/* Size of subclassed sqlite3_file *\/$/;"	m	struct:sqlite3_vfs
szOutDir	safe/spider.133.c	/^static const char *szOutDir = NULL;				\/\/ Outgoing messages$/;"	v	file:
szOutDir	safe/spider.135.c	/^static const char *szOutDir = NULL;				\/\/ Outgoing messages$/;"	v	file:
szOutDir	safe/spider.200.c	/^static const char *szOutDir = NULL;				\/\/ Outgoing messages$/;"	v	file:
szOutDir	safe/spider.203.c	/^static const char *szOutDir = NULL;				\/\/ Outgoing messages$/;"	v	file:
szOutDir	safe/spider.204.c	/^static const char *szOutDir = NULL;				\/\/ Outgoing messages$/;"	v	file:
szOutDir	safe/spider.210.c	/^static const char *szOutDir = NULL;				\/\/ Outgoing messages$/;"	v	file:
szOutDir	safe/spider.c	/^static const char *szOutDir = NULL;				\/\/ Outgoing messages$/;"	v	file:
szOutDir	spider.c	/^static const char *szOutDir = NULL;				\/\/ Outgoing messages$/;"	v	file:
szOutDirLeaf	safe/spider.204.c	/^static const char *szOutDirLeaf = "out";			\/\/ Outgoing messages$/;"	v	file:
szOutDirLeaf	safe/spider.210.c	/^static const char *szOutDirLeaf = "out";			\/\/ Outgoing messages$/;"	v	file:
szOutDirLeaf	safe/spider.c	/^static const char *szOutDirLeaf = "out";			\/\/ Outgoing messages$/;"	v	file:
szOutDirLeaf	spider.c	/^static const char *szOutDirLeaf = "out";			\/\/ Outgoing messages$/;"	v	file:
szPage	safe/sqlite3.c	/^  int szPage;                         \/* Size of allocated pages in bytes *\/$/;"	m	struct:PCache1	file:
szPage	safe/sqlite3.c	/^  int szPage;                         \/* Size of every page in this cache *\/$/;"	m	struct:PCache	file:
szPage	safe/sqlite3.c	/^  int szPage;                       \/* Size of each page in pPage[] *\/$/;"	m	struct:Sqlite3Config	file:
szPage	safe/sqlite3.c	/^  int szPage;                  \/* Size of one page *\/$/;"	m	struct:WalWriter	file:
szPage	safe/sqlite3.c	/^  u16 szPage;                     \/* Database page size in bytes. 1==64K *\/$/;"	m	struct:WalIndexHdr	file:
szPage	safe/sqlite3.c	/^  u32 szPage;                \/* Database page size *\/$/;"	m	struct:Wal	file:
szPidFile	safe/spider.133.c	/^static const char *szPidFile = NULL;				\/\/ Location of pid file$/;"	v	file:
szPidFile	safe/spider.135.c	/^static const char *szPidFile = NULL;				\/\/ Location of pid file$/;"	v	file:
szPidFile	safe/spider.200.c	/^static const char *szPidFile = NULL;				\/\/ Location of pid file$/;"	v	file:
szPidFile	safe/spider.203.c	/^static const char *szPidFile = NULL;				\/\/ Location of pid file$/;"	v	file:
szPidFile	safe/spider.204.c	/^static const char *szPidFile = NULL;			\/\/ Location of pid file$/;"	v	file:
szPidFile	safe/spider.210.c	/^static const char *szPidFile = NULL;			\/\/ Location of pid file$/;"	v	file:
szPidFile	safe/spider.c	/^static const char *szPidFile = NULL;			\/\/ Location of pid file$/;"	v	file:
szPidFile	spider.c	/^static const char *szPidFile = NULL;			\/\/ Location of pid file$/;"	v	file:
szReadBuf	safe/spider.133.c	/^static char szReadBuf[1024];$/;"	v	file:
szReadBuf	safe/spider.135.c	/^static char szReadBuf[1024];$/;"	v	file:
szReadBuf	safe/spider.200.c	/^static char szReadBuf[1024];$/;"	v	file:
szReadBuf	safe/spider.203.c	/^static char szReadBuf[1024];$/;"	v	file:
szReadBuf	safe/spider.204.c	/^static char szReadBuf[1024];$/;"	v	file:
szReadBuf	safe/spider.210.c	/^static char szReadBuf[1024];$/;"	v	file:
szReadBuf	safe/spider.c	/^static char szReadBuf[1024];$/;"	v	file:
szReadBuf	spider.c	/^static char szReadBuf[1024];$/;"	v	file:
szReadBufEnd	safe/spider.133.c	/^static char *szReadBufEnd;				\/\/ How many characters are actually in it$/;"	v	file:
szReadBufEnd	safe/spider.135.c	/^static char *szReadBufEnd;				\/\/ How many characters are actually in it$/;"	v	file:
szReadBufEnd	safe/spider.200.c	/^static char *szReadBufEnd;				\/\/ How many characters are actually in it$/;"	v	file:
szReadBufEnd	safe/spider.203.c	/^static char *szReadBufEnd;				\/\/ How many characters are actually in it$/;"	v	file:
szReadBufEnd	safe/spider.204.c	/^static char *szReadBufEnd;				\/\/ How many characters are actually in it$/;"	v	file:
szReadBufEnd	safe/spider.210.c	/^static char *szReadBufEnd;				\/\/ How many characters are actually in it$/;"	v	file:
szReadBufEnd	safe/spider.c	/^static char *szReadBufEnd;				\/\/ How many characters are actually in it$/;"	v	file:
szReadBufEnd	spider.c	/^static char *szReadBufEnd;				\/\/ How many characters are actually in it$/;"	v	file:
szReadBufp	safe/spider.133.c	/^static char *szReadBufp=NULL;			\/\/ Pointer to next char in buffer$/;"	v	file:
szReadBufp	safe/spider.135.c	/^static char *szReadBufp=NULL;			\/\/ Pointer to next char in buffer$/;"	v	file:
szReadBufp	safe/spider.200.c	/^static char *szReadBufp=NULL;			\/\/ Pointer to next char in buffer$/;"	v	file:
szReadBufp	safe/spider.203.c	/^static char *szReadBufp=NULL;			\/\/ Pointer to next char in buffer$/;"	v	file:
szReadBufp	safe/spider.204.c	/^static char *szReadBufp=NULL;			\/\/ Pointer to next char in buffer$/;"	v	file:
szReadBufp	safe/spider.210.c	/^static char *szReadBufp=NULL;			\/\/ Pointer to next char in buffer$/;"	v	file:
szReadBufp	safe/spider.c	/^static char *szReadBufp=NULL;			\/\/ Pointer to next char in buffer$/;"	v	file:
szReadBufp	spider.c	/^static char *szReadBufp=NULL;			\/\/ Pointer to next char in buffer$/;"	v	file:
szRegion	safe/sqlite3.c	/^  int szRegion;              \/* Size of shared-memory regions *\/$/;"	m	struct:os2ShmNode	file:
szRegion	safe/sqlite3.c	/^  int szRegion;              \/* Size of shared-memory regions *\/$/;"	m	struct:unixShmNode	file:
szRegion	safe/sqlite3.c	/^  int szRegion;              \/* Size of shared-memory regions *\/$/;"	m	struct:winShmNode	file:
szRpcDataDir	safe/spider.133.c	/^static const char *szRpcDataDir = NULL;			\/\/ Where RPC binaries live$/;"	v	file:
szRpcDataDir	safe/spider.135.c	/^static const char *szRpcDataDir = NULL;			\/\/ Where RPC binaries live$/;"	v	file:
szRpcDataDir	safe/spider.200.c	/^static const char *szRpcDataDir = NULL;			\/\/ Where RPC binaries live$/;"	v	file:
szRpcDataDir	safe/spider.203.c	/^static const char *szRpcDataDir = NULL;			\/\/ Where RPC binaries live$/;"	v	file:
szRpcDataDir	safe/spider.204.c	/^static const char *szRpcDataDir = NULL;			\/\/ Where RPC data lives$/;"	v	file:
szRpcDataDir	safe/spider.210.c	/^static const char *szRpcDataDir = NULL;			\/\/ Where RPC data lives$/;"	v	file:
szRpcDataDir	safe/spider.c	/^static const char *szRpcDataDir = NULL;			\/\/ Where RPC data lives$/;"	v	file:
szRpcDataDir	spider.c	/^static const char *szRpcDataDir = NULL;			\/\/ Where RPC data lives$/;"	v	file:
szRpcDataDirLeaf	safe/spider.204.c	/^static const char *szRpcDataDirLeaf = "rpcdata";	\/\/ Where RPC binaries live$/;"	v	file:
szRpcDataDirLeaf	safe/spider.210.c	/^static const char *szRpcDataDirLeaf = "rpcdata";	\/\/ Where RPC binaries live$/;"	v	file:
szRpcDataDirLeaf	safe/spider.c	/^static const char *szRpcDataDirLeaf = "rpcdata";	\/\/ Where RPC binaries live$/;"	v	file:
szRpcDataDirLeaf	spider.c	/^static const char *szRpcDataDirLeaf = "rpcdata";	\/\/ Where RPC binaries live$/;"	v	file:
szRpcDir	safe/spider.133.c	/^static const char *szRpcDir = NULL;				\/\/ Where RPC binaries live$/;"	v	file:
szRpcDir	safe/spider.135.c	/^static const char *szRpcDir = NULL;				\/\/ Where RPC binaries live$/;"	v	file:
szRpcDir	safe/spider.200.c	/^static const char *szRpcDir = NULL;				\/\/ Where RPC binaries live$/;"	v	file:
szRpcDir	safe/spider.203.c	/^static const char *szRpcDir = NULL;				\/\/ Where RPC binaries live$/;"	v	file:
szRpcDir	safe/spider.204.c	/^static const char *szRpcDir = NULL;				\/\/ Where RPC binaries live$/;"	v	file:
szRpcDir	safe/spider.210.c	/^static const char *szRpcDir = NULL;				\/\/ Where RPC binaries live$/;"	v	file:
szRpcDir	safe/spider.c	/^static const char *szRpcDir = NULL;				\/\/ Where RPC binaries live$/;"	v	file:
szRpcDir	spider.c	/^static const char *szRpcDir = NULL;				\/\/ Where RPC binaries live$/;"	v	file:
szRpcDirLeaf	safe/spider.204.c	/^static const char *szRpcDirLeaf = "rpc";			\/\/ Where RPC binaries live$/;"	v	file:
szRpcDirLeaf	safe/spider.210.c	/^static const char *szRpcDirLeaf = "rpc";			\/\/ Where RPC binaries live$/;"	v	file:
szRpcDirLeaf	safe/spider.c	/^static const char *szRpcDirLeaf = "rpc";			\/\/ Where RPC binaries live$/;"	v	file:
szRpcDirLeaf	spider.c	/^static const char *szRpcDirLeaf = "rpc";			\/\/ Where RPC binaries live$/;"	v	file:
szRpcError	safe/spider.133.c	/^static const char *szRpcError = NULL;				\/\/ Error returned from RPC call$/;"	v	file:
szRpcError	safe/spider.135.c	/^static const char *szRpcError = NULL;				\/\/ Error returned from RPC call$/;"	v	file:
szScratch	safe/sqlite3.c	/^  int szScratch;                    \/* Size of each scratch buffer *\/$/;"	m	struct:Sqlite3Config	file:
szSlot	safe/sqlite3.c	/^  int szSlot;                    \/* Size of each free slot *\/$/;"	m	struct:PCacheGlobal	file:
szTmpDir	safe/spider.204.c	/^static const char *szTmpDir = NULL;				\/\/ Where temporary stuff lives$/;"	v	file:
szTmpDir	safe/spider.210.c	/^static const char *szTmpDir = NULL;				\/\/ Where temporary stuff lives$/;"	v	file:
szTmpDir	safe/spider.c	/^static const char *szTmpDir = NULL;				\/\/ Where temporary stuff lives$/;"	v	file:
szTmpDir	spider.c	/^static const char *szTmpDir = NULL;				\/\/ Where temporary stuff lives$/;"	v	file:
szTmpDirLeaf	safe/spider.204.c	/^static const char *szTmpDirLeaf = "tmp";			\/\/ Where temporary files$/;"	v	file:
szTmpDirLeaf	safe/spider.210.c	/^static const char *szTmpDirLeaf = "tmp";			\/\/ Where temporary files$/;"	v	file:
szTmpDirLeaf	safe/spider.c	/^static const char *szTmpDirLeaf = "tmp";			\/\/ Where temporary files$/;"	v	file:
szTmpDirLeaf	spider.c	/^static const char *szTmpDirLeaf = "tmp";			\/\/ Where temporary files$/;"	v	file:
szValidFrom	safe/spider.210.c	/^	const char *szValidFrom;			\/\/ Valid from\/to dates (YYYY-MM-DD)$/;"	m	struct:contract_t	file:
szValidFrom	safe/spider.c	/^	const char *szValidFrom;			\/\/ Valid from\/to dates (YYYY-MM-DD)$/;"	m	struct:contract_t	file:
szValidFrom	spider.c	/^	const char *szValidFrom;			\/\/ Valid from\/to dates (YYYY-MM-DD)$/;"	m	struct:contract_t	file:
szValidTo	safe/spider.210.c	/^	const char *szValidTo;$/;"	m	struct:contract_t	file:
szValidTo	safe/spider.c	/^	const char *szValidTo;$/;"	m	struct:contract_t	file:
szValidTo	spider.c	/^	const char *szValidTo;$/;"	m	struct:contract_t	file:
tRetry	safe/spider.133.c	/^	time_t tRetry;							\/\/ When to re-try if not initially working$/;"	m	struct:NetworkPort_t	file:
tRetry	safe/spider.135.c	/^	time_t tRetry;							\/\/ When to re-try if not initially working$/;"	m	struct:NetworkPort_t	file:
tRetry	safe/spider.200.c	/^	time_t tRetry;							\/\/ When to re-try if not initially working$/;"	m	struct:NetworkPort_t	file:
tRetry	safe/spider.203.c	/^	time_t tRetry;							\/\/ When to re-try if not initially working$/;"	m	struct:NetworkPort_t	file:
tRetry	safe/spider.204.c	/^	time_t tRetry;							\/\/ When to re-try if not initially working$/;"	m	struct:NetworkPort_t	file:
tRetry	safe/spider.210.c	/^	time_t tRetry;							\/\/ When to re-try if not initially working$/;"	m	struct:NetworkPort_t	file:
tRetry	safe/spider.c	/^	time_t tRetry;							\/\/ When to re-try if not initially working$/;"	m	struct:NetworkPort_t	file:
tRetry	spider.c	/^	time_t tRetry;							\/\/ When to re-try if not initially working$/;"	m	struct:NetworkPort_t	file:
tRowcnt	safe/sqlite3.c	/^ typedef u32 tRowcnt;    \/* 32-bit is the default *\/$/;"	t	file:
tRowcnt	safe/sqlite3.c	/^ typedef u64 tRowcnt;    \/* 64-bit only if requested at compile-time *\/$/;"	t	file:
tStarted	safe/spider.133.c	/^	time_t		tStarted;		\/\/ When it started$/;"	m	struct:childinfo_t	file:
tStarted	safe/spider.135.c	/^	time_t		tStarted;		\/\/ When it started$/;"	m	struct:childinfo_t	file:
tStarted	safe/spider.200.c	/^	time_t		tStarted;		\/\/ When it started$/;"	m	struct:childinfo_t	file:
tStarted	safe/spider.203.c	/^	time_t		tStarted;		\/\/ When it started$/;"	m	struct:childinfo_t	file:
tStarted	safe/spider.204.c	/^	time_t		tStarted;		\/\/ When it started$/;"	m	struct:childinfo_t	file:
tStarted	safe/spider.210.c	/^	time_t		tStarted;		\/\/ When it started$/;"	m	struct:childinfo_t	file:
tStarted	safe/spider.c	/^	time_t		tStarted;		\/\/ When it started$/;"	m	struct:childinfo_t	file:
tStarted	spider.c	/^	time_t		tStarted;		\/\/ When it started$/;"	m	struct:childinfo_t	file:
tabFlags	safe/sqlite3.c	/^  u8 tabFlags;         \/* Mask of TF_* values *\/$/;"	m	struct:Table	file:
table	safe/sqlite3.c	/^  char *table;            \/* The table or view to which the trigger applies *\/$/;"	m	struct:Trigger	file:
tableAndColumnIndex	safe/sqlite3.c	/^static int tableAndColumnIndex($/;"	f	file:
tableOfTrigger	safe/sqlite3.c	/^static Table *tableOfTrigger(Trigger *pTrigger){$/;"	f	file:
table_column_metadata	safe/sqlite3.c	/^  int  (*table_column_metadata)(sqlite3*,const char*,const char*,const char*,$/;"	m	struct:sqlite3_api_routines	file:
target	safe/sqlite3.c	/^  Token target;        \/* Target table for DELETE, UPDATE, INSERT *\/$/;"	m	struct:TriggerStep	file:
targetSrcList	safe/sqlite3.c	/^static SrcList *targetSrcList($/;"	f	file:
tblHash	safe/sqlite3.c	/^  Hash tblHash;        \/* All tables indexed by name *\/$/;"	m	struct:Schema	file:
tcp_Connect	mtwamputil.c	/^static int tcp_Connect(const char *szHost, int nPort)$/;"	f	file:
tcp_Connect	safe/spider.133.c	/^static int tcp_Connect(const char *szHost, int nPort)$/;"	f	file:
tcp_Connect	safe/spider.135.c	/^static int tcp_Connect(const char *szHost, int nPort)$/;"	f	file:
tcp_Connect	safe/spider.200.c	/^static int tcp_Connect(const char *szHost, int nPort)$/;"	f	file:
tcp_Connect	safe/spider.203.c	/^static int tcp_Connect(const char *szHost, int nPort)$/;"	f	file:
tcp_Connect	safe/spider.204.c	/^static int tcp_Connect(const char *szHost, int nPort)$/;"	f	file:
tcp_Connect	safe/spider.210.c	/^static int tcp_Connect(const char *szHost, int nPort)$/;"	f	file:
tcp_Connect	safe/spider.c	/^static int tcp_Connect(const char *szHost, int nPort)$/;"	f	file:
tcp_Connect	spider.c	/^static int tcp_Connect(const char *szHost, int nPort)$/;"	f	file:
tcp_ListenOn	safe/spider.133.c	/^static int tcp_ListenOn(int nPort)$/;"	f	file:
tcp_ListenOn	safe/spider.135.c	/^static int tcp_ListenOn(int nPort)$/;"	f	file:
tcp_ListenOn	safe/spider.200.c	/^static int tcp_ListenOn(int nPort)$/;"	f	file:
tcp_ListenOn	safe/spider.203.c	/^static int tcp_ListenOn(int nPort)$/;"	f	file:
tcp_ListenOn	safe/spider.204.c	/^static int tcp_ListenOn(int nPort)$/;"	f	file:
tcp_ListenOn	safe/spider.210.c	/^static int tcp_ListenOn(int nPort)$/;"	f	file:
tcp_ListenOn	safe/spider.c	/^static int tcp_ListenOn(int nPort)$/;"	f	file:
tcp_ListenOn	spider.c	/^static int tcp_ListenOn(int nPort)$/;"	f	file:
tempFile	safe/sqlite3.c	/^  u8 tempFile;                \/* zFilename is a temporary file *\/$/;"	m	struct:Pager	file:
tempReg	safe/sqlite3.c	/^    u8 tempReg;           \/* iReg is a temp register that needs to be freed *\/$/;"	m	struct:Parse::yColCache	file:
temp_master_schema	safe/sqlite3.c	94896;"	d	file:
temp_store	safe/sqlite3.c	/^  u8 temp_store;                \/* 1: file 2: memory 0: default *\/$/;"	m	struct:sqlite3	file:
term	safe/sqlite3.c	/^  Blob term;                      \/* Current term *\/$/;"	m	struct:NodeReader	file:
termCanDriveIndex	safe/sqlite3.c	/^static int termCanDriveIndex($/;"	f	file:
testFunc	safe/sqlite3.c	/^static void testFunc($/;"	f	file:
testRtreeCell	safe/sqlite3.c	/^static int testRtreeCell(Rtree *pRtree, RtreeCursor *pCursor, int *pbEof){$/;"	f	file:
testRtreeEntry	safe/sqlite3.c	/^static int testRtreeEntry(Rtree *pRtree, RtreeCursor *pCursor, int *pbEof){$/;"	f	file:
testRtreeGeom	safe/sqlite3.c	/^static int testRtreeGeom($/;"	f	file:
test_control	safe/sqlite3.c	/^  int (*test_control)(int, ...);$/;"	m	struct:sqlite3_api_routines	file:
test_fts3_node_chunk_threshold	safe/sqlite3.c	/^int test_fts3_node_chunk_threshold = (4*1024)*4;$/;"	v
test_fts3_node_chunksize	safe/sqlite3.c	/^int test_fts3_node_chunksize = (4*1024);$/;"	v
testcase	safe/sqlite3.c	117704;"	d	file:
testcase	safe/sqlite3.c	480;"	d	file:
testcase	safe/sqlite3.c	482;"	d	file:
th	safe/spider.203.c	/^const char *th(int day)$/;"	f
th	safe/spider.204.c	/^const char *th(int day)$/;"	f
th	safe/spider.210.c	/^const char *th(int day)$/;"	f
th	safe/spider.c	/^const char *th(int day)$/;"	f
th	spider.c	/^const char *th(int day)$/;"	f
thread_cleanup	safe/sqlite3.c	/^  void  (*thread_cleanup)(void);$/;"	m	struct:sqlite3_api_routines	file:
threadid	safe/sqlite3.c	25422;"	d	file:
threadid	safe/sqlite3.c	25424;"	d	file:
timeFromSSLTime	safe/spider.200.c	/^time_t timeFromSSLTime(const char* sslTime)$/;"	f
timeFromSSLTime	safe/spider.203.c	/^time_t timeFromSSLTime(const char* sslTime)$/;"	f
timeFromSSLTime	safe/spider.204.c	/^time_t timeFromSSLTime(const char* sslTime)$/;"	f
timeFromSSLTime	safe/spider.210.c	/^time_t timeFromSSLTime(const char* sslTime)$/;"	f
timeFromSSLTime	safe/spider.c	/^time_t timeFromSSLTime(const char* sslTime)$/;"	f
timeFromSSLTime	spider.c	/^time_t timeFromSSLTime(const char* sslTime)$/;"	f
timeFromSqlTime	safe/spider.200.c	/^time_t timeFromSqlTime(const char* t)$/;"	f
timeFromSqlTime	safe/spider.203.c	/^time_t timeFromSqlTime(const char* t)$/;"	f
timeFromSqlTime	safe/spider.204.c	/^time_t timeFromSqlTime(const char* t)$/;"	f
timeFromSqlTime	safe/spider.210.c	/^time_t timeFromSqlTime(const char* t, int dst)$/;"	f
timeFromSqlTime	safe/spider.c	/^time_t timeFromSqlTime(const char* t, int dst)$/;"	f
timeFromSqlTime	spider.c	/^time_t timeFromSqlTime(const char* t, int dst)$/;"	f
timeFunc	safe/sqlite3.c	/^static void timeFunc($/;"	f	file:
timer_Start	safe/spider.133.c	/^void timer_Start()$/;"	f
timer_Start	safe/spider.135.c	/^void timer_Start()$/;"	f
timer_Start	safe/spider.200.c	/^void timer_Start()$/;"	f
timer_Start	safe/spider.203.c	/^void timer_Start()$/;"	f
timer_Start	safe/spider.204.c	/^void timer_Start()$/;"	f
timer_Start	safe/spider.210.c	/^void timer_Start()$/;"	f
timer_Start	safe/spider.c	/^void timer_Start()$/;"	f
timer_Start	spider.c	/^void timer_Start()$/;"	f
timer_Stop	safe/spider.133.c	/^void timer_Stop()$/;"	f
timer_Stop	safe/spider.135.c	/^void timer_Stop()$/;"	f
timer_Stop	safe/spider.200.c	/^void timer_Stop()$/;"	f
timer_Stop	safe/spider.203.c	/^void timer_Stop()$/;"	f
timer_Stop	safe/spider.204.c	/^void timer_Stop()$/;"	f
timer_Stop	safe/spider.210.c	/^void timer_Stop()$/;"	f
timer_Stop	safe/spider.c	/^void timer_Stop()$/;"	f
timer_Stop	spider.c	/^void timer_Stop()$/;"	f
tkCREATE	safe/sqlite3.c	113258;"	d	file:
tkEND	safe/sqlite3.c	113261;"	d	file:
tkEXPLAIN	safe/sqlite3.c	113257;"	d	file:
tkOTHER	safe/sqlite3.c	113255;"	d	file:
tkSEMI	safe/sqlite3.c	113253;"	d	file:
tkTEMP	safe/sqlite3.c	113259;"	d	file:
tkTRIGGER	safe/sqlite3.c	113260;"	d	file:
tkWS	safe/sqlite3.c	113254;"	d	file:
tmask	safe/sqlite3.c	101697;"	d	file:
tmask	safe/sqlite3.c	90507;"	d	file:
tmask	safe/sqlite3.c	91056;"	d	file:
tnum	safe/sqlite3.c	/^  int tnum;            \/* Root BTree node for this table (see note above) *\/$/;"	m	struct:Table	file:
tnum	safe/sqlite3.c	/^  int tnum;        \/* Page containing root of this index in database file *\/$/;"	m	struct:Index	file:
token	safe/sqlite3.c	/^  void *token;                  \/* id that may be used to recursive triggers *\/$/;"	m	struct:SubProgram	file:
token	safe/sqlite3.c	/^  void *token;            \/* Copy of SubProgram.token *\/$/;"	m	struct:VdbeFrame	file:
tooBig	safe/sqlite3.c	/^  u8   tooBig;         \/* Becomes true if string size exceeds limits *\/$/;"	m	struct:StrAccum	file:
totalAlloc	safe/sqlite3.c	/^  u64 totalAlloc;     \/* Total of all malloc calls - includes internal frag *\/$/;"	m	struct:Mem5Global	file:
totalExcess	safe/sqlite3.c	/^  u64 totalExcess;    \/* Total internal fragmentation *\/$/;"	m	struct:Mem5Global	file:
totalFinalize	safe/sqlite3.c	/^static void totalFinalize(sqlite3_context *context){$/;"	f	file:
total_changes	safe/sqlite3.c	/^  int  (*total_changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
total_changes	safe/sqlite3.c	/^static void total_changes($/;"	f	file:
tr_tm	safe/sqlite3.c	/^  u8 tr_tm;               \/* One of TRIGGER_BEFORE, TRIGGER_AFTER *\/$/;"	m	struct:Trigger	file:
trace	safe/sqlite3.c	/^  FILE *trace;            \/* Write an execution trace here, if not NULL *\/$/;"	m	struct:Vdbe	file:
trace	safe/sqlite3.c	/^  int trace;                 \/* True to trace changes *\/$/;"	m	struct:sqlite3_mutex	file:
trace	safe/sqlite3.c	/^  void * (*trace)(sqlite3*,void(*xTrace)(void*,const char*),void*);$/;"	m	struct:sqlite3_api_routines	file:
trace	safe/sqlite3.c	/^ int   trace;       \/* True to trace changes *\/$/;"	m	struct:sqlite3_mutex	file:
transCntrChng	safe/sqlite3.c	/^  unsigned char transCntrChng;   \/* True if the transaction counter changed *\/$/;"	m	struct:unixFile	file:
transferJoinMarkings	safe/sqlite3.c	/^static void transferJoinMarkings(Expr *pDerived, Expr *pBase){$/;"	f	file:
transferParseError	safe/sqlite3.c	/^static void transferParseError(Parse *pTo, Parse *pFrom){$/;"	f	file:
transfer_bindings	safe/sqlite3.c	/^  int  (*transfer_bindings)(sqlite3_stmt*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
trigHash	safe/sqlite3.c	/^  Hash trigHash;       \/* All triggers indexed by name *\/$/;"	m	struct:Schema	file:
triggerStepAllocate	safe/sqlite3.c	/^static TriggerStep *triggerStepAllocate($/;"	f	file:
trimFunc	safe/sqlite3.c	/^static void trimFunc($/;"	f	file:
true	bin2c.c	58;"	d	file:
truncateOnCommit	safe/sqlite3.c	/^  u8 truncateOnCommit;       \/* True to truncate WAL file on commit *\/$/;"	m	struct:Wal	file:
truth	mtjson.h	/^		unsigned char truth;			\/\/ For JSON_BOOL$/;"	m	union:JSON::<anonymous>
truth	safe/mtjson.h	/^		unsigned char truth;			\/\/ For JSON_BOOL$/;"	m	union:JSON::<anonymous>
tryHelp	bin2c.c	/^const char* tryHelp = "Try 'bin2c --help' for more information.\\n";$/;"	v
type	mtjson.h	/^	unsigned char	type;$/;"	m	struct:JSON
type	safe/mtjson.h	/^	unsigned char	type;$/;"	m	struct:JSON
type	safe/sqlite3.c	/^  etByte type;             \/* Conversion paradigm *\/$/;"	m	struct:et_info	file:
type	safe/sqlite3.c	/^  u8  type;           \/* One of SQLITE_NULL, SQLITE_TEXT, SQLITE_INTEGER, etc *\/$/;"	m	struct:Mem	file:
type	safe/sqlite3.c	/^struct AttachKey { int type;  Token key; };$/;"	m	struct:AttachKey	file:
typeName	bin2c.c	53;"	d	file:
typeofFunc	safe/sqlite3.c	/^static void typeofFunc($/;"	f	file:
tz	safe/sqlite3.c	/^  int tz;            \/* Timezone offset in minutes *\/$/;"	m	struct:DateTime	file:
u	safe/sqlite3.c	/^  } u;$/;"	m	struct:Bitvec	file:
u	safe/sqlite3.c	/^  } u;$/;"	m	struct:Expr	file:
u	safe/sqlite3.c	/^  } u;$/;"	m	struct:IndexSample	file:
u	safe/sqlite3.c	/^  } u;$/;"	m	struct:Mem	file:
u	safe/sqlite3.c	/^  } u;$/;"	m	struct:Mem3Block	file:
u	safe/sqlite3.c	/^  } u;$/;"	m	struct:Walker	file:
u	safe/sqlite3.c	/^  } u;$/;"	m	struct:WhereLevel	file:
u	safe/sqlite3.c	/^  } u;$/;"	m	struct:WherePlan	file:
u	safe/sqlite3.c	/^  } u;$/;"	m	struct:WhereTerm	file:
u1	safe/sqlite3.c	/^  } u1;$/;"	m	struct:sqlite3	file:
u16	safe/sqlite3.c	/^typedef UINT16_TYPE u16;           \/* 2-byte unsigned integer *\/$/;"	t	file:
u32	safe/sqlite3.c	/^typedef UINT32_TYPE u32;           \/* 4-byte unsigned integer *\/$/;"	t	file:
u32	safe/sqlite3.c	/^typedef unsigned int u32;         \/* 4-byte unsigned integer *\/$/;"	t	file:
u32	safe/sqlite3.c	/^typedef unsigned int u32;$/;"	t	file:
u64	safe/sqlite3.c	/^typedef sqlite3_uint64 u64;       \/* 8-byte unsigned integer *\/$/;"	t	file:
u64	safe/sqlite3.c	/^typedef sqlite_uint64 u64;         \/* 8-byte unsigned integer *\/$/;"	t	file:
u8	safe/sqlite3.c	/^typedef UINT8_TYPE u8;             \/* 1-byte unsigned integer *\/$/;"	t	file:
u8	safe/sqlite3.c	/^typedef unsigned char u8;         \/* 1-byte (or larger) unsigned integer *\/$/;"	t	file:
u8	safe/sqlite3.c	/^typedef unsigned char u8;$/;"	t	file:
ucUtf8	safe/sqlite3.c	/^static UconvObject ucUtf8 = NULL; \/* convert between UTF-8 and UCS-2 *\/$/;"	v	file:
uclCp	safe/sqlite3.c	/^static UconvObject uclCp = NULL;  \/* convert between local codepage and UCS-2 *\/$/;"	v	file:
unLockFlag	safe/sqlite3.c	/^  unsigned char unLockFlag;         \/* 1 = unlock, 0 = lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
unicodeAddExceptions	safe/sqlite3.c	/^static int unicodeAddExceptions($/;"	f	file:
unicodeClose	safe/sqlite3.c	/^static int unicodeClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
unicodeCreate	safe/sqlite3.c	/^static int unicodeCreate($/;"	f	file:
unicodeDestroy	safe/sqlite3.c	/^static int unicodeDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
unicodeIsAlnum	safe/sqlite3.c	/^static int unicodeIsAlnum(unicode_tokenizer *p, int iCode){$/;"	f	file:
unicodeIsException	safe/sqlite3.c	/^static int unicodeIsException(unicode_tokenizer *p, int iCode){$/;"	f	file:
unicodeNext	safe/sqlite3.c	/^static int unicodeNext($/;"	f	file:
unicodeOpen	safe/sqlite3.c	/^static int unicodeOpen($/;"	f	file:
unicodeToMbcs	safe/sqlite3.c	/^static char *unicodeToMbcs(LPCWSTR zWideFilename){$/;"	f	file:
unicodeToUtf8	safe/sqlite3.c	/^static char *unicodeToUtf8(LPCWSTR zWideFilename){$/;"	f	file:
unicode_cursor	safe/sqlite3.c	/^struct unicode_cursor {$/;"	s	file:
unicode_cursor	safe/sqlite3.c	/^typedef struct unicode_cursor unicode_cursor;$/;"	t	file:
unicode_tokenizer	safe/sqlite3.c	/^struct unicode_tokenizer {$/;"	s	file:
unicode_tokenizer	safe/sqlite3.c	/^typedef struct unicode_tokenizer unicode_tokenizer;$/;"	t	file:
unixAccess	safe/sqlite3.c	/^static int unixAccess($/;"	f	file:
unixCheckReservedLock	safe/sqlite3.c	/^static int unixCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
unixClose	safe/sqlite3.c	/^static int unixClose(sqlite3_file *id){$/;"	f	file:
unixCurrentTime	safe/sqlite3.c	/^static int unixCurrentTime(sqlite3_vfs *NotUsed, double *prNow){$/;"	f	file:
unixCurrentTimeInt64	safe/sqlite3.c	/^static int unixCurrentTimeInt64(sqlite3_vfs *NotUsed, sqlite3_int64 *piNow){$/;"	f	file:
unixDelete	safe/sqlite3.c	/^static int unixDelete($/;"	f	file:
unixDeviceCharacteristics	safe/sqlite3.c	/^static int unixDeviceCharacteristics(sqlite3_file *id){$/;"	f	file:
unixDlClose	safe/sqlite3.c	/^static void unixDlClose(sqlite3_vfs *NotUsed, void *pHandle){$/;"	f	file:
unixDlClose	safe/sqlite3.c	30579;"	d	file:
unixDlError	safe/sqlite3.c	/^static void unixDlError(sqlite3_vfs *NotUsed, int nBuf, char *zBufOut){$/;"	f	file:
unixDlError	safe/sqlite3.c	30577;"	d	file:
unixDlOpen	safe/sqlite3.c	/^static void *unixDlOpen(sqlite3_vfs *NotUsed, const char *zFilename){$/;"	f	file:
unixDlOpen	safe/sqlite3.c	30576;"	d	file:
unixDlSym	safe/sqlite3.c	/^static void (*unixDlSym(sqlite3_vfs *NotUsed, void *p, const char*zSym))(void){$/;"	f	file:
unixDlSym	safe/sqlite3.c	30578;"	d	file:
unixEnterMutex	safe/sqlite3.c	/^static void unixEnterMutex(void){$/;"	f	file:
unixFile	safe/sqlite3.c	/^struct unixFile {$/;"	s	file:
unixFile	safe/sqlite3.c	/^typedef struct unixFile unixFile;$/;"	t	file:
unixFileControl	safe/sqlite3.c	/^static int unixFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
unixFileId	safe/sqlite3.c	/^struct unixFileId {$/;"	s	file:
unixFileLock	safe/sqlite3.c	/^static int unixFileLock(unixFile *pFile, struct flock *pLock){$/;"	f	file:
unixFileSize	safe/sqlite3.c	/^static int unixFileSize(sqlite3_file *id, i64 *pSize){$/;"	f	file:
unixFullPathname	safe/sqlite3.c	/^static int unixFullPathname($/;"	f	file:
unixGetLastError	safe/sqlite3.c	/^static int unixGetLastError(sqlite3_vfs *NotUsed, int NotUsed2, char *NotUsed3){$/;"	f	file:
unixGetSystemCall	safe/sqlite3.c	/^static sqlite3_syscall_ptr unixGetSystemCall($/;"	f	file:
unixGetTempname	safe/sqlite3.c	/^static int unixGetTempname(int nBuf, char *zBuf){$/;"	f	file:
unixInodeInfo	safe/sqlite3.c	/^struct unixInodeInfo {$/;"	s	file:
unixInodeInfo	safe/sqlite3.c	/^typedef struct unixInodeInfo unixInodeInfo;   \/* An i-node *\/$/;"	t	file:
unixLeaveMutex	safe/sqlite3.c	/^static void unixLeaveMutex(void){$/;"	f	file:
unixLock	safe/sqlite3.c	/^static int unixLock(sqlite3_file *id, int eFileLock){$/;"	f	file:
unixLogError	safe/sqlite3.c	26187;"	d	file:
unixLogErrorAtLine	safe/sqlite3.c	/^static int unixLogErrorAtLine($/;"	f	file:
unixModeBit	safe/sqlite3.c	/^static void unixModeBit(unixFile *pFile, unsigned char mask, int *pArg){$/;"	f	file:
unixMutexHeld	safe/sqlite3.c	/^static int unixMutexHeld(void) {$/;"	f	file:
unixNextSystemCall	safe/sqlite3.c	/^static const char *unixNextSystemCall(sqlite3_vfs *p, const char *zName){$/;"	f	file:
unixOpen	safe/sqlite3.c	/^static int unixOpen($/;"	f	file:
unixOpenSharedMemory	safe/sqlite3.c	/^static int unixOpenSharedMemory(unixFile *pDbFd){$/;"	f	file:
unixRandomness	safe/sqlite3.c	/^static int unixRandomness(sqlite3_vfs *NotUsed, int nBuf, char *zBuf){$/;"	f	file:
unixRead	safe/sqlite3.c	/^static int unixRead($/;"	f	file:
unixSectorSize	safe/sqlite3.c	/^static int unixSectorSize(sqlite3_file *pFile){$/;"	f	file:
unixSetSystemCall	safe/sqlite3.c	/^static int unixSetSystemCall($/;"	f	file:
unixShm	safe/sqlite3.c	/^struct unixShm {$/;"	s	file:
unixShm	safe/sqlite3.c	/^typedef struct unixShm unixShm;               \/* Connection shared memory *\/$/;"	t	file:
unixShmBarrier	safe/sqlite3.c	/^static void unixShmBarrier($/;"	f	file:
unixShmBarrier	safe/sqlite3.c	29437;"	d	file:
unixShmLock	safe/sqlite3.c	/^static int unixShmLock($/;"	f	file:
unixShmLock	safe/sqlite3.c	29436;"	d	file:
unixShmMap	safe/sqlite3.c	/^static int unixShmMap($/;"	f	file:
unixShmMap	safe/sqlite3.c	29435;"	d	file:
unixShmNode	safe/sqlite3.c	/^struct unixShmNode {$/;"	s	file:
unixShmNode	safe/sqlite3.c	/^typedef struct unixShmNode unixShmNode;       \/* Shared memory instance *\/$/;"	t	file:
unixShmPurge	safe/sqlite3.c	/^static void unixShmPurge(unixFile *pFd){$/;"	f	file:
unixShmSystemLock	safe/sqlite3.c	/^static int unixShmSystemLock($/;"	f	file:
unixShmUnmap	safe/sqlite3.c	/^static int unixShmUnmap($/;"	f	file:
unixShmUnmap	safe/sqlite3.c	29438;"	d	file:
unixSleep	safe/sqlite3.c	/^static int unixSleep(sqlite3_vfs *NotUsed, int microseconds){$/;"	f	file:
unixSync	safe/sqlite3.c	/^static int unixSync(sqlite3_file *id, int flags){$/;"	f	file:
unixTempFileDir	safe/sqlite3.c	/^static const char *unixTempFileDir(void){$/;"	f	file:
unixTruncate	safe/sqlite3.c	/^static int unixTruncate(sqlite3_file *id, i64 nByte){$/;"	f	file:
unixUnlock	safe/sqlite3.c	/^static int unixUnlock(sqlite3_file *id, int eFileLock){$/;"	f	file:
unixWrite	safe/sqlite3.c	/^static int unixWrite($/;"	f	file:
unix_syscall	safe/sqlite3.c	/^static struct unix_syscall {$/;"	s	file:
unknownOption	bin2c.c	/^const char* unknownOption = "Unknown option '%s'";$/;"	v
unlikely	safe/sqlite3.c	551;"	d	file:
unlikely	safe/sqlite3.c	554;"	d	file:
unlockBtreeIfUnused	safe/sqlite3.c	/^static void unlockBtreeIfUnused(BtShared *pBt){$/;"	f	file:
unlockBtreeMutex	safe/sqlite3.c	/^static void unlockBtreeMutex(Btree *p){$/;"	f	file:
unlockReadLock	safe/sqlite3.c	/^static int unlockReadLock( os2File *id ){$/;"	f	file:
unlockReadLock	safe/sqlite3.c	/^static int unlockReadLock(winFile *pFile){$/;"	f	file:
unlock_notify	safe/sqlite3.c	/^  int (*unlock_notify)(sqlite3*,void(*)(void**,int),void*);$/;"	m	struct:sqlite3_api_routines	file:
unpackstrm	safe/spider.133.c	/^z_stream unpackstrm;$/;"	v
unpackstrm	safe/spider.135.c	/^z_stream unpackstrm;$/;"	v
unpackstrm	safe/spider.200.c	/^z_stream unpackstrm;$/;"	v
unpackstrm	safe/spider.203.c	/^z_stream unpackstrm;$/;"	v
unpackstrm	safe/spider.204.c	/^z_stream unpackstrm;$/;"	v
unpackstrm	safe/spider.210.c	/^z_stream unpackstrm;$/;"	v
unpackstrm	safe/spider.c	/^z_stream unpackstrm;$/;"	v
unpackstrm	spider.c	/^z_stream unpackstrm;$/;"	v
untestedTerms	safe/sqlite3.c	/^  u8 untestedTerms;    \/* Not all WHERE terms resolved by outer loop *\/$/;"	m	struct:WhereInfo	file:
unused	safe/sqlite3.c	/^  u32 unused;                     \/* Unused (padding) field *\/$/;"	m	struct:WalIndexHdr	file:
updateAccumulator	safe/sqlite3.c	/^static void updateAccumulator(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
updateMapping	safe/sqlite3.c	/^static int updateMapping($/;"	f	file:
updateMaxBlobsize	safe/sqlite3.c	/^static void updateMaxBlobsize(Mem *p){$/;"	f	file:
updateVirtualTable	safe/sqlite3.c	/^static void updateVirtualTable($/;"	f	file:
update_hook	safe/sqlite3.c	/^  void * (*update_hook)(sqlite3*,void(*)(void*,int ,char const*,char const*,$/;"	m	struct:sqlite3_api_routines	file:
upperFunc	safe/sqlite3.c	/^static void upperFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
uri	mtwamputil.c	/^	const char *uri;$/;"	m	struct:inward_connection_t	file:
usable	safe/sqlite3.c	/^     unsigned char usable;     \/* True if this constraint is usable *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
usable	safe/sqlite3.h	/^     unsigned char usable;     \/* True if this constraint is usable *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
usableSize	safe/sqlite3.c	/^  u32 usableSize;       \/* Number of usable bytes on each page *\/$/;"	m	struct:BtShared	file:
usage_Close	safe/spider.210.c	/^void usage_Close()$/;"	f
usage_Close	safe/spider.c	/^void usage_Close()$/;"	f
usage_Close	spider.c	/^void usage_Close()$/;"	f
usage_Database	safe/spider.210.c	/^S3 *usage_Database()$/;"	f
usage_Database	safe/spider.c	/^S3 *usage_Database()$/;"	f
usage_Database	spider.c	/^S3 *usage_Database()$/;"	f
usage_DatabaseFile	safe/spider.210.c	/^const char *usage_DatabaseFile()$/;"	f
usage_DatabaseFile	safe/spider.c	/^const char *usage_DatabaseFile()$/;"	f
usage_DatabaseFile	spider.c	/^const char *usage_DatabaseFile()$/;"	f
usage_PeriodBusyEnd	safe/spider.210.c	/^const char *usage_PeriodBusyEnd()$/;"	f
usage_PeriodBusyEnd	safe/spider.c	/^const char *usage_PeriodBusyEnd()$/;"	f
usage_PeriodBusyEnd	spider.c	/^const char *usage_PeriodBusyEnd()$/;"	f
usage_PeriodBusyStart	safe/spider.210.c	/^const char *usage_PeriodBusyStart()$/;"	f
usage_PeriodBusyStart	safe/spider.c	/^const char *usage_PeriodBusyStart()$/;"	f
usage_PeriodBusyStart	spider.c	/^const char *usage_PeriodBusyStart()$/;"	f
usage_PeriodForHour	safe/spider.210.c	/^const char *usage_PeriodForHour(int hour)$/;"	f
usage_PeriodForHour	safe/spider.c	/^const char *usage_PeriodForHour(int hour)$/;"	f
usage_PeriodForHour	spider.c	/^const char *usage_PeriodForHour(int hour)$/;"	f
usage_PeriodNow	safe/spider.210.c	/^const char *usage_PeriodNow()$/;"	f
usage_PeriodNow	safe/spider.c	/^const char *usage_PeriodNow()$/;"	f
usage_PeriodNow	spider.c	/^const char *usage_PeriodNow()$/;"	f
usage_Rollover	safe/spider.210.c	/^void usage_Rollover()$/;"	f
usage_Rollover	safe/spider.c	/^void usage_Rollover()$/;"	f
usage_Rollover	spider.c	/^void usage_Rollover()$/;"	f
usage_Update	safe/spider.210.c	/^void usage_Update(int duration, int bytesin, int bytesout, const char *period, const char *api, const char *caller)$/;"	f
usage_Update	safe/spider.c	/^void usage_Update(int duration, int bytesin, int bytesout, const char *period, const char *api, const char *caller)$/;"	f
usage_Update	spider.c	/^void usage_Update(int duration, int bytesin, int bytesout, const char *period, const char *api, const char *caller)$/;"	f
usage_Used	safe/spider.210.c	/^int usage_Used(const char *szOrganisationProduct, const char *szApi, int bBusy, int bDaily, int bTime)$/;"	f
usage_Used	safe/spider.c	/^int usage_Used(const char *szOrganisationProduct, const char *szApi, int bBusy, int bDaily, int bTime)$/;"	f
usage_Used	spider.c	/^int usage_Used(const char *szOrganisationProduct, const char *szApi, int bBusy, int bDaily, int bTime)$/;"	f
useJournal	safe/sqlite3.c	/^  u8 useJournal;              \/* Use a rollback journal on this file *\/$/;"	m	struct:Pager	file:
useMalloc	safe/sqlite3.c	/^  u8   useMalloc;      \/* 0: none,  1: sqlite3DbMalloc,  2: sqlite3_malloc *\/$/;"	m	struct:StrAccum	file:
useRandomRowid	safe/sqlite3.c	/^  Bool useRandomRowid;  \/* Generate new record numbers semi-randomly *\/$/;"	m	struct:VdbeCursor	file:
useSortingIdx	safe/sqlite3.c	/^  u8 useSortingIdx;       \/* In direct mode, reference the sorting index rather$/;"	m	struct:AggInfo	file:
used	safe/sqlite3.c	/^  Bitmask used;      \/* Bitmask of cursors used by this plan *\/$/;"	m	struct:WhereCost	file:
usedAsColumnCache	safe/sqlite3.c	/^static int usedAsColumnCache(Parse *pParse, int iFrom, int iTo){$/;"	f	file:
user_data	safe/sqlite3.c	/^  void * (*user_data)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
usesStmtJournal	safe/sqlite3.c	/^  u8 usesStmtJournal;     \/* True if uses a statement journal *\/$/;"	m	struct:Vdbe	file:
utf8ToUnicode	safe/sqlite3.c	/^static LPWSTR utf8ToUnicode(const char *zFilename){$/;"	f	file:
v	safe/sqlite3.c	/^  Vdbe *v;                   \/* Vdbe to iterate through the opcodes of *\/$/;"	m	struct:VdbeOpIter	file:
v	safe/sqlite3.c	/^  Vdbe *v;                \/* VM this frame belongs to *\/$/;"	m	struct:VdbeFrame	file:
v	safe/sqlite3.c	/^  i64 v;                        \/* ROWID value for this entry *\/$/;"	m	struct:RowSetEntry	file:
vacuumFinalize	safe/sqlite3.c	/^static int vacuumFinalize(sqlite3 *db, sqlite3_stmt *pStmt, char **pzErrMsg){$/;"	f	file:
validHMS	safe/sqlite3.c	/^  char validHMS;     \/* True (1) if h,m,s are valid *\/$/;"	m	struct:DateTime	file:
validJD	safe/sqlite3.c	/^  char validJD;      \/* True (1) if iJD is valid *\/$/;"	m	struct:DateTime	file:
validNKey	safe/sqlite3.c	/^  u8 validNKey;             \/* True if info.nKey is valid *\/$/;"	m	struct:BtCursor	file:
validTZ	safe/sqlite3.c	/^  char validTZ;      \/* True (1) if tz is valid *\/$/;"	m	struct:DateTime	file:
validYMD	safe/sqlite3.c	/^  char validYMD;     \/* True (1) if Y,M,D are valid *\/$/;"	m	struct:DateTime	file:
value	safe/sqlite3.c	/^  struct {int value; int mask;} yy207;$/;"	m	struct:	file:
valueFromExpr	safe/sqlite3.c	/^static int valueFromExpr($/;"	f	file:
value_blob	safe/sqlite3.c	/^  const void * (*value_blob)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_bytes	safe/sqlite3.c	/^  int  (*value_bytes)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_bytes16	safe/sqlite3.c	/^  int  (*value_bytes16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_double	safe/sqlite3.c	/^  double  (*value_double)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_int	safe/sqlite3.c	/^  int  (*value_int)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_int64	safe/sqlite3.c	/^  sqlite_int64  (*value_int64)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_numeric_type	safe/sqlite3.c	/^  int  (*value_numeric_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text	safe/sqlite3.c	/^  const unsigned char * (*value_text)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text16	safe/sqlite3.c	/^  const void * (*value_text16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text16be	safe/sqlite3.c	/^  const void * (*value_text16be)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text16le	safe/sqlite3.c	/^  const void * (*value_text16le)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_type	safe/sqlite3.c	/^  int  (*value_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
values	mtjson.h	/^			struct JSON **values;$/;"	m	struct:JSON::<anonymous>::<anonymous>
values	safe/mtjson.h	/^			struct JSON **values;$/;"	m	struct:JSON::<anonymous>::<anonymous>
vdbeCommit	safe/sqlite3.c	/^static int vdbeCommit(sqlite3 *db, Vdbe *p){$/;"	f	file:
vdbeExecCnt	safe/sqlite3.c	/^  int vdbeExecCnt;              \/* Number of nested calls to VdbeExec() *\/$/;"	m	struct:sqlite3	file:
vdbeFreeOpArray	safe/sqlite3.c	/^static void vdbeFreeOpArray(sqlite3 *db, Op *aOp, int nOp){$/;"	f	file:
vdbeSafety	safe/sqlite3.c	/^static int vdbeSafety(Vdbe *p){$/;"	f	file:
vdbeSafetyNotNull	safe/sqlite3.c	/^static int vdbeSafetyNotNull(Vdbe *p){$/;"	f	file:
vdbeSorterCompare	safe/sqlite3.c	/^static void vdbeSorterCompare($/;"	f	file:
vdbeSorterDoCompare	safe/sqlite3.c	/^static int vdbeSorterDoCompare(VdbeCursor *pCsr, int iOut){$/;"	f	file:
vdbeSorterInitMerge	safe/sqlite3.c	/^static int vdbeSorterInitMerge($/;"	f	file:
vdbeSorterIterInit	safe/sqlite3.c	/^static int vdbeSorterIterInit($/;"	f	file:
vdbeSorterIterNext	safe/sqlite3.c	/^static int vdbeSorterIterNext($/;"	f	file:
vdbeSorterIterZero	safe/sqlite3.c	/^static void vdbeSorterIterZero(sqlite3 *db, VdbeSorterIter *pIter){$/;"	f	file:
vdbeSorterListToPMA	safe/sqlite3.c	/^static int vdbeSorterListToPMA(sqlite3 *db, VdbeCursor *pCsr){$/;"	f	file:
vdbeSorterMerge	safe/sqlite3.c	/^static void vdbeSorterMerge($/;"	f	file:
vdbeSorterOpenTempFile	safe/sqlite3.c	/^static int vdbeSorterOpenTempFile(sqlite3 *db, sqlite3_file **ppFile){$/;"	f	file:
vdbeSorterReadVarint	safe/sqlite3.c	/^static int vdbeSorterReadVarint($/;"	f	file:
vdbeSorterRecordFree	safe/sqlite3.c	/^static void vdbeSorterRecordFree(sqlite3 *db, SorterRecord *pRecord){$/;"	f	file:
vdbeSorterRowkey	safe/sqlite3.c	/^static void *vdbeSorterRowkey($/;"	f	file:
vdbeSorterSort	safe/sqlite3.c	/^static int vdbeSorterSort(VdbeCursor *pCsr){$/;"	f	file:
vdbeSorterWriteVarint	safe/sqlite3.c	/^static int vdbeSorterWriteVarint($/;"	f	file:
vdbeUnbind	safe/sqlite3.c	/^static int vdbeUnbind(Vdbe *p, int i){$/;"	f	file:
vdbeVComment	safe/sqlite3.c	/^static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){$/;"	f	file:
verb	mtwamputil.c	/^	const char *verb;$/;"	m	struct:inward_connection_t	file:
verify_callback_rcv	safe/spider.200.c	/^static int verify_callback_rcv(int preverify_ok, X509_STORE_CTX *ctx)$/;"	f	file:
verify_callback_rcv	safe/spider.203.c	/^static int verify_callback_rcv(int preverify_ok, X509_STORE_CTX *ctx)$/;"	f	file:
verify_callback_rcv	safe/spider.204.c	/^static int verify_callback_rcv(int preverify_ok, X509_STORE_CTX *ctx)$/;"	f	file:
verify_callback_rcv	safe/spider.210.c	/^static int verify_callback_rcv(int preverify_ok, X509_STORE_CTX *ctx)$/;"	f	file:
verify_callback_rcv	safe/spider.c	/^static int verify_callback_rcv(int preverify_ok, X509_STORE_CTX *ctx)$/;"	f	file:
verify_callback_rcv	spider.c	/^static int verify_callback_rcv(int preverify_ok, X509_STORE_CTX *ctx)$/;"	f	file:
version	mtwamputil.c	/^	const char *version;$/;"	m	struct:inward_connection_t	file:
versionFunc	safe/sqlite3.c	/^static void versionFunc($/;"	f	file:
versionInfo	bin2c.c	/^const char *versionInfo = $/;"	v
versions	safe/spider.210.c	/^	SSET *versions;						\/\/ The set of versions to which this contract relates$/;"	m	struct:contract_t	file:
versions	safe/spider.c	/^	SSET *versions;						\/\/ The set of versions to which this contract relates$/;"	m	struct:contract_t	file:
versions	spider.c	/^	SSET *versions;						\/\/ The set of versions to which this contract relates$/;"	m	struct:contract_t	file:
vfsFlags	safe/sqlite3.c	/^  u32 vfsFlags;               \/* Flags for sqlite3_vfs.xOpen() *\/$/;"	m	struct:Pager	file:
vfsList	safe/sqlite3.c	/^static sqlite3_vfs * SQLITE_WSD vfsList = 0;$/;"	v	file:
vfsList	safe/sqlite3.c	15040;"	d	file:
vfsUnlink	safe/sqlite3.c	/^static void vfsUnlink(sqlite3_vfs *pVfs){$/;"	f	file:
vfs_find	safe/sqlite3.c	/^  sqlite3_vfs *(*vfs_find)(const char*);$/;"	m	struct:sqlite3_api_routines	file:
vfs_register	safe/sqlite3.c	/^  int (*vfs_register)(sqlite3_vfs*,int);$/;"	m	struct:sqlite3_api_routines	file:
vfs_unregister	safe/sqlite3.c	/^  int (*vfs_unregister)(sqlite3_vfs*);$/;"	m	struct:sqlite3_api_routines	file:
vmask	safe/sqlite3.c	/^  Bitmask vmask;           \/* Bitmask identifying virtual table cursors *\/$/;"	m	struct:WhereClause	file:
vmprintf	safe/sqlite3.c	/^  char *(*vmprintf)(const char*,va_list);$/;"	m	struct:sqlite3_api_routines	file:
vprintfError	bin2c.c	/^static void vprintfError(const char *format, va_list args)$/;"	f	file:
vtabBestIndex	safe/sqlite3.c	/^static int vtabBestIndex(Parse *pParse, Table *pTab, sqlite3_index_info *p){$/;"	f	file:
vtabCallConstructor	safe/sqlite3.c	/^static int vtabCallConstructor($/;"	f	file:
vtabDisconnectAll	safe/sqlite3.c	/^static VTable *vtabDisconnectAll(sqlite3 *db, Table *p){$/;"	f	file:
vtabOnConflict	safe/sqlite3.c	/^  u8 vtabOnConflict;            \/* Value to return for s3_vtab_on_conflict() *\/$/;"	m	struct:sqlite3	file:
vtab_config	safe/sqlite3.c	/^  int (*vtab_config)(sqlite3*,int op,...);$/;"	m	struct:sqlite3_api_routines	file:
vtab_on_conflict	safe/sqlite3.c	/^  int (*vtab_on_conflict)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
vxworksFileId	safe/sqlite3.c	/^struct vxworksFileId {$/;"	s	file:
vxworksFileList	safe/sqlite3.c	/^static struct vxworksFileId *vxworksFileList = 0;$/;"	v	file:
vxworksFindFileId	safe/sqlite3.c	/^static struct vxworksFileId *vxworksFindFileId(const char *zAbsoluteName){$/;"	f	file:
vxworksReleaseFileId	safe/sqlite3.c	/^static void vxworksReleaseFileId(struct vxworksFileId *pId){$/;"	f	file:
vxworksSimplifyName	safe/sqlite3.c	/^static int vxworksSimplifyName(char *z, int n){$/;"	f	file:
walBusyLock	safe/sqlite3.c	/^static int walBusyLock($/;"	f	file:
walCheckpoint	safe/sqlite3.c	/^static int walCheckpoint($/;"	f	file:
walChecksumBytes	safe/sqlite3.c	/^static void walChecksumBytes($/;"	f	file:
walCkptInfo	safe/sqlite3.c	/^static volatile WalCkptInfo *walCkptInfo(Wal *pWal){$/;"	f	file:
walCleanupHash	safe/sqlite3.c	/^static void walCleanupHash(Wal *pWal){$/;"	f	file:
walDecodeFrame	safe/sqlite3.c	/^static int walDecodeFrame($/;"	f	file:
walEncodeFrame	safe/sqlite3.c	/^static void walEncodeFrame($/;"	f	file:
walFrameOffset	safe/sqlite3.c	46583;"	d	file:
walFramePage	safe/sqlite3.c	/^static int walFramePage(u32 iFrame){$/;"	f	file:
walFramePgno	safe/sqlite3.c	/^static u32 walFramePgno(Wal *pWal, u32 iFrame){$/;"	f	file:
walHash	safe/sqlite3.c	/^static int walHash(u32 iPage){$/;"	f	file:
walHashGet	safe/sqlite3.c	/^static int walHashGet($/;"	f	file:
walIndexAppend	safe/sqlite3.c	/^static int walIndexAppend(Wal *pWal, u32 iFrame, u32 iPage){$/;"	f	file:
walIndexClose	safe/sqlite3.c	/^static void walIndexClose(Wal *pWal, int isDelete){$/;"	f	file:
walIndexHdr	safe/sqlite3.c	/^static volatile WalIndexHdr *walIndexHdr(Wal *pWal){$/;"	f	file:
walIndexPage	safe/sqlite3.c	/^static int walIndexPage(Wal *pWal, int iPage, volatile u32 **ppPage){$/;"	f	file:
walIndexReadHdr	safe/sqlite3.c	/^static int walIndexReadHdr(Wal *pWal, int *pChanged){$/;"	f	file:
walIndexRecover	safe/sqlite3.c	/^static int walIndexRecover(Wal *pWal){$/;"	f	file:
walIndexTryHdr	safe/sqlite3.c	/^static int walIndexTryHdr(Wal *pWal, int *pChanged){$/;"	f	file:
walIndexWriteHdr	safe/sqlite3.c	/^static void walIndexWriteHdr(Wal *pWal){$/;"	f	file:
walIteratorFree	safe/sqlite3.c	/^static void walIteratorFree(WalIterator *p){$/;"	f	file:
walIteratorInit	safe/sqlite3.c	/^static int walIteratorInit(Wal *pWal, WalIterator **pp){$/;"	f	file:
walIteratorNext	safe/sqlite3.c	/^static int walIteratorNext($/;"	f	file:
walLimitSize	safe/sqlite3.c	/^static void walLimitSize(Wal *pWal, i64 nMax){$/;"	f	file:
walLockExclusive	safe/sqlite3.c	/^static int walLockExclusive(Wal *pWal, int lockIdx, int n){$/;"	f	file:
walLockName	safe/sqlite3.c	/^static const char *walLockName(int lockIdx){$/;"	f	file:
walLockShared	safe/sqlite3.c	/^static int walLockShared(Wal *pWal, int lockIdx){$/;"	f	file:
walMerge	safe/sqlite3.c	/^static void walMerge($/;"	f	file:
walMergesort	safe/sqlite3.c	/^static void walMergesort($/;"	f	file:
walNextHash	safe/sqlite3.c	/^static int walNextHash(int iPriorHash){$/;"	f	file:
walPagesize	safe/sqlite3.c	/^static int walPagesize(Wal *pWal){$/;"	f	file:
walRestartLog	safe/sqlite3.c	/^static int walRestartLog(Wal *pWal){$/;"	f	file:
walShmBarrier	safe/sqlite3.c	/^static void walShmBarrier(Wal *pWal){$/;"	f	file:
walSyncFlags	safe/sqlite3.c	/^  u8 walSyncFlags;            \/* SYNC_NORMAL or SYNC_FULL for wal writes *\/$/;"	m	struct:Pager	file:
walTryBeginRead	safe/sqlite3.c	/^static int walTryBeginRead(Wal *pWal, int *pChanged, int useWal, int cnt){$/;"	f	file:
walUnlockExclusive	safe/sqlite3.c	/^static void walUnlockExclusive(Wal *pWal, int lockIdx, int n){$/;"	f	file:
walUnlockShared	safe/sqlite3.c	/^static void walUnlockShared(Wal *pWal, int lockIdx){$/;"	f	file:
walWriteOneFrame	safe/sqlite3.c	/^static int walWriteOneFrame($/;"	f	file:
walWriteToLog	safe/sqlite3.c	/^static int walWriteToLog($/;"	f	file:
wal_autocheckpoint	safe/sqlite3.c	/^  int (*wal_autocheckpoint)(sqlite3*,int);$/;"	m	struct:sqlite3_api_routines	file:
wal_checkpoint	safe/sqlite3.c	/^  int (*wal_checkpoint)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
wal_hook	safe/sqlite3.c	/^  void *(*wal_hook)(sqlite3*,int(*)(void*,sqlite3*,const char*,int),void*);$/;"	m	struct:sqlite3_api_routines	file:
wamp	safe/mtwamp.c	/^	WAMP *wamp;												\/\/ WAMP handling this call$/;"	m	struct:wamp_callee_t	file:
wamp	spider.c	/^	WAMP *wamp;$/;"	m	struct:invoke_info	file:
wampName	mtwamp.c	/^	const char *wampName;$/;"	m	struct:wamp_invokee_t	file:
wampRedirectApi	spider.c	/^static const char *wampRedirectApi = NULL;$/;"	v	file:
wampRedirectHost	spider.c	/^static const char *wampRedirectHost = NULL;$/;"	v	file:
wampRedirectInput	spider.c	/^static HLIST *wampRedirectInput = NULL;$/;"	v	file:
wampRedirectOutput	spider.c	/^static HLIST *wampRedirectOutput = NULL;$/;"	v	file:
wampRedirectPayload	spider.c	/^static rogxml *wampRedirectPayload = NULL;$/;"	v	file:
wampRedirectPool	spider.c	/^CHANPOOL *wampRedirectPool = NULL;$/;"	v
wampRedirectRealm	spider.c	/^static const char *wampRedirectRealm = NULL;$/;"	v	file:
wampRedirectResult	spider.c	/^static rogxml *wampRedirectResult = NULL;			\/\/ Set by OnWampRedirectConnected$/;"	v	file:
wamp_Abort	mtwamp.c	/^API void wamp_Abort(WAMP *wamp, const char *uri, const char *reason)$/;"	f
wamp_Abort	safe/mtwamp.c	/^API void wamp_Abort(WAMP *wamp, const char *uri, const char *reason)$/;"	f
wamp_AcceptBio	mtwamputil.c	/^API void wamp_AcceptBio(CHANPOOL *pool, BIO *bio, INTWAMPFN cb_onDone)$/;"	f
wamp_AddCaller	mtwamp.c	/^STATIC int wamp_AddCaller(const char *callerWampName, long long callerRequestId, const char *calleeWampName, long long calleeRequestId, wamp_invokee_t *invokee)$/;"	f
wamp_AddCaller	safe/mtwamp.c	/^STATIC int wamp_AddCaller(long long invokeRequestId, WAMP *wamp, long long callRequestId)$/;"	f
wamp_ByName	mtwamp.c	/^API WAMP *wamp_ByName(const char *name)$/;"	f
wamp_CallWampGone	mtwamp.c	/^STATIC void wamp_CallWampGone(const char *wampName)$/;"	f
wamp_CallbackNoCallee	mtwamp.c	/^API void wamp_CallbackNoCallee(WAMPCB_NoCallee cb)$/;"	f
wamp_CallbackNoCallee	safe/mtwamp.c	/^API void wamp_CallbackNoCallee(WAMPCB_NoCallee cb)$/;"	f
wamp_Close	mtwamp.c	/^API void wamp_Close(WAMP *wamp, const char *uri, const char *reason)$/;"	f
wamp_Close	safe/mtwamp.c	/^API void wamp_Close(WAMP *wamp, const char *uri, const char *reason)$/;"	f
wamp_CloseAbort	mtwamp.c	/^API void wamp_CloseAbort(WAMP *wamp, int type, const char *uri, const char *reason)$/;"	f
wamp_CloseAbort	safe/mtwamp.c	/^API void wamp_CloseAbort(WAMP *wamp, int type, const char *uri, const char *reason)$/;"	f
wamp_Connect	mtwamputil.c	/^API int wamp_Connect(CHANPOOL *pool, const char *url, INTWAMPFN cb_OnDone)$/;"	f
wamp_Delete	mtwamp.c	/^API void wamp_Delete(WAMP *w)$/;"	f
wamp_Delete	safe/mtwamp.c	/^API void wamp_Delete(WAMP *w)$/;"	f
wamp_DeleteCallInfo	mtwamp.c	/^STATIC void wamp_DeleteCallInfo(wamp_call_t *callInfo)$/;"	f
wamp_Dispatch	mtwamp.c	/^API int wamp_Dispatch(WAMP *wamp, int type, JSON *json)$/;"	f
wamp_Dispatch	safe/mtwamp.c	/^API int wamp_Dispatch(WAMP *wamp, int type, JSON *json)$/;"	f
wamp_DoWampRegistrationList	mtwamp.c	/^STATIC int wamp_DoWampRegistrationList(WAMP *wamp, long long callRequestId, SPMAP *options, JSON *argList, JSON *argDict)$/;"	f
wamp_DoWampRegistrationLookup	mtwamp.c	/^STATIC int wamp_DoWampRegistrationLookup(WAMP *wamp, long long callRequestId, SPMAP *options, JSON *argList, JSON *argDict)$/;"	f
wamp_FailWebsocket	mtwamputil.c	/^static int wamp_FailWebsocket(CHAN *chan, const char *reason)$/;"	f	file:
wamp_FindAndRemoveCaller	mtwamp.c	/^STATIC const char *wamp_FindAndRemoveCaller(long long requestId, long long *pcallerRequestId)$/;"	f
wamp_FindAndRemoveCaller	safe/mtwamp.c	/^STATIC const char *wamp_FindAndRemoveCaller(long long requestId, long long *pcallerRequestId)$/;"	f
wamp_FindByName	safe/mtwamp.c	/^STATIC WAMP *wamp_FindByName(const char *name)$/;"	f
wamp_FindCallee	mtwamp.c	/^STATIC wamp_callee_t *wamp_FindCallee(WAMP *wamp, const char *procedure)$/;"	f
wamp_FindCallee	safe/mtwamp.c	/^STATIC wamp_callee_t *wamp_FindCallee(WAMP *wamp, const char *procedure)$/;"	f
wamp_FindCalleeForType	mtwamp.c	/^STATIC wamp_callee_t *wamp_FindCalleeForType(WAMPREALM *realm, int matchType, const char *procedure, SPMAP **pmap)$/;"	f
wamp_FindInvokee	mtwamp.c	/^STATIC wamp_invokee_t *wamp_FindInvokee(WAMP *wamp, const char *procedure, long long *registrationIdp)$/;"	f
wamp_Finish	mtwamp.c	/^API void wamp_Finish(WAMP *wamp)$/;"	f
wamp_ForwardEvent	mtwamp.c	/^STATIC int wamp_ForwardEvent(WAMP *wamp, WAMP *fwdWamp, JSON *json)$/;"	f
wamp_ForwardPublish	mtwamp.c	/^STATIC int wamp_ForwardPublish(WAMP *wamp, WAMP *fwdWamp, JSON *json)$/;"	f
wamp_ForwardPublished	mtwamp.c	/^STATIC int wamp_ForwardPublished(WAMP *wamp, WAMP *fwdWamp, JSON *json)$/;"	f
wamp_ForwardSubscribe	mtwamp.c	/^STATIC int wamp_ForwardSubscribe(WAMP *wamp, WAMP *fwdWamp, JSON *json)$/;"	f
wamp_ForwardSubscribed	mtwamp.c	/^STATIC int wamp_ForwardSubscribed(WAMP *wamp, WAMP *fwdWamp, JSON *json)$/;"	f
wamp_ForwardUnsubscribe	mtwamp.c	/^STATIC int wamp_ForwardUnsubscribe(WAMP *wamp, WAMP *fwdWamp, JSON *json)$/;"	f
wamp_ForwardUnsubscribed	mtwamp.c	/^STATIC int wamp_ForwardUnsubscribed(WAMP *wamp, WAMP *fwdWamp, JSON *json)$/;"	f
wamp_GetForChannel	safe/mtwamp.c	/^API WAMP *wamp_GetForChannel(WS *channel)$/;"	f
wamp_GetRealmByName	safe/mtwamp.c	/^STATIC WAMPREALM *wamp_GetRealmByName(const char *name)$/;"	f
wamp_GetSession	mtwamp.c	/^STATIC WAMPSESSION *wamp_GetSession(long long id)$/;"	f
wamp_GetSession	safe/mtwamp.c	/^STATIC WAMPSESSION *wamp_GetSession(long long id)$/;"	f
wamp_HandleCall	mtwamp.c	/^STATIC int wamp_HandleCall(WAMP *wamp, JSON *json)$/;"	f
wamp_HandleError	mtwamp.c	/^STATIC int wamp_HandleError(WAMP *wamp, JSON *json)$/;"	f
wamp_HandleEvent	mtwamp.c	/^STATIC int wamp_HandleEvent(WAMP *wamp, JSON *json)$/;"	f
wamp_HandleGoodbye	mtwamp.c	/^STATIC int wamp_HandleGoodbye(WAMP *wamp, JSON *json)$/;"	f
wamp_HandleHello	mtwamp.c	/^int wamp_HandleHello(WAMP *wamp, JSON *json)$/;"	f
wamp_HandleIncomingData	mtwamp.c	/^int wamp_HandleIncomingData(WS *ws, int len, const char *text)$/;"	f
wamp_HandleInternalCall	mtwamp.c	/^STATIC int wamp_HandleInternalCall(WAMP *wamp, long long callRequestId, SPMAP *options, const char *procedure, JSON *argList, JSON *argDict)$/;"	f
wamp_HandleInvocation	mtwamp.c	/^STATIC int wamp_HandleInvocation(WAMP *wamp, JSON *json)$/;"	f
wamp_HandlePublish	mtwamp.c	/^STATIC int wamp_HandlePublish(WAMP *wamp, JSON *json)$/;"	f
wamp_HandlePublished	mtwamp.c	/^STATIC int wamp_HandlePublished(WAMP *wamp, JSON *json)$/;"	f
wamp_HandleRegister	mtwamp.c	/^STATIC int wamp_HandleRegister(WAMP *wamp, JSON *json)$/;"	f
wamp_HandleRegistered	mtwamp.c	/^STATIC int wamp_HandleRegistered(WAMP *wamp, JSON *json)$/;"	f
wamp_HandleSubscribe	mtwamp.c	/^STATIC int wamp_HandleSubscribe(WAMP *wamp, JSON *json)$/;"	f
wamp_HandleSubscribed	mtwamp.c	/^STATIC int wamp_HandleSubscribed(WAMP *wamp, JSON *json)$/;"	f
wamp_HandleUnregister	mtwamp.c	/^STATIC int wamp_HandleUnregister(WAMP *wamp, JSON *json)$/;"	f
wamp_HandleUnregistered	mtwamp.c	/^STATIC int wamp_HandleUnregistered(WAMP *wamp, JSON *json)$/;"	f
wamp_HandleUnsubscribe	mtwamp.c	/^STATIC int wamp_HandleUnsubscribe(WAMP *wamp, JSON *json)$/;"	f
wamp_HandleUnsubscribed	mtwamp.c	/^STATIC int wamp_HandleUnsubscribed(WAMP *wamp, JSON *json)$/;"	f
wamp_HandleWelcome	mtwamp.c	/^STATIC int wamp_HandleWelcome(WAMP *wamp, JSON *json)$/;"	f
wamp_HandleYield	mtwamp.c	/^STATIC int wamp_HandleYield(WAMP *wamp, JSON *json)$/;"	f
wamp_HaveWebsocket	mtwamputil.c	/^static int wamp_HaveWebsocket(CHAN *chan)$/;"	f	file:
wamp_Hello	mtwamp.c	/^API int wamp_Hello(WAMP *wamp, const char *realm, JSON *opts)$/;"	f
wamp_Hello	safe/mtwamp.c	/^API int wamp_Hello(WAMP *wamp, const char *realm, JSON *opts)$/;"	f
wamp_HttpHeader	mtwamputil.c	/^static const char *wamp_HttpHeader(nCode)$/;"	f	file:
wamp_HttpResponseText	mtwamputil.c	/^static const char *wamp_HttpResponseText(int code)$/;"	f	file:
wamp_Info	mtwamp.c	/^API void *wamp_Info(WAMP *w)$/;"	f
wamp_IsCallType	mtwamp.c	/^STATIC int wamp_IsCallType(int type)$/;"	f
wamp_IsSubscriptionType	mtwamp.c	/^STATIC int wamp_IsSubscriptionType(int type)$/;"	f
wamp_MatchType	mtwamp.c	/^STATIC int wamp_MatchType(const char *match)$/;"	f
wamp_Name	mtwamp.c	/^API const char *wamp_Name(WAMP *w)$/;"	f
wamp_Name	safe/mtwamp.c	/^API const char *wamp_Name(WAMP *w)$/;"	f
wamp_New	mtwamp.c	/^STATIC WAMP *wamp_New(const char *name)$/;"	f
wamp_New	safe/mtwamp.c	/^STATIC WAMP *wamp_New()$/;"	f
wamp_NewMessage	mtwamp.c	/^API JSON *wamp_NewMessage(int type, long long id)$/;"	f
wamp_NewOnWebsocket	mtwamp.c	/^API WAMP *wamp_NewOnWebsocket(WS *ws, int masked)$/;"	f
wamp_NewPseudo	mtwamp.c	/^API WAMP *wamp_NewPseudo(WAMPCB_Data fn, const char *name)$/;"	f
wamp_NewSession	mtwamp.c	/^STATIC WAMPSESSION *wamp_NewSession(WAMPREALM *realm, long long id)$/;"	f
wamp_NewSession	safe/mtwamp.c	/^STATIC WAMPSESSION *wamp_NewSession(WAMPREALM *realm, long long id)$/;"	f
wamp_NoInvokee	mtwamp.c	/^STATIC void wamp_NoInvokee(WAMP *wamp, long long requestId, const char *procedure, JSON *list, JSON *dict)$/;"	f
wamp_NoInvokee	safe/mtwamp.c	/^STATIC void wamp_NoInvokee(WAMP *wamp, long long requestId, const char *procedure, JSON *list, JSON *dict)$/;"	f
wamp_OnChannelDeleteInward	mtwamputil.c	/^STATIC void wamp_OnChannelDeleteInward(CHAN *chan)$/;"	f
wamp_OnChannelDeleteOutward	mtwamputil.c	/^STATIC void wamp_OnChannelDeleteOutward(CHAN *chan)$/;"	f
wamp_OnClientChannelError	mtwamputil.c	/^STATIC int wamp_OnClientChannelError(CHAN *chan)$/;"	f
wamp_OnDelete	mtwamp.c	/^API WAMPCB_DeleteCallback wamp_OnDelete(WAMP *w, WAMPCB_DeleteCallback cb)$/;"	f
wamp_OnHttpResponse	mtwamputil.c	/^STATIC int wamp_OnHttpResponse(CHAN *chan)$/;"	f
wamp_OnPreamble	mtwamputil.c	/^static int wamp_OnPreamble(CHAN *chan)$/;"	f	file:
wamp_Ping	mtwamp.c	/^API void wamp_Ping(WAMP *wamp, int len, const char *data)$/;"	f
wamp_Pong	mtwamp.c	/^API void wamp_Pong(WAMP *wamp, int len, const char *data)$/;"	f
wamp_Publish	mtwamp.c	/^API int wamp_Publish(WAMP *wamp, const char *topic, SPMAP *options, JSON *argList, JSON *argDict)$/;"	f
wamp_RandomId	mtwamp.c	/^API long long wamp_RandomId()$/;"	f
wamp_RandomId	safe/mtwamp.c	/^API long long wamp_RandomId()$/;"	f
wamp_RealmByName	mtwamp.c	/^STATIC WAMPREALM *wamp_RealmByName(const char *name)$/;"	f
wamp_RegisterAnyCallee	mtwamp.c	/^STATIC const char *wamp_RegisterAnyCallee(WAMPREALM *realm, WAMP *wamp, const char *match, const char *invoke, long long priority, const char *procedure, WAMPCB_Invokee invokee, long long *registrationIdp)$/;"	f
wamp_RegisterHandler	mtwamp.c	/^API void wamp_RegisterHandler(WAMP *wamp, int type, WAMPCB_Handler fn)$/;"	f
wamp_RegisterInternalCallee	mtwamp.c	/^API const char *wamp_RegisterInternalCallee(const char *realmName, const char *match, const char *procedure, WAMPCB_Invokee invokee, long long *registrationIdp)$/;"	f
wamp_RegisterInvokee	mtwamp.c	/^API void wamp_RegisterInvokee(WAMPCB_Invokee cb)$/;"	f
wamp_RegisterInvokee	safe/mtwamp.c	/^API void wamp_RegisterInvokee(WAMPCB_Invokee cb)$/;"	f
wamp_RegisterRedirect	mtwamp.c	/^API void wamp_RegisterRedirect(const char *realmName, int type, WAMPCB_Handler fn)$/;"	f
wamp_RegisterWampCallee	mtwamp.c	/^API const char *wamp_RegisterWampCallee(WAMP *wamp, const char *match, const char *invoke, long long priority, const char *procedure, long long *registrationIdp)$/;"	f
wamp_RemoveFromCalleeMap	mtwamp.c	/^STATIC void wamp_RemoveFromCalleeMap(WAMP *wamp, SPMAP *map)$/;"	f
wamp_RemoveFromMaps	mtwamp.c	/^STATIC void wamp_RemoveFromMaps(WAMP *wamp)$/;"	f
wamp_RemoveFromSubscribeeMap	mtwamp.c	/^STATIC void wamp_RemoveFromSubscribeeMap(WAMP *wamp, SPMAP *map)$/;"	f
wamp_RemoveInvokee	mtwamp.c	/^STATIC void wamp_RemoveInvokee(WAMP *wamp, wamp_callee_t *callee, int index)$/;"	f
wamp_RemoveSubscription	mtwamp.c	/^STATIC void wamp_RemoveSubscription(WAMP *wamp, subscription_t *sub)$/;"	f
wamp_SaveInput	mtwamp.c	/^API HLIST *wamp_SaveInput(WAMP *wamp, HLIST *hlist)$/;"	f
wamp_SaveOutput	mtwamp.c	/^API HLIST *wamp_SaveOutput(WAMP *wamp, HLIST *hlist)$/;"	f
wamp_SendError	mtwamp.c	/^API void wamp_SendError(WAMP *wamp, int type, long long id, SPMAP *details, const char *uri, JSON *argList, JSON *argDict)$/;"	f
wamp_SendErrorStr	mtwamp.c	/^API void wamp_SendErrorStr(WAMP *wamp, int type, long long id, const char *err, const char *uri, JSON *argList, JSON *argDict)$/;"	f
wamp_SendHeader	mtwamputil.c	/^STATIC int wamp_SendHeader(CHAN *chan, SSMAP *header)$/;"	f
wamp_SendHttp	mtwamputil.c	/^static int wamp_SendHttp(CHAN *chan, int code, SSMAP *header, int contentLength, const char *content)$/;"	f	file:
wamp_SendResult	mtwamp.c	/^API void wamp_SendResult(WAMP *wamp, long long requestId, JSON *details, JSON *argList, JSON *argDict)$/;"	f
wamp_SetForwardSubscriptions	mtwamp.c	/^API int wamp_SetForwardSubscriptions(const char *realmName, int enable, WAMP *wamp)$/;"	f
wamp_SetInfo	mtwamp.c	/^API WAMP *wamp_SetInfo(WAMP *w, void *info)$/;"	f
wamp_SetMasked	mtwamp.c	/^API void wamp_SetMasked(WAMP *wamp, int masked)$/;"	f
wamp_SetRealm	mtwamp.c	/^API int wamp_SetRealm(WAMP *w, const char *name)$/;"	f
wamp_SetRealm	safe/mtwamp.c	/^API int wamp_SetRealm(WAMP *w, const char *name)$/;"	f
wamp_TypeName	mtwamp.c	/^API const char *wamp_TypeName(int type)$/;"	f
wamp_TypeName	safe/mtwamp.c	/^const char *wamp_TypeName(int type)$/;"	f
wamp_Unregister	mtwamp.c	/^STATIC int wamp_Unregister(WAMP *wamp, long long registrationId)$/;"	f
wamp_Validate	mtwamp.c	/^STATIC int wamp_Validate(WAMP *wamp, int type, JSON *json)$/;"	f
wamp_Validate	safe/mtwamp.c	/^STATIC int wamp_Validate(WAMP *wamp, int type, JSON *json)$/;"	f
wamp_WildcardMatch	mtwamp.c	/^STATIC int wamp_WildcardMatch(const char *wildcard, const char *match)$/;"	f
wamp_WildcardMatch	safe/mtwamp.c	/^STATIC int wamp_WildcardMatch(const char *wildcard, const char *match)$/;"	f
wamp_Write	mtwamp.c	/^STATIC int wamp_Write(WAMP *wamp, const char *message)$/;"	f
wamp_Write	safe/mtwamp.c	/^API int wamp_Write(WAMP *wamp, const char *message)$/;"	f
wamp_WriteHeap	mtwamp.c	/^STATIC int wamp_WriteHeap(WAMP *wamp, const char *message)$/;"	f
wamp_WriteHeap	safe/mtwamp.c	/^API int wamp_WriteHeap(WAMP *wamp, const char *message)$/;"	f
wamp_WriteJson	mtwamp.c	/^API void wamp_WriteJson(WAMP *wamp, JSON *json)$/;"	f
wamp_WriteJson	safe/mtwamp.c	/^API void wamp_WriteJson(WAMP *wamp, JSON *json)$/;"	f
wamp_WriteJsonHeap	mtwamp.c	/^API void wamp_WriteJsonHeap(WAMP *wamp, JSON *json)$/;"	f
wamp_WriteJsonHeap	safe/mtwamp.c	/^API void wamp_WriteJsonHeap(WAMP *wamp, JSON *json)$/;"	f
wamp_call_t	mtwamp.c	/^typedef struct wamp_call_t {								\/\/ Holds information about an active call$/;"	s	file:
wamp_call_t	mtwamp.c	/^} wamp_call_t;$/;"	t	file:
wamp_call_t	safe/mtwamp.c	/^typedef struct wamp_call_t {								\/\/ Holds information about an actice call$/;"	s	file:
wamp_call_t	safe/mtwamp.c	/^} wamp_call_t;$/;"	t	file:
wamp_callee_t	mtwamp.c	/^typedef struct wamp_callee_t {$/;"	s	file:
wamp_callee_t	mtwamp.c	/^} wamp_callee_t;$/;"	t	file:
wamp_callee_t	safe/mtwamp.c	/^typedef struct wamp_callee_t {$/;"	s	file:
wamp_callee_t	safe/mtwamp.c	/^} wamp_callee_t;$/;"	t	file:
wamp_code_t	mtwamp.c	/^STATIC struct wamp_code_t {$/;"	s	file:
wamp_code_t	safe/mtwamp.c	/^STATIC struct wamp_code_t {$/;"	s	file:
wamp_codes	mtwamp.c	/^} wamp_codes[] = {$/;"	v
wamp_codes	safe/mtwamp.c	/^} wamp_codes[] = {$/;"	v
wamp_invokee_t	mtwamp.c	/^typedef struct wamp_invokee_t {$/;"	s	file:
wamp_invokee_t	mtwamp.c	/^} wamp_invokee_t;$/;"	t	file:
wamp_map	spider.c	/^static SSMAP *wamp_map = NULL;$/;"	v	file:
wampcb_Invokee	mtwamp.c	/^STATIC WAMPCB_Invokee wampcb_Invokee = NULL;				\/\/ Callback function when a procedure is invoked$/;"	v
wampcb_Invokee	safe/mtwamp.c	/^STATIC WAMPCB_Invokee		wampcb_Invokee = wamp_NoInvokee;		\/\/ Callback function when a procedure is invoked$/;"	v
wampcb_NoCallee	mtwamp.c	/^STATIC WAMPCB_NoCallee wampcb_NoCallee = NULL;				\/\/ Callback function if there is no callee$/;"	v
wampcb_NoCallee	safe/mtwamp.c	/^STATIC WAMPCB_NoCallee		wampcb_NoCallee = NULL;			\/\/ Callback function if there is no callee$/;"	v
wampcb_NoCallee	safe/spider.c	/^int wampcb_NoCallee(const char *procedure)$/;"	f
wampcb_NoCallee	spider.c	/^int wampcb_NoCallee(const char *procedure)$/;"	f
wamps	mtwamp.c	/^	SPMAP *wamps;											\/\/ Maps the WAMPS (by name) that are subscribed, to their requestIds$/;"	m	struct:subscription_t	file:
wantForwardSubscriptions	mtwamp.c	/^	int wantForwardSubscriptions;				\/\/ 1 if we want to forward subscriptions$/;"	m	struct:WAMPREALM	file:
wantMask	mtwebsocket.c	/^	char wantMask;					\/\/ Set mask on outgoing fragments (should be set where connection is client->server)$/;"	m	struct:WS	file:
wantMask	mtwebsocket.h	/^	char wantMask;					\/\/ Set mask on outgoing fragments (should be set where connection is client->server)$/;"	m	struct:WS
wantToLock	safe/sqlite3.c	/^  int wantToLock;    \/* Number of nested calls to sqlite3BtreeEnter() *\/$/;"	m	struct:Btree	file:
wc	safe/sqlite3.c	/^  WhereClause wc;          \/* Decomposition into subterms *\/$/;"	m	struct:WhereOrInfo	file:
wc	safe/sqlite3.c	/^  WhereClause wc;          \/* The subexpression broken out *\/$/;"	m	struct:WhereAndInfo	file:
wctrlFlags	safe/sqlite3.c	/^  u16 wctrlFlags;          \/* Might include WHERE_AND_ONLY *\/$/;"	m	struct:WhereClause	file:
wctrlFlags	safe/sqlite3.c	/^  u16 wctrlFlags;      \/* Flags originally passed to sqlite3WhereBegin() *\/$/;"	m	struct:WhereInfo	file:
webdav_AddSupportedLock	safe/spider.c	/^int webdav_AddSupportedLock(rogxml *prop)$/;"	f
webdav_AddSupportedLock	spider.c	/^int webdav_AddSupportedLock(rogxml *prop)$/;"	f
webdav_BaseDir	safe/spider.c	/^const char *webdav_BaseDir()$/;"	f
webdav_BaseDir	spider.c	/^const char *webdav_BaseDir()$/;"	f
webdav_DirProperties	safe/spider.c	/^rogxml *webdav_DirProperties(const char *szExternal, int depth)$/;"	f
webdav_DirProperties	spider.c	/^rogxml *webdav_DirProperties(const char *szExternal, int depth)$/;"	f
webdav_InternalFromExternal	safe/spider.c	/^const char *webdav_InternalFromExternal(const char *szExternal)$/;"	f
webdav_InternalFromExternal	spider.c	/^const char *webdav_InternalFromExternal(const char *szExternal)$/;"	f
webdav_Response	safe/spider.c	/^int webdav_Response(rogxml *xml, const char *szExternal)$/;"	f
webdav_Response	spider.c	/^int webdav_Response(rogxml *xml, const char *szExternal)$/;"	f
whereAndInfoDelete	safe/sqlite3.c	/^static void whereAndInfoDelete(sqlite3 *db, WhereAndInfo *p){$/;"	f	file:
whereClauseClear	safe/sqlite3.c	/^static void whereClauseClear(WhereClause *pWC){$/;"	f	file:
whereClauseInit	safe/sqlite3.c	/^static void whereClauseInit($/;"	f	file:
whereClauseInsert	safe/sqlite3.c	/^static int whereClauseInsert(WhereClause *pWC, Expr *p, u8 wtFlags){$/;"	f	file:
whereEqualScanEst	safe/sqlite3.c	/^static int whereEqualScanEst($/;"	f	file:
whereForeignKeys	safe/sqlite3.c	/^static char *whereForeignKeys(Parse *pParse, Table *pTab){$/;"	f	file:
whereInScanEst	safe/sqlite3.c	/^static int whereInScanEst($/;"	f	file:
whereInfoFree	safe/sqlite3.c	/^static void whereInfoFree(sqlite3 *db, WhereInfo *pWInfo){$/;"	f	file:
whereKeyStats	safe/sqlite3.c	/^static int whereKeyStats($/;"	f	file:
whereOrInfoDelete	safe/sqlite3.c	/^static void whereOrInfoDelete(sqlite3 *db, WhereOrInfo *p){$/;"	f	file:
whereOrName	safe/sqlite3.c	/^static char *whereOrName(sqlite3 *db, char *zWhere, char *zConstant){$/;"	f	file:
whereRangeScanEst	safe/sqlite3.c	/^static int whereRangeScanEst($/;"	f	file:
whereSplit	safe/sqlite3.c	/^static void whereSplit(WhereClause *pWC, Expr *pExpr, int op){$/;"	f	file:
whereTempTriggers	safe/sqlite3.c	/^static char *whereTempTriggers(Parse *pParse, Table *pTab){$/;"	f	file:
win32IoerrRetry	safe/sqlite3.c	/^static int win32IoerrRetry = SQLITE_WIN32_IOERR_RETRY;$/;"	v	file:
win32IoerrRetryDelay	safe/sqlite3.c	/^static int win32IoerrRetryDelay = SQLITE_WIN32_IOERR_RETRY_DELAY;$/;"	v	file:
winAccess	safe/sqlite3.c	/^static int winAccess($/;"	f	file:
winCheckReservedLock	safe/sqlite3.c	/^static int winCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
winClose	safe/sqlite3.c	/^static int winClose(sqlite3_file *id){$/;"	f	file:
winCurrentTime	safe/sqlite3.c	/^static int winCurrentTime(sqlite3_vfs *pVfs, double *prNow){$/;"	f	file:
winCurrentTimeInt64	safe/sqlite3.c	/^static int winCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *piNow){$/;"	f	file:
winDelete	safe/sqlite3.c	/^static int winDelete($/;"	f	file:
winDeviceCharacteristics	safe/sqlite3.c	/^static int winDeviceCharacteristics(sqlite3_file *id){$/;"	f	file:
winDlClose	safe/sqlite3.c	/^static void winDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f	file:
winDlClose	safe/sqlite3.c	36316;"	d	file:
winDlError	safe/sqlite3.c	/^static void winDlError(sqlite3_vfs *pVfs, int nBuf, char *zBufOut){$/;"	f	file:
winDlError	safe/sqlite3.c	36314;"	d	file:
winDlOpen	safe/sqlite3.c	/^static void *winDlOpen(sqlite3_vfs *pVfs, const char *zFilename){$/;"	f	file:
winDlOpen	safe/sqlite3.c	36313;"	d	file:
winDlSym	safe/sqlite3.c	/^static void (*winDlSym(sqlite3_vfs *pVfs, void *pHandle, const char *zSymbol))(void){$/;"	f	file:
winDlSym	safe/sqlite3.c	36315;"	d	file:
winFile	safe/sqlite3.c	/^struct winFile {$/;"	s	file:
winFile	safe/sqlite3.c	/^typedef struct winFile winFile;$/;"	t	file:
winFileControl	safe/sqlite3.c	/^static int winFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
winFileSize	safe/sqlite3.c	/^static int winFileSize(sqlite3_file *id, sqlite3_int64 *pSize){$/;"	f	file:
winFullPathname	safe/sqlite3.c	/^static int winFullPathname($/;"	f	file:
winGetLastError	safe/sqlite3.c	/^static int winGetLastError(sqlite3_vfs *pVfs, int nBuf, char *zBuf){$/;"	f	file:
winGetSystemCall	safe/sqlite3.c	/^static sqlite3_syscall_ptr winGetSystemCall($/;"	f	file:
winIoMethod	safe/sqlite3.c	/^static const sqlite3_io_methods winIoMethod = {$/;"	v	file:
winIsDir	safe/sqlite3.c	/^static int winIsDir(const void *zConverted){$/;"	f	file:
winIsVerbatimPathname	safe/sqlite3.c	/^static BOOL winIsVerbatimPathname($/;"	f	file:
winLock	safe/sqlite3.c	/^static int winLock(sqlite3_file *id, int locktype){$/;"	f	file:
winLockFile	safe/sqlite3.c	/^static BOOL winLockFile($/;"	f	file:
winLogError	safe/sqlite3.c	33637;"	d	file:
winLogErrorAtLine	safe/sqlite3.c	/^static int winLogErrorAtLine($/;"	f	file:
winMemAssertMagic	safe/sqlite3.c	32405;"	d	file:
winMemAssertMagic	safe/sqlite3.c	32407;"	d	file:
winMemData	safe/sqlite3.c	/^struct winMemData {$/;"	s	file:
winMemData	safe/sqlite3.c	/^typedef struct winMemData winMemData;$/;"	t	file:
winMemFree	safe/sqlite3.c	/^static void winMemFree(void *pPrior){$/;"	f	file:
winMemGetHeap	safe/sqlite3.c	32410;"	d	file:
winMemInit	safe/sqlite3.c	/^static int winMemInit(void *pAppData){$/;"	f	file:
winMemMalloc	safe/sqlite3.c	/^static void *winMemMalloc(int nBytes){$/;"	f	file:
winMemRealloc	safe/sqlite3.c	/^static void *winMemRealloc(void *pPrior, int nBytes){$/;"	f	file:
winMemRoundup	safe/sqlite3.c	/^static int winMemRoundup(int n){$/;"	f	file:
winMemShutdown	safe/sqlite3.c	/^static void winMemShutdown(void *pAppData){$/;"	f	file:
winMemSize	safe/sqlite3.c	/^static int winMemSize(void *p){$/;"	f	file:
winModeBit	safe/sqlite3.c	/^static void winModeBit(winFile *pFile, unsigned char mask, int *pArg){$/;"	f	file:
winMutexAlloc	safe/sqlite3.c	/^static sqlite3_mutex *winMutexAlloc(int iType){$/;"	f	file:
winMutexEnd	safe/sqlite3.c	/^static int winMutexEnd(void){ $/;"	f	file:
winMutexEnter	safe/sqlite3.c	/^static void winMutexEnter(sqlite3_mutex *p){$/;"	f	file:
winMutexFree	safe/sqlite3.c	/^static void winMutexFree(sqlite3_mutex *p){$/;"	f	file:
winMutexHeld	safe/sqlite3.c	/^static int winMutexHeld(sqlite3_mutex *p){$/;"	f	file:
winMutexInit	safe/sqlite3.c	/^static int winMutexInit(void){ $/;"	f	file:
winMutexLeave	safe/sqlite3.c	/^static void winMutexLeave(sqlite3_mutex *p){$/;"	f	file:
winMutexNotheld	safe/sqlite3.c	/^static int winMutexNotheld(sqlite3_mutex *p){$/;"	f	file:
winMutexNotheld2	safe/sqlite3.c	/^static int winMutexNotheld2(sqlite3_mutex *p, DWORD tid){$/;"	f	file:
winMutexTry	safe/sqlite3.c	/^static int winMutexTry(sqlite3_mutex *p){$/;"	f	file:
winMutex_isInit	safe/sqlite3.c	/^static int winMutex_isInit = 0;$/;"	v	file:
winMutex_lock	safe/sqlite3.c	/^static long winMutex_lock = 0;$/;"	v	file:
winMutex_staticMutexes	safe/sqlite3.c	/^static sqlite3_mutex winMutex_staticMutexes[6] = {$/;"	v	file:
winNextSystemCall	safe/sqlite3.c	/^static const char *winNextSystemCall(sqlite3_vfs *p, const char *zName){$/;"	f	file:
winOpen	safe/sqlite3.c	/^static int winOpen($/;"	f	file:
winOpenSharedMemory	safe/sqlite3.c	/^static int winOpenSharedMemory(winFile *pDbFd){$/;"	f	file:
winRandomness	safe/sqlite3.c	/^static int winRandomness(sqlite3_vfs *pVfs, int nBuf, char *zBuf){$/;"	f	file:
winRead	safe/sqlite3.c	/^static int winRead($/;"	f	file:
winSectorSize	safe/sqlite3.c	/^static int winSectorSize(sqlite3_file *id){$/;"	f	file:
winSetSystemCall	safe/sqlite3.c	/^static int winSetSystemCall($/;"	f	file:
winShm	safe/sqlite3.c	/^struct winShm {$/;"	s	file:
winShm	safe/sqlite3.c	/^typedef struct winShm winShm;           \/* A connection to shared-memory *\/$/;"	t	file:
winShmBarrier	safe/sqlite3.c	/^static void winShmBarrier($/;"	f	file:
winShmBarrier	safe/sqlite3.c	35510;"	d	file:
winShmEnterMutex	safe/sqlite3.c	/^static void winShmEnterMutex(void){$/;"	f	file:
winShmLeaveMutex	safe/sqlite3.c	/^static void winShmLeaveMutex(void){$/;"	f	file:
winShmLock	safe/sqlite3.c	/^static int winShmLock($/;"	f	file:
winShmLock	safe/sqlite3.c	35509;"	d	file:
winShmMap	safe/sqlite3.c	/^static int winShmMap($/;"	f	file:
winShmMap	safe/sqlite3.c	35508;"	d	file:
winShmMutexHeld	safe/sqlite3.c	/^static int winShmMutexHeld(void) {$/;"	f	file:
winShmNode	safe/sqlite3.c	/^struct winShmNode {$/;"	s	file:
winShmNode	safe/sqlite3.c	/^typedef struct winShmNode winShmNode;   \/* A region of shared-memory *\/$/;"	t	file:
winShmNodeList	safe/sqlite3.c	/^static winShmNode *winShmNodeList = 0;$/;"	v	file:
winShmPurge	safe/sqlite3.c	/^static void winShmPurge(sqlite3_vfs *pVfs, int deleteFlag){$/;"	f	file:
winShmSystemLock	safe/sqlite3.c	/^static int winShmSystemLock($/;"	f	file:
winShmUnmap	safe/sqlite3.c	/^static int winShmUnmap($/;"	f	file:
winShmUnmap	safe/sqlite3.c	35511;"	d	file:
winSleep	safe/sqlite3.c	/^static int winSleep(sqlite3_vfs *pVfs, int microsec){$/;"	f	file:
winSync	safe/sqlite3.c	/^static int winSync(sqlite3_file *id, int flags){$/;"	f	file:
winSysInfo	safe/sqlite3.c	/^SYSTEM_INFO winSysInfo;$/;"	v
winTruncate	safe/sqlite3.c	/^static int winTruncate(sqlite3_file *id, sqlite3_int64 nByte){$/;"	f	file:
winUnlock	safe/sqlite3.c	/^static int winUnlock(sqlite3_file *id, int locktype){$/;"	f	file:
winUnlockFile	safe/sqlite3.c	/^static BOOL winUnlockFile($/;"	f	file:
winWrite	safe/sqlite3.c	/^static int winWrite($/;"	f	file:
win_mem_data	safe/sqlite3.c	/^static struct winMemData win_mem_data = {$/;"	v	file:
win_syscall	safe/sqlite3.c	/^static struct win_syscall {$/;"	s	file:
winceCreateLock	safe/sqlite3.c	/^static BOOL winceCreateLock(const char *zFilename, winFile *pFile){$/;"	f	file:
winceDestroyLock	safe/sqlite3.c	/^static void winceDestroyLock(winFile *pFile){$/;"	f	file:
winceLock	safe/sqlite3.c	/^typedef struct winceLock {$/;"	s	file:
winceLock	safe/sqlite3.c	/^} winceLock;$/;"	t	file:
winceLockFile	safe/sqlite3.c	/^static BOOL winceLockFile($/;"	f	file:
winceMutexAcquire	safe/sqlite3.c	/^static void winceMutexAcquire(HANDLE h){$/;"	f	file:
winceMutexRelease	safe/sqlite3.c	33760;"	d	file:
winceUnlockFile	safe/sqlite3.c	/^static BOOL winceUnlockFile($/;"	f	file:
wrFlag	safe/sqlite3.c	/^  u8 wrFlag;                \/* True if writable *\/$/;"	m	struct:BtCursor	file:
write32bits	safe/sqlite3.c	/^static int write32bits(sqlite3_file *fd, i64 offset, u32 val){$/;"	f	file:
writeCoord	safe/sqlite3.c	/^static int writeCoord(u8 *p, RtreeCoord *pCoord){$/;"	f	file:
writeInt16	safe/sqlite3.c	/^static int writeInt16(u8 *p, int i){$/;"	f	file:
writeInt64	safe/sqlite3.c	/^static int writeInt64(u8 *p, i64 i){$/;"	f	file:
writeJournalHdr	safe/sqlite3.c	/^static int writeJournalHdr(Pager *pPager){$/;"	f	file:
writeLock	safe/sqlite3.c	/^  u8 writeLock;              \/* True if in a write transaction *\/$/;"	m	struct:Wal	file:
writeMask	safe/sqlite3.c	/^  yDbMask writeMask;   \/* Start a write transaction on these databases *\/$/;"	m	struct:Parse	file:
writeMasterJournal	safe/sqlite3.c	/^static int writeMasterJournal(Pager *pPager, const char *zMaster){$/;"	f	file:
writeVdbeCnt	safe/sqlite3.c	/^  int writeVdbeCnt;             \/* Number of active VDBEs that are writing *\/$/;"	m	struct:sqlite3	file:
ws	mtwamp.h	/^		WS *ws;						\/\/ The websocket this WAMP lives on$/;"	m	union:WAMP::<anonymous>
wsFlags	safe/sqlite3.c	/^  u32 wsFlags;                   \/* WHERE_* flags that describe the strategy *\/$/;"	m	struct:WherePlan	file:
ws_AddChannel	safe/mtwebsocket.c	/^API void ws_AddChannel(WSL *cl, WS *c)$/;"	f
ws_ApplyMask	mtwebsocket.c	/^STATIC void ws_ApplyMask(long mask, int len, const void *data)$/;"	f
ws_ApplyMask	safe/mtwebsocket.c	/^STATIC void ws_ApplyMask(long mask, int len, const void *data)$/;"	f
ws_ByName	mtwebsocket.c	/^API WS *ws_ByName(const char *name)$/;"	f
ws_Close	mtwebsocket.c	/^STATIC void ws_Close(WS *ws, int code, const char *fmt, ...)$/;"	f
ws_CloseToBuffer	safe/mtwebsocket.c	/^STATIC void ws_CloseToBuffer(WS *channel, int code, const char *fmt, ...)$/;"	f
ws_Delete	mtwebsocket.c	/^API void ws_Delete(WS *ws)$/;"	f
ws_DeleteChannel	safe/mtwebsocket.c	/^API void ws_DeleteChannel(WS *c)$/;"	f
ws_EnableMask	mtwebsocket.c	/^API void ws_EnableMask(WS *ws, char state)$/;"	f
ws_EventLoop	safe/mtwebsocket.c	/^API int ws_EventLoop(WSL *cl)$/;"	f
ws_FindChannelByFd	safe/mtwebsocket.c	/^API WS *ws_FindChannelByFd(WSL *cl, int fd)$/;"	f
ws_HandleIncoming	mtwebsocket.c	/^STATIC int ws_HandleIncoming(CHAN *channel)$/;"	f
ws_HandleIncoming	safe/mtwebsocket.c	/^API int ws_HandleIncoming(WS *channel)$/;"	f
ws_Info	mtwebsocket.c	/^API void *ws_Info(WS *ws)$/;"	f
ws_MakeFragment	mtwebsocket.c	/^API const char *ws_MakeFragment(int fin, int opcode, long mask, int len, const char *data, int *plen)$/;"	f
ws_MakeFragment	safe/mtwebsocket.c	/^API const char *ws_MakeFragment(int fin, int opcode, long mask, int len, const char *data, int *plen)$/;"	f
ws_Name	mtwebsocket.c	/^API const char *ws_Name(WS *ws)$/;"	f
ws_NewChannel	safe/mtwebsocket.c	/^API WS *ws_NewChannel(WSL *cl, int fd, BIO *io, int flags)$/;"	f
ws_NewChannelList	safe/mtwebsocket.c	/^API WSL * ws_NewChannelList()$/;"	f
ws_NewOnChannel	mtwebsocket.c	/^API WS *ws_NewOnChannel(CHAN *channel)$/;"	f
ws_OnChannelClosed	mtwebsocket.c	/^STATIC int ws_OnChannelClosed(CHAN *channel)$/;"	f
ws_OnChannelDeleted	mtwebsocket.c	/^STATIC void ws_OnChannelDeleted(CHAN *channel)$/;"	f
ws_OnDelete	mtwebsocket.c	/^API WSCB_DeleteCallback ws_OnDelete(WS *ws, WSCB_DeleteCallback cb)$/;"	f
ws_Ping	mtwebsocket.c	/^API void ws_Ping(WS *ws, int len, const char *data)$/;"	f
ws_Pong	mtwebsocket.c	/^API void ws_Pong(WS *ws, int len, const char *data)$/;"	f
ws_PushMessage	mtwebsocket.c	/^API void ws_PushMessage(WS *ws, int immediate, int opcode, int len, const char *data)$/;"	f
ws_PushMessage	safe/mtwebsocket.c	/^API void ws_PushMessage(HLIST *h, int immediate, int opcode, int len, const char *data)$/;"	f
ws_RemoveChannel	safe/mtwebsocket.c	/^API int ws_RemoveChannel(WS *c)$/;"	f
ws_SetBinaryHandler	mtwebsocket.c	/^API void ws_SetBinaryHandler(WS *ws, WSCB_Receiver fn)$/;"	f
ws_SetBinaryHandler	safe/mtwebsocket.c	/^API void ws_SetBinaryHandler(WSL *wsl, WSCB_Receiver fn)$/;"	f
ws_SetChannel	mtwebsocket.c	/^API void ws_SetChannel(WS *ws, CHAN *channel)$/;"	f
ws_SetInfo	mtwebsocket.c	/^API WS *ws_SetInfo(WS *ws, void *info)$/;"	f
ws_SetUtf8Handler	mtwebsocket.c	/^API void ws_SetUtf8Handler(WS *ws, WSCB_Receiver fn)$/;"	f
ws_SetUtf8Handler	safe/mtwebsocket.c	/^API void ws_SetUtf8Handler(WSL *wsl, WSCB_Receiver fn)$/;"	f
ws_Write	mtwebsocket.c	/^API int ws_Write(WS *ws, int len, const char *data)$/;"	f
ws_Write	safe/mtwebsocket.c	/^API int ws_Write(WS *channel, int len, const char *data)$/;"	f
ws_WriteHeap	mtwebsocket.c	/^API int ws_WriteHeap(WS *ws, int len, const char *data)$/;"	f
ws_WriteHeap	safe/mtwebsocket.c	/^API int ws_WriteHeap(WS *channel, int len, const char *data)$/;"	f
wsdAutoext	safe/sqlite3.c	93001;"	d	file:
wsdAutoext	safe/sqlite3.c	93004;"	d	file:
wsdAutoextInit	safe/sqlite3.c	92999;"	d	file:
wsdAutoextInit	safe/sqlite3.c	93003;"	d	file:
wsdHooks	safe/sqlite3.c	15175;"	d	file:
wsdHooks	safe/sqlite3.c	15178;"	d	file:
wsdHooksInit	safe/sqlite3.c	15173;"	d	file:
wsdHooksInit	safe/sqlite3.c	15177;"	d	file:
wsdPrng	safe/sqlite3.c	20509;"	d	file:
wsdPrng	safe/sqlite3.c	20511;"	d	file:
wsdStat	safe/sqlite3.c	13422;"	d	file:
wsdStat	safe/sqlite3.c	13425;"	d	file:
wsdStatInit	safe/sqlite3.c	13421;"	d	file:
wsdStatInit	safe/sqlite3.c	13424;"	d	file:
wtFlags	safe/sqlite3.c	/^  u8 wtFlags;             \/* TERM_xxx bit flags.  See below *\/$/;"	m	struct:WhereTerm	file:
x	safe/sqlite3.c	/^  } x;$/;"	m	struct:Expr	file:
xAccess	safe/sqlite3.c	/^  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);$/;"	m	struct:sqlite3_vfs	file:
xAccess	safe/sqlite3.h	/^  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);$/;"	m	struct:sqlite3_vfs
xAdvance	safe/sqlite3.c	/^    int (*xAdvance)(BtCursor *, int *);$/;"	m	union:VdbeOp::<anonymous>	file:
xAuth	safe/sqlite3.c	/^  int (*xAuth)(void*,int,const char*,const char*,const char*,const char*);$/;"	m	struct:sqlite3	file:
xBacktrace	safe/sqlite3.c	/^  void (*xBacktrace)(int, int, void **);$/;"	m	struct:	file:
xBegin	safe/sqlite3.c	/^  int (*xBegin)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xBegin	safe/sqlite3.h	/^  int (*xBegin)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xBenignBegin	safe/sqlite3.c	/^  void (*xBenignBegin)(void);$/;"	m	struct:BenignMallocHooks	file:
xBenignEnd	safe/sqlite3.c	/^  void (*xBenignEnd)(void);$/;"	m	struct:BenignMallocHooks	file:
xBestIndex	safe/sqlite3.c	/^  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);$/;"	m	struct:sqlite3_module	file:
xBestIndex	safe/sqlite3.h	/^  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);$/;"	m	struct:sqlite3_module
xBinaryFromApi	safe/spider.133.c	/^const char *xBinaryFromApi(const char *szApi)$/;"	f
xBinaryFromApi	safe/spider.135.c	/^const char *xBinaryFromApi(const char *szApi)$/;"	f
xBinaryFromApi	safe/spider.200.c	/^const char *xBinaryFromApi(const char *szApi)$/;"	f
xBinaryFromApi	safe/spider.203.c	/^const char *xBinaryFromApi(const char *szApi)$/;"	f
xBinaryFromApi	safe/spider.204.c	/^const char *xBinaryFromApi(const char *szApi)$/;"	f
xBusyHandler	safe/sqlite3.c	/^  int (*xBusyHandler)(void*); \/* Function to call when busy *\/$/;"	m	struct:Pager	file:
xCachesize	safe/sqlite3.c	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods	file:
xCachesize	safe/sqlite3.c	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods2	file:
xCachesize	safe/sqlite3.h	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods
xCachesize	safe/sqlite3.h	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods2
xCheckReservedLock	safe/sqlite3.c	/^  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);$/;"	m	struct:sqlite3_io_methods	file:
xCheckReservedLock	safe/sqlite3.h	/^  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);$/;"	m	struct:sqlite3_io_methods
xClose	safe/sqlite3.c	/^  int (*xClose)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xClose	safe/sqlite3.c	/^  int (*xClose)(sqlite3_tokenizer_cursor *pCursor);$/;"	m	struct:sqlite3_tokenizer_module	file:
xClose	safe/sqlite3.c	/^  int (*xClose)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:
xClose	safe/sqlite3.h	/^  int (*xClose)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xClose	safe/sqlite3.h	/^  int (*xClose)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module
xCmp	safe/sqlite3.c	/^  int (*xCmp)(void*,int, const void*, int, const void*);$/;"	m	struct:CollSeq	file:
xCodec	safe/sqlite3.c	/^  void *(*xCodec)(void*,void*,Pgno,int); \/* Routine for en\/decoding data *\/$/;"	m	struct:Pager	file:
xCodecFree	safe/sqlite3.c	/^  void (*xCodecFree)(void*);             \/* Destructor for the codec *\/$/;"	m	struct:Pager	file:
xCodecSizeChng	safe/sqlite3.c	/^  void (*xCodecSizeChng)(void*,int,int); \/* Notify of page size changes *\/$/;"	m	struct:Pager	file:
xCollNeeded	safe/sqlite3.c	/^  void(*xCollNeeded)(void*,sqlite3*,int eTextRep,const char*);$/;"	m	struct:sqlite3	file:
xCollNeeded16	safe/sqlite3.c	/^  void(*xCollNeeded16)(void*,sqlite3*,int eTextRep,const void*);$/;"	m	struct:sqlite3	file:
xColumn	safe/sqlite3.c	/^  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);$/;"	m	struct:sqlite3_module	file:
xColumn	safe/sqlite3.h	/^  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);$/;"	m	struct:sqlite3_module
xCommit	safe/sqlite3.c	/^  int (*xCommit)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xCommit	safe/sqlite3.h	/^  int (*xCommit)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xCommitCallback	safe/sqlite3.c	/^  int (*xCommitCallback)(void*);    \/* Invoked at every commit. *\/$/;"	m	struct:sqlite3	file:
xConnect	safe/sqlite3.c	/^  int (*xConnect)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	file:
xConnect	safe/sqlite3.h	/^  int (*xConnect)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module
xCreate	safe/sqlite3.c	/^  int (*xCreate)($/;"	m	struct:sqlite3_tokenizer_module	file:
xCreate	safe/sqlite3.c	/^  int (*xCreate)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	file:
xCreate	safe/sqlite3.c	/^  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods	file:
xCreate	safe/sqlite3.c	/^  sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods2	file:
xCreate	safe/sqlite3.h	/^  int (*xCreate)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module
xCreate	safe/sqlite3.h	/^  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods
xCreate	safe/sqlite3.h	/^  sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods2
xCurrentTime	safe/sqlite3.c	/^  int (*xCurrentTime)(sqlite3_vfs*, double*);$/;"	m	struct:sqlite3_vfs	file:
xCurrentTime	safe/sqlite3.h	/^  int (*xCurrentTime)(sqlite3_vfs*, double*);$/;"	m	struct:sqlite3_vfs
xCurrentTimeInt64	safe/sqlite3.c	/^  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);$/;"	m	struct:sqlite3_vfs	file:
xCurrentTimeInt64	safe/sqlite3.h	/^  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);$/;"	m	struct:sqlite3_vfs
xDel	safe/sqlite3.c	/^  void (*xDel)(void *);  \/* If not null, call this function to delete Mem.z *\/$/;"	m	struct:Mem	file:
xDel	safe/sqlite3.c	/^  void (*xDel)(void*);  \/* Destructor for pUser *\/$/;"	m	struct:CollSeq	file:
xDelUser	safe/sqlite3.c	/^  void (*xDelUser)(void *);       \/* Called by SQLite to clean up pUser *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
xDelUser	safe/sqlite3.h	/^  void (*xDelUser)(void *);       \/* Called by SQLite to clean up pUser *\/$/;"	m	struct:sqlite3_rtree_geometry
xDelete	safe/sqlite3.c	/^    void (*xDelete)(void *);      \/* Destructor for the aux data *\/$/;"	m	struct:VdbeFunc::AuxData	file:
xDelete	safe/sqlite3.c	/^  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);$/;"	m	struct:sqlite3_vfs	file:
xDelete	safe/sqlite3.h	/^  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);$/;"	m	struct:sqlite3_vfs
xDestroy	safe/sqlite3.c	/^  int (*xDestroy)(sqlite3_tokenizer *pTokenizer);$/;"	m	struct:sqlite3_tokenizer_module	file:
xDestroy	safe/sqlite3.c	/^  int (*xDestroy)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xDestroy	safe/sqlite3.c	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	file:
xDestroy	safe/sqlite3.c	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xDestroy	safe/sqlite3.c	/^  void (*xDestroy)(void *);            \/* Module destructor function *\/$/;"	m	struct:Module	file:
xDestroy	safe/sqlite3.c	/^  void (*xDestroy)(void *);$/;"	m	struct:FuncDestructor	file:
xDestroy	safe/sqlite3.h	/^  int (*xDestroy)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xDestroy	safe/sqlite3.h	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods
xDestroy	safe/sqlite3.h	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2
xDeviceCharacteristics	safe/sqlite3.c	/^  int (*xDeviceCharacteristics)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xDeviceCharacteristics	safe/sqlite3.h	/^  int (*xDeviceCharacteristics)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xDisconnect	safe/sqlite3.c	/^  int (*xDisconnect)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xDisconnect	safe/sqlite3.h	/^  int (*xDisconnect)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xDlClose	safe/sqlite3.c	/^  void (*xDlClose)(sqlite3_vfs*, void*);$/;"	m	struct:sqlite3_vfs	file:
xDlClose	safe/sqlite3.h	/^  void (*xDlClose)(sqlite3_vfs*, void*);$/;"	m	struct:sqlite3_vfs
xDlError	safe/sqlite3.c	/^  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);$/;"	m	struct:sqlite3_vfs	file:
xDlError	safe/sqlite3.h	/^  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);$/;"	m	struct:sqlite3_vfs
xDlOpen	safe/sqlite3.c	/^  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);$/;"	m	struct:sqlite3_vfs	file:
xDlOpen	safe/sqlite3.h	/^  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);$/;"	m	struct:sqlite3_vfs
xEof	safe/sqlite3.c	/^  int (*xEof)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:
xEof	safe/sqlite3.h	/^  int (*xEof)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module
xExprCallback	safe/sqlite3.c	/^  int (*xExprCallback)(Walker*, Expr*);     \/* Callback for expressions *\/$/;"	m	struct:Walker	file:
xFetch	safe/sqlite3.c	/^  sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods2	file:
xFetch	safe/sqlite3.c	/^  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods	file:
xFetch	safe/sqlite3.h	/^  sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods2
xFetch	safe/sqlite3.h	/^  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods
xFileControl	safe/sqlite3.c	/^  int (*xFileControl)(sqlite3_file*, int op, void *pArg);$/;"	m	struct:sqlite3_io_methods	file:
xFileControl	safe/sqlite3.h	/^  int (*xFileControl)(sqlite3_file*, int op, void *pArg);$/;"	m	struct:sqlite3_io_methods
xFileSize	safe/sqlite3.c	/^  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);$/;"	m	struct:sqlite3_io_methods	file:
xFileSize	safe/sqlite3.h	/^  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);$/;"	m	struct:sqlite3_io_methods
xFilter	safe/sqlite3.c	/^  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,$/;"	m	struct:sqlite3_module	file:
xFilter	safe/sqlite3.h	/^  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,$/;"	m	struct:sqlite3_module
xFinalize	safe/sqlite3.c	/^  void (*xFinalize)(sqlite3_context*);                \/* Aggregate finalizer *\/$/;"	m	struct:FuncDef	file:
xFindFunction	safe/sqlite3.c	/^  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,$/;"	m	struct:sqlite3_module	file:
xFindFunction	safe/sqlite3.h	/^  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,$/;"	m	struct:sqlite3_module
xFree	safe/sqlite3.c	/^  void (*xFree)(void*);          \/* Free a prior allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:
xFree	safe/sqlite3.c	/^static void xFree(void *p){$/;"	f	file:
xFree	safe/sqlite3.h	/^  void (*xFree)(void*);          \/* Free a prior allocation *\/$/;"	m	struct:sqlite3_mem_methods
xFreeSchema	safe/sqlite3.c	/^  void (*xFreeSchema)(void*);  \/* Destructor for BtShared.pSchema *\/$/;"	m	struct:BtShared	file:
xFullPathname	safe/sqlite3.c	/^  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);$/;"	m	struct:sqlite3_vfs	file:
xFullPathname	safe/sqlite3.h	/^  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);$/;"	m	struct:sqlite3_vfs
xFunc	safe/sqlite3.c	/^  int (*xFunc)(void *,int);  \/* The busy callback *\/$/;"	m	struct:BusyHandler	file:
xFunc	safe/sqlite3.c	/^  void (*xFunc)(sqlite3_context*,int,sqlite3_value**); \/* Regular function *\/$/;"	m	struct:FuncDef	file:
xGeom	safe/sqlite3.c	/^  int (*xGeom)(sqlite3_rtree_geometry *, int, RtreeDValue*, int *);$/;"	m	struct:RtreeMatchArg	file:
xGeom	safe/sqlite3.c	/^  int (*xGeom)(sqlite3_rtree_geometry*, int, RtreeDValue*, int*);$/;"	m	struct:RtreeConstraint	file:
xGeom	safe/sqlite3.c	/^  int (*xGeom)(sqlite3_rtree_geometry*, int, RtreeDValue*, int*);$/;"	m	struct:RtreeGeomCallback	file:
xGetLastError	safe/sqlite3.c	/^  int (*xGetLastError)(sqlite3_vfs*, int, char *);$/;"	m	struct:sqlite3_vfs	file:
xGetLastError	safe/sqlite3.h	/^  int (*xGetLastError)(sqlite3_vfs*, int, char *);$/;"	m	struct:sqlite3_vfs
xGetSystemCall	safe/sqlite3.c	/^  sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	file:
xGetSystemCall	safe/sqlite3.h	/^  sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs
xInit	safe/sqlite3.c	/^  int (*xInit)(void*);           \/* Initialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	file:
xInit	safe/sqlite3.c	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods	file:
xInit	safe/sqlite3.c	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xInit	safe/sqlite3.h	/^  int (*xInit)(void*);           \/* Initialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods
xInit	safe/sqlite3.h	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods
xInit	safe/sqlite3.h	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods2
xLanguageid	safe/sqlite3.c	/^  int (*xLanguageid)(sqlite3_tokenizer_cursor *pCsr, int iLangid);$/;"	m	struct:sqlite3_tokenizer_module	file:
xLock	safe/sqlite3.c	/^  int (*xLock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	file:
xLock	safe/sqlite3.h	/^  int (*xLock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods
xLog	safe/sqlite3.c	/^  void (*xLog)(void*,int,const char*); \/* Function for logging *\/$/;"	m	struct:Sqlite3Config	file:
xMalloc	safe/sqlite3.c	/^  void *(*xMalloc)(int);         \/* Memory allocation function *\/$/;"	m	struct:sqlite3_mem_methods	file:
xMalloc	safe/sqlite3.h	/^  void *(*xMalloc)(int);         \/* Memory allocation function *\/$/;"	m	struct:sqlite3_mem_methods
xMutexAlloc	safe/sqlite3.c	/^  sqlite3_mutex *(*xMutexAlloc)(int);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexAlloc	safe/sqlite3.h	/^  sqlite3_mutex *(*xMutexAlloc)(int);$/;"	m	struct:sqlite3_mutex_methods
xMutexEnd	safe/sqlite3.c	/^  int (*xMutexEnd)(void);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexEnd	safe/sqlite3.h	/^  int (*xMutexEnd)(void);$/;"	m	struct:sqlite3_mutex_methods
xMutexEnter	safe/sqlite3.c	/^  void (*xMutexEnter)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexEnter	safe/sqlite3.h	/^  void (*xMutexEnter)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexFree	safe/sqlite3.c	/^  void (*xMutexFree)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexFree	safe/sqlite3.h	/^  void (*xMutexFree)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexHeld	safe/sqlite3.c	/^  int (*xMutexHeld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexHeld	safe/sqlite3.h	/^  int (*xMutexHeld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexInit	safe/sqlite3.c	/^  int (*xMutexInit)(void);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexInit	safe/sqlite3.h	/^  int (*xMutexInit)(void);$/;"	m	struct:sqlite3_mutex_methods
xMutexLeave	safe/sqlite3.c	/^  void (*xMutexLeave)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexLeave	safe/sqlite3.h	/^  void (*xMutexLeave)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexNotheld	safe/sqlite3.c	/^  int (*xMutexNotheld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexNotheld	safe/sqlite3.h	/^  int (*xMutexNotheld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexTry	safe/sqlite3.c	/^  int (*xMutexTry)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexTry	safe/sqlite3.h	/^  int (*xMutexTry)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xNext	safe/sqlite3.c	/^  int (*xNext)($/;"	m	struct:sqlite3_tokenizer_module	file:
xNext	safe/sqlite3.c	/^  int (*xNext)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:
xNext	safe/sqlite3.h	/^  int (*xNext)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module
xNextSystemCall	safe/sqlite3.c	/^  const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	file:
xNextSystemCall	safe/sqlite3.h	/^  const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs
xOpen	safe/sqlite3.c	/^  int (*xOpen)($/;"	m	struct:sqlite3_tokenizer_module	file:
xOpen	safe/sqlite3.c	/^  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,$/;"	m	struct:sqlite3_vfs	file:
xOpen	safe/sqlite3.c	/^  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);$/;"	m	struct:sqlite3_module	file:
xOpen	safe/sqlite3.h	/^  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,$/;"	m	struct:sqlite3_vfs
xOpen	safe/sqlite3.h	/^  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);$/;"	m	struct:sqlite3_module
xPagecount	safe/sqlite3.c	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	file:
xPagecount	safe/sqlite3.c	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xPagecount	safe/sqlite3.h	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods
xPagecount	safe/sqlite3.h	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2
xProfile	safe/sqlite3.c	/^  void (*xProfile)(void*,const char*,u64);  \/* Profiling function *\/$/;"	m	struct:sqlite3	file:
xProgress	safe/sqlite3.c	/^  int (*xProgress)(void *);     \/* The progress callback *\/$/;"	m	struct:sqlite3	file:
xRandomness	safe/sqlite3.c	/^  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);$/;"	m	struct:sqlite3_vfs	file:
xRandomness	safe/sqlite3.h	/^  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);$/;"	m	struct:sqlite3_vfs
xRead	safe/sqlite3.c	/^  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	file:
xRead	safe/sqlite3.h	/^  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods
xRealloc	safe/sqlite3.c	/^  void *(*xRealloc)(void*,int);  \/* Resize an allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:
xRealloc	safe/sqlite3.h	/^  void *(*xRealloc)(void*,int);  \/* Resize an allocation *\/$/;"	m	struct:sqlite3_mem_methods
xReiniter	safe/sqlite3.c	/^  void (*xReiniter)(DbPage*); \/* Call this routine when reloading pages *\/$/;"	m	struct:Pager	file:
xRekey	safe/sqlite3.c	/^  void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*, $/;"	m	struct:sqlite3_pcache_methods2	file:
xRekey	safe/sqlite3.c	/^  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);$/;"	m	struct:sqlite3_pcache_methods	file:
xRekey	safe/sqlite3.h	/^  void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*, $/;"	m	struct:sqlite3_pcache_methods2
xRekey	safe/sqlite3.h	/^  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);$/;"	m	struct:sqlite3_pcache_methods
xRelease	safe/sqlite3.c	/^  int (*xRelease)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:
xRelease	safe/sqlite3.h	/^  int (*xRelease)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module
xRename	safe/sqlite3.c	/^  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);$/;"	m	struct:sqlite3_module	file:
xRename	safe/sqlite3.h	/^  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);$/;"	m	struct:sqlite3_module
xRollback	safe/sqlite3.c	/^  int (*xRollback)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xRollback	safe/sqlite3.h	/^  int (*xRollback)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xRollbackCallback	safe/sqlite3.c	/^  void (*xRollbackCallback)(void*); \/* Invoked at every commit. *\/$/;"	m	struct:sqlite3	file:
xRollbackTo	safe/sqlite3.c	/^  int (*xRollbackTo)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:
xRollbackTo	safe/sqlite3.h	/^  int (*xRollbackTo)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module
xRoundup	safe/sqlite3.c	/^  int (*xRoundup)(int);          \/* Round up request size to allocation size *\/$/;"	m	struct:sqlite3_mem_methods	file:
xRoundup	safe/sqlite3.h	/^  int (*xRoundup)(int);          \/* Round up request size to allocation size *\/$/;"	m	struct:sqlite3_mem_methods
xRowid	safe/sqlite3.c	/^  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);$/;"	m	struct:sqlite3_module	file:
xRowid	safe/sqlite3.h	/^  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);$/;"	m	struct:sqlite3_module
xSavepoint	safe/sqlite3.c	/^  int (*xSavepoint)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:
xSavepoint	safe/sqlite3.h	/^  int (*xSavepoint)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module
xSectorSize	safe/sqlite3.c	/^  int (*xSectorSize)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xSectorSize	safe/sqlite3.h	/^  int (*xSectorSize)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xSelectCallback	safe/sqlite3.c	/^  int (*xSelectCallback)(Walker*,Select*);  \/* Callback for SELECTs *\/$/;"	m	struct:Walker	file:
xSetSystemCall	safe/sqlite3.c	/^  int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr);$/;"	m	struct:sqlite3_vfs	file:
xSetSystemCall	safe/sqlite3.h	/^  int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr);$/;"	m	struct:sqlite3_vfs
xShmBarrier	safe/sqlite3.c	/^  void (*xShmBarrier)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xShmBarrier	safe/sqlite3.h	/^  void (*xShmBarrier)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xShmLock	safe/sqlite3.c	/^  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);$/;"	m	struct:sqlite3_io_methods	file:
xShmLock	safe/sqlite3.h	/^  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);$/;"	m	struct:sqlite3_io_methods
xShmMap	safe/sqlite3.c	/^  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);$/;"	m	struct:sqlite3_io_methods	file:
xShmMap	safe/sqlite3.h	/^  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);$/;"	m	struct:sqlite3_io_methods
xShmUnmap	safe/sqlite3.c	/^  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);$/;"	m	struct:sqlite3_io_methods	file:
xShmUnmap	safe/sqlite3.h	/^  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);$/;"	m	struct:sqlite3_io_methods
xShrink	safe/sqlite3.c	/^  void (*xShrink)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xShrink	safe/sqlite3.h	/^  void (*xShrink)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2
xShutdown	safe/sqlite3.c	/^  void (*xShutdown)(void*);      \/* Deinitialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	file:
xShutdown	safe/sqlite3.c	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods	file:
xShutdown	safe/sqlite3.c	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xShutdown	safe/sqlite3.h	/^  void (*xShutdown)(void*);      \/* Deinitialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods
xShutdown	safe/sqlite3.h	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods
xShutdown	safe/sqlite3.h	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods2
xSize	safe/sqlite3.c	/^  int (*xSize)(void*);           \/* Return the size of an allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:
xSize	safe/sqlite3.h	/^  int (*xSize)(void*);           \/* Return the size of an allocation *\/$/;"	m	struct:sqlite3_mem_methods
xSleep	safe/sqlite3.c	/^  int (*xSleep)(sqlite3_vfs*, int microseconds);$/;"	m	struct:sqlite3_vfs	file:
xSleep	safe/sqlite3.h	/^  int (*xSleep)(sqlite3_vfs*, int microseconds);$/;"	m	struct:sqlite3_vfs
xStep	safe/sqlite3.c	/^  void (*xStep)(sqlite3_context*,int,sqlite3_value**); \/* Aggregate step *\/$/;"	m	struct:FuncDef	file:
xStress	safe/sqlite3.c	/^  int (*xStress)(void*,PgHdr*);       \/* Call to try make a page clean *\/$/;"	m	struct:PCache	file:
xSync	safe/sqlite3.c	/^  int (*xSync)(sqlite3_file*, int flags);$/;"	m	struct:sqlite3_io_methods	file:
xSync	safe/sqlite3.c	/^  int (*xSync)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xSync	safe/sqlite3.h	/^  int (*xSync)(sqlite3_file*, int flags);$/;"	m	struct:sqlite3_io_methods
xSync	safe/sqlite3.h	/^  int (*xSync)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xTrace	safe/sqlite3.c	/^  void (*xTrace)(void*,const char*);        \/* Trace function *\/$/;"	m	struct:sqlite3	file:
xTruncate	safe/sqlite3.c	/^  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);$/;"	m	struct:sqlite3_io_methods	file:
xTruncate	safe/sqlite3.c	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods	file:
xTruncate	safe/sqlite3.c	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods2	file:
xTruncate	safe/sqlite3.h	/^  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);$/;"	m	struct:sqlite3_io_methods
xTruncate	safe/sqlite3.h	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods
xTruncate	safe/sqlite3.h	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods2
xUnlock	safe/sqlite3.c	/^  int (*xUnlock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	file:
xUnlock	safe/sqlite3.h	/^  int (*xUnlock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods
xUnlockNotify	safe/sqlite3.c	/^  void (*xUnlockNotify)(void **, int);  \/* Unlock notify callback *\/$/;"	m	struct:sqlite3	file:
xUnpin	safe/sqlite3.c	/^  void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard);$/;"	m	struct:sqlite3_pcache_methods2	file:
xUnpin	safe/sqlite3.c	/^  void (*xUnpin)(sqlite3_pcache*, void*, int discard);$/;"	m	struct:sqlite3_pcache_methods	file:
xUnpin	safe/sqlite3.h	/^  void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard);$/;"	m	struct:sqlite3_pcache_methods2
xUnpin	safe/sqlite3.h	/^  void (*xUnpin)(sqlite3_pcache*, void*, int discard);$/;"	m	struct:sqlite3_pcache_methods
xUpdate	safe/sqlite3.c	/^  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);$/;"	m	struct:sqlite3_module	file:
xUpdate	safe/sqlite3.h	/^  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);$/;"	m	struct:sqlite3_module
xUpdateCallback	safe/sqlite3.c	/^  void (*xUpdateCallback)(void*,int, const char*,const char*,sqlite_int64);$/;"	m	struct:sqlite3	file:
xWalCallback	safe/sqlite3.c	/^  int (*xWalCallback)(void *, sqlite3 *, const char *, int);$/;"	m	struct:sqlite3	file:
xWrite	safe/sqlite3.c	/^  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	file:
xWrite	safe/sqlite3.h	/^  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods
xctx_New	safe/spider.200.c	/^static SSL_CTX *xctx_New(const char *szConfigDir, const char *szPassword)$/;"	f	file:
xferCompatibleCollation	safe/sqlite3.c	/^static int xferCompatibleCollation(const char *z1, const char *z2){$/;"	f	file:
xferCompatibleIndex	safe/sqlite3.c	/^static int xferCompatibleIndex(Index *pDest, Index *pSrc){$/;"	f	file:
xferOptimization	safe/sqlite3.c	/^static int xferOptimization($/;"	f	file:
xthreadsafe	safe/sqlite3.c	/^  int (*xthreadsafe)(void);$/;"	m	struct:sqlite3_api_routines	file:
xyzzymsc_DisplayMsgLogLine	safe/spider.203.c	/^void xyzzymsc_DisplayMsgLogLine(BIO *io, const char *dir, int bDeep, const char *szFilter, int day, int month, int year)$/;"	f
yColCache	safe/sqlite3.c	/^  struct yColCache {$/;"	s	struct:Parse	file:
yDbMask	safe/sqlite3.c	/^  typedef sqlite3_uint64 yDbMask;$/;"	t	file:
yDbMask	safe/sqlite3.c	/^  typedef unsigned int yDbMask;$/;"	t	file:
ynVar	safe/sqlite3.c	/^typedef i16 ynVar;$/;"	t	file:
ynVar	safe/sqlite3.c	/^typedef int ynVar;$/;"	t	file:
yy0	safe/sqlite3.c	/^  sqlite3ParserTOKENTYPE yy0;$/;"	m	union:	file:
yy122	safe/sqlite3.c	/^  Expr* yy122;$/;"	m	union:	file:
yy159	safe/sqlite3.c	/^  Select* yy159;$/;"	m	union:	file:
yy180	safe/sqlite3.c	/^  IdList* yy180;$/;"	m	union:	file:
yy207	safe/sqlite3.c	/^  struct {int value; int mask;} yy207;$/;"	m	union:	file:
yy258	safe/sqlite3.c	/^  u8 yy258;$/;"	m	union:	file:
yy318	safe/sqlite3.c	/^  struct LikeOp yy318;$/;"	m	union:	file:
yy327	safe/sqlite3.c	/^  TriggerStep* yy327;$/;"	m	union:	file:
yy342	safe/sqlite3.c	/^  ExprSpan yy342;$/;"	m	union:	file:
yy347	safe/sqlite3.c	/^  SrcList* yy347;$/;"	m	union:	file:
yy392	safe/sqlite3.c	/^  int yy392;$/;"	m	union:	file:
yy410	safe/sqlite3.c	/^  struct TrigEvent yy410;$/;"	m	union:	file:
yy442	safe/sqlite3.c	/^  ExprList* yy442;$/;"	m	union:	file:
yy487	safe/sqlite3.c	/^  struct ValueList yy487;$/;"	m	union:	file:
yy64	safe/sqlite3.c	/^  struct LimitVal yy64;$/;"	m	union:	file:
yyFallback	safe/sqlite3.c	/^static const YYCODETYPE yyFallback[] = {$/;"	v	file:
yyGrowStack	safe/sqlite3.c	/^static void yyGrowStack(yyParser *p){$/;"	f	file:
yyParser	safe/sqlite3.c	/^struct yyParser {$/;"	s	file:
yyParser	safe/sqlite3.c	/^typedef struct yyParser yyParser;$/;"	t	file:
yyRuleInfo	safe/sqlite3.c	/^} yyRuleInfo[] = {$/;"	v	file:
yyRuleName	safe/sqlite3.c	/^static const char *const yyRuleName[] = {$/;"	v	file:
yyStackEntry	safe/sqlite3.c	/^struct yyStackEntry {$/;"	s	file:
yyStackEntry	safe/sqlite3.c	/^typedef struct yyStackEntry yyStackEntry;$/;"	t	file:
yyStackOverflow	safe/sqlite3.c	/^static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){$/;"	f	file:
yyTokenName	safe/sqlite3.c	/^static const char *const yyTokenName[] = { $/;"	v	file:
yyTraceFILE	safe/sqlite3.c	/^static FILE *yyTraceFILE = 0;$/;"	v	file:
yyTracePrompt	safe/sqlite3.c	/^static char *yyTracePrompt = 0;$/;"	v	file:
yy_accept	safe/sqlite3.c	/^static void yy_accept($/;"	f	file:
yy_action	safe/sqlite3.c	/^static const YYACTIONTYPE yy_action[] = {$/;"	v	file:
yy_default	safe/sqlite3.c	/^static const YYACTIONTYPE yy_default[] = {$/;"	v	file:
yy_destructor	safe/sqlite3.c	/^static void yy_destructor($/;"	f	file:
yy_find_reduce_action	safe/sqlite3.c	/^static int yy_find_reduce_action($/;"	f	file:
yy_find_shift_action	safe/sqlite3.c	/^static int yy_find_shift_action($/;"	f	file:
yy_lookahead	safe/sqlite3.c	/^static const YYCODETYPE yy_lookahead[] = {$/;"	v	file:
yy_parse_failed	safe/sqlite3.c	/^static void yy_parse_failed($/;"	f	file:
yy_pop_parser_stack	safe/sqlite3.c	/^static int yy_pop_parser_stack(yyParser *pParser){$/;"	f	file:
yy_reduce	safe/sqlite3.c	/^static void yy_reduce($/;"	f	file:
yy_reduce_ofst	safe/sqlite3.c	/^static const short yy_reduce_ofst[] = {$/;"	v	file:
yy_shift	safe/sqlite3.c	/^static void yy_shift($/;"	f	file:
yy_shift_ofst	safe/sqlite3.c	/^static const short yy_shift_ofst[] = {$/;"	v	file:
yy_syntax_error	safe/sqlite3.c	/^static void yy_syntax_error($/;"	f	file:
yyerrcnt	safe/sqlite3.c	/^  int yyerrcnt;                 \/* Shifts left before out of the error *\/$/;"	m	struct:yyParser	file:
yyidx	safe/sqlite3.c	/^  int yyidx;                    \/* Index of top element in stack *\/$/;"	m	struct:yyParser	file:
yyidxMax	safe/sqlite3.c	/^  int yyidxMax;                 \/* Maximum value of yyidx *\/$/;"	m	struct:yyParser	file:
yyinit	safe/sqlite3.c	/^  int yyinit;$/;"	m	union:	file:
yystack	safe/sqlite3.c	/^  yyStackEntry *yystack;        \/* The parser's stack *\/$/;"	m	struct:yyParser	file:
yystksz	safe/sqlite3.c	/^  int yystksz;                  \/* Current side of the stack *\/$/;"	m	struct:yyParser	file:
yytestcase	safe/sqlite3.c	108961;"	d	file:
yytestcase	safe/sqlite3.c	109177;"	d	file:
yyzerominor	safe/sqlite3.c	/^static const YYMINORTYPE yyzerominor = { 0 };$/;"	v	file:
z	safe/sqlite3.c	/^    char *z;               \/* Pointer to data for string (char array) types *\/$/;"	m	union:VdbeOp::<anonymous>	file:
z	safe/sqlite3.c	/^    char *z;        \/* Value if eType is SQLITE_TEXT or SQLITE_BLOB *\/$/;"	m	union:IndexSample::<anonymous>	file:
z	safe/sqlite3.c	/^  char *z;                        \/* Pointer to buffer containing string *\/$/;"	m	struct:StrBuffer	file:
z	safe/sqlite3.c	/^  char *z;                        \/* Text of the token *\/$/;"	m	struct:Fts3PhraseToken	file:
z	safe/sqlite3.c	/^  char *z;            \/* String or BLOB value *\/$/;"	m	struct:Mem	file:
z	safe/sqlite3.c	/^  const char *z;     \/* Text of the token.  Not NULL-terminated! *\/$/;"	m	struct:Token	file:
zAlias	safe/sqlite3.c	/^    char *zAlias;     \/* The "B" part of a "A AS B" phrase.  zName is the "A" *\/$/;"	m	struct:SrcList::SrcList_item	file:
zAuthContext	safe/sqlite3.c	/^  const char *zAuthContext;   \/* Put saved Parse.zAuthContext here *\/$/;"	m	struct:AuthContext	file:
zAuthContext	safe/sqlite3.c	/^  const char *zAuthContext; \/* The 6th parameter to db->xAuth callbacks *\/$/;"	m	struct:Parse	file:
zBase	safe/sqlite3.c	/^  char *zBase;         \/* A base allocation.  Not from malloc. *\/$/;"	m	struct:StrAccum	file:
zBase	safe/sqlite3.c	/^  char zBase[100];   \/* Initial space *\/$/;"	m	struct:Explain	file:
zBuf	safe/sqlite3.c	/^  char *zBuf;                     \/* Space to buffer journal writes *\/$/;"	m	struct:JournalFile	file:
zBuffer	safe/sqlite3.c	/^  char *zBuffer;$/;"	m	struct:IcuCursor	file:
zCanonicalName	safe/sqlite3.c	/^  char *zCanonicalName;         \/* Canonical filename *\/$/;"	m	struct:vxworksFileId	file:
zChunk	safe/sqlite3.c	/^  u8 zChunk[JOURNAL_CHUNKSIZE];   \/* Content of this chunk *\/$/;"	m	struct:FileChunk	file:
zCol	safe/sqlite3.c	/^    char *zCol;        \/* Name of column in zTo.  If 0 use PRIMARY KEY *\/$/;"	m	struct:FKey::sColMap	file:
zColAff	safe/sqlite3.c	/^  char *zColAff;       \/* String defining the affinity of each column *\/$/;"	m	struct:Table	file:
zColAff	safe/sqlite3.c	/^  char *zColAff;   \/* String defining the affinity of each column *\/$/;"	m	struct:Index	file:
zColl	safe/sqlite3.c	/^  char *zColl;     \/* Collating sequence.  If NULL, use the default *\/$/;"	m	struct:Column	file:
zComment	safe/sqlite3.c	/^  char *zComment;          \/* Comment to improve readability *\/$/;"	m	struct:VdbeOp	file:
zContentTbl	safe/sqlite3.c	/^  char *zContentTbl;              \/* content=xxx option, or NULL *\/$/;"	m	struct:Fts3Table	file:
zData	safe/sqlite3.c	/^  u8 *zData;$/;"	m	struct:RtreeNode	file:
zDatabase	safe/sqlite3.c	/^    char *zDatabase;  \/* Name of database holding this table *\/$/;"	m	struct:SrcList::SrcList_item	file:
zDatabase	safe/sqlite3.c	/^  const char *zDatabase;$/;"	m	struct:analysisInfo	file:
zDb	safe/sqlite3.c	/^  char *zDb;                  \/* Name of database containing r-tree table *\/$/;"	m	struct:Rtree	file:
zDb	safe/sqlite3.c	/^  const char *zDb;                \/* logical database name *\/$/;"	m	struct:Fts3Table	file:
zDb	safe/sqlite3.c	/^  const char *zDb;    \/* Make sure all objects are contained in this database *\/$/;"	m	struct:DbFixer	file:
zDeleteOnClose	safe/sqlite3.c	/^  LPWSTR zDeleteOnClose;  \/* Name of file to delete when closing *\/$/;"	m	struct:winFile	file:
zDflt	safe/sqlite3.c	/^  char *zDflt;     \/* Original text of the default value *\/$/;"	m	struct:Column	file:
zEnd	safe/sqlite3.c	/^  const char *zEnd;     \/* One character past the end of input text *\/$/;"	m	struct:ExprSpan	file:
zErrMsg	safe/sqlite3.c	/^  char *zErrMsg;                  \/* Error message from sqlite3_mprintf() *\/$/;"	m	struct:sqlite3_vtab	file:
zErrMsg	safe/sqlite3.c	/^  char *zErrMsg;                \/* Most recent error message (UTF-8 encoded) *\/$/;"	m	struct:sqlite3	file:
zErrMsg	safe/sqlite3.c	/^  char *zErrMsg;          \/* Error message written here *\/$/;"	m	struct:Vdbe	file:
zErrMsg	safe/sqlite3.c	/^  char *zErrMsg;       \/* An error message *\/$/;"	m	struct:Parse	file:
zErrMsg	safe/sqlite3.c	/^  char *zErrMsg;     \/* Error message text, if an error occurs *\/$/;"	m	struct:TabResult	file:
zErrMsg	safe/sqlite3.h	/^  char *zErrMsg;                  \/* Error message from sqlite3_mprintf() *\/$/;"	m	struct:sqlite3_vtab
zErrMsg16	safe/sqlite3.c	/^  char *zErrMsg16;              \/* Most recent error message (UTF-16 encoded) *\/$/;"	m	struct:sqlite3	file:
zExplain	safe/sqlite3.c	/^  char *zExplain;         \/* Explanation of data structures *\/$/;"	m	struct:Vdbe	file:
zFilename	safe/sqlite3.c	/^  char *zFilename;            \/* Name of the database file *\/$/;"	m	struct:Pager	file:
zFilename	safe/sqlite3.c	/^  char *zFilename;           \/* Name of the file *\/$/;"	m	struct:winShmNode	file:
zFilename	safe/sqlite3.c	/^  char *zFilename;           \/* Name of the mmapped file *\/$/;"	m	struct:unixShmNode	file:
zFullPathCp	safe/sqlite3.c	/^  char *zFullPathCp;        \/* Full path name of this file *\/$/;"	m	struct:os2File	file:
zIndex	safe/sqlite3.c	/^    char *zIndex;     \/* Identifier from "INDEXED BY <zIndex>" clause *\/$/;"	m	struct:SrcList::SrcList_item	file:
zInput	safe/sqlite3.c	/^  const char *zInput;          \/* input we are tokenizing *\/$/;"	m	struct:porter_tokenizer_cursor	file:
zJournal	safe/sqlite3.c	/^  char *zJournal;             \/* Name of the journal file *\/$/;"	m	struct:Pager	file:
zJournal	safe/sqlite3.c	/^  const char *zJournal;           \/* Name of the journal file *\/$/;"	m	struct:JournalFile	file:
zLanguageid	safe/sqlite3.c	/^  char *zLanguageid;              \/* languageid=xxx option, or NULL *\/$/;"	m	struct:Fts3Table	file:
zLocale	safe/sqlite3.c	/^  char *zLocale;$/;"	m	struct:IcuTokenizer	file:
zMagicHeader	safe/sqlite3.c	/^static const char zMagicHeader[] = SQLITE_FILE_HEADER;$/;"	v	file:
zMalloc	safe/sqlite3.c	/^  char *zMalloc;                  \/* Malloc'd space (possibly) used for zTerm *\/$/;"	m	struct:SegmentNode	file:
zMalloc	safe/sqlite3.c	/^  char *zMalloc;                  \/* Malloc'd space (possibly) used for zTerm *\/$/;"	m	struct:SegmentWriter	file:
zMalloc	safe/sqlite3.c	/^  char *zMalloc;      \/* Dynamic buffer allocated by sqlite3_malloc() *\/$/;"	m	struct:Mem	file:
zMatchinfo	safe/sqlite3.c	/^  char *zMatchinfo;               \/* Matchinfo specification *\/$/;"	m	struct:Fts3Cursor	file:
zName	safe/sqlite3.c	/^    char *zName;           \/* Token associated with this expression *\/$/;"	m	struct:ExprList::ExprList_item	file:
zName	safe/sqlite3.c	/^    char *zName;      \/* Name of the identifier *\/$/;"	m	struct:IdList::IdList_item	file:
zName	safe/sqlite3.c	/^    char *zName;      \/* Name of the table *\/$/;"	m	struct:SrcList::SrcList_item	file:
zName	safe/sqlite3.c	/^  char *zName;                        \/* Savepoint name (nul-terminated) *\/$/;"	m	struct:Savepoint	file:
zName	safe/sqlite3.c	/^  char *zName;                \/* Name of r-tree table *\/ $/;"	m	struct:Rtree	file:
zName	safe/sqlite3.c	/^  char *zName;            \/* The name of the trigger                        *\/$/;"	m	struct:Trigger	file:
zName	safe/sqlite3.c	/^  char *zName;          \/* Name of the collating sequence, UTF-8 encoded *\/$/;"	m	struct:CollSeq	file:
zName	safe/sqlite3.c	/^  char *zName;         \/* Name of the table or view *\/$/;"	m	struct:Table	file:
zName	safe/sqlite3.c	/^  char *zName;         \/* Name of this database *\/$/;"	m	struct:Db	file:
zName	safe/sqlite3.c	/^  char *zName;         \/* SQL name of the function. *\/$/;"	m	struct:FuncDef	file:
zName	safe/sqlite3.c	/^  char *zName;     \/* Name of this column *\/$/;"	m	struct:Column	file:
zName	safe/sqlite3.c	/^  char *zName;     \/* Name of this index *\/$/;"	m	struct:Index	file:
zName	safe/sqlite3.c	/^  const char *zName;                   \/* Name passed to create_module() *\/$/;"	m	struct:Module	file:
zName	safe/sqlite3.c	/^  const char *zName;              \/* virtual table name *\/$/;"	m	struct:Fts3Table	file:
zName	safe/sqlite3.c	/^  const char *zName;            \/* Name of the sytem call *\/$/;"	m	struct:unix_syscall	file:
zName	safe/sqlite3.c	/^  const char *zName;            \/* Name of the sytem call *\/$/;"	m	struct:win_syscall	file:
zName	safe/sqlite3.c	/^  const char *zName;       \/* Name of this virtual file system *\/$/;"	m	struct:sqlite3_vfs	file:
zName	safe/sqlite3.c	/^  const char *zName;   \/* Name of the table *\/$/;"	m	struct:TableLock	file:
zName	safe/sqlite3.h	/^  const char *zName;       \/* Name of this virtual file system *\/$/;"	m	struct:sqlite3_vfs
zPath	safe/sqlite3.c	/^  const char *zPath;                  \/* Name of the file *\/$/;"	m	struct:unixFile	file:
zPath	safe/sqlite3.c	/^  const char *zPath;      \/* Full pathname of this file *\/$/;"	m	struct:winFile	file:
zPool	safe/sqlite3.c	/^  u8 *zPool;       \/* Memory available to be allocated *\/$/;"	m	struct:Mem5Global	file:
zReadExprlist	safe/sqlite3.c	/^  char *zReadExprlist;$/;"	m	struct:Fts3Table	file:
zSegmentsTbl	safe/sqlite3.c	/^  char *zSegmentsTbl;             \/* Name of %_segments table *\/$/;"	m	struct:Fts3Table	file:
zSpan	safe/sqlite3.c	/^    char *zSpan;           \/* Original text of the expression *\/$/;"	m	struct:ExprList::ExprList_item	file:
zSql	safe/sqlite3.c	/^  char *zSql;             \/* Text of the SQL statement that generated this *\/$/;"	m	struct:Vdbe	file:
zStart	safe/sqlite3.c	/^  const char *zStart;   \/* First character of input text *\/$/;"	m	struct:ExprSpan	file:
zStop	safe/sqlite3.c	/^  char *zStop;$/;"	m	struct:Fts3auxCursor	file:
zTail	safe/sqlite3.c	/^  const char *zTail;        \/* All SQL text past the last semicolon parsed *\/$/;"	m	struct:Parse	file:
zTerm	safe/sqlite3.c	/^  char *zTerm;                    \/* Pointer to current term *\/$/;"	m	struct:Fts3SegReader	file:
zTerm	safe/sqlite3.c	/^  char *zTerm;                    \/* Pointer to previous term buffer *\/$/;"	m	struct:SegmentNode	file:
zTerm	safe/sqlite3.c	/^  char *zTerm;                    \/* Pointer to previous term buffer *\/$/;"	m	struct:SegmentWriter	file:
zTerm	safe/sqlite3.c	/^  char *zTerm;                    \/* Pointer to term buffer *\/$/;"	m	struct:Fts3MultiSegReader	file:
zTerm	safe/sqlite3.c	/^  const char *zTerm;$/;"	m	struct:Fts3SegFilter	file:
zText	safe/sqlite3.c	/^  char *zText;         \/* The string collected so far *\/$/;"	m	struct:StrAccum	file:
zTitle	safe/sqlite3.c	/^  char zTitle[100];  \/* The title text *\/$/;"	m	struct:	file:
zTo	safe/sqlite3.c	/^  char *zTo;        \/* Name of table that the key points to (aka: Parent) *\/$/;"	m	struct:FKey	file:
zToken	safe/sqlite3.c	/^    char *zToken;          \/* Token value. Zero terminated and dequoted *\/$/;"	m	union:Expr::<anonymous>	file:
zToken	safe/sqlite3.c	/^  char *zToken;                   \/* storage for current token *\/$/;"	m	struct:unicode_cursor	file:
zToken	safe/sqlite3.c	/^  char *zToken;                \/* storage for current token *\/$/;"	m	struct:porter_tokenizer_cursor	file:
zType	safe/sqlite3.c	/^  char *zType;     \/* Data type for this column *\/$/;"	m	struct:Column	file:
zType	safe/sqlite3.c	/^  const char *zType;  \/* Type of the container - used for error messages *\/$/;"	m	struct:DbFixer	file:
zWal	safe/sqlite3.c	/^  char *zWal;                 \/* File name for write-ahead log *\/$/;"	m	struct:Pager	file:
zWalName	safe/sqlite3.c	/^  const char *zWalName;      \/* Name of WAL file *\/$/;"	m	struct:Wal	file:
zWriteExprlist	safe/sqlite3.c	/^  char *zWriteExprlist;$/;"	m	struct:Fts3Table	file:
zeroJournalHdr	safe/sqlite3.c	/^static int zeroJournalHdr(Pager *pPager, int doTruncate){$/;"	f	file:
zeroPage	safe/sqlite3.c	/^static void zeroPage(MemPage *pPage, int flags){$/;"	f	file:
zeroblobFunc	safe/sqlite3.c	/^static void zeroblobFunc($/;"	f	file:
zeroed	safe/sqlite3.c	/^  Bool zeroed;          \/* True if zeroed out and ready for reuse *\/$/;"	m	struct:VdbeCursor	file:
